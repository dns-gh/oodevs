/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 08-Sep-2005.
 */
#include "ScipioAutomateOrder.h"

/**************************************************************/
/*                                                            */
/*  Mission_Automate                                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate::ASN1C_Mission_Automate (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 140);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* mission_automate_alat_effectuer_recherche_et_sauvetage */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_effectuer_recherche_et_sauvetage");

         stat = asn1PE_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (ctxt_p, pvalue->u.mission_automate_alat_effectuer_recherche_et_sauvetage);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_extraire_personnel */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_extraire_personnel");

         stat = asn1PE_Mission_Automate_ALAT_ExtrairePersonnel (ctxt_p, pvalue->u.mission_automate_alat_extraire_personnel);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_detruire_neutraliser_dans_profondeur */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_detruire_neutraliser_dans_profondeur");

         stat = asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (ctxt_p, pvalue->u.mission_automate_alat_detruire_neutraliser_dans_profondeur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_detruire_neutraliser_dans_zone */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_detruire_neutraliser_dans_zone");

         stat = asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansZone (ctxt_p, pvalue->u.mission_automate_alat_detruire_neutraliser_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_donner_coup_arret */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_donner_coup_arret");

         stat = asn1PE_Mission_Automate_ALAT_DonnerCoupArret (ctxt_p, pvalue->u.mission_automate_alat_donner_coup_arret);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_attaquer_formation_aeromobile */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_attaquer_formation_aeromobile");

         stat = asn1PE_Mission_Automate_ALAT_AttaquerFormationAeromobile (ctxt_p, pvalue->u.mission_automate_alat_attaquer_formation_aeromobile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_recueillir_formation_aeromobile */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_recueillir_formation_aeromobile");

         stat = asn1PE_Mission_Automate_ALAT_RecueillirFormationAeromobile (ctxt_p, pvalue->u.mission_automate_alat_recueillir_formation_aeromobile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_heliporter */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_heliporter");

         stat = asn1PE_Mission_Automate_ALAT_Heliporter (ctxt_p, pvalue->u.mission_automate_alat_heliporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_jalonner */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_jalonner");

         stat = asn1PE_Mission_Automate_ALAT_Jalonner (ctxt_p, pvalue->u.mission_automate_alat_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_helitransporter */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_helitransporter");

         stat = asn1PE_Mission_Automate_ALAT_Helitransporter (ctxt_p, pvalue->u.mission_automate_alat_helitransporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_appuyer */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_appuyer");

         stat = asn1PE_Mission_Automate_ALAT_Appuyer (ctxt_p, pvalue->u.mission_automate_alat_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_couvrir */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_couvrir");

         stat = asn1PE_Mission_Automate_ALAT_Couvrir (ctxt_p, pvalue->u.mission_automate_alat_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_surveiller */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_surveiller");

         stat = asn1PE_Mission_Automate_ALAT_Surveiller (ctxt_p, pvalue->u.mission_automate_alat_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_reconnaitre */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_reconnaitre");

         stat = asn1PE_Mission_Automate_ALAT_Reconnaitre (ctxt_p, pvalue->u.mission_automate_alat_reconnaitre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_freiner */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_freiner");

         stat = asn1PE_Mission_Automate_ALAT_Freiner (ctxt_p, pvalue->u.mission_automate_alat_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_escorter */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_escorter");

         stat = asn1PE_Mission_Automate_ALAT_Escorter (ctxt_p, pvalue->u.mission_automate_alat_escorter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_attaquer */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_attaquer");

         stat = asn1PE_Mission_Automate_ALAT_Attaquer (ctxt_p, pvalue->u.mission_automate_alat_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_site */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_site");

         stat = asn1PE_Mission_Automate_ASA_DefendreSite (ctxt_p, pvalue->u.mission_automate_asa_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_zone */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_zone");

         stat = asn1PE_Mission_Automate_ASA_DefendreZone (ctxt_p, pvalue->u.mission_automate_asa_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_unites */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_unites");

         stat = asn1PE_Mission_Automate_ASA_DefendreUnites (ctxt_p, pvalue->u.mission_automate_asa_defendre_unites);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_surveiller */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_surveiller");

         stat = asn1PE_Mission_Automate_ASA_Surveiller (ctxt_p, pvalue->u.mission_automate_asa_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_itineraire */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_itineraire");

         stat = asn1PE_Mission_Automate_ASA_DefendreItineraire (ctxt_p, pvalue->u.mission_automate_asa_defendre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_mistral_defendre_zone */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_mistral_defendre_zone");

         stat = asn1PE_Mission_Automate_ASA_MISTRAL_DefendreZone (ctxt_p, pvalue->u.mission_automate_asa_mistral_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_mistral_defendre_site */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_mistral_defendre_site");

         stat = asn1PE_Mission_Automate_ASA_MISTRAL_DefendreSite (ctxt_p, pvalue->u.mission_automate_asa_mistral_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_mistral_surveiller */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_mistral_surveiller");

         stat = asn1PE_Mission_Automate_ASA_MISTRAL_Surveiller (ctxt_p, pvalue->u.mission_automate_asa_mistral_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_hawk_defendre_zone */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_hawk_defendre_zone");

         stat = asn1PE_Mission_Automate_ASA_HAWK_DefendreZone (ctxt_p, pvalue->u.mission_automate_asa_hawk_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_hawk_defendre_site */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_hawk_defendre_site");

         stat = asn1PE_Mission_Automate_ASA_HAWK_DefendreSite (ctxt_p, pvalue->u.mission_automate_asa_hawk_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_hawk_surveiller */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_hawk_surveiller");

         stat = asn1PE_Mission_Automate_ASA_HAWK_Surveiller (ctxt_p, pvalue->u.mission_automate_asa_hawk_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_ass_se_deployer */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_ass_se_deployer");

         stat = asn1PE_Mission_Automate_ASS_SeDeployer (ctxt_p, pvalue->u.mission_automate_ass_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_ass_reconnaitre_zones_deploiement */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_ass_reconnaitre_zones_deploiement");

         stat = asn1PE_Mission_Automate_ASS_ReconnaitreZonesDeploiement (ctxt_p, pvalue->u.mission_automate_ass_reconnaitre_zones_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_ass_acquerir_objectifs */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_ass_acquerir_objectifs");

         stat = asn1PE_Mission_Automate_ASS_AcquerirObjectifs (ctxt_p, pvalue->u.mission_automate_ass_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_appuyer */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_appuyer");

         stat = asn1PE_Mission_Automate_ABC_Appuyer (ctxt_p, pvalue->u.mission_automate_abc_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_attaquer */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_attaquer");

         stat = asn1PE_Mission_Automate_ABC_Attaquer (ctxt_p, pvalue->u.mission_automate_abc_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_contre_attaquer */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_contre_attaquer");

         stat = asn1PE_Mission_Automate_ABC_ContreAttaquer (ctxt_p, pvalue->u.mission_automate_abc_contre_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_controler */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_controler");

         stat = asn1PE_Mission_Automate_ABC_Controler (ctxt_p, pvalue->u.mission_automate_abc_controler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_couvrir */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_couvrir");

         stat = asn1PE_Mission_Automate_ABC_Couvrir (ctxt_p, pvalue->u.mission_automate_abc_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_donner_coup_arret */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_donner_coup_arret");

         stat = asn1PE_Mission_Automate_ABC_DonnerCoupArret (ctxt_p, pvalue->u.mission_automate_abc_donner_coup_arret);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_eclairer */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_eclairer");

         stat = asn1PE_Mission_Automate_ABC_Eclairer (ctxt_p, pvalue->u.mission_automate_abc_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_effectuer_raid */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_effectuer_raid");

         stat = asn1PE_Mission_Automate_ABC_EffectuerRaid (ctxt_p, pvalue->u.mission_automate_abc_effectuer_raid);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_interdire */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_interdire");

         stat = asn1PE_Mission_Automate_ABC_Interdire (ctxt_p, pvalue->u.mission_automate_abc_interdire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_jalonner */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_jalonner");

         stat = asn1PE_Mission_Automate_ABC_Jalonner (ctxt_p, pvalue->u.mission_automate_abc_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_prendre_preciser_contact */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_prendre_preciser_contact");

         stat = asn1PE_Mission_Automate_ABC_PrendrePreciserContact (ctxt_p, pvalue->u.mission_automate_abc_prendre_preciser_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_reconnaitre */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_reconnaitre");

         stat = asn1PE_Mission_Automate_ABC_Reconnaitre (ctxt_p, pvalue->u.mission_automate_abc_reconnaitre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_reconnaitre_point */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_reconnaitre_point");

         stat = asn1PE_Mission_Automate_ABC_ReconnaitrePoint (ctxt_p, pvalue->u.mission_automate_abc_reconnaitre_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_reduire */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_reduire");

         stat = asn1PE_Mission_Automate_ABC_Reduire (ctxt_p, pvalue->u.mission_automate_abc_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_relever_en_depassant */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_relever_en_depassant");

         stat = asn1PE_Mission_Automate_ABC_ReleverEnDepassant (ctxt_p, pvalue->u.mission_automate_abc_relever_en_depassant);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_semparer */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_semparer");

         stat = asn1PE_Mission_Automate_ABC_Semparer (ctxt_p, pvalue->u.mission_automate_abc_semparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_tenir */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_tenir");

         stat = asn1PE_Mission_Automate_ABC_Tenir (ctxt_p, pvalue->u.mission_automate_abc_tenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_soutenir */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_soutenir");

         stat = asn1PE_Mission_Automate_ABC_Soutenir (ctxt_p, pvalue->u.mission_automate_abc_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_surveiller */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_surveiller");

         stat = asn1PE_Mission_Automate_ABC_Surveiller (ctxt_p, pvalue->u.mission_automate_abc_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_flanc_garder */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_flanc_garder");

         stat = asn1PE_Mission_Automate_ABC_FlancGarder (ctxt_p, pvalue->u.mission_automate_abc_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_renseigner_sur */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_renseigner_sur");

         stat = asn1PE_Mission_Automate_ABC_RenseignerSur (ctxt_p, pvalue->u.mission_automate_abc_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_fixer */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_fixer");

         stat = asn1PE_Mission_Automate_ABC_Fixer (ctxt_p, pvalue->u.mission_automate_abc_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_freiner */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_freiner");

         stat = asn1PE_Mission_Automate_ABC_Freiner (ctxt_p, pvalue->u.mission_automate_abc_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_surveiller_itineraire */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_surveiller_itineraire");

         stat = asn1PE_Mission_Automate_ABC_SurveillerItineraire (ctxt_p, pvalue->u.mission_automate_abc_surveiller_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_renseigner_sur_un_axe */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_renseigner_sur_un_axe");

         stat = asn1PE_Mission_Automate_ABC_RenseignerSurUnAxe (ctxt_p, pvalue->u.mission_automate_abc_renseigner_sur_un_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_recueillir_unite */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_recueillir_unite");

         stat = asn1PE_Mission_Automate_ABC_RecueillirUnite (ctxt_p, pvalue->u.mission_automate_abc_recueillir_unite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_escorter_un_convoi */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_escorter_un_convoi");

         stat = asn1PE_Mission_Automate_ABC_EscorterUnConvoi (ctxt_p, pvalue->u.mission_automate_abc_escorter_un_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_armer_point_de_controle */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_armer_point_de_controle");

         stat = asn1PE_Mission_Automate_ABC_ArmerPointDeControle (ctxt_p, pvalue->u.mission_automate_abc_armer_point_de_controle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_organiser_accueil_colonne_refugies */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_organiser_accueil_colonne_refugies");

         stat = asn1PE_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (ctxt_p, pvalue->u.mission_automate_abc_organiser_accueil_colonne_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_proteger_pc */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_proteger_pc");

         stat = asn1PE_Mission_Automate_ABC_ProtegerPC (ctxt_p, pvalue->u.mission_automate_abc_proteger_pc);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_se_deployer */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_se_deployer");

         stat = asn1PE_Mission_Automate_GEN_SeDeployer (ctxt_p, pvalue->u.mission_automate_gen_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_faire_franchir */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_faire_franchir");

         stat = asn1PE_Mission_Automate_GEN_FaireFranchir (ctxt_p, pvalue->u.mission_automate_gen_faire_franchir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_systeme_obstacles */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_systeme_obstacles");

         stat = asn1PE_Mission_Automate_GEN_RealiserSystemeObstacles (ctxt_p, pvalue->u.mission_automate_gen_realiser_systeme_obstacles);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_franchir_de_vive_force */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_franchir_de_vive_force");

         stat = asn1PE_Mission_Automate_GEN_FranchirDeViveForce (ctxt_p, pvalue->u.mission_automate_gen_franchir_de_vive_force);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_retablir_itineraires */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_retablir_itineraires");

         stat = asn1PE_Mission_Automate_GEN_RetablirItineraires (ctxt_p, pvalue->u.mission_automate_gen_retablir_itineraires);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_amenager_aire_stationnement */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_amenager_aire_stationnement");

         stat = asn1PE_Mission_Automate_GEN_AmenagerAireStationnement (ctxt_p, pvalue->u.mission_automate_gen_amenager_aire_stationnement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_amenager_terrain_poser_sommaire */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_amenager_terrain_poser_sommaire");

         stat = asn1PE_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (ctxt_p, pvalue->u.mission_automate_gen_amenager_terrain_poser_sommaire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_zone_poser */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_zone_poser");

         stat = asn1PE_Mission_Automate_GEN_RealiserZonePoser (ctxt_p, pvalue->u.mission_automate_gen_realiser_zone_poser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_reconnaitre_zone_deploiement */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_reconnaitre_zone_deploiement");

         stat = asn1PE_Mission_Automate_GEN_ReconnaitreZoneDeploiement (ctxt_p, pvalue->u.mission_automate_gen_reconnaitre_zone_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_camp_prisonniers */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_camp_prisonniers");

         stat = asn1PE_Mission_Automate_GEN_RealiserCampPrisonniers (ctxt_p, pvalue->u.mission_automate_gen_realiser_camp_prisonniers);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_camp_refugies */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_camp_refugies");

         stat = asn1PE_Mission_Automate_GEN_RealiserCampRefugies (ctxt_p, pvalue->u.mission_automate_gen_realiser_camp_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial");

         stat = asn1PE_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (ctxt_p, pvalue->u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_travaux_sommaires_au_profit_population */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population");

         stat = asn1PE_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (ctxt_p, pvalue->u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_appuyer_debarquement_troupes */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_appuyer_debarquement_troupes");

         stat = asn1PE_Mission_Automate_GEN_AppuyerDebarquementTroupes (ctxt_p, pvalue->u.mission_automate_gen_appuyer_debarquement_troupes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_ouvrir_axes_progression */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_ouvrir_axes_progression");

         stat = asn1PE_Mission_Automate_GEN_OuvrirAxesProgression (ctxt_p, pvalue->u.mission_automate_gen_ouvrir_axes_progression);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_attaquer_souplesse */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_attaquer_souplesse");

         stat = asn1PE_Mission_Automate_INF_AttaquerSouplesse (ctxt_p, pvalue->u.mission_automate_inf_attaquer_souplesse);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_appuyer */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_appuyer");

         stat = asn1PE_Mission_Automate_INF_Appuyer (ctxt_p, pvalue->u.mission_automate_inf_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_controler */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_controler");

         stat = asn1PE_Mission_Automate_INF_Controler (ctxt_p, pvalue->u.mission_automate_inf_controler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_couvrir */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_couvrir");

         stat = asn1PE_Mission_Automate_INF_Couvrir (ctxt_p, pvalue->u.mission_automate_inf_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_donner_coup_arret */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_donner_coup_arret");

         stat = asn1PE_Mission_Automate_INF_DonnerCoupArret (ctxt_p, pvalue->u.mission_automate_inf_donner_coup_arret);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_eclairer */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_eclairer");

         stat = asn1PE_Mission_Automate_INF_Eclairer (ctxt_p, pvalue->u.mission_automate_inf_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_flanc_garder */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_flanc_garder");

         stat = asn1PE_Mission_Automate_INF_FlancGarder (ctxt_p, pvalue->u.mission_automate_inf_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_freiner */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_freiner");

         stat = asn1PE_Mission_Automate_INF_Freiner (ctxt_p, pvalue->u.mission_automate_inf_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_harceler */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_harceler");

         stat = asn1PE_Mission_Automate_INF_Harceler (ctxt_p, pvalue->u.mission_automate_inf_harceler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_interdire */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_interdire");

         stat = asn1PE_Mission_Automate_INF_Interdire (ctxt_p, pvalue->u.mission_automate_inf_interdire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_mener_defense_usure */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_mener_defense_usure");

         stat = asn1PE_Mission_Automate_INF_MenerDefenseUsure (ctxt_p, pvalue->u.mission_automate_inf_mener_defense_usure);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_prendre_preciser_maintenir_contact */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_prendre_preciser_maintenir_contact");

         stat = asn1PE_Mission_Automate_INF_PrendrePreciserMaintenirContact (ctxt_p, pvalue->u.mission_automate_inf_prendre_preciser_maintenir_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_reconnaissance_offensive */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_reconnaissance_offensive");

         stat = asn1PE_Mission_Automate_INF_ReconnaissanceOffensive (ctxt_p, pvalue->u.mission_automate_inf_reconnaissance_offensive);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_recueillir_unite */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_recueillir_unite");

         stat = asn1PE_Mission_Automate_INF_RecueillirUnite (ctxt_p, pvalue->u.mission_automate_inf_recueillir_unite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_reduire */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_reduire");

         stat = asn1PE_Mission_Automate_INF_Reduire (ctxt_p, pvalue->u.mission_automate_inf_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_relever */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_relever");

         stat = asn1PE_Mission_Automate_INF_Relever (ctxt_p, pvalue->u.mission_automate_inf_relever);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_rompre_contact */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_rompre_contact");

         stat = asn1PE_Mission_Automate_INF_RompreContact (ctxt_p, pvalue->u.mission_automate_inf_rompre_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_surveiller */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_surveiller");

         stat = asn1PE_Mission_Automate_INF_Surveiller (ctxt_p, pvalue->u.mission_automate_inf_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_semparer */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_semparer");

         stat = asn1PE_Mission_Automate_INF_Semparer (ctxt_p, pvalue->u.mission_automate_inf_semparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_fixer */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_fixer");

         stat = asn1PE_Mission_Automate_INF_Fixer (ctxt_p, pvalue->u.mission_automate_inf_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_attaquer_en_terrain_difficile */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_attaquer_en_terrain_difficile");

         stat = asn1PE_Mission_Automate_INF_AttaquerEnTerrainDifficile (ctxt_p, pvalue->u.mission_automate_inf_attaquer_en_terrain_difficile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_barrer_direction */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_barrer_direction");

         stat = asn1PE_Mission_Automate_INF_BarrerDirection (ctxt_p, pvalue->u.mission_automate_inf_barrer_direction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_defendre_ferme */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_defendre_ferme");

         stat = asn1PE_Mission_Automate_INF_DefendreFerme (ctxt_p, pvalue->u.mission_automate_inf_defendre_ferme);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_tenir */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_tenir");

         stat = asn1PE_Mission_Automate_INF_Tenir (ctxt_p, pvalue->u.mission_automate_inf_tenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_appuyer_un_freinage */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_appuyer_un_freinage");

         stat = asn1PE_Mission_Automate_INF_AppuyerUnFreinage (ctxt_p, pvalue->u.mission_automate_inf_appuyer_un_freinage);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_appuyer_une_attaque */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_appuyer_une_attaque");

         stat = asn1PE_Mission_Automate_INF_AppuyerUneAttaque (ctxt_p, pvalue->u.mission_automate_inf_appuyer_une_attaque);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_soutenir */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_soutenir");

         stat = asn1PE_Mission_Automate_INF_Soutenir (ctxt_p, pvalue->u.mission_automate_inf_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_se_deployer */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_se_deployer");

         stat = asn1PE_Mission_Automate_LOG_SeDeployer (ctxt_p, pvalue->u.mission_automate_log_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_appuyer_mouvement */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_appuyer_mouvement");

         stat = asn1PE_Mission_Automate_LOG_AppuyerMouvement (ctxt_p, pvalue->u.mission_automate_log_appuyer_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_reconnaitre_itineraire */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_reconnaitre_itineraire");

         stat = asn1PE_Mission_Automate_LOG_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_automate_log_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_transporter_formation_blindee */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_transporter_formation_blindee");

         stat = asn1PE_Mission_Automate_LOG_TransporterFormationBlindee (ctxt_p, pvalue->u.mission_automate_log_transporter_formation_blindee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_appuyer_mouvement_dans_zone */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_appuyer_mouvement_dans_zone");

         stat = asn1PE_Mission_Automate_LOG_AppuyerMouvementDansZone (ctxt_p, pvalue->u.mission_automate_log_appuyer_mouvement_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_mettre_en_oeuvre_zone_stationnement */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_mettre_en_oeuvre_zone_stationnement");

         stat = asn1PE_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement (ctxt_p, pvalue->u.mission_automate_log_mettre_en_oeuvre_zone_stationnement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_appuyer_franchissement_dans_zone */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_appuyer_franchissement_dans_zone");

         stat = asn1PE_Mission_Automate_LOG_AppuyerFranchissementDansZone (ctxt_p, pvalue->u.mission_automate_log_appuyer_franchissement_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_bloquer_zone */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_bloquer_zone");

         stat = asn1PE_Mission_Automate_LOG_BloquerZone (ctxt_p, pvalue->u.mission_automate_log_bloquer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_reconnaitre_zone_contaminee */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_reconnaitre_zone_contaminee");

         stat = asn1PE_Mission_Automate_LOG_ReconnaitreZoneContaminee (ctxt_p, pvalue->u.mission_automate_log_reconnaitre_zone_contaminee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_reconnaitre_zone_de_deploiement */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_reconnaitre_zone_de_deploiement");

         stat = asn1PE_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement (ctxt_p, pvalue->u.mission_automate_log_reconnaitre_zone_de_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_surveiller */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_surveiller");

         stat = asn1PE_Mission_Automate_LOG_Surveiller (ctxt_p, pvalue->u.mission_automate_log_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_armer_pias */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_armer_pias");

         stat = asn1PE_Mission_Automate_LOG_ArmerPIAs (ctxt_p, pvalue->u.mission_automate_log_armer_pias);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_test_move_to */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_test_move_to");

         stat = asn1PE_Mission_Automate_Test_MoveTo (ctxt_p, pvalue->u.mission_automate_test_move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_decrocher */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_decrocher");

         stat = asn1PE_Mission_Automate_Decrocher (ctxt_p, pvalue->u.mission_automate_decrocher);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_relever_sur_place */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_relever_sur_place");

         stat = asn1PE_Mission_Automate_ReleverSurPlace (ctxt_p, pvalue->u.mission_automate_relever_sur_place);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_faire_mouvement */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_faire_mouvement");

         stat = asn1PE_Mission_Automate_FaireMouvement (ctxt_p, pvalue->u.mission_automate_faire_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_faire_decontaminer */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_faire_decontaminer");

         stat = asn1PE_Mission_Automate_SeFaireDecontaminer (ctxt_p, pvalue->u.mission_automate_se_faire_decontaminer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_franchir */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_franchir");

         stat = asn1PE_Mission_Automate_Franchir (ctxt_p, pvalue->u.mission_automate_franchir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_stationner */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_stationner");

         stat = asn1PE_Mission_Automate_Stationner (ctxt_p, pvalue->u.mission_automate_stationner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_faire_transporter */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_faire_transporter");

         stat = asn1PE_Mission_Automate_SeFaireTransporter (ctxt_p, pvalue->u.mission_automate_se_faire_transporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_recompleter */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_recompleter");

         stat = asn1PE_Mission_Automate_SeRecompleter (ctxt_p, pvalue->u.mission_automate_se_recompleter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_rendre */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_rendre");

         stat = asn1PE_Mission_Automate_SeRendre (ctxt_p, pvalue->u.mission_automate_se_rendre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_faire_mouvement_vers_camp_refugies */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_faire_mouvement_vers_camp_refugies");

         stat = asn1PE_Mission_Automate_FaireMouvementVersCampRefugies (ctxt_p, pvalue->u.mission_automate_faire_mouvement_vers_camp_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_generique */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_generique");

         stat = asn1PE_Mission_Automate_Generique (ctxt_p, pvalue->u.mission_automate_generique);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_reconnaitre_un_axe */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_reconnaitre_un_axe");

         stat = asn1PE_Mission_Automate_NBC_ReconnaitreUnAxe (ctxt_p, pvalue->u.mission_automate_nbc_reconnaitre_un_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_reconnaitre_une_zone */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_reconnaitre_une_zone");

         stat = asn1PE_Mission_Automate_NBC_ReconnaitreUneZone (ctxt_p, pvalue->u.mission_automate_nbc_reconnaitre_une_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_armer_un_site_de_decontamination */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_armer_un_site_de_decontamination");

         stat = asn1PE_Mission_Automate_NBC_ArmerUnSiteDeDecontamination (ctxt_p, pvalue->u.mission_automate_nbc_armer_un_site_de_decontamination);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_decontaminer_une_zone */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_decontaminer_une_zone");

         stat = asn1PE_Mission_Automate_NBC_DecontaminerUneZone (ctxt_p, pvalue->u.mission_automate_nbc_decontaminer_une_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_reconnaitre_des_sites_rota */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_reconnaitre_des_sites_rota");

         stat = asn1PE_Mission_Automate_NBC_ReconnaitreDesSitesROTA (ctxt_p, pvalue->u.mission_automate_nbc_reconnaitre_des_sites_rota);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_rohum_renseigner_sur */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_rohum_renseigner_sur");

         stat = asn1PE_Mission_Automate_RENS_ROHUM_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_rohum_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_rohum_orienter_guider */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_rohum_orienter_guider");

         stat = asn1PE_Mission_Automate_RENS_ROHUM_OrienterGuider (ctxt_p, pvalue->u.mission_automate_rens_rohum_orienter_guider);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_rohum_sexfiltrer */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_rohum_sexfiltrer");

         stat = asn1PE_Mission_Automate_RENS_ROHUM_SExfiltrer (ctxt_p, pvalue->u.mission_automate_rens_rohum_sexfiltrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roim_cl289_renseigner_sur */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roim_cl289_renseigner_sur");

         stat = asn1PE_Mission_Automate_RENS_ROIM_CL289_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_roim_cl289_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roim_sdti_renseigner_sur */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roim_sdti_renseigner_sur");

         stat = asn1PE_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_roim_sdti_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roem_appuyer */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roem_appuyer");

         stat = asn1PE_Mission_Automate_RENS_ROEM_Appuyer (ctxt_p, pvalue->u.mission_automate_rens_roem_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roem_renseignersur */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roem_renseignersur");

         stat = asn1PE_Mission_Automate_RENS_ROEM_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_roem_renseignersur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_radint_renseignersur */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_radint_renseignersur");

         stat = asn1PE_Mission_Automate_RENS_RADINT_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_radint_renseignersur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_trans_commander */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_trans_commander");

         stat = asn1PE_Mission_Automate_TRANS_Commander (ctxt_p, pvalue->u.mission_automate_trans_commander);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_Mission_Automate: end\n");
   return (stat);
}

int ASN1C_Mission_Automate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Automate: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 140);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* mission_automate_alat_effectuer_recherche_et_sauvetage */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_effectuer_recherche_et_sauvetage");

         pvalue->u.mission_automate_alat_effectuer_recherche_et_sauvetage = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage);
         if (pvalue->u.mission_automate_alat_effectuer_recherche_et_sauvetage == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (ctxt_p, pvalue->u.mission_automate_alat_effectuer_recherche_et_sauvetage);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_extraire_personnel */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_extraire_personnel");

         pvalue->u.mission_automate_alat_extraire_personnel = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_ExtrairePersonnel);
         if (pvalue->u.mission_automate_alat_extraire_personnel == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_ExtrairePersonnel (ctxt_p, pvalue->u.mission_automate_alat_extraire_personnel);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_detruire_neutraliser_dans_profondeur */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_detruire_neutraliser_dans_profondeur");

         pvalue->u.mission_automate_alat_detruire_neutraliser_dans_profondeur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur);
         if (pvalue->u.mission_automate_alat_detruire_neutraliser_dans_profondeur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (ctxt_p, pvalue->u.mission_automate_alat_detruire_neutraliser_dans_profondeur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_detruire_neutraliser_dans_zone */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_detruire_neutraliser_dans_zone");

         pvalue->u.mission_automate_alat_detruire_neutraliser_dans_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansZone);
         if (pvalue->u.mission_automate_alat_detruire_neutraliser_dans_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansZone (ctxt_p, pvalue->u.mission_automate_alat_detruire_neutraliser_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_donner_coup_arret */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_donner_coup_arret");

         pvalue->u.mission_automate_alat_donner_coup_arret = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_DonnerCoupArret);
         if (pvalue->u.mission_automate_alat_donner_coup_arret == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_DonnerCoupArret (ctxt_p, pvalue->u.mission_automate_alat_donner_coup_arret);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_attaquer_formation_aeromobile */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_attaquer_formation_aeromobile");

         pvalue->u.mission_automate_alat_attaquer_formation_aeromobile = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_AttaquerFormationAeromobile);
         if (pvalue->u.mission_automate_alat_attaquer_formation_aeromobile == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_AttaquerFormationAeromobile (ctxt_p, pvalue->u.mission_automate_alat_attaquer_formation_aeromobile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_recueillir_formation_aeromobile */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_recueillir_formation_aeromobile");

         pvalue->u.mission_automate_alat_recueillir_formation_aeromobile = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_RecueillirFormationAeromobile);
         if (pvalue->u.mission_automate_alat_recueillir_formation_aeromobile == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_RecueillirFormationAeromobile (ctxt_p, pvalue->u.mission_automate_alat_recueillir_formation_aeromobile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_heliporter */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_heliporter");

         pvalue->u.mission_automate_alat_heliporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Heliporter);
         if (pvalue->u.mission_automate_alat_heliporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Heliporter (ctxt_p, pvalue->u.mission_automate_alat_heliporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_jalonner */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_jalonner");

         pvalue->u.mission_automate_alat_jalonner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Jalonner);
         if (pvalue->u.mission_automate_alat_jalonner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Jalonner (ctxt_p, pvalue->u.mission_automate_alat_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_helitransporter */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_helitransporter");

         pvalue->u.mission_automate_alat_helitransporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Helitransporter);
         if (pvalue->u.mission_automate_alat_helitransporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Helitransporter (ctxt_p, pvalue->u.mission_automate_alat_helitransporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_appuyer */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_appuyer");

         pvalue->u.mission_automate_alat_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Appuyer);
         if (pvalue->u.mission_automate_alat_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Appuyer (ctxt_p, pvalue->u.mission_automate_alat_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_couvrir */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_couvrir");

         pvalue->u.mission_automate_alat_couvrir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Couvrir);
         if (pvalue->u.mission_automate_alat_couvrir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Couvrir (ctxt_p, pvalue->u.mission_automate_alat_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_surveiller */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_surveiller");

         pvalue->u.mission_automate_alat_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Surveiller);
         if (pvalue->u.mission_automate_alat_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Surveiller (ctxt_p, pvalue->u.mission_automate_alat_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_reconnaitre */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_reconnaitre");

         pvalue->u.mission_automate_alat_reconnaitre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Reconnaitre);
         if (pvalue->u.mission_automate_alat_reconnaitre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Reconnaitre (ctxt_p, pvalue->u.mission_automate_alat_reconnaitre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_freiner */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_freiner");

         pvalue->u.mission_automate_alat_freiner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Freiner);
         if (pvalue->u.mission_automate_alat_freiner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Freiner (ctxt_p, pvalue->u.mission_automate_alat_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_escorter */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_escorter");

         pvalue->u.mission_automate_alat_escorter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Escorter);
         if (pvalue->u.mission_automate_alat_escorter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Escorter (ctxt_p, pvalue->u.mission_automate_alat_escorter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_alat_attaquer */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_alat_attaquer");

         pvalue->u.mission_automate_alat_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ALAT_Attaquer);
         if (pvalue->u.mission_automate_alat_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ALAT_Attaquer (ctxt_p, pvalue->u.mission_automate_alat_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_site */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_site");

         pvalue->u.mission_automate_asa_defendre_site = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_DefendreSite);
         if (pvalue->u.mission_automate_asa_defendre_site == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_DefendreSite (ctxt_p, pvalue->u.mission_automate_asa_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_zone */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_zone");

         pvalue->u.mission_automate_asa_defendre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_DefendreZone);
         if (pvalue->u.mission_automate_asa_defendre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_DefendreZone (ctxt_p, pvalue->u.mission_automate_asa_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_unites */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_unites");

         pvalue->u.mission_automate_asa_defendre_unites = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_DefendreUnites);
         if (pvalue->u.mission_automate_asa_defendre_unites == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_DefendreUnites (ctxt_p, pvalue->u.mission_automate_asa_defendre_unites);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_surveiller */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_surveiller");

         pvalue->u.mission_automate_asa_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_Surveiller);
         if (pvalue->u.mission_automate_asa_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_Surveiller (ctxt_p, pvalue->u.mission_automate_asa_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_defendre_itineraire */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_defendre_itineraire");

         pvalue->u.mission_automate_asa_defendre_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_DefendreItineraire);
         if (pvalue->u.mission_automate_asa_defendre_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_DefendreItineraire (ctxt_p, pvalue->u.mission_automate_asa_defendre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_mistral_defendre_zone */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_mistral_defendre_zone");

         pvalue->u.mission_automate_asa_mistral_defendre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_MISTRAL_DefendreZone);
         if (pvalue->u.mission_automate_asa_mistral_defendre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_MISTRAL_DefendreZone (ctxt_p, pvalue->u.mission_automate_asa_mistral_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_mistral_defendre_site */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_mistral_defendre_site");

         pvalue->u.mission_automate_asa_mistral_defendre_site = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_MISTRAL_DefendreSite);
         if (pvalue->u.mission_automate_asa_mistral_defendre_site == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_MISTRAL_DefendreSite (ctxt_p, pvalue->u.mission_automate_asa_mistral_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_mistral_surveiller */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_mistral_surveiller");

         pvalue->u.mission_automate_asa_mistral_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_MISTRAL_Surveiller);
         if (pvalue->u.mission_automate_asa_mistral_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_MISTRAL_Surveiller (ctxt_p, pvalue->u.mission_automate_asa_mistral_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_hawk_defendre_zone */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_hawk_defendre_zone");

         pvalue->u.mission_automate_asa_hawk_defendre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_HAWK_DefendreZone);
         if (pvalue->u.mission_automate_asa_hawk_defendre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_HAWK_DefendreZone (ctxt_p, pvalue->u.mission_automate_asa_hawk_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_hawk_defendre_site */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_hawk_defendre_site");

         pvalue->u.mission_automate_asa_hawk_defendre_site = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_HAWK_DefendreSite);
         if (pvalue->u.mission_automate_asa_hawk_defendre_site == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_HAWK_DefendreSite (ctxt_p, pvalue->u.mission_automate_asa_hawk_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_asa_hawk_surveiller */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_asa_hawk_surveiller");

         pvalue->u.mission_automate_asa_hawk_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASA_HAWK_Surveiller);
         if (pvalue->u.mission_automate_asa_hawk_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASA_HAWK_Surveiller (ctxt_p, pvalue->u.mission_automate_asa_hawk_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_ass_se_deployer */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_ass_se_deployer");

         pvalue->u.mission_automate_ass_se_deployer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASS_SeDeployer);
         if (pvalue->u.mission_automate_ass_se_deployer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASS_SeDeployer (ctxt_p, pvalue->u.mission_automate_ass_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_ass_reconnaitre_zones_deploiement */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_ass_reconnaitre_zones_deploiement");

         pvalue->u.mission_automate_ass_reconnaitre_zones_deploiement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASS_ReconnaitreZonesDeploiement);
         if (pvalue->u.mission_automate_ass_reconnaitre_zones_deploiement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASS_ReconnaitreZonesDeploiement (ctxt_p, pvalue->u.mission_automate_ass_reconnaitre_zones_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_ass_acquerir_objectifs */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_ass_acquerir_objectifs");

         pvalue->u.mission_automate_ass_acquerir_objectifs = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ASS_AcquerirObjectifs);
         if (pvalue->u.mission_automate_ass_acquerir_objectifs == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ASS_AcquerirObjectifs (ctxt_p, pvalue->u.mission_automate_ass_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_appuyer */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_appuyer");

         pvalue->u.mission_automate_abc_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Appuyer);
         if (pvalue->u.mission_automate_abc_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Appuyer (ctxt_p, pvalue->u.mission_automate_abc_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_attaquer */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_attaquer");

         pvalue->u.mission_automate_abc_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Attaquer);
         if (pvalue->u.mission_automate_abc_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Attaquer (ctxt_p, pvalue->u.mission_automate_abc_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_contre_attaquer */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_contre_attaquer");

         pvalue->u.mission_automate_abc_contre_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_ContreAttaquer);
         if (pvalue->u.mission_automate_abc_contre_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_ContreAttaquer (ctxt_p, pvalue->u.mission_automate_abc_contre_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_controler */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_controler");

         pvalue->u.mission_automate_abc_controler = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Controler);
         if (pvalue->u.mission_automate_abc_controler == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Controler (ctxt_p, pvalue->u.mission_automate_abc_controler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_couvrir */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_couvrir");

         pvalue->u.mission_automate_abc_couvrir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Couvrir);
         if (pvalue->u.mission_automate_abc_couvrir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Couvrir (ctxt_p, pvalue->u.mission_automate_abc_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_donner_coup_arret */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_donner_coup_arret");

         pvalue->u.mission_automate_abc_donner_coup_arret = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_DonnerCoupArret);
         if (pvalue->u.mission_automate_abc_donner_coup_arret == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_DonnerCoupArret (ctxt_p, pvalue->u.mission_automate_abc_donner_coup_arret);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_eclairer */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_eclairer");

         pvalue->u.mission_automate_abc_eclairer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Eclairer);
         if (pvalue->u.mission_automate_abc_eclairer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Eclairer (ctxt_p, pvalue->u.mission_automate_abc_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_effectuer_raid */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_effectuer_raid");

         pvalue->u.mission_automate_abc_effectuer_raid = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_EffectuerRaid);
         if (pvalue->u.mission_automate_abc_effectuer_raid == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_EffectuerRaid (ctxt_p, pvalue->u.mission_automate_abc_effectuer_raid);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_interdire */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_interdire");

         pvalue->u.mission_automate_abc_interdire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Interdire);
         if (pvalue->u.mission_automate_abc_interdire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Interdire (ctxt_p, pvalue->u.mission_automate_abc_interdire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_jalonner */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_jalonner");

         pvalue->u.mission_automate_abc_jalonner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Jalonner);
         if (pvalue->u.mission_automate_abc_jalonner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Jalonner (ctxt_p, pvalue->u.mission_automate_abc_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_prendre_preciser_contact */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_prendre_preciser_contact");

         pvalue->u.mission_automate_abc_prendre_preciser_contact = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_PrendrePreciserContact);
         if (pvalue->u.mission_automate_abc_prendre_preciser_contact == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_PrendrePreciserContact (ctxt_p, pvalue->u.mission_automate_abc_prendre_preciser_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_reconnaitre */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_reconnaitre");

         pvalue->u.mission_automate_abc_reconnaitre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Reconnaitre);
         if (pvalue->u.mission_automate_abc_reconnaitre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Reconnaitre (ctxt_p, pvalue->u.mission_automate_abc_reconnaitre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_reconnaitre_point */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_reconnaitre_point");

         pvalue->u.mission_automate_abc_reconnaitre_point = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_ReconnaitrePoint);
         if (pvalue->u.mission_automate_abc_reconnaitre_point == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_ReconnaitrePoint (ctxt_p, pvalue->u.mission_automate_abc_reconnaitre_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_reduire */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_reduire");

         pvalue->u.mission_automate_abc_reduire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Reduire);
         if (pvalue->u.mission_automate_abc_reduire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Reduire (ctxt_p, pvalue->u.mission_automate_abc_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_relever_en_depassant */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_relever_en_depassant");

         pvalue->u.mission_automate_abc_relever_en_depassant = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_ReleverEnDepassant);
         if (pvalue->u.mission_automate_abc_relever_en_depassant == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_ReleverEnDepassant (ctxt_p, pvalue->u.mission_automate_abc_relever_en_depassant);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_semparer */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_semparer");

         pvalue->u.mission_automate_abc_semparer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Semparer);
         if (pvalue->u.mission_automate_abc_semparer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Semparer (ctxt_p, pvalue->u.mission_automate_abc_semparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_tenir */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_tenir");

         pvalue->u.mission_automate_abc_tenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Tenir);
         if (pvalue->u.mission_automate_abc_tenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Tenir (ctxt_p, pvalue->u.mission_automate_abc_tenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_soutenir */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_soutenir");

         pvalue->u.mission_automate_abc_soutenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Soutenir);
         if (pvalue->u.mission_automate_abc_soutenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Soutenir (ctxt_p, pvalue->u.mission_automate_abc_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_surveiller */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_surveiller");

         pvalue->u.mission_automate_abc_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Surveiller);
         if (pvalue->u.mission_automate_abc_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Surveiller (ctxt_p, pvalue->u.mission_automate_abc_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_flanc_garder */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_flanc_garder");

         pvalue->u.mission_automate_abc_flanc_garder = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_FlancGarder);
         if (pvalue->u.mission_automate_abc_flanc_garder == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_FlancGarder (ctxt_p, pvalue->u.mission_automate_abc_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_renseigner_sur */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_renseigner_sur");

         pvalue->u.mission_automate_abc_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_RenseignerSur);
         if (pvalue->u.mission_automate_abc_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_RenseignerSur (ctxt_p, pvalue->u.mission_automate_abc_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_fixer */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_fixer");

         pvalue->u.mission_automate_abc_fixer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Fixer);
         if (pvalue->u.mission_automate_abc_fixer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Fixer (ctxt_p, pvalue->u.mission_automate_abc_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_freiner */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_freiner");

         pvalue->u.mission_automate_abc_freiner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_Freiner);
         if (pvalue->u.mission_automate_abc_freiner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_Freiner (ctxt_p, pvalue->u.mission_automate_abc_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_surveiller_itineraire */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_surveiller_itineraire");

         pvalue->u.mission_automate_abc_surveiller_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_SurveillerItineraire);
         if (pvalue->u.mission_automate_abc_surveiller_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_SurveillerItineraire (ctxt_p, pvalue->u.mission_automate_abc_surveiller_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_renseigner_sur_un_axe */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_renseigner_sur_un_axe");

         pvalue->u.mission_automate_abc_renseigner_sur_un_axe = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_RenseignerSurUnAxe);
         if (pvalue->u.mission_automate_abc_renseigner_sur_un_axe == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_RenseignerSurUnAxe (ctxt_p, pvalue->u.mission_automate_abc_renseigner_sur_un_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_recueillir_unite */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_recueillir_unite");

         pvalue->u.mission_automate_abc_recueillir_unite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_RecueillirUnite);
         if (pvalue->u.mission_automate_abc_recueillir_unite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_RecueillirUnite (ctxt_p, pvalue->u.mission_automate_abc_recueillir_unite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_escorter_un_convoi */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_escorter_un_convoi");

         pvalue->u.mission_automate_abc_escorter_un_convoi = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_EscorterUnConvoi);
         if (pvalue->u.mission_automate_abc_escorter_un_convoi == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_EscorterUnConvoi (ctxt_p, pvalue->u.mission_automate_abc_escorter_un_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_armer_point_de_controle */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_armer_point_de_controle");

         pvalue->u.mission_automate_abc_armer_point_de_controle = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_ArmerPointDeControle);
         if (pvalue->u.mission_automate_abc_armer_point_de_controle == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_ArmerPointDeControle (ctxt_p, pvalue->u.mission_automate_abc_armer_point_de_controle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_organiser_accueil_colonne_refugies */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_organiser_accueil_colonne_refugies");

         pvalue->u.mission_automate_abc_organiser_accueil_colonne_refugies = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_OrganiserAccueilColonneRefugies);
         if (pvalue->u.mission_automate_abc_organiser_accueil_colonne_refugies == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (ctxt_p, pvalue->u.mission_automate_abc_organiser_accueil_colonne_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_abc_proteger_pc */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_abc_proteger_pc");

         pvalue->u.mission_automate_abc_proteger_pc = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ABC_ProtegerPC);
         if (pvalue->u.mission_automate_abc_proteger_pc == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ABC_ProtegerPC (ctxt_p, pvalue->u.mission_automate_abc_proteger_pc);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_se_deployer */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_se_deployer");

         pvalue->u.mission_automate_gen_se_deployer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_SeDeployer);
         if (pvalue->u.mission_automate_gen_se_deployer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_SeDeployer (ctxt_p, pvalue->u.mission_automate_gen_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_faire_franchir */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_faire_franchir");

         pvalue->u.mission_automate_gen_faire_franchir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_FaireFranchir);
         if (pvalue->u.mission_automate_gen_faire_franchir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_FaireFranchir (ctxt_p, pvalue->u.mission_automate_gen_faire_franchir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_systeme_obstacles */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_systeme_obstacles");

         pvalue->u.mission_automate_gen_realiser_systeme_obstacles = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RealiserSystemeObstacles);
         if (pvalue->u.mission_automate_gen_realiser_systeme_obstacles == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RealiserSystemeObstacles (ctxt_p, pvalue->u.mission_automate_gen_realiser_systeme_obstacles);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_franchir_de_vive_force */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_franchir_de_vive_force");

         pvalue->u.mission_automate_gen_franchir_de_vive_force = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_FranchirDeViveForce);
         if (pvalue->u.mission_automate_gen_franchir_de_vive_force == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_FranchirDeViveForce (ctxt_p, pvalue->u.mission_automate_gen_franchir_de_vive_force);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_retablir_itineraires */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_retablir_itineraires");

         pvalue->u.mission_automate_gen_retablir_itineraires = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RetablirItineraires);
         if (pvalue->u.mission_automate_gen_retablir_itineraires == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RetablirItineraires (ctxt_p, pvalue->u.mission_automate_gen_retablir_itineraires);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_amenager_aire_stationnement */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_amenager_aire_stationnement");

         pvalue->u.mission_automate_gen_amenager_aire_stationnement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_AmenagerAireStationnement);
         if (pvalue->u.mission_automate_gen_amenager_aire_stationnement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_AmenagerAireStationnement (ctxt_p, pvalue->u.mission_automate_gen_amenager_aire_stationnement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_amenager_terrain_poser_sommaire */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_amenager_terrain_poser_sommaire");

         pvalue->u.mission_automate_gen_amenager_terrain_poser_sommaire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_AmenagerTerrainPoserSommaire);
         if (pvalue->u.mission_automate_gen_amenager_terrain_poser_sommaire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (ctxt_p, pvalue->u.mission_automate_gen_amenager_terrain_poser_sommaire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_zone_poser */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_zone_poser");

         pvalue->u.mission_automate_gen_realiser_zone_poser = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RealiserZonePoser);
         if (pvalue->u.mission_automate_gen_realiser_zone_poser == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RealiserZonePoser (ctxt_p, pvalue->u.mission_automate_gen_realiser_zone_poser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_reconnaitre_zone_deploiement */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_reconnaitre_zone_deploiement");

         pvalue->u.mission_automate_gen_reconnaitre_zone_deploiement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_ReconnaitreZoneDeploiement);
         if (pvalue->u.mission_automate_gen_reconnaitre_zone_deploiement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_ReconnaitreZoneDeploiement (ctxt_p, pvalue->u.mission_automate_gen_reconnaitre_zone_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_camp_prisonniers */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_camp_prisonniers");

         pvalue->u.mission_automate_gen_realiser_camp_prisonniers = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RealiserCampPrisonniers);
         if (pvalue->u.mission_automate_gen_realiser_camp_prisonniers == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RealiserCampPrisonniers (ctxt_p, pvalue->u.mission_automate_gen_realiser_camp_prisonniers);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_camp_refugies */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_camp_refugies");

         pvalue->u.mission_automate_gen_realiser_camp_refugies = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RealiserCampRefugies);
         if (pvalue->u.mission_automate_gen_realiser_camp_refugies == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RealiserCampRefugies (ctxt_p, pvalue->u.mission_automate_gen_realiser_camp_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial");

         pvalue->u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial);
         if (pvalue->u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (ctxt_p, pvalue->u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_realiser_travaux_sommaires_au_profit_population */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population");

         pvalue->u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation);
         if (pvalue->u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (ctxt_p, pvalue->u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_appuyer_debarquement_troupes */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_appuyer_debarquement_troupes");

         pvalue->u.mission_automate_gen_appuyer_debarquement_troupes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_AppuyerDebarquementTroupes);
         if (pvalue->u.mission_automate_gen_appuyer_debarquement_troupes == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_AppuyerDebarquementTroupes (ctxt_p, pvalue->u.mission_automate_gen_appuyer_debarquement_troupes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_gen_ouvrir_axes_progression */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_gen_ouvrir_axes_progression");

         pvalue->u.mission_automate_gen_ouvrir_axes_progression = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_GEN_OuvrirAxesProgression);
         if (pvalue->u.mission_automate_gen_ouvrir_axes_progression == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_GEN_OuvrirAxesProgression (ctxt_p, pvalue->u.mission_automate_gen_ouvrir_axes_progression);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_attaquer_souplesse */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_attaquer_souplesse");

         pvalue->u.mission_automate_inf_attaquer_souplesse = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_AttaquerSouplesse);
         if (pvalue->u.mission_automate_inf_attaquer_souplesse == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_AttaquerSouplesse (ctxt_p, pvalue->u.mission_automate_inf_attaquer_souplesse);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_appuyer */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_appuyer");

         pvalue->u.mission_automate_inf_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Appuyer);
         if (pvalue->u.mission_automate_inf_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Appuyer (ctxt_p, pvalue->u.mission_automate_inf_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_controler */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_controler");

         pvalue->u.mission_automate_inf_controler = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Controler);
         if (pvalue->u.mission_automate_inf_controler == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Controler (ctxt_p, pvalue->u.mission_automate_inf_controler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_couvrir */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_couvrir");

         pvalue->u.mission_automate_inf_couvrir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Couvrir);
         if (pvalue->u.mission_automate_inf_couvrir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Couvrir (ctxt_p, pvalue->u.mission_automate_inf_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_donner_coup_arret */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_donner_coup_arret");

         pvalue->u.mission_automate_inf_donner_coup_arret = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_DonnerCoupArret);
         if (pvalue->u.mission_automate_inf_donner_coup_arret == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_DonnerCoupArret (ctxt_p, pvalue->u.mission_automate_inf_donner_coup_arret);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_eclairer */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_eclairer");

         pvalue->u.mission_automate_inf_eclairer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Eclairer);
         if (pvalue->u.mission_automate_inf_eclairer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Eclairer (ctxt_p, pvalue->u.mission_automate_inf_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_flanc_garder */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_flanc_garder");

         pvalue->u.mission_automate_inf_flanc_garder = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_FlancGarder);
         if (pvalue->u.mission_automate_inf_flanc_garder == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_FlancGarder (ctxt_p, pvalue->u.mission_automate_inf_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_freiner */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_freiner");

         pvalue->u.mission_automate_inf_freiner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Freiner);
         if (pvalue->u.mission_automate_inf_freiner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Freiner (ctxt_p, pvalue->u.mission_automate_inf_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_harceler */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_harceler");

         pvalue->u.mission_automate_inf_harceler = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Harceler);
         if (pvalue->u.mission_automate_inf_harceler == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Harceler (ctxt_p, pvalue->u.mission_automate_inf_harceler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_interdire */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_interdire");

         pvalue->u.mission_automate_inf_interdire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Interdire);
         if (pvalue->u.mission_automate_inf_interdire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Interdire (ctxt_p, pvalue->u.mission_automate_inf_interdire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_mener_defense_usure */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_mener_defense_usure");

         pvalue->u.mission_automate_inf_mener_defense_usure = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_MenerDefenseUsure);
         if (pvalue->u.mission_automate_inf_mener_defense_usure == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_MenerDefenseUsure (ctxt_p, pvalue->u.mission_automate_inf_mener_defense_usure);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_prendre_preciser_maintenir_contact */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_prendre_preciser_maintenir_contact");

         pvalue->u.mission_automate_inf_prendre_preciser_maintenir_contact = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_PrendrePreciserMaintenirContact);
         if (pvalue->u.mission_automate_inf_prendre_preciser_maintenir_contact == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_PrendrePreciserMaintenirContact (ctxt_p, pvalue->u.mission_automate_inf_prendre_preciser_maintenir_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_reconnaissance_offensive */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_reconnaissance_offensive");

         pvalue->u.mission_automate_inf_reconnaissance_offensive = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_ReconnaissanceOffensive);
         if (pvalue->u.mission_automate_inf_reconnaissance_offensive == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_ReconnaissanceOffensive (ctxt_p, pvalue->u.mission_automate_inf_reconnaissance_offensive);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_recueillir_unite */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_recueillir_unite");

         pvalue->u.mission_automate_inf_recueillir_unite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_RecueillirUnite);
         if (pvalue->u.mission_automate_inf_recueillir_unite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_RecueillirUnite (ctxt_p, pvalue->u.mission_automate_inf_recueillir_unite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_reduire */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_reduire");

         pvalue->u.mission_automate_inf_reduire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Reduire);
         if (pvalue->u.mission_automate_inf_reduire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Reduire (ctxt_p, pvalue->u.mission_automate_inf_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_relever */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_relever");

         pvalue->u.mission_automate_inf_relever = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Relever);
         if (pvalue->u.mission_automate_inf_relever == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Relever (ctxt_p, pvalue->u.mission_automate_inf_relever);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_rompre_contact */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_rompre_contact");

         pvalue->u.mission_automate_inf_rompre_contact = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_RompreContact);
         if (pvalue->u.mission_automate_inf_rompre_contact == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_RompreContact (ctxt_p, pvalue->u.mission_automate_inf_rompre_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_surveiller */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_surveiller");

         pvalue->u.mission_automate_inf_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Surveiller);
         if (pvalue->u.mission_automate_inf_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Surveiller (ctxt_p, pvalue->u.mission_automate_inf_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_semparer */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_semparer");

         pvalue->u.mission_automate_inf_semparer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Semparer);
         if (pvalue->u.mission_automate_inf_semparer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Semparer (ctxt_p, pvalue->u.mission_automate_inf_semparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_fixer */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_fixer");

         pvalue->u.mission_automate_inf_fixer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Fixer);
         if (pvalue->u.mission_automate_inf_fixer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Fixer (ctxt_p, pvalue->u.mission_automate_inf_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_attaquer_en_terrain_difficile */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_attaquer_en_terrain_difficile");

         pvalue->u.mission_automate_inf_attaquer_en_terrain_difficile = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_AttaquerEnTerrainDifficile);
         if (pvalue->u.mission_automate_inf_attaquer_en_terrain_difficile == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_AttaquerEnTerrainDifficile (ctxt_p, pvalue->u.mission_automate_inf_attaquer_en_terrain_difficile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_barrer_direction */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_barrer_direction");

         pvalue->u.mission_automate_inf_barrer_direction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_BarrerDirection);
         if (pvalue->u.mission_automate_inf_barrer_direction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_BarrerDirection (ctxt_p, pvalue->u.mission_automate_inf_barrer_direction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_defendre_ferme */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_defendre_ferme");

         pvalue->u.mission_automate_inf_defendre_ferme = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_DefendreFerme);
         if (pvalue->u.mission_automate_inf_defendre_ferme == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_DefendreFerme (ctxt_p, pvalue->u.mission_automate_inf_defendre_ferme);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_tenir */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_tenir");

         pvalue->u.mission_automate_inf_tenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Tenir);
         if (pvalue->u.mission_automate_inf_tenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Tenir (ctxt_p, pvalue->u.mission_automate_inf_tenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_appuyer_un_freinage */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_appuyer_un_freinage");

         pvalue->u.mission_automate_inf_appuyer_un_freinage = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_AppuyerUnFreinage);
         if (pvalue->u.mission_automate_inf_appuyer_un_freinage == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_AppuyerUnFreinage (ctxt_p, pvalue->u.mission_automate_inf_appuyer_un_freinage);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_appuyer_une_attaque */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_appuyer_une_attaque");

         pvalue->u.mission_automate_inf_appuyer_une_attaque = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_AppuyerUneAttaque);
         if (pvalue->u.mission_automate_inf_appuyer_une_attaque == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_AppuyerUneAttaque (ctxt_p, pvalue->u.mission_automate_inf_appuyer_une_attaque);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_inf_soutenir */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_inf_soutenir");

         pvalue->u.mission_automate_inf_soutenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_INF_Soutenir);
         if (pvalue->u.mission_automate_inf_soutenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_INF_Soutenir (ctxt_p, pvalue->u.mission_automate_inf_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_se_deployer */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_se_deployer");

         pvalue->u.mission_automate_log_se_deployer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_SeDeployer);
         if (pvalue->u.mission_automate_log_se_deployer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_SeDeployer (ctxt_p, pvalue->u.mission_automate_log_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_appuyer_mouvement */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_appuyer_mouvement");

         pvalue->u.mission_automate_log_appuyer_mouvement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_AppuyerMouvement);
         if (pvalue->u.mission_automate_log_appuyer_mouvement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_AppuyerMouvement (ctxt_p, pvalue->u.mission_automate_log_appuyer_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_reconnaitre_itineraire */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_reconnaitre_itineraire");

         pvalue->u.mission_automate_log_reconnaitre_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_ReconnaitreItineraire);
         if (pvalue->u.mission_automate_log_reconnaitre_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_automate_log_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_transporter_formation_blindee */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_transporter_formation_blindee");

         pvalue->u.mission_automate_log_transporter_formation_blindee = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_TransporterFormationBlindee);
         if (pvalue->u.mission_automate_log_transporter_formation_blindee == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_TransporterFormationBlindee (ctxt_p, pvalue->u.mission_automate_log_transporter_formation_blindee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_appuyer_mouvement_dans_zone */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_appuyer_mouvement_dans_zone");

         pvalue->u.mission_automate_log_appuyer_mouvement_dans_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_AppuyerMouvementDansZone);
         if (pvalue->u.mission_automate_log_appuyer_mouvement_dans_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_AppuyerMouvementDansZone (ctxt_p, pvalue->u.mission_automate_log_appuyer_mouvement_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_mettre_en_oeuvre_zone_stationnement */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_mettre_en_oeuvre_zone_stationnement");

         pvalue->u.mission_automate_log_mettre_en_oeuvre_zone_stationnement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement);
         if (pvalue->u.mission_automate_log_mettre_en_oeuvre_zone_stationnement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement (ctxt_p, pvalue->u.mission_automate_log_mettre_en_oeuvre_zone_stationnement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_appuyer_franchissement_dans_zone */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_appuyer_franchissement_dans_zone");

         pvalue->u.mission_automate_log_appuyer_franchissement_dans_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_AppuyerFranchissementDansZone);
         if (pvalue->u.mission_automate_log_appuyer_franchissement_dans_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_AppuyerFranchissementDansZone (ctxt_p, pvalue->u.mission_automate_log_appuyer_franchissement_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_bloquer_zone */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_bloquer_zone");

         pvalue->u.mission_automate_log_bloquer_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_BloquerZone);
         if (pvalue->u.mission_automate_log_bloquer_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_BloquerZone (ctxt_p, pvalue->u.mission_automate_log_bloquer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_reconnaitre_zone_contaminee */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_reconnaitre_zone_contaminee");

         pvalue->u.mission_automate_log_reconnaitre_zone_contaminee = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_ReconnaitreZoneContaminee);
         if (pvalue->u.mission_automate_log_reconnaitre_zone_contaminee == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_ReconnaitreZoneContaminee (ctxt_p, pvalue->u.mission_automate_log_reconnaitre_zone_contaminee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_reconnaitre_zone_de_deploiement */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_reconnaitre_zone_de_deploiement");

         pvalue->u.mission_automate_log_reconnaitre_zone_de_deploiement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement);
         if (pvalue->u.mission_automate_log_reconnaitre_zone_de_deploiement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement (ctxt_p, pvalue->u.mission_automate_log_reconnaitre_zone_de_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_surveiller */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_surveiller");

         pvalue->u.mission_automate_log_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_Surveiller);
         if (pvalue->u.mission_automate_log_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_Surveiller (ctxt_p, pvalue->u.mission_automate_log_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_log_armer_pias */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_log_armer_pias");

         pvalue->u.mission_automate_log_armer_pias = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_LOG_ArmerPIAs);
         if (pvalue->u.mission_automate_log_armer_pias == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_LOG_ArmerPIAs (ctxt_p, pvalue->u.mission_automate_log_armer_pias);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_test_move_to */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_test_move_to");

         pvalue->u.mission_automate_test_move_to = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_Test_MoveTo);
         if (pvalue->u.mission_automate_test_move_to == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_Test_MoveTo (ctxt_p, pvalue->u.mission_automate_test_move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_decrocher */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_decrocher");

         pvalue->u.mission_automate_decrocher = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_Decrocher);
         if (pvalue->u.mission_automate_decrocher == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_Decrocher (ctxt_p, pvalue->u.mission_automate_decrocher);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_relever_sur_place */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_relever_sur_place");

         pvalue->u.mission_automate_relever_sur_place = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_ReleverSurPlace);
         if (pvalue->u.mission_automate_relever_sur_place == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_ReleverSurPlace (ctxt_p, pvalue->u.mission_automate_relever_sur_place);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_faire_mouvement */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_faire_mouvement");

         pvalue->u.mission_automate_faire_mouvement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_FaireMouvement);
         if (pvalue->u.mission_automate_faire_mouvement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_FaireMouvement (ctxt_p, pvalue->u.mission_automate_faire_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_faire_decontaminer */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_faire_decontaminer");

         pvalue->u.mission_automate_se_faire_decontaminer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_SeFaireDecontaminer);
         if (pvalue->u.mission_automate_se_faire_decontaminer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_SeFaireDecontaminer (ctxt_p, pvalue->u.mission_automate_se_faire_decontaminer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_franchir */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_franchir");

         pvalue->u.mission_automate_franchir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_Franchir);
         if (pvalue->u.mission_automate_franchir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_Franchir (ctxt_p, pvalue->u.mission_automate_franchir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_stationner */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_stationner");

         pvalue->u.mission_automate_stationner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_Stationner);
         if (pvalue->u.mission_automate_stationner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_Stationner (ctxt_p, pvalue->u.mission_automate_stationner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_faire_transporter */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_faire_transporter");

         pvalue->u.mission_automate_se_faire_transporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_SeFaireTransporter);
         if (pvalue->u.mission_automate_se_faire_transporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_SeFaireTransporter (ctxt_p, pvalue->u.mission_automate_se_faire_transporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_recompleter */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_recompleter");

         pvalue->u.mission_automate_se_recompleter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_SeRecompleter);
         if (pvalue->u.mission_automate_se_recompleter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_SeRecompleter (ctxt_p, pvalue->u.mission_automate_se_recompleter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_se_rendre */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_se_rendre");

         pvalue->u.mission_automate_se_rendre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_SeRendre);
         if (pvalue->u.mission_automate_se_rendre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_SeRendre (ctxt_p, pvalue->u.mission_automate_se_rendre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_faire_mouvement_vers_camp_refugies */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_faire_mouvement_vers_camp_refugies");

         pvalue->u.mission_automate_faire_mouvement_vers_camp_refugies = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_FaireMouvementVersCampRefugies);
         if (pvalue->u.mission_automate_faire_mouvement_vers_camp_refugies == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_FaireMouvementVersCampRefugies (ctxt_p, pvalue->u.mission_automate_faire_mouvement_vers_camp_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_generique */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_generique");

         pvalue->u.mission_automate_generique = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_Generique);
         if (pvalue->u.mission_automate_generique == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_Generique (ctxt_p, pvalue->u.mission_automate_generique);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_reconnaitre_un_axe */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_reconnaitre_un_axe");

         pvalue->u.mission_automate_nbc_reconnaitre_un_axe = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_NBC_ReconnaitreUnAxe);
         if (pvalue->u.mission_automate_nbc_reconnaitre_un_axe == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_NBC_ReconnaitreUnAxe (ctxt_p, pvalue->u.mission_automate_nbc_reconnaitre_un_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_reconnaitre_une_zone */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_reconnaitre_une_zone");

         pvalue->u.mission_automate_nbc_reconnaitre_une_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_NBC_ReconnaitreUneZone);
         if (pvalue->u.mission_automate_nbc_reconnaitre_une_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_NBC_ReconnaitreUneZone (ctxt_p, pvalue->u.mission_automate_nbc_reconnaitre_une_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_armer_un_site_de_decontamination */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_armer_un_site_de_decontamination");

         pvalue->u.mission_automate_nbc_armer_un_site_de_decontamination = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_NBC_ArmerUnSiteDeDecontamination);
         if (pvalue->u.mission_automate_nbc_armer_un_site_de_decontamination == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_NBC_ArmerUnSiteDeDecontamination (ctxt_p, pvalue->u.mission_automate_nbc_armer_un_site_de_decontamination);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_decontaminer_une_zone */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_decontaminer_une_zone");

         pvalue->u.mission_automate_nbc_decontaminer_une_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_NBC_DecontaminerUneZone);
         if (pvalue->u.mission_automate_nbc_decontaminer_une_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_NBC_DecontaminerUneZone (ctxt_p, pvalue->u.mission_automate_nbc_decontaminer_une_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_nbc_reconnaitre_des_sites_rota */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_nbc_reconnaitre_des_sites_rota");

         pvalue->u.mission_automate_nbc_reconnaitre_des_sites_rota = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_NBC_ReconnaitreDesSitesROTA);
         if (pvalue->u.mission_automate_nbc_reconnaitre_des_sites_rota == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_NBC_ReconnaitreDesSitesROTA (ctxt_p, pvalue->u.mission_automate_nbc_reconnaitre_des_sites_rota);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_rohum_renseigner_sur */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_rohum_renseigner_sur");

         pvalue->u.mission_automate_rens_rohum_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROHUM_RenseignerSur);
         if (pvalue->u.mission_automate_rens_rohum_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROHUM_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_rohum_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_rohum_orienter_guider */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_rohum_orienter_guider");

         pvalue->u.mission_automate_rens_rohum_orienter_guider = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROHUM_OrienterGuider);
         if (pvalue->u.mission_automate_rens_rohum_orienter_guider == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROHUM_OrienterGuider (ctxt_p, pvalue->u.mission_automate_rens_rohum_orienter_guider);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_rohum_sexfiltrer */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_rohum_sexfiltrer");

         pvalue->u.mission_automate_rens_rohum_sexfiltrer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROHUM_SExfiltrer);
         if (pvalue->u.mission_automate_rens_rohum_sexfiltrer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROHUM_SExfiltrer (ctxt_p, pvalue->u.mission_automate_rens_rohum_sexfiltrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roim_cl289_renseigner_sur */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roim_cl289_renseigner_sur");

         pvalue->u.mission_automate_rens_roim_cl289_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROIM_CL289_RenseignerSur);
         if (pvalue->u.mission_automate_rens_roim_cl289_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROIM_CL289_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_roim_cl289_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roim_sdti_renseigner_sur */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roim_sdti_renseigner_sur");

         pvalue->u.mission_automate_rens_roim_sdti_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur);
         if (pvalue->u.mission_automate_rens_roim_sdti_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_roim_sdti_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roem_appuyer */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roem_appuyer");

         pvalue->u.mission_automate_rens_roem_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROEM_Appuyer);
         if (pvalue->u.mission_automate_rens_roem_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROEM_Appuyer (ctxt_p, pvalue->u.mission_automate_rens_roem_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_roem_renseignersur */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_roem_renseignersur");

         pvalue->u.mission_automate_rens_roem_renseignersur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_ROEM_RenseignerSur);
         if (pvalue->u.mission_automate_rens_roem_renseignersur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_ROEM_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_roem_renseignersur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_rens_radint_renseignersur */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_rens_radint_renseignersur");

         pvalue->u.mission_automate_rens_radint_renseignersur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_RENS_RADINT_RenseignerSur);
         if (pvalue->u.mission_automate_rens_radint_renseignersur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_RENS_RADINT_RenseignerSur (ctxt_p, pvalue->u.mission_automate_rens_radint_renseignersur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_automate_trans_commander */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.mission_automate_trans_commander");

         pvalue->u.mission_automate_trans_commander = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Automate_TRANS_Commander);
         if (pvalue->u.mission_automate_trans_commander == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Automate_TRANS_Commander (ctxt_p, pvalue->u.mission_automate_trans_commander);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_Mission_Automate: end\n");

   return (stat);
}

int ASN1C_Mission_Automate::Decode ()
{
   return asn1PD_Mission_Automate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumAutomateOrderFormation                                */
/*                                                            */
/**************************************************************/

ASN1C_EnumAutomateOrderFormation::ASN1C_EnumAutomateOrderFormation (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumAutomateOrderFormation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumAutomateOrderFormation (ASN1CTXT* ctxt_p, ASN1T_EnumAutomateOrderFormation value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumAutomateOrderFormation: start\n");

   switch (value) {
      case EnumAutomateOrderFormation::un_echelon: ui = 0; break;
      case EnumAutomateOrderFormation::deux_echelons: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumAutomateOrderFormation: end\n");
   return (stat);
}

int ASN1C_EnumAutomateOrderFormation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumAutomateOrderFormation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumAutomateOrderFormation (ASN1CTXT* ctxt_p, ASN1T_EnumAutomateOrderFormation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumAutomateOrderFormation: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumAutomateOrderFormation::un_echelon; break;
      case 1: *pvalue = EnumAutomateOrderFormation::deux_echelons; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumAutomateOrderFormation: end\n");

   return (stat);
}

int ASN1C_EnumAutomateOrderFormation::Decode ()
{
   return asn1PD_EnumAutomateOrderFormation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomateOrder                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomateOrder::ASN1C_MsgAutomateOrder (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomateOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomateOrder (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateOrder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomateOrder: start\n");

   PU_NEWFIELD (ctxt_p, "formationPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->formation != EnumAutomateOrderFormation::deux_echelons));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_limite_gauche */

   PU_PUSHNAME (ctxt_p, "oid_limite_gauche");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_limite_gauche);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_limite_droite */

   PU_PUSHNAME (ctxt_p, "oid_limite_droite");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_limite_droite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_limas */

   PU_PUSHNAME (ctxt_p, "oid_limas");

   stat = asn1PE_ListOID (ctxt_p, &pvalue->oid_limas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode direction_dangereuse */

   PU_PUSHNAME (ctxt_p, "direction_dangereuse");

   stat = asn1PE_Direction (ctxt_p, pvalue->direction_dangereuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode formation */

   if (pvalue->formation != EnumAutomateOrderFormation::deux_echelons) {
      PU_PUSHNAME (ctxt_p, "formation");

      stat = asn1PE_EnumAutomateOrderFormation (ctxt_p, pvalue->formation);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode mission */

   PU_PUSHNAME (ctxt_p, "mission");

   stat = asn1PE_Mission_Automate (ctxt_p, &pvalue->mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomateOrder: end\n");
   return (stat);
}

int ASN1C_MsgAutomateOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomateOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomateOrder (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL formationPresent;

   rtdiag ("asn1PD_MsgAutomateOrder: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "formationPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else formationPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_limite_gauche */

   PU_PUSHNAME (ctxt_p, "oid_limite_gauche");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_limite_gauche);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_limite_droite */

   PU_PUSHNAME (ctxt_p, "oid_limite_droite");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_limite_droite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_limas */

   PU_PUSHNAME (ctxt_p, "oid_limas");

   stat = asn1PD_ListOID (ctxt_p, &pvalue->oid_limas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode direction_dangereuse */

   PU_PUSHNAME (ctxt_p, "direction_dangereuse");

   stat = asn1PD_Direction (ctxt_p, &pvalue->direction_dangereuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode formation */

   if (formationPresent) {
      PU_PUSHNAME (ctxt_p, "formation");

      stat = asn1PD_EnumAutomateOrderFormation (ctxt_p, &pvalue->formation);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->formation = EnumAutomateOrderFormation::deux_echelons;
   }

   /* decode mission */

   PU_PUSHNAME (ctxt_p, "mission");

   stat = asn1PD_Mission_Automate (ctxt_p, &pvalue->mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomateOrder: end\n");

   return (stat);
}

int ASN1C_MsgAutomateOrder::Decode ()
{
   return asn1PD_MsgAutomateOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomateOrderAck                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomateOrderAck::ASN1C_MsgAutomateOrderAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomateOrderAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomateOrderAck (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateOrderAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomateOrderAck: start\n");

   /* encode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumOrderErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomateOrderAck: end\n");
   return (stat);
}

int ASN1C_MsgAutomateOrderAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomateOrderAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomateOrderAck (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateOrderAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAutomateOrderAck: start\n");

   /* decode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumOrderErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomateOrderAck: end\n");

   return (stat);
}

int ASN1C_MsgAutomateOrderAck::Decode ()
{
   return asn1PD_MsgAutomateOrderAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfMsgPionOrder                                        */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfMsgPionOrder::ASN1C__SeqOfMsgPionOrder (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfMsgPionOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfMsgPionOrder (ASN1CTXT* ctxt_p, ASN1T__SeqOfMsgPionOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfMsgPionOrder: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_MsgPionOrder (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfMsgPionOrder: end\n");
   return (stat);
}

int ASN1C__SeqOfMsgPionOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfMsgPionOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfMsgPionOrder (ASN1CTXT* ctxt_p, ASN1T__SeqOfMsgPionOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfMsgPionOrder: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_MsgPionOrder);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_MsgPionOrder (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfMsgPionOrder: end\n");

   return (stat);
}

int ASN1C__SeqOfMsgPionOrder::Decode ()
{
   return asn1PD__SeqOfMsgPionOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomateMRT                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomateMRT::ASN1C_MsgAutomateMRT (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomateMRT& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomateMRT (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateMRT* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomateMRT: start\n");

   /* encode automate_id */

   PU_PUSHNAME (ctxt_p, "automate_id");

   stat = asn1PE_Agent (ctxt_p, pvalue->automate_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode missions */

   PU_PUSHNAME (ctxt_p, "missions");

   stat = asn1PE__SeqOfMsgPionOrder (ctxt_p, &pvalue->missions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomateMRT: end\n");
   return (stat);
}

int ASN1C_MsgAutomateMRT::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomateMRT (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomateMRT (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateMRT* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAutomateMRT: start\n");

   /* decode automate_id */

   PU_PUSHNAME (ctxt_p, "automate_id");

   stat = asn1PD_Agent (ctxt_p, &pvalue->automate_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode missions */

   PU_PUSHNAME (ctxt_p, "missions");

   stat = asn1PD__SeqOfMsgPionOrder (ctxt_p, &pvalue->missions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomateMRT: end\n");

   return (stat);
}

int ASN1C_MsgAutomateMRT::Decode ()
{
   return asn1PD_MsgAutomateMRT (mpContext->GetPtr(), &msgData);
}


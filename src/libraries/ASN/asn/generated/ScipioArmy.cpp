/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 13-Oct-2006.
 */
#include "ScipioArmy.h"

/**************************************************************/
/*                                                            */
/*  EnumDiplomatie                                            */
/*                                                            */
/**************************************************************/

ASN1C_EnumDiplomatie::ASN1C_EnumDiplomatie (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumDiplomatie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumDiplomatie (ASN1CTXT* ctxt_p, ASN1T_EnumDiplomatie value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumDiplomatie: start\n");

   switch (value) {
      case EnumDiplomatie::inconnu: ui = 0; break;
      case EnumDiplomatie::ami: ui = 1; break;
      case EnumDiplomatie::ennemi: ui = 2; break;
      case EnumDiplomatie::neutre: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumDiplomatie: end\n");
   return (stat);
}

int ASN1C_EnumDiplomatie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumDiplomatie (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumDiplomatie (ASN1CTXT* ctxt_p, ASN1T_EnumDiplomatie* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumDiplomatie: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumDiplomatie::inconnu; break;
      case 1: *pvalue = EnumDiplomatie::ami; break;
      case 2: *pvalue = EnumDiplomatie::ennemi; break;
      case 3: *pvalue = EnumDiplomatie::neutre; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumDiplomatie: end\n");

   return (stat);
}

int ASN1C_EnumDiplomatie::Decode ()
{
   return asn1PD_EnumDiplomatie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeDiplomatie                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeDiplomatie::ASN1C_MsgChangeDiplomatie (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeDiplomatie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeDiplomatie (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeDiplomatie: start\n");

   /* encode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PE_EnumDiplomatie (ctxt_p, pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeDiplomatie: end\n");
   return (stat);
}

int ASN1C_MsgChangeDiplomatie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeDiplomatie (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeDiplomatie (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeDiplomatie: start\n");

   /* decode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PD_EnumDiplomatie (ctxt_p, &pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeDiplomatie: end\n");

   return (stat);
}

int ASN1C_MsgChangeDiplomatie::Decode ()
{
   return asn1PD_MsgChangeDiplomatie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeDiplomatieErrorCode                             */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeDiplomatieErrorCode::ASN1C_EnumChangeDiplomatieErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeDiplomatieErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeDiplomatieErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeDiplomatieErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeDiplomatieErrorCode: start\n");

   switch (value) {
      case EnumChangeDiplomatieErrorCode::no_error: ui = 0; break;
      case EnumChangeDiplomatieErrorCode::error_invalid_camp: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeDiplomatieErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeDiplomatieErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeDiplomatieErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeDiplomatieErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeDiplomatieErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeDiplomatieErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeDiplomatieErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeDiplomatieErrorCode::error_invalid_camp; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeDiplomatieErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeDiplomatieErrorCode::Decode ()
{
   return asn1PD_EnumChangeDiplomatieErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgSideCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgSideCreation::ASN1C_MsgSideCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgSideCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgSideCreation (ASN1CTXT* ctxt_p, ASN1T_MsgSideCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgSideCreation: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgSideCreation: end\n");
   return (stat);
}

int ASN1C_MsgSideCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgSideCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgSideCreation (ASN1CTXT* ctxt_p, ASN1T_MsgSideCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgSideCreation: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgSideCreation: end\n");

   return (stat);
}

int ASN1C_MsgSideCreation::Decode ()
{
   return asn1PD_MsgSideCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeDiplomatieAck                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeDiplomatieAck::ASN1C_MsgChangeDiplomatieAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeDiplomatieAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeDiplomatieAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatieAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeDiplomatieAck: start\n");

   /* encode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PE_EnumDiplomatie (ctxt_p, pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeDiplomatieErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeDiplomatieAck: end\n");
   return (stat);
}

int ASN1C_MsgChangeDiplomatieAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeDiplomatieAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeDiplomatieAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatieAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeDiplomatieAck: start\n");

   /* decode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PD_EnumDiplomatie (ctxt_p, &pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeDiplomatieErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeDiplomatieAck: end\n");

   return (stat);
}

int ASN1C_MsgChangeDiplomatieAck::Decode ()
{
   return asn1PD_MsgChangeDiplomatieAck (mpContext->GetPtr(), &msgData);
}


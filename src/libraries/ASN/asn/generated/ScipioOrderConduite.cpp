/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 12-Jan-2006.
 */
#include "ScipioOrderConduite.h"

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_AttendreSePoster                     */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_AttendreSePoster::ASN1C_DemandeOrderConduite_AttendreSePoster (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_AttendreSePoster (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_AttendreSePoster: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_AttendreSePoster: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_AttendreSePoster::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_AttendreSePoster (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_AttendreSePoster (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_AttendreSePoster: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_AttendreSePoster: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_AttendreSePoster::Decode ()
{
   return asn1PD_DemandeOrderConduite_AttendreSePoster (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Poursuivre                           */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Poursuivre::ASN1C_DemandeOrderConduite_Poursuivre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Poursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Poursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Poursuivre: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Poursuivre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Poursuivre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Poursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Poursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Poursuivre: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Poursuivre::Decode ()
{
   return asn1PD_DemandeOrderConduite_Poursuivre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Decrocher                            */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Decrocher::ASN1C_DemandeOrderConduite_Decrocher (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Decrocher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Decrocher: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Decrocher: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Decrocher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Decrocher (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Decrocher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Decrocher: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Decrocher: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Decrocher::Decode ()
{
   return asn1PD_DemandeOrderConduite_Decrocher (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Deboucher                            */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Deboucher::ASN1C_DemandeOrderConduite_Deboucher (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Deboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Deboucher: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Deboucher: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Deboucher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Deboucher (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Deboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Deboucher: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Deboucher: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Deboucher::Decode ()
{
   return asn1PD_DemandeOrderConduite_Deboucher (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Pion_ExecuterTir                     */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Pion_ExecuterTir::ASN1C_DemandeOrderConduite_Pion_ExecuterTir (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Pion_ExecuterTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_ExecuterTir: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_ExecuterTir: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_ExecuterTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Pion_ExecuterTir (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Pion_ExecuterTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_ExecuterTir: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_ExecuterTir: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_ExecuterTir::Decode ()
{
   return asn1PD_DemandeOrderConduite_Pion_ExecuterTir (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Pion_Contourner                      */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Pion_Contourner::ASN1C_DemandeOrderConduite_Pion_Contourner (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Pion_Contourner (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_Contourner: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_Contourner: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_Contourner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Pion_Contourner (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Pion_Contourner (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_Contourner: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_Contourner: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_Contourner::Decode ()
{
   return asn1PD_DemandeOrderConduite_Pion_Contourner (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Pion_ActiverObstacle                 */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Pion_ActiverObstacle::ASN1C_DemandeOrderConduite_Pion_ActiverObstacle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Pion_ActiverObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_ActiverObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_ActiverObstacle: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_ActiverObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Pion_ActiverObstacle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Pion_ActiverObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_ActiverObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_ActiverObstacle: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_ActiverObstacle::Decode ()
{
   return asn1PD_DemandeOrderConduite_Pion_ActiverObstacle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgAttenteOrdreConduite_ordres_conduite_element           */
/*                                                            */
/**************************************************************/

ASN1C_MsgAttenteOrdreConduite_ordres_conduite_element::ASN1C_MsgAttenteOrdreConduite_ordres_conduite_element (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAttenteOrdreConduite_ordres_conduite_element& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAttenteOrdreConduite_ordres_conduite_element (ASN1CTXT* ctxt_p, ASN1T_MsgAttenteOrdreConduite_ordres_conduite_element* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAttenteOrdreConduite_ordres_conduite_element: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* demande_order_conduite_attendre_se_poster */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_attendre_se_poster");

         stat = asn1PE_DemandeOrderConduite_AttendreSePoster (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_poursuivre */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_poursuivre");

         stat = asn1PE_DemandeOrderConduite_Poursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_decrocher */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_decrocher");

         stat = asn1PE_DemandeOrderConduite_Decrocher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_deboucher */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_deboucher");

         stat = asn1PE_DemandeOrderConduite_Deboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_pion_executer_tir */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_pion_executer_tir");

         stat = asn1PE_DemandeOrderConduite_Pion_ExecuterTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_pion_contourner */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_pion_contourner");

         stat = asn1PE_DemandeOrderConduite_Pion_Contourner (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_pion_activer_obstacle */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_pion_activer_obstacle");

         stat = asn1PE_DemandeOrderConduite_Pion_ActiverObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgAttenteOrdreConduite_ordres_conduite_element: end\n");
   return (stat);
}

int ASN1C_MsgAttenteOrdreConduite_ordres_conduite_element::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAttenteOrdreConduite_ordres_conduite_element (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAttenteOrdreConduite_ordres_conduite_element (ASN1CTXT* ctxt_p, ASN1T_MsgAttenteOrdreConduite_ordres_conduite_element* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgAttenteOrdreConduite_ordres_conduite_element: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* demande_order_conduite_attendre_se_poster */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_attendre_se_poster");

         stat = asn1PD_DemandeOrderConduite_AttendreSePoster (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_poursuivre */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_poursuivre");

         stat = asn1PD_DemandeOrderConduite_Poursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_decrocher */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_decrocher");

         stat = asn1PD_DemandeOrderConduite_Decrocher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_deboucher */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_deboucher");

         stat = asn1PD_DemandeOrderConduite_Deboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_pion_executer_tir */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_pion_executer_tir");

         stat = asn1PD_DemandeOrderConduite_Pion_ExecuterTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_pion_contourner */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_pion_contourner");

         stat = asn1PD_DemandeOrderConduite_Pion_Contourner (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* demande_order_conduite_pion_activer_obstacle */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.demande_order_conduite_pion_activer_obstacle");

         stat = asn1PD_DemandeOrderConduite_Pion_ActiverObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgAttenteOrdreConduite_ordres_conduite_element: end\n");

   return (stat);
}

int ASN1C_MsgAttenteOrdreConduite_ordres_conduite_element::Decode ()
{
   return asn1PD_MsgAttenteOrdreConduite_ordres_conduite_element (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfMsgAttenteOrdreConduite_ordres_conduite_element     */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element::ASN1C__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (ASN1CTXT* ctxt_p, ASN1T__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_MsgAttenteOrdreConduite_ordres_conduite_element (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element: end\n");
   return (stat);
}

int ASN1C__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (ASN1CTXT* ctxt_p, ASN1T__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_MsgAttenteOrdreConduite_ordres_conduite_element);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_MsgAttenteOrdreConduite_ordres_conduite_element (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element: end\n");

   return (stat);
}

int ASN1C__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element::Decode ()
{
   return asn1PD__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAttenteOrdreConduite                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgAttenteOrdreConduite::ASN1C_MsgAttenteOrdreConduite (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAttenteOrdreConduite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAttenteOrdreConduite (ASN1CTXT* ctxt_p, ASN1T_MsgAttenteOrdreConduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAttenteOrdreConduite: start\n");

   /* encode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PE_OID (ctxt_p, pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ordres_conduite */

   PU_PUSHNAME (ctxt_p, "ordres_conduite");

   stat = asn1PE__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (ctxt_p, &pvalue->ordres_conduite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAttenteOrdreConduite: end\n");
   return (stat);
}

int ASN1C_MsgAttenteOrdreConduite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAttenteOrdreConduite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAttenteOrdreConduite (ASN1CTXT* ctxt_p, ASN1T_MsgAttenteOrdreConduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAttenteOrdreConduite: start\n");

   /* decode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ordres_conduite */

   PU_PUSHNAME (ctxt_p, "ordres_conduite");

   stat = asn1PD__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (ctxt_p, &pvalue->ordres_conduite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAttenteOrdreConduite: end\n");

   return (stat);
}

int ASN1C_MsgAttenteOrdreConduite::Decode ()
{
   return asn1PD_MsgAttenteOrdreConduite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAnnuleAttenteOrdreConduite                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgAnnuleAttenteOrdreConduite::ASN1C_MsgAnnuleAttenteOrdreConduite (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAnnuleAttenteOrdreConduite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAnnuleAttenteOrdreConduite (ASN1CTXT* ctxt_p, ASN1T_MsgAnnuleAttenteOrdreConduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAnnuleAttenteOrdreConduite: start\n");

   /* encode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PE_OID (ctxt_p, pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAnnuleAttenteOrdreConduite: end\n");
   return (stat);
}

int ASN1C_MsgAnnuleAttenteOrdreConduite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAnnuleAttenteOrdreConduite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAnnuleAttenteOrdreConduite (ASN1CTXT* ctxt_p, ASN1T_MsgAnnuleAttenteOrdreConduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAnnuleAttenteOrdreConduite: start\n");

   /* decode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAnnuleAttenteOrdreConduite: end\n");

   return (stat);
}

int ASN1C_MsgAnnuleAttenteOrdreConduite::Decode ()
{
   return asn1PD_MsgAnnuleAttenteOrdreConduite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgOrderConduiteAck                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgOrderConduiteAck::ASN1C_MsgOrderConduiteAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgOrderConduiteAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgOrderConduiteAck (ASN1CTXT* ctxt_p, ASN1T_MsgOrderConduiteAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgOrderConduiteAck: start\n");

   /* encode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PE_OID (ctxt_p, pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumOrderErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgOrderConduiteAck: end\n");
   return (stat);
}

int ASN1C_MsgOrderConduiteAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgOrderConduiteAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgOrderConduiteAck (ASN1CTXT* ctxt_p, ASN1T_MsgOrderConduiteAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgOrderConduiteAck: start\n");

   /* decode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumOrderErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgOrderConduiteAck: end\n");

   return (stat);
}

int ASN1C_MsgOrderConduiteAck::Decode ()
{
   return asn1PD_MsgOrderConduiteAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_MettreTenueNBC                              */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_MettreTenueNBC::ASN1C_OrderConduite_MettreTenueNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_MettreTenueNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_MettreTenueNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_MettreTenueNBC: end\n");
   return (stat);
}

int ASN1C_OrderConduite_MettreTenueNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_MettreTenueNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_MettreTenueNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_MettreTenueNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_MettreTenueNBC: end\n");

   return (stat);
}

int ASN1C_OrderConduite_MettreTenueNBC::Decode ()
{
   return asn1PD_OrderConduite_MettreTenueNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_EnleverTenueNBC                             */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_EnleverTenueNBC::ASN1C_OrderConduite_EnleverTenueNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_EnleverTenueNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_EnleverTenueNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_EnleverTenueNBC: end\n");
   return (stat);
}

int ASN1C_OrderConduite_EnleverTenueNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_EnleverTenueNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_EnleverTenueNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_EnleverTenueNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_EnleverTenueNBC: end\n");

   return (stat);
}

int ASN1C_OrderConduite_EnleverTenueNBC::Decode ()
{
   return asn1PD_OrderConduite_EnleverTenueNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_PasserEnSilenceRadio                        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_PasserEnSilenceRadio::ASN1C_OrderConduite_PasserEnSilenceRadio (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_PasserEnSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_PasserEnSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_PasserEnSilenceRadio: end\n");
   return (stat);
}

int ASN1C_OrderConduite_PasserEnSilenceRadio::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_PasserEnSilenceRadio (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_PasserEnSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_PasserEnSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_PasserEnSilenceRadio: end\n");

   return (stat);
}

int ASN1C_OrderConduite_PasserEnSilenceRadio::Decode ()
{
   return asn1PD_OrderConduite_PasserEnSilenceRadio (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ArreterSilenceRadio                         */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ArreterSilenceRadio::ASN1C_OrderConduite_ArreterSilenceRadio (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_ArreterSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ArreterSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_ArreterSilenceRadio: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ArreterSilenceRadio::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ArreterSilenceRadio (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_ArreterSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ArreterSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_ArreterSilenceRadio: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ArreterSilenceRadio::Decode ()
{
   return asn1PD_OrderConduite_ArreterSilenceRadio (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_PasserEnSilenceRadar                        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_PasserEnSilenceRadar::ASN1C_OrderConduite_PasserEnSilenceRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_PasserEnSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_PasserEnSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_PasserEnSilenceRadar: end\n");
   return (stat);
}

int ASN1C_OrderConduite_PasserEnSilenceRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_PasserEnSilenceRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_PasserEnSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_PasserEnSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_PasserEnSilenceRadar: end\n");

   return (stat);
}

int ASN1C_OrderConduite_PasserEnSilenceRadar::Decode ()
{
   return asn1PD_OrderConduite_PasserEnSilenceRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ArreterSilenceRadar                         */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ArreterSilenceRadar::ASN1C_OrderConduite_ArreterSilenceRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_ArreterSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ArreterSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_ArreterSilenceRadar: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ArreterSilenceRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ArreterSilenceRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_ArreterSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ArreterSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_ArreterSilenceRadar: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ArreterSilenceRadar::Decode ()
{
   return asn1PD_OrderConduite_ArreterSilenceRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_RecupererTransporteurs                      */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_RecupererTransporteurs::ASN1C_OrderConduite_RecupererTransporteurs (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_RecupererTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_RecupererTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_RecupererTransporteurs: end\n");
   return (stat);
}

int ASN1C_OrderConduite_RecupererTransporteurs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_RecupererTransporteurs (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_RecupererTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_RecupererTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_RecupererTransporteurs: end\n");

   return (stat);
}

int ASN1C_OrderConduite_RecupererTransporteurs::Decode ()
{
   return asn1PD_OrderConduite_RecupererTransporteurs (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_AttendreSePoster                            */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_AttendreSePoster::ASN1C_OrderConduite_AttendreSePoster (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_AttendreSePoster (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_AttendreSePoster: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_AttendreSePoster: end\n");
   return (stat);
}

int ASN1C_OrderConduite_AttendreSePoster::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_AttendreSePoster (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_AttendreSePoster (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_AttendreSePoster: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_AttendreSePoster: end\n");

   return (stat);
}

int ASN1C_OrderConduite_AttendreSePoster::Decode ()
{
   return asn1PD_OrderConduite_AttendreSePoster (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Poursuivre                                  */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Poursuivre::ASN1C_OrderConduite_Poursuivre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Poursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Poursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Poursuivre: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Poursuivre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Poursuivre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Poursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Poursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Poursuivre: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Poursuivre::Decode ()
{
   return asn1PD_OrderConduite_Poursuivre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Interrompre                                 */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Interrompre::ASN1C_OrderConduite_Interrompre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Interrompre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Interrompre: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Interrompre: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Interrompre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Interrompre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Interrompre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Interrompre: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Interrompre: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Interrompre::Decode ()
{
   return asn1PD_OrderConduite_Interrompre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumAmbianceMission                                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumAmbianceMission::ASN1C_EnumAmbianceMission (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumAmbianceMission& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumAmbianceMission (ASN1CTXT* ctxt_p, ASN1T_EnumAmbianceMission value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumAmbianceMission: start\n");

   switch (value) {
      case EnumAmbianceMission::surete: ui = 0; break;
      case EnumAmbianceMission::vitesse: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumAmbianceMission: end\n");
   return (stat);
}

int ASN1C_EnumAmbianceMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumAmbianceMission (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumAmbianceMission (ASN1CTXT* ctxt_p, ASN1T_EnumAmbianceMission* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumAmbianceMission: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumAmbianceMission::surete; break;
      case 1: *pvalue = EnumAmbianceMission::vitesse; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumAmbianceMission: end\n");

   return (stat);
}

int ASN1C_EnumAmbianceMission::Decode ()
{
   return asn1PD_EnumAmbianceMission (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ChangerAmbiance                             */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ChangerAmbiance::ASN1C_OrderConduite_ChangerAmbiance (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ChangerAmbiance& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ChangerAmbiance (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerAmbiance value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ChangerAmbiance: start\n");

   stat = asn1PE_EnumAmbianceMission (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ChangerAmbiance: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ChangerAmbiance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ChangerAmbiance (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ChangerAmbiance (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerAmbiance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ChangerAmbiance: start\n");

   stat = asn1PD_EnumAmbianceMission (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ChangerAmbiance: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ChangerAmbiance::Decode ()
{
   return asn1PD_OrderConduite_ChangerAmbiance (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ChangerReglesEngagement                     */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ChangerReglesEngagement::ASN1C_OrderConduite_ChangerReglesEngagement (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ChangerReglesEngagement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ChangerReglesEngagement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerReglesEngagement value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ChangerReglesEngagement: start\n");

   stat = asn1PE_EnumRoe (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ChangerReglesEngagement: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ChangerReglesEngagement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ChangerReglesEngagement (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ChangerReglesEngagement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerReglesEngagement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ChangerReglesEngagement: start\n");

   stat = asn1PD_EnumRoe (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ChangerReglesEngagement: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ChangerReglesEngagement::Decode ()
{
   return asn1PD_OrderConduite_ChangerReglesEngagement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ChangerReglesEngagementPopulation           */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ChangerReglesEngagementPopulation::ASN1C_OrderConduite_ChangerReglesEngagementPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ChangerReglesEngagementPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ChangerReglesEngagementPopulation (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerReglesEngagementPopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ChangerReglesEngagementPopulation: start\n");

   stat = asn1PE_EnumRoePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ChangerReglesEngagementPopulation: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ChangerReglesEngagementPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ChangerReglesEngagementPopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ChangerReglesEngagementPopulation (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerReglesEngagementPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ChangerReglesEngagementPopulation: start\n");

   stat = asn1PD_EnumRoePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ChangerReglesEngagementPopulation: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ChangerReglesEngagementPopulation::Decode ()
{
   return asn1PD_OrderConduite_ChangerReglesEngagementPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Deboucher                                   */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Deboucher::ASN1C_OrderConduite_Deboucher (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Deboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Deboucher: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Deboucher: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Deboucher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Deboucher (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Deboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Deboucher: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Deboucher: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Deboucher::Decode ()
{
   return asn1PD_OrderConduite_Deboucher (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Decrocher                                   */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Decrocher::ASN1C_OrderConduite_Decrocher (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Decrocher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Decrocher: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Decrocher: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Decrocher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Decrocher (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Decrocher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Decrocher: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Decrocher: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Decrocher::Decode ()
{
   return asn1PD_OrderConduite_Decrocher (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_AcquerirObjectif                            */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_AcquerirObjectif::ASN1C_OrderConduite_AcquerirObjectif (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_AcquerirObjectif& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_AcquerirObjectif (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_AcquerirObjectif* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_AcquerirObjectif: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_AcquerirObjectif: end\n");
   return (stat);
}

int ASN1C_OrderConduite_AcquerirObjectif::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_AcquerirObjectif (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_AcquerirObjectif (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_AcquerirObjectif* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_AcquerirObjectif: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_AcquerirObjectif: end\n");

   return (stat);
}

int ASN1C_OrderConduite_AcquerirObjectif::Decode ()
{
   return asn1PD_OrderConduite_AcquerirObjectif (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Brouiller                                   */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Brouiller::ASN1C_OrderConduite_Brouiller (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Brouiller (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Brouiller: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Brouiller: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Brouiller::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Brouiller (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Brouiller (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Brouiller: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Brouiller: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Brouiller::Decode ()
{
   return asn1PD_OrderConduite_Brouiller (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ChangerPositionDebarquement                 */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ChangerPositionDebarquement::ASN1C_OrderConduite_ChangerPositionDebarquement (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ChangerPositionDebarquement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ChangerPositionDebarquement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerPositionDebarquement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ChangerPositionDebarquement: start\n");

   stat = asn1PE_Point (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ChangerPositionDebarquement: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ChangerPositionDebarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ChangerPositionDebarquement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ChangerPositionDebarquement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ChangerPositionDebarquement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ChangerPositionDebarquement: start\n");

   stat = asn1PD_Point (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ChangerPositionDebarquement: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ChangerPositionDebarquement::Decode ()
{
   return asn1PD_OrderConduite_ChangerPositionDebarquement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_ChangerDePosition                      */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_ChangerDePosition::ASN1C_OrderConduite_Pion_ChangerDePosition (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Pion_ChangerDePosition& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Pion_ChangerDePosition (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_ChangerDePosition* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_ChangerDePosition: start\n");

   stat = asn1PE_Point (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_Pion_ChangerDePosition: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_ChangerDePosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_ChangerDePosition (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_ChangerDePosition (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_ChangerDePosition* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_ChangerDePosition: start\n");

   stat = asn1PD_Point (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_Pion_ChangerDePosition: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_ChangerDePosition::Decode ()
{
   return asn1PD_OrderConduite_Pion_ChangerDePosition (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_Contourner                             */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_Contourner::ASN1C_OrderConduite_Pion_Contourner (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Pion_Contourner (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_Contourner: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Pion_Contourner: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_Contourner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_Contourner (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_Contourner (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_Contourner: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Pion_Contourner: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_Contourner::Decode ()
{
   return asn1PD_OrderConduite_Pion_Contourner (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_EnvoyerVehicule                        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_EnvoyerVehicule::ASN1C_OrderConduite_Pion_EnvoyerVehicule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Pion_EnvoyerVehicule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_EnvoyerVehicule: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Pion_EnvoyerVehicule: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_EnvoyerVehicule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_EnvoyerVehicule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_EnvoyerVehicule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_EnvoyerVehicule: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Pion_EnvoyerVehicule: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_EnvoyerVehicule::Decode ()
{
   return asn1PD_OrderConduite_Pion_EnvoyerVehicule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_ActiverObstacle                        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_ActiverObstacle::ASN1C_OrderConduite_Pion_ActiverObstacle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Pion_ActiverObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_ActiverObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Pion_ActiverObstacle: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_ActiverObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_ActiverObstacle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_ActiverObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_ActiverObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Pion_ActiverObstacle: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_ActiverObstacle::Decode ()
{
   return asn1PD_OrderConduite_Pion_ActiverObstacle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumTypeMunitionTirIndirect                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeMunitionTirIndirect::ASN1C_EnumTypeMunitionTirIndirect (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeMunitionTirIndirect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeMunitionTirIndirect (ASN1CTXT* ctxt_p, ASN1T_EnumTypeMunitionTirIndirect value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeMunitionTirIndirect: start\n");

   switch (value) {
      case EnumTypeMunitionTirIndirect::explosif: ui = 0; break;
      case EnumTypeMunitionTirIndirect::grenade: ui = 1; break;
      case EnumTypeMunitionTirIndirect::aced: ui = 2; break;
      case EnumTypeMunitionTirIndirect::fumigene: ui = 3; break;
      case EnumTypeMunitionTirIndirect::eclairant: ui = 4; break;
      case EnumTypeMunitionTirIndirect::mine: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeMunitionTirIndirect: end\n");
   return (stat);
}

int ASN1C_EnumTypeMunitionTirIndirect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeMunitionTirIndirect (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeMunitionTirIndirect (ASN1CTXT* ctxt_p, ASN1T_EnumTypeMunitionTirIndirect* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeMunitionTirIndirect: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeMunitionTirIndirect::explosif; break;
      case 1: *pvalue = EnumTypeMunitionTirIndirect::grenade; break;
      case 2: *pvalue = EnumTypeMunitionTirIndirect::aced; break;
      case 3: *pvalue = EnumTypeMunitionTirIndirect::fumigene; break;
      case 4: *pvalue = EnumTypeMunitionTirIndirect::eclairant; break;
      case 5: *pvalue = EnumTypeMunitionTirIndirect::mine; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeMunitionTirIndirect: end\n");

   return (stat);
}

int ASN1C_EnumTypeMunitionTirIndirect::Decode ()
{
   return asn1PD_EnumTypeMunitionTirIndirect (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_AppliquerFeux                          */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_AppliquerFeux::ASN1C_OrderConduite_Pion_AppliquerFeux (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Pion_AppliquerFeux& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Pion_AppliquerFeux (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_AppliquerFeux* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_AppliquerFeux: start\n");

   /* encode munitions */

   PU_PUSHNAME (ctxt_p, "munitions");

   stat = asn1PE_EnumTypeMunitionTirIndirect (ctxt_p, pvalue->munitions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_IT */

   PU_PUSHNAME (ctxt_p, "nb_IT");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_IT);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_Point (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Pion_AppliquerFeux: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_AppliquerFeux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_AppliquerFeux (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_AppliquerFeux (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_AppliquerFeux* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_AppliquerFeux: start\n");

   /* decode munitions */

   PU_PUSHNAME (ctxt_p, "munitions");

   stat = asn1PD_EnumTypeMunitionTirIndirect (ctxt_p, &pvalue->munitions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_IT */

   PU_PUSHNAME (ctxt_p, "nb_IT");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_IT);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_Point (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Pion_AppliquerFeux: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_AppliquerFeux::Decode ()
{
   return asn1PD_OrderConduite_Pion_AppliquerFeux (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_ExecuterTir                            */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_ExecuterTir::ASN1C_OrderConduite_Pion_ExecuterTir (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Pion_ExecuterTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_ExecuterTir: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Pion_ExecuterTir: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_ExecuterTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_ExecuterTir (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_ExecuterTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_ExecuterTir: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Pion_ExecuterTir: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_ExecuterTir::Decode ()
{
   return asn1PD_OrderConduite_Pion_ExecuterTir (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_Emettre                                */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_Emettre::ASN1C_OrderConduite_Pion_Emettre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Pion_Emettre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_Emettre: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Pion_Emettre: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_Emettre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_Emettre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_Emettre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_Emettre: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Pion_Emettre: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_Emettre::Decode ()
{
   return asn1PD_OrderConduite_Pion_Emettre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_StopperEmission                        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_StopperEmission::ASN1C_OrderConduite_Pion_StopperEmission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_OrderConduite_Pion_StopperEmission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_StopperEmission: start\n");

   /* NULL */

   rtdiag ("asn1PE_OrderConduite_Pion_StopperEmission: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_StopperEmission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_StopperEmission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_StopperEmission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_StopperEmission: start\n");

   /* NULL */

   rtdiag ("asn1PD_OrderConduite_Pion_StopperEmission: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_StopperEmission::Decode ()
{
   return asn1PD_OrderConduite_Pion_StopperEmission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_RenforcerEnVSRAM                       */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_RenforcerEnVSRAM::ASN1C_OrderConduite_Pion_RenforcerEnVSRAM (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Pion_RenforcerEnVSRAM& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Pion_RenforcerEnVSRAM (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_RenforcerEnVSRAM* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_RenforcerEnVSRAM: start\n");

   /* encode pion_a_renforcer */

   PU_PUSHNAME (ctxt_p, "pion_a_renforcer");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_a_renforcer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_ambulances */

   PU_PUSHNAME (ctxt_p, "nbr_ambulances");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_ambulances);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Pion_RenforcerEnVSRAM: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_RenforcerEnVSRAM::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_RenforcerEnVSRAM (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_RenforcerEnVSRAM (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_RenforcerEnVSRAM* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_RenforcerEnVSRAM: start\n");

   /* decode pion_a_renforcer */

   PU_PUSHNAME (ctxt_p, "pion_a_renforcer");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_a_renforcer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_ambulances */

   PU_PUSHNAME (ctxt_p, "nbr_ambulances");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_ambulances);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Pion_RenforcerEnVSRAM: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_RenforcerEnVSRAM::Decode ()
{
   return asn1PD_OrderConduite_Pion_RenforcerEnVSRAM (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_TransfererVSRAM                        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_TransfererVSRAM::ASN1C_OrderConduite_Pion_TransfererVSRAM (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Pion_TransfererVSRAM& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Pion_TransfererVSRAM (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_TransfererVSRAM* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_TransfererVSRAM: start\n");

   /* encode pion_renforce */

   PU_PUSHNAME (ctxt_p, "pion_renforce");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pion_a_renforcer */

   PU_PUSHNAME (ctxt_p, "pion_a_renforcer");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_a_renforcer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_ambulances */

   PU_PUSHNAME (ctxt_p, "nbr_ambulances");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_ambulances);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Pion_TransfererVSRAM: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_TransfererVSRAM::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_TransfererVSRAM (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_TransfererVSRAM (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_TransfererVSRAM* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_TransfererVSRAM: start\n");

   /* decode pion_renforce */

   PU_PUSHNAME (ctxt_p, "pion_renforce");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pion_a_renforcer */

   PU_PUSHNAME (ctxt_p, "pion_a_renforcer");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_a_renforcer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_ambulances */

   PU_PUSHNAME (ctxt_p, "nbr_ambulances");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_ambulances);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Pion_TransfererVSRAM: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_TransfererVSRAM::Decode ()
{
   return asn1PD_OrderConduite_Pion_TransfererVSRAM (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Pion_ReprendreAuxOrdresVSRAM                */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Pion_ReprendreAuxOrdresVSRAM::ASN1C_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Pion_ReprendreAuxOrdresVSRAM& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_ReprendreAuxOrdresVSRAM* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Pion_ReprendreAuxOrdresVSRAM: start\n");

   /* encode pion_renforce */

   PU_PUSHNAME (ctxt_p, "pion_renforce");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_ambulances */

   PU_PUSHNAME (ctxt_p, "nbr_ambulances");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_ambulances);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Pion_ReprendreAuxOrdresVSRAM: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Pion_ReprendreAuxOrdresVSRAM::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Pion_ReprendreAuxOrdresVSRAM* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Pion_ReprendreAuxOrdresVSRAM: start\n");

   /* decode pion_renforce */

   PU_PUSHNAME (ctxt_p, "pion_renforce");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_ambulances */

   PU_PUSHNAME (ctxt_p, "nbr_ambulances");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_ambulances);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Pion_ReprendreAuxOrdresVSRAM: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Pion_ReprendreAuxOrdresVSRAM::Decode ()
{
   return asn1PD_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ModifierTempsBordeeMaintenance              */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ModifierTempsBordeeMaintenance::ASN1C_OrderConduite_ModifierTempsBordeeMaintenance (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ModifierTempsBordeeMaintenance& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ModifierTempsBordeeMaintenance (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierTempsBordeeMaintenance value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ModifierTempsBordeeMaintenance: start\n");

   stat = asn1PE_EnumTempsBordee (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ModifierTempsBordeeMaintenance: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ModifierTempsBordeeMaintenance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ModifierTempsBordeeMaintenance (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ModifierTempsBordeeMaintenance (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierTempsBordeeMaintenance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ModifierTempsBordeeMaintenance: start\n");

   stat = asn1PD_EnumTempsBordee (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ModifierTempsBordeeMaintenance: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ModifierTempsBordeeMaintenance::Decode ()
{
   return asn1PD_OrderConduite_ModifierTempsBordeeMaintenance (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ModifierTempsBordeeSante                    */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ModifierTempsBordeeSante::ASN1C_OrderConduite_ModifierTempsBordeeSante (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ModifierTempsBordeeSante& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ModifierTempsBordeeSante (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierTempsBordeeSante value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ModifierTempsBordeeSante: start\n");

   stat = asn1PE_EnumTempsBordee (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ModifierTempsBordeeSante: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ModifierTempsBordeeSante::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ModifierTempsBordeeSante (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ModifierTempsBordeeSante (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierTempsBordeeSante* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ModifierTempsBordeeSante: start\n");

   stat = asn1PD_EnumTempsBordee (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ModifierTempsBordeeSante: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ModifierTempsBordeeSante::Decode ()
{
   return asn1PD_OrderConduite_ModifierTempsBordeeSante (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ModifierPrioritesReparations                */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ModifierPrioritesReparations::ASN1C_OrderConduite_ModifierPrioritesReparations (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ModifierPrioritesReparations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ModifierPrioritesReparations (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesReparations* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesReparations: start\n");

   stat = asn1PE_MaintenancePriorites (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesReparations: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesReparations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ModifierPrioritesReparations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ModifierPrioritesReparations (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesReparations* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesReparations: start\n");

   stat = asn1PD_MaintenancePriorites (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesReparations: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesReparations::Decode ()
{
   return asn1PD_OrderConduite_ModifierPrioritesReparations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ModifierPrioritesBlesses                    */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ModifierPrioritesBlesses::ASN1C_OrderConduite_ModifierPrioritesBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ModifierPrioritesBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ModifierPrioritesBlesses (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesBlesses: start\n");

   stat = asn1PE_SantePriorites (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesBlesses: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ModifierPrioritesBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ModifierPrioritesBlesses (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesBlesses: start\n");

   stat = asn1PD_SantePriorites (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesBlesses: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesBlesses::Decode ()
{
   return asn1PD_OrderConduite_ModifierPrioritesBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ModifierPrioritesTactiquesReparations       */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ModifierPrioritesTactiquesReparations::ASN1C_OrderConduite_ModifierPrioritesTactiquesReparations (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ModifierPrioritesTactiquesReparations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ModifierPrioritesTactiquesReparations (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesTactiquesReparations* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesTactiquesReparations: start\n");

   stat = asn1PE_ListAutomate (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesTactiquesReparations: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesTactiquesReparations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ModifierPrioritesTactiquesReparations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ModifierPrioritesTactiquesReparations (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesTactiquesReparations* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesTactiquesReparations: start\n");

   stat = asn1PD_ListAutomate (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesTactiquesReparations: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesTactiquesReparations::Decode ()
{
   return asn1PD_OrderConduite_ModifierPrioritesTactiquesReparations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_ModifierPrioritesTactiquesBlesses           */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_ModifierPrioritesTactiquesBlesses::ASN1C_OrderConduite_ModifierPrioritesTactiquesBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_ModifierPrioritesTactiquesBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_ModifierPrioritesTactiquesBlesses (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesTactiquesBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesTactiquesBlesses: start\n");

   stat = asn1PE_ListAutomate (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_ModifierPrioritesTactiquesBlesses: end\n");
   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesTactiquesBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_ModifierPrioritesTactiquesBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_ModifierPrioritesTactiquesBlesses (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_ModifierPrioritesTactiquesBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesTactiquesBlesses: start\n");

   stat = asn1PD_ListAutomate (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_ModifierPrioritesTactiquesBlesses: end\n");

   return (stat);
}

int ASN1C_OrderConduite_ModifierPrioritesTactiquesBlesses::Decode ()
{
   return asn1PD_OrderConduite_ModifierPrioritesTactiquesBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_RealiserVariantement               */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_RealiserVariantement::ASN1C_OrderConduite_Automate_RealiserVariantement (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_RealiserVariantement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_RealiserVariantement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_RealiserVariantement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_RealiserVariantement: start\n");

   /* encode site_franchissement_original */

   PU_PUSHNAME (ctxt_p, "site_franchissement_original");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement_original);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode site_franchissement_variante */

   PU_PUSHNAME (ctxt_p, "site_franchissement_variante");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement_variante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Automate_RealiserVariantement: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_RealiserVariantement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_RealiserVariantement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_RealiserVariantement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_RealiserVariantement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_RealiserVariantement: start\n");

   /* decode site_franchissement_original */

   PU_PUSHNAME (ctxt_p, "site_franchissement_original");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement_original);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode site_franchissement_variante */

   PU_PUSHNAME (ctxt_p, "site_franchissement_variante");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement_variante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Automate_RealiserVariantement: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_RealiserVariantement::Decode ()
{
   return asn1PD_OrderConduite_Automate_RealiserVariantement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_DesequiperSiteFranchissement       */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_DesequiperSiteFranchissement::ASN1C_OrderConduite_Automate_DesequiperSiteFranchissement (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_DesequiperSiteFranchissement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_DesequiperSiteFranchissement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_DesequiperSiteFranchissement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_DesequiperSiteFranchissement: start\n");

   /* encode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Automate_DesequiperSiteFranchissement: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_DesequiperSiteFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_DesequiperSiteFranchissement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_DesequiperSiteFranchissement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_DesequiperSiteFranchissement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_DesequiperSiteFranchissement: start\n");

   /* decode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Automate_DesequiperSiteFranchissement: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_DesequiperSiteFranchissement::Decode ()
{
   return asn1PD_OrderConduite_Automate_DesequiperSiteFranchissement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumActionReagirFaceAEni                                  */
/*                                                            */
/**************************************************************/

ASN1C_EnumActionReagirFaceAEni::ASN1C_EnumActionReagirFaceAEni (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumActionReagirFaceAEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumActionReagirFaceAEni (ASN1CTXT* ctxt_p, ASN1T_EnumActionReagirFaceAEni value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumActionReagirFaceAEni: start\n");

   switch (value) {
      case EnumActionReagirFaceAEni::detruire_moyens: ui = 0; break;
      case EnumActionReagirFaceAEni::defendre: ui = 1; break;
      case EnumActionReagirFaceAEni::demonter: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumActionReagirFaceAEni: end\n");
   return (stat);
}

int ASN1C_EnumActionReagirFaceAEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumActionReagirFaceAEni (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumActionReagirFaceAEni (ASN1CTXT* ctxt_p, ASN1T_EnumActionReagirFaceAEni* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumActionReagirFaceAEni: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumActionReagirFaceAEni::detruire_moyens; break;
      case 1: *pvalue = EnumActionReagirFaceAEni::defendre; break;
      case 2: *pvalue = EnumActionReagirFaceAEni::demonter; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumActionReagirFaceAEni: end\n");

   return (stat);
}

int ASN1C_EnumActionReagirFaceAEni::Decode ()
{
   return asn1PD_EnumActionReagirFaceAEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_ReagirFaceAEni                     */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_ReagirFaceAEni::ASN1C_OrderConduite_Automate_ReagirFaceAEni (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_ReagirFaceAEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_ReagirFaceAEni (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_ReagirFaceAEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_ReagirFaceAEni: start\n");

   /* encode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode action */

   PU_PUSHNAME (ctxt_p, "action");

   stat = asn1PE_EnumActionReagirFaceAEni (ctxt_p, pvalue->action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Automate_ReagirFaceAEni: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_ReagirFaceAEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_ReagirFaceAEni (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_ReagirFaceAEni (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_ReagirFaceAEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_ReagirFaceAEni: start\n");

   /* decode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode action */

   PU_PUSHNAME (ctxt_p, "action");

   stat = asn1PD_EnumActionReagirFaceAEni (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Automate_ReagirFaceAEni: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_ReagirFaceAEni::Decode ()
{
   return asn1PD_OrderConduite_Automate_ReagirFaceAEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_AffecterPionAObstacle              */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_AffecterPionAObstacle::ASN1C_OrderConduite_Automate_AffecterPionAObstacle (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_AffecterPionAObstacle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_AffecterPionAObstacle (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_AffecterPionAObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_AffecterPionAObstacle: start\n");

   /* encode pion */

   PU_PUSHNAME (ctxt_p, "pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_MissionGenObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Automate_AffecterPionAObstacle: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_AffecterPionAObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_AffecterPionAObstacle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_AffecterPionAObstacle (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_AffecterPionAObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_AffecterPionAObstacle: start\n");

   /* decode pion */

   PU_PUSHNAME (ctxt_p, "pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_MissionGenObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Automate_AffecterPionAObstacle: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_AffecterPionAObstacle::Decode ()
{
   return asn1PD_OrderConduite_Automate_AffecterPionAObstacle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_ReconnaitreZoneImplantation        */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_ReconnaitreZoneImplantation::ASN1C_OrderConduite_Automate_ReconnaitreZoneImplantation (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_ReconnaitreZoneImplantation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_ReconnaitreZoneImplantation (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_ReconnaitreZoneImplantation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_ReconnaitreZoneImplantation: start\n");

   stat = asn1PE_Point (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_Automate_ReconnaitreZoneImplantation: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_ReconnaitreZoneImplantation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_ReconnaitreZoneImplantation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_ReconnaitreZoneImplantation (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_ReconnaitreZoneImplantation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_ReconnaitreZoneImplantation: start\n");

   stat = asn1PD_Point (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_Automate_ReconnaitreZoneImplantation: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_ReconnaitreZoneImplantation::Decode ()
{
   return asn1PD_OrderConduite_Automate_ReconnaitreZoneImplantation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumTC2GererMaterielAvantDeplacement                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumTC2GererMaterielAvantDeplacement::ASN1C_EnumTC2GererMaterielAvantDeplacement (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTC2GererMaterielAvantDeplacement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTC2GererMaterielAvantDeplacement (ASN1CTXT* ctxt_p, ASN1T_EnumTC2GererMaterielAvantDeplacement value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTC2GererMaterielAvantDeplacement: start\n");

   switch (value) {
      case EnumTC2GererMaterielAvantDeplacement::deborder_materiels_vers_bld: ui = 0; break;
      case EnumTC2GererMaterielAvantDeplacement::detruire_materiels_en_reparation: ui = 1; break;
      case EnumTC2GererMaterielAvantDeplacement::reparer_materiels_sur_place: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTC2GererMaterielAvantDeplacement: end\n");
   return (stat);
}

int ASN1C_EnumTC2GererMaterielAvantDeplacement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTC2GererMaterielAvantDeplacement (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTC2GererMaterielAvantDeplacement (ASN1CTXT* ctxt_p, ASN1T_EnumTC2GererMaterielAvantDeplacement* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTC2GererMaterielAvantDeplacement: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTC2GererMaterielAvantDeplacement::deborder_materiels_vers_bld; break;
      case 1: *pvalue = EnumTC2GererMaterielAvantDeplacement::detruire_materiels_en_reparation; break;
      case 2: *pvalue = EnumTC2GererMaterielAvantDeplacement::reparer_materiels_sur_place; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTC2GererMaterielAvantDeplacement: end\n");

   return (stat);
}

int ASN1C_EnumTC2GererMaterielAvantDeplacement::Decode ()
{
   return asn1PD_EnumTC2GererMaterielAvantDeplacement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_TC2_GererMaterielAvantDeplacement  */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement::ASN1C_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement: start\n");

   stat = asn1PE_EnumTC2GererMaterielAvantDeplacement (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement: start\n");

   stat = asn1PD_EnumTC2GererMaterielAvantDeplacement (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement::Decode ()
{
   return asn1PD_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_ActiverObstacle                    */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_ActiverObstacle::ASN1C_OrderConduite_Automate_ActiverObstacle (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_ActiverObstacle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_ActiverObstacle (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_ActiverObstacle value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_ActiverObstacle: start\n");

   stat = asn1PE_KnowledgeObject (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_Automate_ActiverObstacle: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_ActiverObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_ActiverObstacle (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_ActiverObstacle (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_ActiverObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_ActiverObstacle: start\n");

   stat = asn1PD_KnowledgeObject (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_Automate_ActiverObstacle: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_ActiverObstacle::Decode ()
{
   return asn1PD_OrderConduite_Automate_ActiverObstacle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Automate_TransfererRenforts                 */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Automate_TransfererRenforts::ASN1C_OrderConduite_Automate_TransfererRenforts (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Automate_TransfererRenforts& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Automate_TransfererRenforts (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_TransfererRenforts* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Automate_TransfererRenforts: start\n");

   /* encode pion_a_transferer */

   PU_PUSHNAME (ctxt_p, "pion_a_transferer");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_a_transferer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automate_a_renforcer */

   PU_PUSHNAME (ctxt_p, "automate_a_renforcer");

   stat = asn1PE_Automate (ctxt_p, pvalue->automate_a_renforcer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_OrderConduite_Automate_TransfererRenforts: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Automate_TransfererRenforts::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Automate_TransfererRenforts (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Automate_TransfererRenforts (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Automate_TransfererRenforts* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Automate_TransfererRenforts: start\n");

   /* decode pion_a_transferer */

   PU_PUSHNAME (ctxt_p, "pion_a_transferer");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_a_transferer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automate_a_renforcer */

   PU_PUSHNAME (ctxt_p, "automate_a_renforcer");

   stat = asn1PD_Automate (ctxt_p, &pvalue->automate_a_renforcer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_OrderConduite_Automate_TransfererRenforts: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Automate_TransfererRenforts::Decode ()
{
   return asn1PD_OrderConduite_Automate_TransfererRenforts (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OrderConduite_Population_ChangerAttitude                  */
/*                                                            */
/**************************************************************/

ASN1C_OrderConduite_Population_ChangerAttitude::ASN1C_OrderConduite_Population_ChangerAttitude (
   ASN1MessageBuffer& msgBuf, ASN1T_OrderConduite_Population_ChangerAttitude& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OrderConduite_Population_ChangerAttitude (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Population_ChangerAttitude value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OrderConduite_Population_ChangerAttitude: start\n");

   stat = asn1PE_EnumPopulationAttitude (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OrderConduite_Population_ChangerAttitude: end\n");
   return (stat);
}

int ASN1C_OrderConduite_Population_ChangerAttitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OrderConduite_Population_ChangerAttitude (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OrderConduite_Population_ChangerAttitude (ASN1CTXT* ctxt_p, ASN1T_OrderConduite_Population_ChangerAttitude* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OrderConduite_Population_ChangerAttitude: start\n");

   stat = asn1PD_EnumPopulationAttitude (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OrderConduite_Population_ChangerAttitude: end\n");

   return (stat);
}

int ASN1C_OrderConduite_Population_ChangerAttitude::Decode ()
{
   return asn1PD_OrderConduite_Population_ChangerAttitude (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgOrderConduite_order_conduite                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgOrderConduite_order_conduite::ASN1C_MsgOrderConduite_order_conduite (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgOrderConduite_order_conduite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgOrderConduite_order_conduite (ASN1CTXT* ctxt_p, ASN1T_MsgOrderConduite_order_conduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgOrderConduite_order_conduite: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 43);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* order_conduite_mettre_tenue_nbc */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_mettre_tenue_nbc");

         stat = asn1PE_OrderConduite_MettreTenueNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_enlever_tenue_nbc */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_enlever_tenue_nbc");

         stat = asn1PE_OrderConduite_EnleverTenueNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_passer_en_silence_radio */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_passer_en_silence_radio");

         stat = asn1PE_OrderConduite_PasserEnSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_arreter_silence_radio */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_arreter_silence_radio");

         stat = asn1PE_OrderConduite_ArreterSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_passer_en_silence_radar */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_passer_en_silence_radar");

         stat = asn1PE_OrderConduite_PasserEnSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_arreter_silence_radar */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_arreter_silence_radar");

         stat = asn1PE_OrderConduite_ArreterSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_recuperer_transporteurs */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_recuperer_transporteurs");

         stat = asn1PE_OrderConduite_RecupererTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_attendre_se_poster */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_attendre_se_poster");

         stat = asn1PE_OrderConduite_AttendreSePoster (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_poursuivre */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_poursuivre");

         stat = asn1PE_OrderConduite_Poursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_interrompre */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_interrompre");

         stat = asn1PE_OrderConduite_Interrompre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_ambiance */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_ambiance");

         stat = asn1PE_OrderConduite_ChangerAmbiance (ctxt_p, pvalue->u.order_conduite_changer_ambiance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_regles_engagement */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_regles_engagement");

         stat = asn1PE_OrderConduite_ChangerReglesEngagement (ctxt_p, pvalue->u.order_conduite_changer_regles_engagement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_regles_engagement_population */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_regles_engagement_population");

         stat = asn1PE_OrderConduite_ChangerReglesEngagementPopulation (ctxt_p, pvalue->u.order_conduite_changer_regles_engagement_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_deboucher */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_deboucher");

         stat = asn1PE_OrderConduite_Deboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_decrocher */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_decrocher");

         stat = asn1PE_OrderConduite_Decrocher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_acquerir_objectif */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_acquerir_objectif");

         stat = asn1PE_OrderConduite_AcquerirObjectif (ctxt_p, pvalue->u.order_conduite_acquerir_objectif);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_brouiller */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_brouiller");

         stat = asn1PE_OrderConduite_Brouiller (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_position_debarquement */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_position_debarquement");

         stat = asn1PE_OrderConduite_ChangerPositionDebarquement (ctxt_p, pvalue->u.order_conduite_changer_position_debarquement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_changer_de_position */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_changer_de_position");

         stat = asn1PE_OrderConduite_Pion_ChangerDePosition (ctxt_p, pvalue->u.order_conduite_pion_changer_de_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_contourner */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_contourner");

         stat = asn1PE_OrderConduite_Pion_Contourner (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_envoyer_vehicule */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_envoyer_vehicule");

         stat = asn1PE_OrderConduite_Pion_EnvoyerVehicule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_activer_obstacle */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_activer_obstacle");

         stat = asn1PE_OrderConduite_Pion_ActiverObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_appliquer_feux */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_appliquer_feux");

         stat = asn1PE_OrderConduite_Pion_AppliquerFeux (ctxt_p, pvalue->u.order_conduite_pion_appliquer_feux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_executer_tir */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_executer_tir");

         stat = asn1PE_OrderConduite_Pion_ExecuterTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_emettre */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_emettre");

         stat = asn1PE_OrderConduite_Pion_Emettre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_stopper_emission */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_stopper_emission");

         stat = asn1PE_OrderConduite_Pion_StopperEmission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_renforcer_en_vs_ram */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_renforcer_en_vs_ram");

         stat = asn1PE_OrderConduite_Pion_RenforcerEnVSRAM (ctxt_p, pvalue->u.order_conduite_pion_renforcer_en_vs_ram);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_transferer_vs_ram */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_transferer_vs_ram");

         stat = asn1PE_OrderConduite_Pion_TransfererVSRAM (ctxt_p, pvalue->u.order_conduite_pion_transferer_vs_ram);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_reprendre_aux_ordres_vs_ram */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_reprendre_aux_ordres_vs_ram");

         stat = asn1PE_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (ctxt_p, pvalue->u.order_conduite_pion_reprendre_aux_ordres_vs_ram);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_temps_bordee_maintenance */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_temps_bordee_maintenance");

         stat = asn1PE_OrderConduite_ModifierTempsBordeeMaintenance (ctxt_p, pvalue->u.order_conduite_modifier_temps_bordee_maintenance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_temps_bordee_sante */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_temps_bordee_sante");

         stat = asn1PE_OrderConduite_ModifierTempsBordeeSante (ctxt_p, pvalue->u.order_conduite_modifier_temps_bordee_sante);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_reparations */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_reparations");

         stat = asn1PE_OrderConduite_ModifierPrioritesReparations (ctxt_p, pvalue->u.order_conduite_modifier_priorites_reparations);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_blesses */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_blesses");

         stat = asn1PE_OrderConduite_ModifierPrioritesBlesses (ctxt_p, pvalue->u.order_conduite_modifier_priorites_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_tactiques_reparations */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_tactiques_reparations");

         stat = asn1PE_OrderConduite_ModifierPrioritesTactiquesReparations (ctxt_p, pvalue->u.order_conduite_modifier_priorites_tactiques_reparations);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_tactiques_blesses */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_tactiques_blesses");

         stat = asn1PE_OrderConduite_ModifierPrioritesTactiquesBlesses (ctxt_p, pvalue->u.order_conduite_modifier_priorites_tactiques_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_realiser_variantement */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_realiser_variantement");

         stat = asn1PE_OrderConduite_Automate_RealiserVariantement (ctxt_p, pvalue->u.order_conduite_automate_realiser_variantement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_desequiper_site_franchissement */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_desequiper_site_franchissement");

         stat = asn1PE_OrderConduite_Automate_DesequiperSiteFranchissement (ctxt_p, pvalue->u.order_conduite_automate_desequiper_site_franchissement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_reagir_face_a_eni */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_reagir_face_a_eni");

         stat = asn1PE_OrderConduite_Automate_ReagirFaceAEni (ctxt_p, pvalue->u.order_conduite_automate_reagir_face_a_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_affecter_pion_a_obstacle */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_affecter_pion_a_obstacle");

         stat = asn1PE_OrderConduite_Automate_AffecterPionAObstacle (ctxt_p, pvalue->u.order_conduite_automate_affecter_pion_a_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_reconnaitre_zone_implantation */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_reconnaitre_zone_implantation");

         stat = asn1PE_OrderConduite_Automate_ReconnaitreZoneImplantation (ctxt_p, pvalue->u.order_conduite_automate_reconnaitre_zone_implantation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_tc2_gerer_materiel_avant_deplacement */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_tc2_gerer_materiel_avant_deplacement");

         stat = asn1PE_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (ctxt_p, pvalue->u.order_conduite_automate_tc2_gerer_materiel_avant_deplacement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_activer_obstacle */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_activer_obstacle");

         stat = asn1PE_OrderConduite_Automate_ActiverObstacle (ctxt_p, pvalue->u.order_conduite_automate_activer_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_transferer_renforts */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_transferer_renforts");

         stat = asn1PE_OrderConduite_Automate_TransfererRenforts (ctxt_p, pvalue->u.order_conduite_automate_transferer_renforts);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_population_changer_attitude */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_population_changer_attitude");

         stat = asn1PE_OrderConduite_Population_ChangerAttitude (ctxt_p, pvalue->u.order_conduite_population_changer_attitude);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgOrderConduite_order_conduite: end\n");
   return (stat);
}

int ASN1C_MsgOrderConduite_order_conduite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgOrderConduite_order_conduite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgOrderConduite_order_conduite (ASN1CTXT* ctxt_p, ASN1T_MsgOrderConduite_order_conduite* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgOrderConduite_order_conduite: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 43);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* order_conduite_mettre_tenue_nbc */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_mettre_tenue_nbc");

         stat = asn1PD_OrderConduite_MettreTenueNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_enlever_tenue_nbc */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_enlever_tenue_nbc");

         stat = asn1PD_OrderConduite_EnleverTenueNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_passer_en_silence_radio */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_passer_en_silence_radio");

         stat = asn1PD_OrderConduite_PasserEnSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_arreter_silence_radio */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_arreter_silence_radio");

         stat = asn1PD_OrderConduite_ArreterSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_passer_en_silence_radar */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_passer_en_silence_radar");

         stat = asn1PD_OrderConduite_PasserEnSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_arreter_silence_radar */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_arreter_silence_radar");

         stat = asn1PD_OrderConduite_ArreterSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_recuperer_transporteurs */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_recuperer_transporteurs");

         stat = asn1PD_OrderConduite_RecupererTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_attendre_se_poster */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_attendre_se_poster");

         stat = asn1PD_OrderConduite_AttendreSePoster (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_poursuivre */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_poursuivre");

         stat = asn1PD_OrderConduite_Poursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_interrompre */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_interrompre");

         stat = asn1PD_OrderConduite_Interrompre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_ambiance */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_ambiance");

         stat = asn1PD_OrderConduite_ChangerAmbiance (ctxt_p, &pvalue->u.order_conduite_changer_ambiance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_regles_engagement */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_regles_engagement");

         stat = asn1PD_OrderConduite_ChangerReglesEngagement (ctxt_p, &pvalue->u.order_conduite_changer_regles_engagement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_regles_engagement_population */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_regles_engagement_population");

         stat = asn1PD_OrderConduite_ChangerReglesEngagementPopulation (ctxt_p, &pvalue->u.order_conduite_changer_regles_engagement_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_deboucher */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_deboucher");

         stat = asn1PD_OrderConduite_Deboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_decrocher */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_decrocher");

         stat = asn1PD_OrderConduite_Decrocher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_acquerir_objectif */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_acquerir_objectif");

         pvalue->u.order_conduite_acquerir_objectif = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_AcquerirObjectif);
         if (pvalue->u.order_conduite_acquerir_objectif == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_AcquerirObjectif (ctxt_p, pvalue->u.order_conduite_acquerir_objectif);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_brouiller */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_brouiller");

         stat = asn1PD_OrderConduite_Brouiller (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_changer_position_debarquement */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_changer_position_debarquement");

         pvalue->u.order_conduite_changer_position_debarquement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_ChangerPositionDebarquement);
         if (pvalue->u.order_conduite_changer_position_debarquement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_ChangerPositionDebarquement (ctxt_p, pvalue->u.order_conduite_changer_position_debarquement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_changer_de_position */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_changer_de_position");

         pvalue->u.order_conduite_pion_changer_de_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Pion_ChangerDePosition);
         if (pvalue->u.order_conduite_pion_changer_de_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Pion_ChangerDePosition (ctxt_p, pvalue->u.order_conduite_pion_changer_de_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_contourner */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_contourner");

         stat = asn1PD_OrderConduite_Pion_Contourner (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_envoyer_vehicule */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_envoyer_vehicule");

         stat = asn1PD_OrderConduite_Pion_EnvoyerVehicule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_activer_obstacle */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_activer_obstacle");

         stat = asn1PD_OrderConduite_Pion_ActiverObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_appliquer_feux */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_appliquer_feux");

         pvalue->u.order_conduite_pion_appliquer_feux = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Pion_AppliquerFeux);
         if (pvalue->u.order_conduite_pion_appliquer_feux == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Pion_AppliquerFeux (ctxt_p, pvalue->u.order_conduite_pion_appliquer_feux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_executer_tir */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_executer_tir");

         stat = asn1PD_OrderConduite_Pion_ExecuterTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_emettre */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_emettre");

         stat = asn1PD_OrderConduite_Pion_Emettre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_stopper_emission */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_stopper_emission");

         stat = asn1PD_OrderConduite_Pion_StopperEmission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_renforcer_en_vs_ram */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_renforcer_en_vs_ram");

         pvalue->u.order_conduite_pion_renforcer_en_vs_ram = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Pion_RenforcerEnVSRAM);
         if (pvalue->u.order_conduite_pion_renforcer_en_vs_ram == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Pion_RenforcerEnVSRAM (ctxt_p, pvalue->u.order_conduite_pion_renforcer_en_vs_ram);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_transferer_vs_ram */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_transferer_vs_ram");

         pvalue->u.order_conduite_pion_transferer_vs_ram = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Pion_TransfererVSRAM);
         if (pvalue->u.order_conduite_pion_transferer_vs_ram == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Pion_TransfererVSRAM (ctxt_p, pvalue->u.order_conduite_pion_transferer_vs_ram);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_pion_reprendre_aux_ordres_vs_ram */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_pion_reprendre_aux_ordres_vs_ram");

         pvalue->u.order_conduite_pion_reprendre_aux_ordres_vs_ram = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Pion_ReprendreAuxOrdresVSRAM);
         if (pvalue->u.order_conduite_pion_reprendre_aux_ordres_vs_ram == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (ctxt_p, pvalue->u.order_conduite_pion_reprendre_aux_ordres_vs_ram);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_temps_bordee_maintenance */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_temps_bordee_maintenance");

         stat = asn1PD_OrderConduite_ModifierTempsBordeeMaintenance (ctxt_p, &pvalue->u.order_conduite_modifier_temps_bordee_maintenance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_temps_bordee_sante */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_temps_bordee_sante");

         stat = asn1PD_OrderConduite_ModifierTempsBordeeSante (ctxt_p, &pvalue->u.order_conduite_modifier_temps_bordee_sante);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_reparations */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_reparations");

         pvalue->u.order_conduite_modifier_priorites_reparations = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_ModifierPrioritesReparations);
         if (pvalue->u.order_conduite_modifier_priorites_reparations == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_ModifierPrioritesReparations (ctxt_p, pvalue->u.order_conduite_modifier_priorites_reparations);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_blesses */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_blesses");

         pvalue->u.order_conduite_modifier_priorites_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_ModifierPrioritesBlesses);
         if (pvalue->u.order_conduite_modifier_priorites_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_ModifierPrioritesBlesses (ctxt_p, pvalue->u.order_conduite_modifier_priorites_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_tactiques_reparations */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_tactiques_reparations");

         pvalue->u.order_conduite_modifier_priorites_tactiques_reparations = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_ModifierPrioritesTactiquesReparations);
         if (pvalue->u.order_conduite_modifier_priorites_tactiques_reparations == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_ModifierPrioritesTactiquesReparations (ctxt_p, pvalue->u.order_conduite_modifier_priorites_tactiques_reparations);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_modifier_priorites_tactiques_blesses */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_modifier_priorites_tactiques_blesses");

         pvalue->u.order_conduite_modifier_priorites_tactiques_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_ModifierPrioritesTactiquesBlesses);
         if (pvalue->u.order_conduite_modifier_priorites_tactiques_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_ModifierPrioritesTactiquesBlesses (ctxt_p, pvalue->u.order_conduite_modifier_priorites_tactiques_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_realiser_variantement */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_realiser_variantement");

         pvalue->u.order_conduite_automate_realiser_variantement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Automate_RealiserVariantement);
         if (pvalue->u.order_conduite_automate_realiser_variantement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Automate_RealiserVariantement (ctxt_p, pvalue->u.order_conduite_automate_realiser_variantement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_desequiper_site_franchissement */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_desequiper_site_franchissement");

         pvalue->u.order_conduite_automate_desequiper_site_franchissement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Automate_DesequiperSiteFranchissement);
         if (pvalue->u.order_conduite_automate_desequiper_site_franchissement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Automate_DesequiperSiteFranchissement (ctxt_p, pvalue->u.order_conduite_automate_desequiper_site_franchissement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_reagir_face_a_eni */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_reagir_face_a_eni");

         pvalue->u.order_conduite_automate_reagir_face_a_eni = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Automate_ReagirFaceAEni);
         if (pvalue->u.order_conduite_automate_reagir_face_a_eni == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Automate_ReagirFaceAEni (ctxt_p, pvalue->u.order_conduite_automate_reagir_face_a_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_affecter_pion_a_obstacle */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_affecter_pion_a_obstacle");

         pvalue->u.order_conduite_automate_affecter_pion_a_obstacle = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Automate_AffecterPionAObstacle);
         if (pvalue->u.order_conduite_automate_affecter_pion_a_obstacle == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Automate_AffecterPionAObstacle (ctxt_p, pvalue->u.order_conduite_automate_affecter_pion_a_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_reconnaitre_zone_implantation */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_reconnaitre_zone_implantation");

         pvalue->u.order_conduite_automate_reconnaitre_zone_implantation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Automate_ReconnaitreZoneImplantation);
         if (pvalue->u.order_conduite_automate_reconnaitre_zone_implantation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Automate_ReconnaitreZoneImplantation (ctxt_p, pvalue->u.order_conduite_automate_reconnaitre_zone_implantation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_tc2_gerer_materiel_avant_deplacement */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_tc2_gerer_materiel_avant_deplacement");

         stat = asn1PD_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (ctxt_p, &pvalue->u.order_conduite_automate_tc2_gerer_materiel_avant_deplacement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_activer_obstacle */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_activer_obstacle");

         stat = asn1PD_OrderConduite_Automate_ActiverObstacle (ctxt_p, &pvalue->u.order_conduite_automate_activer_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_automate_transferer_renforts */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_automate_transferer_renforts");

         pvalue->u.order_conduite_automate_transferer_renforts = ALLOC_ASN1ELEM (ctxt_p, ASN1T_OrderConduite_Automate_TransfererRenforts);
         if (pvalue->u.order_conduite_automate_transferer_renforts == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_OrderConduite_Automate_TransfererRenforts (ctxt_p, pvalue->u.order_conduite_automate_transferer_renforts);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* order_conduite_population_changer_attitude */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.order_conduite_population_changer_attitude");

         stat = asn1PD_OrderConduite_Population_ChangerAttitude (ctxt_p, &pvalue->u.order_conduite_population_changer_attitude);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgOrderConduite_order_conduite: end\n");

   return (stat);
}

int ASN1C_MsgOrderConduite_order_conduite::Decode ()
{
   return asn1PD_MsgOrderConduite_order_conduite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgOrderConduite                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgOrderConduite::ASN1C_MsgOrderConduite (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgOrderConduite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgOrderConduite (ASN1CTXT* ctxt_p, ASN1T_MsgOrderConduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgOrderConduite: start\n");

   /* encode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PE_OID (ctxt_p, pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_conduite */

   PU_PUSHNAME (ctxt_p, "order_conduite");

   stat = asn1PE_MsgOrderConduite_order_conduite (ctxt_p, &pvalue->order_conduite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgOrderConduite: end\n");
   return (stat);
}

int ASN1C_MsgOrderConduite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgOrderConduite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgOrderConduite (ASN1CTXT* ctxt_p, ASN1T_MsgOrderConduite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgOrderConduite: start\n");

   /* decode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_conduite */

   PU_PUSHNAME (ctxt_p, "order_conduite");

   stat = asn1PD_MsgOrderConduite_order_conduite (ctxt_p, &pvalue->order_conduite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgOrderConduite: end\n");

   return (stat);
}

int ASN1C_MsgOrderConduite::Decode ()
{
   return asn1PD_MsgOrderConduite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DemandeOrderConduite_Pion_AppliquerFeux                   */
/*                                                            */
/**************************************************************/

ASN1C_DemandeOrderConduite_Pion_AppliquerFeux::ASN1C_DemandeOrderConduite_Pion_AppliquerFeux (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DemandeOrderConduite_Pion_AppliquerFeux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_AppliquerFeux: start\n");

   /* NULL */

   rtdiag ("asn1PE_DemandeOrderConduite_Pion_AppliquerFeux: end\n");
   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_AppliquerFeux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeOrderConduite_Pion_AppliquerFeux (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DemandeOrderConduite_Pion_AppliquerFeux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_AppliquerFeux: start\n");

   /* NULL */

   rtdiag ("asn1PD_DemandeOrderConduite_Pion_AppliquerFeux: end\n");

   return (stat);
}

int ASN1C_DemandeOrderConduite_Pion_AppliquerFeux::Decode ()
{
   return asn1PD_DemandeOrderConduite_Pion_AppliquerFeux (mpContext->GetPtr());
}


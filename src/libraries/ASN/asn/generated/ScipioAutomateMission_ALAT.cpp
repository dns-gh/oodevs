/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 20-Jul-2005.
 */
#include "ScipioAutomateMission_ALAT.h"

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Heliporter                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Heliporter::ASN1C_Mission_Automate_ALAT_Heliporter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Heliporter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Heliporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Heliporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Heliporter: start\n");

   PU_NEWFIELD (ctxt_p, "attendre_unitesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->attendre_unites != TRUE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->avec_materiel != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode unites_a_heliporter */

   PU_PUSHNAME (ctxt_p, "unites_a_heliporter");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_heliporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode attendre_unites */

   if (pvalue->attendre_unites != TRUE) {
      PU_PUSHNAME (ctxt_p, "attendre_unites");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->attendre_unites);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode avec_materiel */

   if (pvalue->avec_materiel != FALSE) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_ALAT_Heliporter: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Heliporter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Heliporter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Heliporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Heliporter* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL attendre_unitesPresent;
   ASN1BOOL avec_materielPresent;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Heliporter: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "attendre_unitesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else attendre_unitesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else avec_materielPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode unites_a_heliporter */

   PU_PUSHNAME (ctxt_p, "unites_a_heliporter");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_heliporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode attendre_unites */

   if (attendre_unitesPresent) {
      PU_PUSHNAME (ctxt_p, "attendre_unites");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->attendre_unites);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->attendre_unites = TRUE;
   }

   /* decode avec_materiel */

   if (avec_materielPresent) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->avec_materiel = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_ALAT_Heliporter: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Heliporter::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Heliporter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Jalonner                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Jalonner::ASN1C_Mission_Automate_ALAT_Jalonner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Jalonner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Jalonner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Jalonner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Jalonner: start\n");

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Jalonner: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Jalonner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Jalonner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Jalonner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Jalonner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Jalonner: start\n");

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Jalonner: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Jalonner::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Jalonner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Helitransporter                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Helitransporter::ASN1C_Mission_Automate_ALAT_Helitransporter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Helitransporter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Helitransporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Helitransporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Helitransporter: start\n");

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->avec_materiel != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode unites_a_helitransporter */

   PU_PUSHNAME (ctxt_p, "unites_a_helitransporter");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_helitransporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode avec_materiel */

   if (pvalue->avec_materiel != FALSE) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_ALAT_Helitransporter: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Helitransporter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Helitransporter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Helitransporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Helitransporter* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL avec_materielPresent;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Helitransporter: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else avec_materielPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode unites_a_helitransporter */

   PU_PUSHNAME (ctxt_p, "unites_a_helitransporter");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_helitransporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode avec_materiel */

   if (avec_materielPresent) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->avec_materiel = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_ALAT_Helitransporter: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Helitransporter::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Helitransporter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_ExtrairePersonnel                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_ExtrairePersonnel::ASN1C_Mission_Automate_ALAT_ExtrairePersonnel (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_ExtrairePersonnel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_ExtrairePersonnel (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_ExtrairePersonnel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_ExtrairePersonnel: start\n");

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->avec_materiel != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode unites_a_helitransporter */

   PU_PUSHNAME (ctxt_p, "unites_a_helitransporter");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_helitransporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode avec_materiel */

   if (pvalue->avec_materiel != FALSE) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_ALAT_ExtrairePersonnel: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_ExtrairePersonnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_ExtrairePersonnel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_ExtrairePersonnel (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_ExtrairePersonnel* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL avec_materielPresent;

   rtdiag ("asn1PD_Mission_Automate_ALAT_ExtrairePersonnel: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else avec_materielPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode unites_a_helitransporter */

   PU_PUSHNAME (ctxt_p, "unites_a_helitransporter");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_helitransporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode avec_materiel */

   if (avec_materielPresent) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->avec_materiel = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_ALAT_ExtrairePersonnel: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_ExtrairePersonnel::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_ExtrairePersonnel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Appuyer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Appuyer::ASN1C_Mission_Automate_ALAT_Appuyer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Appuyer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Appuyer: start\n");

   /* encode unites_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unites_a_appuyer");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_dislocation */

   PU_PUSHNAME (ctxt_p, "point_dislocation");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_dislocation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Appuyer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Appuyer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Appuyer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Appuyer: start\n");

   /* decode unites_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unites_a_appuyer");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_dislocation */

   PU_PUSHNAME (ctxt_p, "point_dislocation");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_dislocation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Appuyer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Appuyer::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Appuyer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Couvrir                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Couvrir::ASN1C_Mission_Automate_ALAT_Couvrir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Couvrir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Couvrir: start\n");

   /* encode unites_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unites_a_appuyer");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Couvrir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Couvrir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Couvrir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Couvrir: start\n");

   /* decode unites_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unites_a_appuyer");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Couvrir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Couvrir::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Couvrir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Surveiller                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Surveiller::ASN1C_Mission_Automate_ALAT_Surveiller (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Surveiller& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Surveiller: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_logistique */

   PU_PUSHNAME (ctxt_p, "point_logistique");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_logistique);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Surveiller: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Surveiller::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Surveiller (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Surveiller: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_logistique */

   PU_PUSHNAME (ctxt_p, "point_logistique");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_logistique);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Surveiller: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Surveiller::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Surveiller (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Reconnaitre                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Reconnaitre::ASN1C_Mission_Automate_ALAT_Reconnaitre (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Reconnaitre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Reconnaitre (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Reconnaitre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Reconnaitre: start\n");

   /* encode pointRegroupement */

   PU_PUSHNAME (ctxt_p, "pointRegroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->pointRegroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Reconnaitre: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Reconnaitre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Reconnaitre (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Reconnaitre (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Reconnaitre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Reconnaitre: start\n");

   /* decode pointRegroupement */

   PU_PUSHNAME (ctxt_p, "pointRegroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->pointRegroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Reconnaitre: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Reconnaitre::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Reconnaitre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Freiner                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Freiner::ASN1C_Mission_Automate_ALAT_Freiner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Freiner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Freiner: start\n");

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Freiner: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Freiner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Freiner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Freiner: start\n");

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Freiner: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Freiner::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Freiner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Escorter                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Escorter::ASN1C_Mission_Automate_ALAT_Escorter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Escorter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Escorter (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Escorter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Escorter: start\n");

   /* encode unites_a_escorter */

   PU_PUSHNAME (ctxt_p, "unites_a_escorter");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Escorter: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Escorter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Escorter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Escorter (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Escorter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Escorter: start\n");

   /* decode unites_a_escorter */

   PU_PUSHNAME (ctxt_p, "unites_a_escorter");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Escorter: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Escorter::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Escorter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_Attaquer                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_Attaquer::ASN1C_Mission_Automate_ALAT_Attaquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_Attaquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_Attaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Attaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_Attaquer: start\n");

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_Attaquer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Attaquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_Attaquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_Attaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_Attaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_Attaquer: start\n");

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_Attaquer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_Attaquer::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_Attaquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_RecueillirFormationAeromobile       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_RecueillirFormationAeromobile::ASN1C_Mission_Automate_ALAT_RecueillirFormationAeromobile (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_RecueillirFormationAeromobile& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_RecueillirFormationAeromobile (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_RecueillirFormationAeromobile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_RecueillirFormationAeromobile: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_RecueillirFormationAeromobile: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_RecueillirFormationAeromobile::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_RecueillirFormationAeromobile (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_RecueillirFormationAeromobile (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_RecueillirFormationAeromobile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_RecueillirFormationAeromobile: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_RecueillirFormationAeromobile: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_RecueillirFormationAeromobile::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_RecueillirFormationAeromobile (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_AttaquerFormationAeromobile         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_AttaquerFormationAeromobile::ASN1C_Mission_Automate_ALAT_AttaquerFormationAeromobile (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_AttaquerFormationAeromobile& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_AttaquerFormationAeromobile (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_AttaquerFormationAeromobile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_AttaquerFormationAeromobile: start\n");

   /* encode unites_a_attaquer */

   PU_PUSHNAME (ctxt_p, "unites_a_attaquer");

   stat = asn1PE_ListKnowledgeAgent (ctxt_p, &pvalue->unites_a_attaquer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_AttaquerFormationAeromobile: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_AttaquerFormationAeromobile::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_AttaquerFormationAeromobile (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_AttaquerFormationAeromobile (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_AttaquerFormationAeromobile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_AttaquerFormationAeromobile: start\n");

   /* decode unites_a_attaquer */

   PU_PUSHNAME (ctxt_p, "unites_a_attaquer");

   stat = asn1PD_ListKnowledgeAgent (ctxt_p, &pvalue->unites_a_attaquer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_AttaquerFormationAeromobile: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_AttaquerFormationAeromobile::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_AttaquerFormationAeromobile (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_DonnerCoupArret                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_DonnerCoupArret::ASN1C_Mission_Automate_ALAT_DonnerCoupArret (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_DonnerCoupArret& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_DonnerCoupArret (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_DonnerCoupArret* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_DonnerCoupArret: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_DonnerCoupArret: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_DonnerCoupArret::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_DonnerCoupArret (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_DonnerCoupArret (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_DonnerCoupArret* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_DonnerCoupArret: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_DonnerCoupArret: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_DonnerCoupArret::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_DonnerCoupArret (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur::ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_dislocation */

   PU_PUSHNAME (ctxt_p, "point_dislocation");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_dislocation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode neutraliser */

   PU_PUSHNAME (ctxt_p, "neutraliser");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->neutraliser);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_dislocation */

   PU_PUSHNAME (ctxt_p, "point_dislocation");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_dislocation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode neutraliser */

   PU_PUSHNAME (ctxt_p, "neutraliser");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->neutraliser);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_DetruireNeutraliserDansZone         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansZone::ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PE_NatureAtlas (ctxt_p, pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_dislocation */

   PU_PUSHNAME (ctxt_p, "point_dislocation");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_dislocation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PE_EnumMissionALAT_AmbianceMission (ctxt_p, pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode neutraliser */

   PU_PUSHNAME (ctxt_p, "neutraliser");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->neutraliser);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansZone: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_DetruireNeutraliserDansZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cibles_prioritaires */

   PU_PUSHNAME (ctxt_p, "cibles_prioritaires");

   stat = asn1PD_NatureAtlas (ctxt_p, &pvalue->cibles_prioritaires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_dislocation */

   PU_PUSHNAME (ctxt_p, "point_dislocation");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_dislocation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ambiance_mission */

   PU_PUSHNAME (ctxt_p, "ambiance_mission");

   stat = asn1PD_EnumMissionALAT_AmbianceMission (ctxt_p, &pvalue->ambiance_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode neutraliser */

   PU_PUSHNAME (ctxt_p, "neutraliser");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->neutraliser);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansZone: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansZone::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_DetruireNeutraliserDansZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ALAT_EffectuerRechercheEtSauvetage       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage::ASN1C_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage: start\n");

   /* encode unites_a_secourir */

   PU_PUSHNAME (ctxt_p, "unites_a_secourir");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_secourir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PE_EnumMissionALAT_PorteeAction (ctxt_p, pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage: start\n");

   /* decode unites_a_secourir */

   PU_PUSHNAME (ctxt_p, "unites_a_secourir");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_secourir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plots_ravitaillement */

   PU_PUSHNAME (ctxt_p, "plots_ravitaillement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->plots_ravitaillement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode portee_action */

   PU_PUSHNAME (ctxt_p, "portee_action");

   stat = asn1PD_EnumMissionALAT_PorteeAction (ctxt_p, &pvalue->portee_action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage::Decode ()
{
   return asn1PD_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (mpContext->GetPtr(), &msgData);
}


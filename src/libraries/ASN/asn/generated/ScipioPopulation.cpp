/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 05-Dec-2005.
 */
#include "ScipioPopulation.h"

/**************************************************************/
/*                                                            */
/*  MsgPopulationCreation                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationCreation::ASN1C_MsgPopulationCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationCreation: start\n");

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_population */

   PU_PUSHNAME (ctxt_p, "type_population");

   stat = asn1PE_TypePopulation (ctxt_p, pvalue->type_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationCreation: end\n");
   return (stat);
}

int ASN1C_MsgPopulationCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationCreation: start\n");

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_population */

   PU_PUSHNAME (ctxt_p, "type_population");

   stat = asn1PD_TypePopulation (ctxt_p, &pvalue->type_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationCreation: end\n");

   return (stat);
}

int ASN1C_MsgPopulationCreation::Decode ()
{
   return asn1PD_MsgPopulationCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationUpdate                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationUpdate::ASN1C_MsgPopulationUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationUpdate: start\n");

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationUpdate: end\n");
   return (stat);
}

int ASN1C_MsgPopulationUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationUpdate: start\n");

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationUpdate: end\n");

   return (stat);
}

int ASN1C_MsgPopulationUpdate::Decode ()
{
   return asn1PD_MsgPopulationUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationCreation                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationCreation::ASN1C_MsgPopulationConcentrationCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationConcentrationCreation: start\n");

   /* encode oid_concentration */

   PU_PUSHNAME (ctxt_p, "oid_concentration");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_concentration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationConcentrationCreation: end\n");
   return (stat);
}

int ASN1C_MsgPopulationConcentrationCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationConcentrationCreation: start\n");

   /* decode oid_concentration */

   PU_PUSHNAME (ctxt_p, "oid_concentration");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_concentration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationConcentrationCreation: end\n");

   return (stat);
}

int ASN1C_MsgPopulationConcentrationCreation::Decode ()
{
   return asn1PD_MsgPopulationConcentrationCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationDestruction                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationDestruction::ASN1C_MsgPopulationConcentrationDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationConcentrationDestruction: start\n");

   /* encode oid_concentration */

   PU_PUSHNAME (ctxt_p, "oid_concentration");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_concentration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationConcentrationDestruction: end\n");
   return (stat);
}

int ASN1C_MsgPopulationConcentrationDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationConcentrationDestruction: start\n");

   /* decode oid_concentration */

   PU_PUSHNAME (ctxt_p, "oid_concentration");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_concentration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationConcentrationDestruction: end\n");

   return (stat);
}

int ASN1C_MsgPopulationConcentrationDestruction::Decode ()
{
   return asn1PD_MsgPopulationConcentrationDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumPopulationAttitude                                    */
/*                                                            */
/**************************************************************/

ASN1C_EnumPopulationAttitude::ASN1C_EnumPopulationAttitude (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPopulationAttitude& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPopulationAttitude (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationAttitude value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumPopulationAttitude: start\n");

   switch (value) {
      case EnumPopulationAttitude::calme: ui = 0; break;
      case EnumPopulationAttitude::agitee: ui = 1; break;
      case EnumPopulationAttitude::excitee: ui = 2; break;
      case EnumPopulationAttitude::agressive: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumPopulationAttitude: end\n");
   return (stat);
}

int ASN1C_EnumPopulationAttitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPopulationAttitude (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPopulationAttitude (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationAttitude* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumPopulationAttitude: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumPopulationAttitude::calme; break;
      case 1: *pvalue = EnumPopulationAttitude::agitee; break;
      case 2: *pvalue = EnumPopulationAttitude::excitee; break;
      case 3: *pvalue = EnumPopulationAttitude::agressive; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumPopulationAttitude: end\n");

   return (stat);
}

int ASN1C_EnumPopulationAttitude::Decode ()
{
   return asn1PD_EnumPopulationAttitude (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationUpdate                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationUpdate::ASN1C_MsgPopulationConcentrationUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationConcentrationUpdate: start\n");

   PU_NEWFIELD (ctxt_p, "nb_humains_vivantsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_vivantsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nb_humains_mortsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_mortsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "attitudePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.attitudePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_concentration */

   PU_PUSHNAME (ctxt_p, "oid_concentration");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_concentration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_vivants");

      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_morts");

      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_morts);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode attitude */

   if (pvalue->m.attitudePresent) {
      PU_PUSHNAME (ctxt_p, "attitude");

      stat = asn1PE_EnumPopulationAttitude (ctxt_p, pvalue->attitude);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgPopulationConcentrationUpdate: end\n");
   return (stat);
}

int ASN1C_MsgPopulationConcentrationUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgPopulationConcentrationUpdate: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "nb_humains_vivantsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nb_humains_vivantsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nb_humains_mortsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nb_humains_mortsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "attitudePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.attitudePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_concentration */

   PU_PUSHNAME (ctxt_p, "oid_concentration");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_concentration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_vivants");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_morts");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_morts);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode attitude */

   if (pvalue->m.attitudePresent) {
      PU_PUSHNAME (ctxt_p, "attitude");

      stat = asn1PD_EnumPopulationAttitude (ctxt_p, &pvalue->attitude);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgPopulationConcentrationUpdate: end\n");

   return (stat);
}

int ASN1C_MsgPopulationConcentrationUpdate::Decode ()
{
   return asn1PD_MsgPopulationConcentrationUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFluxCreation                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFluxCreation::ASN1C_MsgPopulationFluxCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFluxCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFluxCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFluxCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationFluxCreation: start\n");

   /* encode oid_flux */

   PU_PUSHNAME (ctxt_p, "oid_flux");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_flux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationFluxCreation: end\n");
   return (stat);
}

int ASN1C_MsgPopulationFluxCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFluxCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFluxCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFluxCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationFluxCreation: start\n");

   /* decode oid_flux */

   PU_PUSHNAME (ctxt_p, "oid_flux");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_flux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationFluxCreation: end\n");

   return (stat);
}

int ASN1C_MsgPopulationFluxCreation::Decode ()
{
   return asn1PD_MsgPopulationFluxCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFluxDestruction                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFluxDestruction::ASN1C_MsgPopulationFluxDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFluxDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFluxDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFluxDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationFluxDestruction: start\n");

   /* encode oid_flux */

   PU_PUSHNAME (ctxt_p, "oid_flux");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_flux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationFluxDestruction: end\n");
   return (stat);
}

int ASN1C_MsgPopulationFluxDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFluxDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFluxDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFluxDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationFluxDestruction: start\n");

   /* decode oid_flux */

   PU_PUSHNAME (ctxt_p, "oid_flux");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_flux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationFluxDestruction: end\n");

   return (stat);
}

int ASN1C_MsgPopulationFluxDestruction::Decode ()
{
   return asn1PD_MsgPopulationFluxDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFluxUpdate                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFluxUpdate::ASN1C_MsgPopulationFluxUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFluxUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFluxUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFluxUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationFluxUpdate: start\n");

   PU_NEWFIELD (ctxt_p, "itinerairePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.itinerairePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "fluxPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.fluxPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "directionPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.directionPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "vitessePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.vitessePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nb_humains_vivantsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_vivantsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nb_humains_mortsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_mortsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "attitudePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.attitudePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_flux */

   PU_PUSHNAME (ctxt_p, "oid_flux");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_flux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode itineraire */

   if (pvalue->m.itinerairePresent) {
      PU_PUSHNAME (ctxt_p, "itineraire");

      stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode flux */

   if (pvalue->m.fluxPresent) {
      PU_PUSHNAME (ctxt_p, "flux");

      stat = asn1PE_Itineraire (ctxt_p, &pvalue->flux);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode direction */

   if (pvalue->m.directionPresent) {
      PU_PUSHNAME (ctxt_p, "direction");

      stat = asn1PE_Direction (ctxt_p, pvalue->direction);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode vitesse */

   if (pvalue->m.vitessePresent) {
      PU_PUSHNAME (ctxt_p, "vitesse");

      stat = asn1PE_Vitesse (ctxt_p, pvalue->vitesse);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_vivants");

      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_morts");

      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_morts);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode attitude */

   if (pvalue->m.attitudePresent) {
      PU_PUSHNAME (ctxt_p, "attitude");

      stat = asn1PE_EnumPopulationAttitude (ctxt_p, pvalue->attitude);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgPopulationFluxUpdate: end\n");
   return (stat);
}

int ASN1C_MsgPopulationFluxUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFluxUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFluxUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFluxUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgPopulationFluxUpdate: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "itinerairePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.itinerairePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "fluxPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.fluxPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "directionPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.directionPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "vitessePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.vitessePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nb_humains_vivantsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nb_humains_vivantsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nb_humains_mortsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nb_humains_mortsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "attitudePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.attitudePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_flux */

   PU_PUSHNAME (ctxt_p, "oid_flux");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_flux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode itineraire */

   if (pvalue->m.itinerairePresent) {
      PU_PUSHNAME (ctxt_p, "itineraire");

      stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode flux */

   if (pvalue->m.fluxPresent) {
      PU_PUSHNAME (ctxt_p, "flux");

      stat = asn1PD_Itineraire (ctxt_p, &pvalue->flux);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode direction */

   if (pvalue->m.directionPresent) {
      PU_PUSHNAME (ctxt_p, "direction");

      stat = asn1PD_Direction (ctxt_p, &pvalue->direction);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode vitesse */

   if (pvalue->m.vitessePresent) {
      PU_PUSHNAME (ctxt_p, "vitesse");

      stat = asn1PD_Vitesse (ctxt_p, &pvalue->vitesse);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_vivants");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      PU_PUSHNAME (ctxt_p, "nb_humains_morts");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_morts);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode attitude */

   if (pvalue->m.attitudePresent) {
      PU_PUSHNAME (ctxt_p, "attitude");

      stat = asn1PD_EnumPopulationAttitude (ctxt_p, &pvalue->attitude);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgPopulationFluxUpdate: end\n");

   return (stat);
}

int ASN1C_MsgPopulationFluxUpdate::Decode ()
{
   return asn1PD_MsgPopulationFluxUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationChangeAttitude_beneficiaire          */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationChangeAttitude_beneficiaire::ASN1C_MagicActionPopulationChangeAttitude_beneficiaire (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationChangeAttitude_beneficiaire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationChangeAttitude_beneficiaire (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude_beneficiaire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionPopulationChangeAttitude_beneficiaire: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* flux */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.flux");

         stat = asn1PE_OID (ctxt_p, pvalue->u.flux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* concentration */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.concentration");

         stat = asn1PE_OID (ctxt_p, pvalue->u.concentration);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* global */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.global");

         /* NULL */
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MagicActionPopulationChangeAttitude_beneficiaire: end\n");
   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude_beneficiaire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationChangeAttitude_beneficiaire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationChangeAttitude_beneficiaire (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude_beneficiaire* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MagicActionPopulationChangeAttitude_beneficiaire: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* flux */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.flux");

         stat = asn1PD_OID (ctxt_p, &pvalue->u.flux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* concentration */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.concentration");

         stat = asn1PD_OID (ctxt_p, &pvalue->u.concentration);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* global */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.global");

         /* NULL */

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MagicActionPopulationChangeAttitude_beneficiaire: end\n");

   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude_beneficiaire::Decode ()
{
   return asn1PD_MagicActionPopulationChangeAttitude_beneficiaire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationChangeAttitude                       */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationChangeAttitude::ASN1C_MagicActionPopulationChangeAttitude (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationChangeAttitude& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationChangeAttitude (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionPopulationChangeAttitude: start\n");

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode attitude */

   PU_PUSHNAME (ctxt_p, "attitude");

   stat = asn1PE_EnumPopulationAttitude (ctxt_p, pvalue->attitude);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode beneficiaire */

   PU_PUSHNAME (ctxt_p, "beneficiaire");

   stat = asn1PE_MagicActionPopulationChangeAttitude_beneficiaire (ctxt_p, &pvalue->beneficiaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MagicActionPopulationChangeAttitude: end\n");
   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationChangeAttitude (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationChangeAttitude (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionPopulationChangeAttitude: start\n");

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode attitude */

   PU_PUSHNAME (ctxt_p, "attitude");

   stat = asn1PD_EnumPopulationAttitude (ctxt_p, &pvalue->attitude);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode beneficiaire */

   PU_PUSHNAME (ctxt_p, "beneficiaire");

   stat = asn1PD_MagicActionPopulationChangeAttitude_beneficiaire (ctxt_p, &pvalue->beneficiaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MagicActionPopulationChangeAttitude: end\n");

   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude::Decode ()
{
   return asn1PD_MagicActionPopulationChangeAttitude (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationMoveTo                               */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationMoveTo::ASN1C_MagicActionPopulationMoveTo (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationMoveTo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationMoveTo value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionPopulationMoveTo: start\n");

   stat = asn1PE_CoordUTM (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MagicActionPopulationMoveTo: end\n");
   return (stat);
}

int ASN1C_MagicActionPopulationMoveTo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationMoveTo (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationMoveTo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionPopulationMoveTo: start\n");

   stat = asn1PD_CoordUTM (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MagicActionPopulationMoveTo: end\n");

   return (stat);
}

int ASN1C_MagicActionPopulationMoveTo::Decode ()
{
   return asn1PD_MagicActionPopulationMoveTo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationDestructionTotale                    */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationDestructionTotale::ASN1C_MagicActionPopulationDestructionTotale (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionPopulationDestructionTotale (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionPopulationDestructionTotale: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionPopulationDestructionTotale: end\n");
   return (stat);
}

int ASN1C_MagicActionPopulationDestructionTotale::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationDestructionTotale (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationDestructionTotale (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionPopulationDestructionTotale: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionPopulationDestructionTotale: end\n");

   return (stat);
}

int ASN1C_MagicActionPopulationDestructionTotale::Decode ()
{
   return asn1PD_MagicActionPopulationDestructionTotale (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationMagicAction_action                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationMagicAction_action::ASN1C_MsgPopulationMagicAction_action (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationMagicAction_action& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction_action* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationMagicAction_action: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* change_attitude */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.change_attitude");

         stat = asn1PE_MagicActionPopulationChangeAttitude (ctxt_p, pvalue->u.change_attitude);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* move_to */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.move_to");

         stat = asn1PE_MagicActionPopulationMoveTo (ctxt_p, *pvalue->u.move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* destruction_totale */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.destruction_totale");

         stat = asn1PE_MagicActionPopulationDestructionTotale (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgPopulationMagicAction_action: end\n");
   return (stat);
}

int ASN1C_MsgPopulationMagicAction_action::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationMagicAction_action (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction_action* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgPopulationMagicAction_action: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* change_attitude */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.change_attitude");

         pvalue->u.change_attitude = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionPopulationChangeAttitude);
         if (pvalue->u.change_attitude == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MagicActionPopulationChangeAttitude (ctxt_p, pvalue->u.change_attitude);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* move_to */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.move_to");

         pvalue->u.move_to = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionPopulationMoveTo);
         if (pvalue->u.move_to == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MagicActionPopulationMoveTo (ctxt_p, pvalue->u.move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* destruction_totale */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.destruction_totale");

         stat = asn1PD_MagicActionPopulationDestructionTotale (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgPopulationMagicAction_action: end\n");

   return (stat);
}

int ASN1C_MsgPopulationMagicAction_action::Decode ()
{
   return asn1PD_MsgPopulationMagicAction_action (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationMagicAction                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationMagicAction::ASN1C_MsgPopulationMagicAction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationMagicAction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationMagicAction: start\n");

   /* encode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode action */

   PU_PUSHNAME (ctxt_p, "action");

   stat = asn1PE_MsgPopulationMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationMagicAction: end\n");
   return (stat);
}

int ASN1C_MsgPopulationMagicAction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationMagicAction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationMagicAction: start\n");

   /* decode oid_population */

   PU_PUSHNAME (ctxt_p, "oid_population");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode action */

   PU_PUSHNAME (ctxt_p, "action");

   stat = asn1PD_MsgPopulationMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationMagicAction: end\n");

   return (stat);
}

int ASN1C_MsgPopulationMagicAction::Decode ()
{
   return asn1PD_MsgPopulationMagicAction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumPopulationAttrErrorCode                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumPopulationAttrErrorCode::ASN1C_EnumPopulationAttrErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPopulationAttrErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPopulationAttrErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationAttrErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumPopulationAttrErrorCode: start\n");

   switch (value) {
      case EnumPopulationAttrErrorCode::no_error: ui = 0; break;
      case EnumPopulationAttrErrorCode::error_invalid_unit: ui = 1; break;
      case EnumPopulationAttrErrorCode::error_invalid_attribute: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumPopulationAttrErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumPopulationAttrErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPopulationAttrErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPopulationAttrErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationAttrErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumPopulationAttrErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumPopulationAttrErrorCode::no_error; break;
      case 1: *pvalue = EnumPopulationAttrErrorCode::error_invalid_unit; break;
      case 2: *pvalue = EnumPopulationAttrErrorCode::error_invalid_attribute; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumPopulationAttrErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumPopulationAttrErrorCode::Decode ()
{
   return asn1PD_EnumPopulationAttrErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationMagicActionAck                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationMagicActionAck::ASN1C_MsgPopulationMagicActionAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationMagicActionAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPopulationMagicActionAck: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumPopulationAttrErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPopulationMagicActionAck: end\n");
   return (stat);
}

int ASN1C_MsgPopulationMagicActionAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationMagicActionAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPopulationMagicActionAck: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumPopulationAttrErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPopulationMagicActionAck: end\n");

   return (stat);
}

int ASN1C_MsgPopulationMagicActionAck::Decode ()
{
   return asn1PD_MsgPopulationMagicActionAck (mpContext->GetPtr(), &msgData);
}


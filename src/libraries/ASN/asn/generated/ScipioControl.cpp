/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 29-Sep-2005.
 */
#include "ScipioControl.h"

/**************************************************************/
/*                                                            */
/*  EnumCtrlErrorCode                                         */
/*                                                            */
/**************************************************************/

ASN1C_EnumCtrlErrorCode::ASN1C_EnumCtrlErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumCtrlErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumCtrlErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumCtrlErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumCtrlErrorCode: start\n");

   switch (value) {
      case EnumCtrlErrorCode::no_error: ui = 0; break;
      case EnumCtrlErrorCode::error_already_started: ui = 1; break;
      case EnumCtrlErrorCode::error_not_started: ui = 2; break;
      case EnumCtrlErrorCode::error_not_paused: ui = 3; break;
      case EnumCtrlErrorCode::error_already_paused: ui = 4; break;
      case EnumCtrlErrorCode::error_invalid_time_factor: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumCtrlErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumCtrlErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumCtrlErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumCtrlErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumCtrlErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumCtrlErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumCtrlErrorCode::no_error; break;
      case 1: *pvalue = EnumCtrlErrorCode::error_already_started; break;
      case 2: *pvalue = EnumCtrlErrorCode::error_not_started; break;
      case 3: *pvalue = EnumCtrlErrorCode::error_not_paused; break;
      case 4: *pvalue = EnumCtrlErrorCode::error_already_paused; break;
      case 5: *pvalue = EnumCtrlErrorCode::error_invalid_time_factor; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumCtrlErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumCtrlErrorCode::Decode ()
{
   return asn1PD_EnumCtrlErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlStop                                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlStop::ASN1C_MsgCtrlStop (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlStop (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlStop: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlStop: end\n");
   return (stat);
}

int ASN1C_MsgCtrlStop::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlStop (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlStop (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlStop: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlStop: end\n");

   return (stat);
}

int ASN1C_MsgCtrlStop::Decode ()
{
   return asn1PD_MsgCtrlStop (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlStopAck                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlStopAck::ASN1C_MsgCtrlStopAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlStopAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlStopAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlStopAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlStopAck: start\n");

   stat = asn1PE_EnumCtrlErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgCtrlStopAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlStopAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlStopAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlStopAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlStopAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlStopAck: start\n");

   stat = asn1PD_EnumCtrlErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgCtrlStopAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlStopAck::Decode ()
{
   return asn1PD_MsgCtrlStopAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlPause                                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlPause::ASN1C_MsgCtrlPause (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlPause (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlPause: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlPause: end\n");
   return (stat);
}

int ASN1C_MsgCtrlPause::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlPause (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlPause (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlPause: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlPause: end\n");

   return (stat);
}

int ASN1C_MsgCtrlPause::Decode ()
{
   return asn1PD_MsgCtrlPause (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlPauseAck                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlPauseAck::ASN1C_MsgCtrlPauseAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlPauseAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlPauseAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlPauseAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlPauseAck: start\n");

   stat = asn1PE_EnumCtrlErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgCtrlPauseAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlPauseAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlPauseAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlPauseAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlPauseAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlPauseAck: start\n");

   stat = asn1PD_EnumCtrlErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgCtrlPauseAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlPauseAck::Decode ()
{
   return asn1PD_MsgCtrlPauseAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlResume                                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlResume::ASN1C_MsgCtrlResume (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlResume (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlResume: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlResume: end\n");
   return (stat);
}

int ASN1C_MsgCtrlResume::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlResume (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlResume (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlResume: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlResume: end\n");

   return (stat);
}

int ASN1C_MsgCtrlResume::Decode ()
{
   return asn1PD_MsgCtrlResume (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlResumeAck                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlResumeAck::ASN1C_MsgCtrlResumeAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlResumeAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlResumeAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlResumeAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlResumeAck: start\n");

   stat = asn1PE_EnumCtrlErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgCtrlResumeAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlResumeAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlResumeAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlResumeAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlResumeAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlResumeAck: start\n");

   stat = asn1PD_EnumCtrlErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgCtrlResumeAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlResumeAck::Decode ()
{
   return asn1PD_MsgCtrlResumeAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlChangeTimeFactor                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlChangeTimeFactor::ASN1C_MsgCtrlChangeTimeFactor (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlChangeTimeFactor& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlChangeTimeFactor (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlChangeTimeFactor value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlChangeTimeFactor: start\n");

   if ( (value >= 1 && value <= 255) ) {
      stat = pe_ConsInteger (ctxt_p, value, 1, 255);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);


   rtdiag ("asn1PE_MsgCtrlChangeTimeFactor: end\n");
   return (stat);
}

int ASN1C_MsgCtrlChangeTimeFactor::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlChangeTimeFactor (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlChangeTimeFactor (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlChangeTimeFactor* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlChangeTimeFactor: start\n");

   stat = pd_ConsInteger (ctxt_p, pvalue, 1, 255);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgCtrlChangeTimeFactor: end\n");

   return (stat);
}

int ASN1C_MsgCtrlChangeTimeFactor::Decode ()
{
   return asn1PD_MsgCtrlChangeTimeFactor (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlChangeTimeFactorAck                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlChangeTimeFactorAck::ASN1C_MsgCtrlChangeTimeFactorAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlChangeTimeFactorAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlChangeTimeFactorAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlChangeTimeFactorAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlChangeTimeFactorAck: start\n");

   /* encode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   if ( (pvalue->time_factor >= 1 && pvalue->time_factor <= 255) ) {
      stat = pe_ConsInteger (ctxt_p, pvalue->time_factor, 1, 255);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumCtrlErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCtrlChangeTimeFactorAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlChangeTimeFactorAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlChangeTimeFactorAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlChangeTimeFactorAck (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlChangeTimeFactorAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlChangeTimeFactorAck: start\n");

   /* decode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pd_ConsInteger (ctxt_p, &pvalue->time_factor, 1, 255);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumCtrlErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCtrlChangeTimeFactorAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlChangeTimeFactorAck::Decode ()
{
   return asn1PD_MsgCtrlChangeTimeFactorAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlBeginTick                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlBeginTick::ASN1C_MsgCtrlBeginTick (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlBeginTick& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlBeginTick (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlBeginTick value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlBeginTick: start\n");

   stat = pe_ConsUnsigned (ctxt_p, value, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);


   rtdiag ("asn1PE_MsgCtrlBeginTick: end\n");
   return (stat);
}

int ASN1C_MsgCtrlBeginTick::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlBeginTick (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlBeginTick (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlBeginTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlBeginTick: start\n");

   stat = pd_ConsUnsigned (ctxt_p, pvalue, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgCtrlBeginTick: end\n");

   return (stat);
}

int ASN1C_MsgCtrlBeginTick::Decode ()
{
   return asn1PD_MsgCtrlBeginTick (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlEndTick                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlEndTick::ASN1C_MsgCtrlEndTick (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlEndTick& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlEndTick (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlEndTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlEndTick: start\n");

   /* encode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->current_tick, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_pathfinds_longs */

   PU_PUSHNAME (ctxt_p, "nb_pathfinds_longs");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_pathfinds_longs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_pathfinds_courts */

   PU_PUSHNAME (ctxt_p, "nb_pathfinds_courts");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_pathfinds_courts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCtrlEndTick: end\n");
   return (stat);
}

int ASN1C_MsgCtrlEndTick::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlEndTick (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlEndTick (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlEndTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlEndTick: start\n");

   /* decode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->current_tick, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_pathfinds_longs */

   PU_PUSHNAME (ctxt_p, "nb_pathfinds_longs");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_pathfinds_longs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_pathfinds_courts */

   PU_PUSHNAME (ctxt_p, "nb_pathfinds_courts");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_pathfinds_courts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCtrlEndTick: end\n");

   return (stat);
}

int ASN1C_MsgCtrlEndTick::Decode ()
{
   return asn1PD_MsgCtrlEndTick (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlClientAnnouncement                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlClientAnnouncement::ASN1C_MsgCtrlClientAnnouncement (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlClientAnnouncement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlClientAnnouncement (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlClientAnnouncement value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgCtrlClientAnnouncement: start\n");

   switch (value) {
      case MsgCtrlClientAnnouncement::mos: ui = 0; break;
      case MsgCtrlClientAnnouncement::mos_light: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgCtrlClientAnnouncement: end\n");
   return (stat);
}

int ASN1C_MsgCtrlClientAnnouncement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlClientAnnouncement (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlClientAnnouncement (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlClientAnnouncement* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgCtrlClientAnnouncement: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgCtrlClientAnnouncement::mos; break;
      case 1: *pvalue = MsgCtrlClientAnnouncement::mos_light; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgCtrlClientAnnouncement: end\n");

   return (stat);
}

int ASN1C_MsgCtrlClientAnnouncement::Decode ()
{
   return asn1PD_MsgCtrlClientAnnouncement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumEtatSim                                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumEtatSim::ASN1C_EnumEtatSim (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumEtatSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumEtatSim (ASN1CTXT* ctxt_p, ASN1T_EnumEtatSim value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumEtatSim: start\n");

   switch (value) {
      case EnumEtatSim::running: ui = 0; break;
      case EnumEtatSim::paused: ui = 1; break;
      case EnumEtatSim::stopped: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumEtatSim: end\n");
   return (stat);
}

int ASN1C_EnumEtatSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumEtatSim (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumEtatSim (ASN1CTXT* ctxt_p, ASN1T_EnumEtatSim* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumEtatSim: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumEtatSim::running; break;
      case 1: *pvalue = EnumEtatSim::paused; break;
      case 2: *pvalue = EnumEtatSim::stopped; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumEtatSim: end\n");

   return (stat);
}

int ASN1C_EnumEtatSim::Decode ()
{
   return asn1PD_EnumEtatSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlInfo                                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlInfo::ASN1C_MsgCtrlInfo (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlInfo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlInfo (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlInfo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlInfo: start\n");

   /* encode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->current_tick, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   if ( (pvalue->tick_duration >= 0 && pvalue->tick_duration <= 65535) ) {
      stat = pe_ConsInteger (ctxt_p, pvalue->tick_duration, 0, 65535);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

   PU_POPNAME (ctxt_p);

   /* encode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   if ( (pvalue->time_factor >= 0 && pvalue->time_factor <= 255) ) {
      stat = pe_ConsInteger (ctxt_p, pvalue->time_factor, 0, 255);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

   PU_POPNAME (ctxt_p);

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   if ( (pvalue->id_exercice >= 0 && pvalue->id_exercice <= 8) ) {
      stat = pe_ConsInteger (ctxt_p, pvalue->id_exercice, 0, 8);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

   PU_POPNAME (ctxt_p);

   /* encode checkpoint_frequence */

   PU_PUSHNAME (ctxt_p, "checkpoint_frequence");

   stat = pe_UnconsInteger (ctxt_p, pvalue->checkpoint_frequence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode etat */

   PU_PUSHNAME (ctxt_p, "etat");

   stat = asn1PE_EnumEtatSim (ctxt_p, pvalue->etat);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCtrlInfo: end\n");
   return (stat);
}

int ASN1C_MsgCtrlInfo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlInfo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlInfo (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlInfo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlInfo: start\n");

   /* decode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->current_tick, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pd_ConsInteger (ctxt_p, &pvalue->tick_duration, 0, 65535);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pd_ConsInteger (ctxt_p, &pvalue->time_factor, 0, 255);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = pd_ConsInteger (ctxt_p, &pvalue->id_exercice, 0, 8);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode checkpoint_frequence */

   PU_PUSHNAME (ctxt_p, "checkpoint_frequence");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->checkpoint_frequence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode etat */

   PU_PUSHNAME (ctxt_p, "etat");

   stat = asn1PD_EnumEtatSim (ctxt_p, &pvalue->etat);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCtrlInfo: end\n");

   return (stat);
}

int ASN1C_MsgCtrlInfo::Decode ()
{
   return asn1PD_MsgCtrlInfo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointSaveBegin                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointSaveBegin::ASN1C_MsgCtrlCheckPointSaveBegin (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlCheckPointSaveBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveBegin: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveBegin: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveBegin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointSaveBegin (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointSaveBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveBegin: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveBegin: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveBegin::Decode ()
{
   return asn1PD_MsgCtrlCheckPointSaveBegin (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointSaveEnd                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointSaveEnd::ASN1C_MsgCtrlCheckPointSaveEnd (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlCheckPointSaveEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveEnd: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveEnd: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveEnd::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointSaveEnd (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointSaveEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveEnd: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveEnd: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveEnd::Decode ()
{
   return asn1PD_MsgCtrlCheckPointSaveEnd (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointLoadBegin                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointLoadBegin::ASN1C_MsgCtrlCheckPointLoadBegin (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlCheckPointLoadBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointLoadBegin: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlCheckPointLoadBegin: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointLoadBegin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointLoadBegin (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointLoadBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointLoadBegin: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlCheckPointLoadBegin: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointLoadBegin::Decode ()
{
   return asn1PD_MsgCtrlCheckPointLoadBegin (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointLoadEnd                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointLoadEnd::ASN1C_MsgCtrlCheckPointLoadEnd (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlCheckPointLoadEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointLoadEnd: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlCheckPointLoadEnd: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointLoadEnd::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointLoadEnd (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointLoadEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointLoadEnd: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlCheckPointLoadEnd: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointLoadEnd::Decode ()
{
   return asn1PD_MsgCtrlCheckPointLoadEnd (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointSetFrequency                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointSetFrequency::ASN1C_MsgCtrlCheckPointSetFrequency (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlCheckPointSetFrequency& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlCheckPointSetFrequency (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlCheckPointSetFrequency value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointSetFrequency: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgCtrlCheckPointSetFrequency: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointSetFrequency::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointSetFrequency (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointSetFrequency (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlCheckPointSetFrequency* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointSetFrequency: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgCtrlCheckPointSetFrequency: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointSetFrequency::Decode ()
{
   return asn1PD_MsgCtrlCheckPointSetFrequency (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointSetFrequencyAck                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointSetFrequencyAck::ASN1C_MsgCtrlCheckPointSetFrequencyAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlCheckPointSetFrequencyAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointSetFrequencyAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlCheckPointSetFrequencyAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointSetFrequencyAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointSetFrequencyAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointSetFrequencyAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointSetFrequencyAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlCheckPointSetFrequencyAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointSetFrequencyAck::Decode ()
{
   return asn1PD_MsgCtrlCheckPointSetFrequencyAck (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointSaveNow                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointSaveNow::ASN1C_MsgCtrlCheckPointSaveNow (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlCheckPointSaveNow& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlCheckPointSaveNow (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlCheckPointSaveNow* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveNow: start\n");

   PU_NEWFIELD (ctxt_p, "nomPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nomPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode nom */

   if (pvalue->m.nomPresent) {
      PU_PUSHNAME (ctxt_p, "nom");

      stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgCtrlCheckPointSaveNow: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveNow::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointSaveNow (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointSaveNow (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlCheckPointSaveNow* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveNow: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "nomPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nomPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode nom */

   if (pvalue->m.nomPresent) {
      PU_PUSHNAME (ctxt_p, "nom");

      stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgCtrlCheckPointSaveNow: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveNow::Decode ()
{
   return asn1PD_MsgCtrlCheckPointSaveNow (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlCheckPointSaveNowAck                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlCheckPointSaveNowAck::ASN1C_MsgCtrlCheckPointSaveNowAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlCheckPointSaveNowAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveNowAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlCheckPointSaveNowAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveNowAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlCheckPointSaveNowAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlCheckPointSaveNowAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveNowAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlCheckPointSaveNowAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlCheckPointSaveNowAck::Decode ()
{
   return asn1PD_MsgCtrlCheckPointSaveNowAck (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlSendCurrentStateBegin                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlSendCurrentStateBegin::ASN1C_MsgCtrlSendCurrentStateBegin (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlSendCurrentStateBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlSendCurrentStateBegin: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlSendCurrentStateBegin: end\n");
   return (stat);
}

int ASN1C_MsgCtrlSendCurrentStateBegin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlSendCurrentStateBegin (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlSendCurrentStateBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlSendCurrentStateBegin: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlSendCurrentStateBegin: end\n");

   return (stat);
}

int ASN1C_MsgCtrlSendCurrentStateBegin::Decode ()
{
   return asn1PD_MsgCtrlSendCurrentStateBegin (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlSendCurrentStateEnd                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlSendCurrentStateEnd::ASN1C_MsgCtrlSendCurrentStateEnd (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlSendCurrentStateEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlSendCurrentStateEnd: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlSendCurrentStateEnd: end\n");
   return (stat);
}

int ASN1C_MsgCtrlSendCurrentStateEnd::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlSendCurrentStateEnd (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlSendCurrentStateEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlSendCurrentStateEnd: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlSendCurrentStateEnd: end\n");

   return (stat);
}

int ASN1C_MsgCtrlSendCurrentStateEnd::Decode ()
{
   return asn1PD_MsgCtrlSendCurrentStateEnd (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumPrecipitationType                                     */
/*                                                            */
/**************************************************************/

ASN1C_EnumPrecipitationType::ASN1C_EnumPrecipitationType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPrecipitationType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPrecipitationType (ASN1CTXT* ctxt_p, ASN1T_EnumPrecipitationType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumPrecipitationType: start\n");

   switch (value) {
      case EnumPrecipitationType::pas_de_precipitation: ui = 0; break;
      case EnumPrecipitationType::tempete_sable: ui = 1; break;
      case EnumPrecipitationType::brouillard: ui = 2; break;
      case EnumPrecipitationType::crachin: ui = 3; break;
      case EnumPrecipitationType::pluie: ui = 4; break;
      case EnumPrecipitationType::neige: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumPrecipitationType: end\n");
   return (stat);
}

int ASN1C_EnumPrecipitationType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPrecipitationType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPrecipitationType (ASN1CTXT* ctxt_p, ASN1T_EnumPrecipitationType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumPrecipitationType: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumPrecipitationType::pas_de_precipitation; break;
      case 1: *pvalue = EnumPrecipitationType::tempete_sable; break;
      case 2: *pvalue = EnumPrecipitationType::brouillard; break;
      case 3: *pvalue = EnumPrecipitationType::crachin; break;
      case 4: *pvalue = EnumPrecipitationType::pluie; break;
      case 5: *pvalue = EnumPrecipitationType::neige; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumPrecipitationType: end\n");

   return (stat);
}

int ASN1C_EnumPrecipitationType::Decode ()
{
   return asn1PD_EnumPrecipitationType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MeteoAttributs                                            */
/*                                                            */
/**************************************************************/

ASN1C_MeteoAttributs::ASN1C_MeteoAttributs (
   ASN1MessageBuffer& msgBuf, ASN1T_MeteoAttributs& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MeteoAttributs (ASN1CTXT* ctxt_p, ASN1T_MeteoAttributs* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MeteoAttributs: start\n");

   /* encode temperature */

   PU_PUSHNAME (ctxt_p, "temperature");

   stat = pe_UnconsInteger (ctxt_p, pvalue->temperature);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode vitesse_vent */

   PU_PUSHNAME (ctxt_p, "vitesse_vent");

   stat = asn1PE_Vitesse (ctxt_p, pvalue->vitesse_vent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode direction_vent */

   PU_PUSHNAME (ctxt_p, "direction_vent");

   stat = asn1PE_Direction (ctxt_p, pvalue->direction_vent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plancher_couverture_nuageuse */

   PU_PUSHNAME (ctxt_p, "plancher_couverture_nuageuse");

   stat = asn1PE_Altitude (ctxt_p, pvalue->plancher_couverture_nuageuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode plafond_couverture_nuageuse */

   PU_PUSHNAME (ctxt_p, "plafond_couverture_nuageuse");

   stat = asn1PE_Altitude (ctxt_p, pvalue->plafond_couverture_nuageuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode densite_moyenne_couverture_nuageuse */

   PU_PUSHNAME (ctxt_p, "densite_moyenne_couverture_nuageuse");

   stat = asn1PE_Pourcentage (ctxt_p, pvalue->densite_moyenne_couverture_nuageuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode precipitation */

   PU_PUSHNAME (ctxt_p, "precipitation");

   stat = asn1PE_EnumPrecipitationType (ctxt_p, pvalue->precipitation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MeteoAttributs: end\n");
   return (stat);
}

int ASN1C_MeteoAttributs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MeteoAttributs (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MeteoAttributs (ASN1CTXT* ctxt_p, ASN1T_MeteoAttributs* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MeteoAttributs: start\n");

   /* decode temperature */

   PU_PUSHNAME (ctxt_p, "temperature");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->temperature);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode vitesse_vent */

   PU_PUSHNAME (ctxt_p, "vitesse_vent");

   stat = asn1PD_Vitesse (ctxt_p, &pvalue->vitesse_vent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode direction_vent */

   PU_PUSHNAME (ctxt_p, "direction_vent");

   stat = asn1PD_Direction (ctxt_p, &pvalue->direction_vent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plancher_couverture_nuageuse */

   PU_PUSHNAME (ctxt_p, "plancher_couverture_nuageuse");

   stat = asn1PD_Altitude (ctxt_p, &pvalue->plancher_couverture_nuageuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode plafond_couverture_nuageuse */

   PU_PUSHNAME (ctxt_p, "plafond_couverture_nuageuse");

   stat = asn1PD_Altitude (ctxt_p, &pvalue->plafond_couverture_nuageuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode densite_moyenne_couverture_nuageuse */

   PU_PUSHNAME (ctxt_p, "densite_moyenne_couverture_nuageuse");

   stat = asn1PD_Pourcentage (ctxt_p, &pvalue->densite_moyenne_couverture_nuageuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode precipitation */

   PU_PUSHNAME (ctxt_p, "precipitation");

   stat = asn1PD_EnumPrecipitationType (ctxt_p, &pvalue->precipitation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MeteoAttributs: end\n");

   return (stat);
}

int ASN1C_MeteoAttributs::Decode ()
{
   return asn1PD_MeteoAttributs (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlMeteoGlobale                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlMeteoGlobale::ASN1C_MsgCtrlMeteoGlobale (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlMeteoGlobale& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlMeteoGlobale (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlMeteoGlobale* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlMeteoGlobale: start\n");

   /* encode attributs */

   PU_PUSHNAME (ctxt_p, "attributs");

   stat = asn1PE_MeteoAttributs (ctxt_p, &pvalue->attributs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCtrlMeteoGlobale: end\n");
   return (stat);
}

int ASN1C_MsgCtrlMeteoGlobale::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlMeteoGlobale (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlMeteoGlobale (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlMeteoGlobale* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlMeteoGlobale: start\n");

   /* decode attributs */

   PU_PUSHNAME (ctxt_p, "attributs");

   stat = asn1PD_MeteoAttributs (ctxt_p, &pvalue->attributs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCtrlMeteoGlobale: end\n");

   return (stat);
}

int ASN1C_MsgCtrlMeteoGlobale::Decode ()
{
   return asn1PD_MsgCtrlMeteoGlobale (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlMeteoLocale_meteo                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlMeteoLocale_meteo::ASN1C_MsgCtrlMeteoLocale_meteo (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlMeteoLocale_meteo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlMeteoLocale_meteo (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlMeteoLocale_meteo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlMeteoLocale_meteo: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* attributs */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.attributs");

         stat = asn1PE_MeteoAttributs (ctxt_p, pvalue->u.attributs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* globale */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.globale");

         /* NULL */
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgCtrlMeteoLocale_meteo: end\n");
   return (stat);
}

int ASN1C_MsgCtrlMeteoLocale_meteo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlMeteoLocale_meteo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlMeteoLocale_meteo (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlMeteoLocale_meteo* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgCtrlMeteoLocale_meteo: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* attributs */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.attributs");

         pvalue->u.attributs = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MeteoAttributs);
         if (pvalue->u.attributs == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MeteoAttributs (ctxt_p, pvalue->u.attributs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* globale */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.globale");

         /* NULL */

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgCtrlMeteoLocale_meteo: end\n");

   return (stat);
}

int ASN1C_MsgCtrlMeteoLocale_meteo::Decode ()
{
   return asn1PD_MsgCtrlMeteoLocale_meteo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlMeteoLocale                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlMeteoLocale::ASN1C_MsgCtrlMeteoLocale (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCtrlMeteoLocale& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCtrlMeteoLocale (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlMeteoLocale* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlMeteoLocale: start\n");

   /* encode rect_point_haut_gauche */

   PU_PUSHNAME (ctxt_p, "rect_point_haut_gauche");

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->rect_point_haut_gauche);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode rect_point_bas_droite */

   PU_PUSHNAME (ctxt_p, "rect_point_bas_droite");

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->rect_point_bas_droite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode meteo */

   PU_PUSHNAME (ctxt_p, "meteo");

   stat = asn1PE_MsgCtrlMeteoLocale_meteo (ctxt_p, &pvalue->meteo);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCtrlMeteoLocale: end\n");
   return (stat);
}

int ASN1C_MsgCtrlMeteoLocale::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlMeteoLocale (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCtrlMeteoLocale (ASN1CTXT* ctxt_p, ASN1T_MsgCtrlMeteoLocale* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlMeteoLocale: start\n");

   /* decode rect_point_haut_gauche */

   PU_PUSHNAME (ctxt_p, "rect_point_haut_gauche");

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->rect_point_haut_gauche);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode rect_point_bas_droite */

   PU_PUSHNAME (ctxt_p, "rect_point_bas_droite");

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->rect_point_bas_droite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode meteo */

   PU_PUSHNAME (ctxt_p, "meteo");

   stat = asn1PD_MsgCtrlMeteoLocale_meteo (ctxt_p, &pvalue->meteo);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCtrlMeteoLocale: end\n");

   return (stat);
}

int ASN1C_MsgCtrlMeteoLocale::Decode ()
{
   return asn1PD_MsgCtrlMeteoLocale (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlMeteoGlobaleAck                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlMeteoGlobaleAck::ASN1C_MsgCtrlMeteoGlobaleAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlMeteoGlobaleAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlMeteoGlobaleAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlMeteoGlobaleAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlMeteoGlobaleAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlMeteoGlobaleAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlMeteoGlobaleAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlMeteoGlobaleAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlMeteoGlobaleAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlMeteoGlobaleAck::Decode ()
{
   return asn1PD_MsgCtrlMeteoGlobaleAck (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgCtrlMeteoLocaleAck                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgCtrlMeteoLocaleAck::ASN1C_MsgCtrlMeteoLocaleAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgCtrlMeteoLocaleAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCtrlMeteoLocaleAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgCtrlMeteoLocaleAck: end\n");
   return (stat);
}

int ASN1C_MsgCtrlMeteoLocaleAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCtrlMeteoLocaleAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgCtrlMeteoLocaleAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCtrlMeteoLocaleAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgCtrlMeteoLocaleAck: end\n");

   return (stat);
}

int ASN1C_MsgCtrlMeteoLocaleAck::Decode ()
{
   return asn1PD_MsgCtrlMeteoLocaleAck (mpContext->GetPtr());
}


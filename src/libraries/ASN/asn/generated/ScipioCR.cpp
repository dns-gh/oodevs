/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 03-Apr-2006.
 */
#include "ScipioCR.h"

/**************************************************************/
/*                                                            */
/*  CR_RAS                                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_RAS::ASN1C_CR_RAS (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RAS (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RAS: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RAS: end\n");
   return (stat);
}

int ASN1C_CR_RAS::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RAS (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RAS (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RAS: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RAS: end\n");

   return (stat);
}

int ASN1C_CR_RAS::Decode ()
{
   return asn1PD_CR_RAS (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosteFaceAObstacle                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosteFaceAObstacle::ASN1C_CR_EnPosteFaceAObstacle (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EnPosteFaceAObstacle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EnPosteFaceAObstacle (ASN1CTXT* ctxt_p, ASN1T_CR_EnPosteFaceAObstacle value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosteFaceAObstacle: start\n");

   stat = asn1PE_KnowledgeObject (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_EnPosteFaceAObstacle: end\n");
   return (stat);
}

int ASN1C_CR_EnPosteFaceAObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosteFaceAObstacle (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_EnPosteFaceAObstacle (ASN1CTXT* ctxt_p, ASN1T_CR_EnPosteFaceAObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosteFaceAObstacle: start\n");

   stat = asn1PD_KnowledgeObject (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_EnPosteFaceAObstacle: end\n");

   return (stat);
}

int ASN1C_CR_EnPosteFaceAObstacle::Decode ()
{
   return asn1PD_CR_EnPosteFaceAObstacle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EnContournementObstacle                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnContournementObstacle::ASN1C_CR_EnContournementObstacle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnContournementObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnContournementObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnContournementObstacle: end\n");
   return (stat);
}

int ASN1C_CR_EnContournementObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnContournementObstacle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnContournementObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnContournementObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnContournementObstacle: end\n");

   return (stat);
}

int ASN1C_CR_EnContournementObstacle::Decode ()
{
   return asn1PD_CR_EnContournementObstacle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossible                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossible::ASN1C_CR_MissionImpossible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossible: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossible: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossible::Decode ()
{
   return asn1PD_CR_MissionImpossible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ProgressionSurAxe                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_ProgressionSurAxe::ASN1C_CR_ProgressionSurAxe (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ProgressionSurAxe (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ProgressionSurAxe: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ProgressionSurAxe: end\n");
   return (stat);
}

int ASN1C_CR_ProgressionSurAxe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ProgressionSurAxe (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ProgressionSurAxe (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ProgressionSurAxe: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ProgressionSurAxe: end\n");

   return (stat);
}

int ASN1C_CR_ProgressionSurAxe::Decode ()
{
   return asn1PD_CR_ProgressionSurAxe (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ProgressionVersPosition                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_ProgressionVersPosition::ASN1C_CR_ProgressionVersPosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ProgressionVersPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ProgressionVersPosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ProgressionVersPosition: end\n");
   return (stat);
}

int ASN1C_CR_ProgressionVersPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ProgressionVersPosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ProgressionVersPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ProgressionVersPosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ProgressionVersPosition: end\n");

   return (stat);
}

int ASN1C_CR_ProgressionVersPosition::Decode ()
{
   return asn1PD_CR_ProgressionVersPosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ArriveSurPosition                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_ArriveSurPosition::ASN1C_CR_ArriveSurPosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ArriveSurPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ArriveSurPosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ArriveSurPosition: end\n");
   return (stat);
}

int ASN1C_CR_ArriveSurPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ArriveSurPosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ArriveSurPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ArriveSurPosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ArriveSurPosition: end\n");

   return (stat);
}

int ASN1C_CR_ArriveSurPosition::Decode ()
{
   return asn1PD_CR_ArriveSurPosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissancePoint                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissancePoint::ASN1C_CR_ReconnaissancePoint (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissancePoint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissancePoint: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissancePoint: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissancePoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissancePoint (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissancePoint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissancePoint: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissancePoint: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissancePoint::Decode ()
{
   return asn1PD_CR_ReconnaissancePoint (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosteFaceADirectionDangereuse                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosteFaceADirectionDangereuse::ASN1C_CR_EnPosteFaceADirectionDangereuse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnPosteFaceADirectionDangereuse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosteFaceADirectionDangereuse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnPosteFaceADirectionDangereuse: end\n");
   return (stat);
}

int ASN1C_CR_EnPosteFaceADirectionDangereuse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosteFaceADirectionDangereuse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnPosteFaceADirectionDangereuse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosteFaceADirectionDangereuse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnPosteFaceADirectionDangereuse: end\n");

   return (stat);
}

int ASN1C_CR_EnPosteFaceADirectionDangereuse::Decode ()
{
   return asn1PD_CR_EnPosteFaceADirectionDangereuse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnJalonnement                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnJalonnement::ASN1C_CR_EnJalonnement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnJalonnement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnJalonnement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnJalonnement: end\n");
   return (stat);
}

int ASN1C_CR_EnJalonnement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnJalonnement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnJalonnement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnJalonnement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnJalonnement: end\n");

   return (stat);
}

int ASN1C_CR_EnJalonnement::Decode ()
{
   return asn1PD_CR_EnJalonnement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PreparationMission                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_PreparationMission::ASN1C_CR_PreparationMission (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PreparationMission& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PreparationMission (ASN1CTXT* ctxt_p, ASN1T_CR_PreparationMission* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PreparationMission: start\n");

   PU_NEWFIELD (ctxt_p, "delaiPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.delaiPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode delai */

   if (pvalue->m.delaiPresent) {
      PU_PUSHNAME (ctxt_p, "delai");

      stat = pe_UnconsInteger (ctxt_p, pvalue->delai);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_CR_PreparationMission: end\n");
   return (stat);
}

int ASN1C_CR_PreparationMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PreparationMission (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CR_PreparationMission (ASN1CTXT* ctxt_p, ASN1T_CR_PreparationMission* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_CR_PreparationMission: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "delaiPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.delaiPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode delai */

   if (pvalue->m.delaiPresent) {
      PU_PUSHNAME (ctxt_p, "delai");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->delai);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_CR_PreparationMission: end\n");

   return (stat);
}

int ASN1C_CR_PreparationMission::Decode ()
{
   return asn1PD_CR_PreparationMission (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DebutMission                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutMission::ASN1C_CR_DebutMission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutMission: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutMission: end\n");
   return (stat);
}

int ASN1C_CR_DebutMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutMission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutMission: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutMission: end\n");

   return (stat);
}

int ASN1C_CR_DebutMission::Decode ()
{
   return asn1PD_CR_DebutMission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinMission                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinMission::ASN1C_CR_FinMission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinMission: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinMission: end\n");
   return (stat);
}

int ASN1C_CR_FinMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinMission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinMission: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinMission: end\n");

   return (stat);
}

int ASN1C_CR_FinMission::Decode ()
{
   return asn1PD_CR_FinMission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DispositifInstalle                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_DispositifInstalle::ASN1C_CR_DispositifInstalle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DispositifInstalle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DispositifInstalle: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DispositifInstalle: end\n");
   return (stat);
}

int ASN1C_CR_DispositifInstalle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DispositifInstalle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DispositifInstalle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DispositifInstalle: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DispositifInstalle: end\n");

   return (stat);
}

int ASN1C_CR_DispositifInstalle::Decode ()
{
   return asn1PD_CR_DispositifInstalle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosition                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosition::ASN1C_CR_EnPosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnPosition: end\n");
   return (stat);
}

int ASN1C_CR_EnPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnPosition: end\n");

   return (stat);
}

int ASN1C_CR_EnPosition::Decode ()
{
   return asn1PD_CR_EnPosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObjectifAtteint                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObjectifAtteint::ASN1C_CR_ObjectifAtteint (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ObjectifAtteint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObjectifAtteint: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ObjectifAtteint: end\n");
   return (stat);
}

int ASN1C_CR_ObjectifAtteint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObjectifAtteint (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ObjectifAtteint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObjectifAtteint: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ObjectifAtteint: end\n");

   return (stat);
}

int ASN1C_CR_ObjectifAtteint::Decode ()
{
   return asn1PD_CR_ObjectifAtteint (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Debouche                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_Debouche::ASN1C_CR_Debouche (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Debouche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Debouche: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Debouche: end\n");
   return (stat);
}

int ASN1C_CR_Debouche::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Debouche (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Debouche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Debouche: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Debouche: end\n");

   return (stat);
}

int ASN1C_CR_Debouche::Decode ()
{
   return asn1PD_CR_Debouche (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RejointUnite                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_RejointUnite::ASN1C_CR_RejointUnite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RejointUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RejointUnite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RejointUnite: end\n");
   return (stat);
}

int ASN1C_CR_RejointUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RejointUnite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RejointUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RejointUnite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RejointUnite: end\n");

   return (stat);
}

int ASN1C_CR_RejointUnite::Decode ()
{
   return asn1PD_CR_RejointUnite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EscorteUnite                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_EscorteUnite::ASN1C_CR_EscorteUnite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EscorteUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EscorteUnite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EscorteUnite: end\n");
   return (stat);
}

int ASN1C_CR_EscorteUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EscorteUnite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EscorteUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EscorteUnite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EscorteUnite: end\n");

   return (stat);
}

int ASN1C_CR_EscorteUnite::Decode ()
{
   return asn1PD_CR_EscorteUnite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnFreinage                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnFreinage::ASN1C_CR_EnFreinage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnFreinage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnFreinage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnFreinage: end\n");
   return (stat);
}

int ASN1C_CR_EnFreinage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnFreinage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnFreinage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnFreinage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnFreinage: end\n");

   return (stat);
}

int ASN1C_CR_EnFreinage::Decode ()
{
   return asn1PD_CR_EnFreinage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Assaut                                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_Assaut::ASN1C_CR_Assaut (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Assaut (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Assaut: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Assaut: end\n");
   return (stat);
}

int ASN1C_CR_Assaut::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Assaut (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Assaut (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Assaut: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Assaut: end\n");

   return (stat);
}

int ASN1C_CR_Assaut::Decode ()
{
   return asn1PD_CR_Assaut (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnCouverture                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnCouverture::ASN1C_CR_EnCouverture (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnCouverture (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnCouverture: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnCouverture: end\n");
   return (stat);
}

int ASN1C_CR_EnCouverture::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnCouverture (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnCouverture (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnCouverture: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnCouverture: end\n");

   return (stat);
}

int ASN1C_CR_EnCouverture::Decode ()
{
   return asn1PD_CR_EnCouverture (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnEclairage                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnEclairage::ASN1C_CR_EnEclairage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnEclairage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnEclairage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnEclairage: end\n");
   return (stat);
}

int ASN1C_CR_EnEclairage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnEclairage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnEclairage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnEclairage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnEclairage: end\n");

   return (stat);
}

int ASN1C_CR_EnEclairage::Decode ()
{
   return asn1PD_CR_EnEclairage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnManoeuvreRavitaillement                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnManoeuvreRavitaillement::ASN1C_CR_EnManoeuvreRavitaillement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnManoeuvreRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnManoeuvreRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnManoeuvreRavitaillement: end\n");
   return (stat);
}

int ASN1C_CR_EnManoeuvreRavitaillement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnManoeuvreRavitaillement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnManoeuvreRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnManoeuvreRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnManoeuvreRavitaillement: end\n");

   return (stat);
}

int ASN1C_CR_EnManoeuvreRavitaillement::Decode ()
{
   return asn1PD_CR_EnManoeuvreRavitaillement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SurPIA                                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_SurPIA::ASN1C_CR_SurPIA (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SurPIA& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SurPIA (ASN1CTXT* ctxt_p, ASN1T_CR_SurPIA value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SurPIA: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SurPIA: end\n");
   return (stat);
}

int ASN1C_CR_SurPIA::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SurPIA (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SurPIA (ASN1CTXT* ctxt_p, ASN1T_CR_SurPIA* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SurPIA: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SurPIA: end\n");

   return (stat);
}

int ASN1C_CR_SurPIA::Decode ()
{
   return asn1PD_CR_SurPIA (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PassageSurPIA                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_PassageSurPIA::ASN1C_CR_PassageSurPIA (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PassageSurPIA (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PassageSurPIA: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PassageSurPIA: end\n");
   return (stat);
}

int ASN1C_CR_PassageSurPIA::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PassageSurPIA (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PassageSurPIA (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PassageSurPIA: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PassageSurPIA: end\n");

   return (stat);
}

int ASN1C_CR_PassageSurPIA::Decode ()
{
   return asn1PD_CR_PassageSurPIA (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_UniteRecueillie                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteRecueillie::ASN1C_CR_UniteRecueillie (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteRecueillie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteRecueillie (ASN1CTXT* ctxt_p, ASN1T_CR_UniteRecueillie value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteRecueillie: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteRecueillie: end\n");
   return (stat);
}

int ASN1C_CR_UniteRecueillie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteRecueillie (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteRecueillie (ASN1CTXT* ctxt_p, ASN1T_CR_UniteRecueillie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteRecueillie: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteRecueillie: end\n");

   return (stat);
}

int ASN1C_CR_UniteRecueillie::Decode ()
{
   return asn1PD_CR_UniteRecueillie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EnCoursDeFranchissement                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnCoursDeFranchissement::ASN1C_CR_EnCoursDeFranchissement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnCoursDeFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnCoursDeFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnCoursDeFranchissement: end\n");
   return (stat);
}

int ASN1C_CR_EnCoursDeFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnCoursDeFranchissement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnCoursDeFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnCoursDeFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnCoursDeFranchissement: end\n");

   return (stat);
}

int ASN1C_CR_EnCoursDeFranchissement::Decode ()
{
   return asn1PD_CR_EnCoursDeFranchissement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteOrdrePoursuivre                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteOrdrePoursuivre::ASN1C_CR_AttenteOrdrePoursuivre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteOrdrePoursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteOrdrePoursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteOrdrePoursuivre: end\n");
   return (stat);
}

int ASN1C_CR_AttenteOrdrePoursuivre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteOrdrePoursuivre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteOrdrePoursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteOrdrePoursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteOrdrePoursuivre: end\n");

   return (stat);
}

int ASN1C_CR_AttenteOrdrePoursuivre::Decode ()
{
   return asn1PD_CR_AttenteOrdrePoursuivre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteOrdreDeboucher                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteOrdreDeboucher::ASN1C_CR_AttenteOrdreDeboucher (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteOrdreDeboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteOrdreDeboucher: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteOrdreDeboucher: end\n");
   return (stat);
}

int ASN1C_CR_AttenteOrdreDeboucher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteOrdreDeboucher (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteOrdreDeboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteOrdreDeboucher: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteOrdreDeboucher: end\n");

   return (stat);
}

int ASN1C_CR_AttenteOrdreDeboucher::Decode ()
{
   return asn1PD_CR_AttenteOrdreDeboucher (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutControleZone                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutControleZone::ASN1C_CR_DebutControleZone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutControleZone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutControleZone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutControleZone: end\n");
   return (stat);
}

int ASN1C_CR_DebutControleZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutControleZone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutControleZone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutControleZone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutControleZone: end\n");

   return (stat);
}

int ASN1C_CR_DebutControleZone::Decode ()
{
   return asn1PD_CR_DebutControleZone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinControleZone                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinControleZone::ASN1C_CR_FinControleZone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinControleZone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinControleZone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinControleZone: end\n");
   return (stat);
}

int ASN1C_CR_FinControleZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinControleZone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinControleZone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinControleZone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinControleZone: end\n");

   return (stat);
}

int ASN1C_CR_FinControleZone::Decode ()
{
   return asn1PD_CR_FinControleZone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutSurveillance                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutSurveillance::ASN1C_CR_DebutSurveillance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutSurveillance: end\n");
   return (stat);
}

int ASN1C_CR_DebutSurveillance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutSurveillance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutSurveillance: end\n");

   return (stat);
}

int ASN1C_CR_DebutSurveillance::Decode ()
{
   return asn1PD_CR_DebutSurveillance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinSurveillance                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinSurveillance::ASN1C_CR_FinSurveillance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinSurveillance: end\n");
   return (stat);
}

int ASN1C_CR_FinSurveillance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinSurveillance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinSurveillance: end\n");

   return (stat);
}

int ASN1C_CR_FinSurveillance::Decode ()
{
   return asn1PD_CR_FinSurveillance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnInfiltration                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnInfiltration::ASN1C_CR_EnInfiltration (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnInfiltration: end\n");
   return (stat);
}

int ASN1C_CR_EnInfiltration::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnInfiltration (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnInfiltration: end\n");

   return (stat);
}

int ASN1C_CR_EnInfiltration::Decode ()
{
   return asn1PD_CR_EnInfiltration (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnExfiltration                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnExfiltration::ASN1C_CR_EnExfiltration (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnExfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnExfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnExfiltration: end\n");
   return (stat);
}

int ASN1C_CR_EnExfiltration::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnExfiltration (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnExfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnExfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnExfiltration: end\n");

   return (stat);
}

int ASN1C_CR_EnExfiltration::Decode ()
{
   return asn1PD_CR_EnExfiltration (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteConditionFavorablePourInfiltration              */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteConditionFavorablePourInfiltration::ASN1C_CR_AttenteConditionFavorablePourInfiltration (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteConditionFavorablePourInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteConditionFavorablePourInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteConditionFavorablePourInfiltration: end\n");
   return (stat);
}

int ASN1C_CR_AttenteConditionFavorablePourInfiltration::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteConditionFavorablePourInfiltration (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteConditionFavorablePourInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteConditionFavorablePourInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteConditionFavorablePourInfiltration: end\n");

   return (stat);
}

int ASN1C_CR_AttenteConditionFavorablePourInfiltration::Decode ()
{
   return asn1PD_CR_AttenteConditionFavorablePourInfiltration (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneLance                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneLance::ASN1C_CR_DroneLance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneLance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneLance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneLance: end\n");
   return (stat);
}

int ASN1C_CR_DroneLance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneLance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneLance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneLance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneLance: end\n");

   return (stat);
}

int ASN1C_CR_DroneLance::Decode ()
{
   return asn1PD_CR_DroneLance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneEnExploitation                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneEnExploitation::ASN1C_CR_DroneEnExploitation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneEnExploitation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneEnExploitation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneEnExploitation: end\n");
   return (stat);
}

int ASN1C_CR_DroneEnExploitation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneEnExploitation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneEnExploitation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneEnExploitation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneEnExploitation: end\n");

   return (stat);
}

int ASN1C_CR_DroneEnExploitation::Decode ()
{
   return asn1PD_CR_DroneEnExploitation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneExploite                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneExploite::ASN1C_CR_DroneExploite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneExploite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneExploite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneExploite: end\n");
   return (stat);
}

int ASN1C_CR_DroneExploite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneExploite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneExploite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneExploite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneExploite: end\n");

   return (stat);
}

int ASN1C_CR_DroneExploite::Decode ()
{
   return asn1PD_CR_DroneExploite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneDisponible                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneDisponible::ASN1C_CR_DroneDisponible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneDisponible: end\n");
   return (stat);
}

int ASN1C_CR_DroneDisponible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneDisponible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneDisponible: end\n");

   return (stat);
}

int ASN1C_CR_DroneDisponible::Decode ()
{
   return asn1PD_CR_DroneDisponible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutMiseEnOeuvreDrone                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutMiseEnOeuvreDrone::ASN1C_CR_DebutMiseEnOeuvreDrone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutMiseEnOeuvreDrone: end\n");
   return (stat);
}

int ASN1C_CR_DebutMiseEnOeuvreDrone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutMiseEnOeuvreDrone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutMiseEnOeuvreDrone: end\n");

   return (stat);
}

int ASN1C_CR_DebutMiseEnOeuvreDrone::Decode ()
{
   return asn1PD_CR_DebutMiseEnOeuvreDrone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinMiseEnOeuvreDrone                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinMiseEnOeuvreDrone::ASN1C_CR_FinMiseEnOeuvreDrone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinMiseEnOeuvreDrone: end\n");
   return (stat);
}

int ASN1C_CR_FinMiseEnOeuvreDrone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinMiseEnOeuvreDrone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinMiseEnOeuvreDrone: end\n");

   return (stat);
}

int ASN1C_CR_FinMiseEnOeuvreDrone::Decode ()
{
   return asn1PD_CR_FinMiseEnOeuvreDrone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ActivationBrouillage                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ActivationBrouillage::ASN1C_CR_ActivationBrouillage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ActivationBrouillage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ActivationBrouillage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ActivationBrouillage: end\n");
   return (stat);
}

int ASN1C_CR_ActivationBrouillage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ActivationBrouillage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ActivationBrouillage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ActivationBrouillage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ActivationBrouillage: end\n");

   return (stat);
}

int ASN1C_CR_ActivationBrouillage::Decode ()
{
   return asn1PD_CR_ActivationBrouillage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DesactivationBrouillage                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_DesactivationBrouillage::ASN1C_CR_DesactivationBrouillage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DesactivationBrouillage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DesactivationBrouillage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DesactivationBrouillage: end\n");
   return (stat);
}

int ASN1C_CR_DesactivationBrouillage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DesactivationBrouillage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DesactivationBrouillage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DesactivationBrouillage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DesactivationBrouillage: end\n");

   return (stat);
}

int ASN1C_CR_DesactivationBrouillage::Decode ()
{
   return asn1PD_CR_DesactivationBrouillage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ActivationSystemeEcoute                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_ActivationSystemeEcoute::ASN1C_CR_ActivationSystemeEcoute (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ActivationSystemeEcoute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ActivationSystemeEcoute: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ActivationSystemeEcoute: end\n");
   return (stat);
}

int ASN1C_CR_ActivationSystemeEcoute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ActivationSystemeEcoute (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ActivationSystemeEcoute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ActivationSystemeEcoute: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ActivationSystemeEcoute: end\n");

   return (stat);
}

int ASN1C_CR_ActivationSystemeEcoute::Decode ()
{
   return asn1PD_CR_ActivationSystemeEcoute (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DesactivationSystemeEcoute                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_DesactivationSystemeEcoute::ASN1C_CR_DesactivationSystemeEcoute (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DesactivationSystemeEcoute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DesactivationSystemeEcoute: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DesactivationSystemeEcoute: end\n");
   return (stat);
}

int ASN1C_CR_DesactivationSystemeEcoute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DesactivationSystemeEcoute (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DesactivationSystemeEcoute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DesactivationSystemeEcoute: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DesactivationSystemeEcoute: end\n");

   return (stat);
}

int ASN1C_CR_DesactivationSystemeEcoute::Decode ()
{
   return asn1PD_CR_DesactivationSystemeEcoute (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ActivationSystemeEcouteRadar                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_ActivationSystemeEcouteRadar::ASN1C_CR_ActivationSystemeEcouteRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ActivationSystemeEcouteRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ActivationSystemeEcouteRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ActivationSystemeEcouteRadar: end\n");
   return (stat);
}

int ASN1C_CR_ActivationSystemeEcouteRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ActivationSystemeEcouteRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ActivationSystemeEcouteRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ActivationSystemeEcouteRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ActivationSystemeEcouteRadar: end\n");

   return (stat);
}

int ASN1C_CR_ActivationSystemeEcouteRadar::Decode ()
{
   return asn1PD_CR_ActivationSystemeEcouteRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DesactivationSystemeEcouteRadar                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_DesactivationSystemeEcouteRadar::ASN1C_CR_DesactivationSystemeEcouteRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DesactivationSystemeEcouteRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DesactivationSystemeEcouteRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DesactivationSystemeEcouteRadar: end\n");
   return (stat);
}

int ASN1C_CR_DesactivationSystemeEcouteRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DesactivationSystemeEcouteRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DesactivationSystemeEcouteRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DesactivationSystemeEcouteRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DesactivationSystemeEcouteRadar: end\n");

   return (stat);
}

int ASN1C_CR_DesactivationSystemeEcouteRadar::Decode ()
{
   return asn1PD_CR_DesactivationSystemeEcouteRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutLiaison                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutLiaison::ASN1C_CR_DebutLiaison (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutLiaison (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutLiaison: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutLiaison: end\n");
   return (stat);
}

int ASN1C_CR_DebutLiaison::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutLiaison (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutLiaison (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutLiaison: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutLiaison: end\n");

   return (stat);
}

int ASN1C_CR_DebutLiaison::Decode ()
{
   return asn1PD_CR_DebutLiaison (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinLiaison                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinLiaison::ASN1C_CR_FinLiaison (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinLiaison (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinLiaison: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinLiaison: end\n");
   return (stat);
}

int ASN1C_CR_FinLiaison::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinLiaison (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinLiaison (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinLiaison: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinLiaison: end\n");

   return (stat);
}

int ASN1C_CR_FinLiaison::Decode ()
{
   return asn1PD_CR_FinLiaison (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EtablissementLiaisonImpossible                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EtablissementLiaisonImpossible::ASN1C_CR_EtablissementLiaisonImpossible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EtablissementLiaisonImpossible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EtablissementLiaisonImpossible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EtablissementLiaisonImpossible: end\n");
   return (stat);
}

int ASN1C_CR_EtablissementLiaisonImpossible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EtablissementLiaisonImpossible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EtablissementLiaisonImpossible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EtablissementLiaisonImpossible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EtablissementLiaisonImpossible: end\n");

   return (stat);
}

int ASN1C_CR_EtablissementLiaisonImpossible::Decode ()
{
   return asn1PD_CR_EtablissementLiaisonImpossible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_UniteTropDistante                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteTropDistante::ASN1C_CR_UniteTropDistante (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_UniteTropDistante (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteTropDistante: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_UniteTropDistante: end\n");
   return (stat);
}

int ASN1C_CR_UniteTropDistante::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteTropDistante (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_UniteTropDistante (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteTropDistante: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_UniteTropDistante: end\n");

   return (stat);
}

int ASN1C_CR_UniteTropDistante::Decode ()
{
   return asn1PD_CR_UniteTropDistante (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnregistrementDonnes                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnregistrementDonnes::ASN1C_CR_EnregistrementDonnes (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnregistrementDonnes (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnregistrementDonnes: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnregistrementDonnes: end\n");
   return (stat);
}

int ASN1C_CR_EnregistrementDonnes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnregistrementDonnes (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnregistrementDonnes (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnregistrementDonnes: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnregistrementDonnes: end\n");

   return (stat);
}

int ASN1C_CR_EnregistrementDonnes::Decode ()
{
   return asn1PD_CR_EnregistrementDonnes (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ExploitationDonnees                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_ExploitationDonnees::ASN1C_CR_ExploitationDonnees (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ExploitationDonnees (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ExploitationDonnees: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ExploitationDonnees: end\n");
   return (stat);
}

int ASN1C_CR_ExploitationDonnees::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ExploitationDonnees (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ExploitationDonnees (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ExploitationDonnees: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ExploitationDonnees: end\n");

   return (stat);
}

int ASN1C_CR_ExploitationDonnees::Decode ()
{
   return asn1PD_CR_ExploitationDonnees (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ExtractionDonnes                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_ExtractionDonnes::ASN1C_CR_ExtractionDonnes (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ExtractionDonnes (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ExtractionDonnes: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ExtractionDonnes: end\n");
   return (stat);
}

int ASN1C_CR_ExtractionDonnes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ExtractionDonnes (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ExtractionDonnes (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ExtractionDonnes: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ExtractionDonnes: end\n");

   return (stat);
}

int ASN1C_CR_ExtractionDonnes::Decode ()
{
   return asn1PD_CR_ExtractionDonnes (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Fixe                                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_Fixe::ASN1C_CR_Fixe (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Fixe (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Fixe: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Fixe: end\n");
   return (stat);
}

int ASN1C_CR_Fixe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Fixe (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Fixe (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Fixe: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Fixe: end\n");

   return (stat);
}

int ASN1C_CR_Fixe::Decode ()
{
   return asn1PD_CR_Fixe (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnEsquive                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnEsquive::ASN1C_CR_EnEsquive (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnEsquive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnEsquive: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnEsquive: end\n");
   return (stat);
}

int ASN1C_CR_EnEsquive::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnEsquive (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnEsquive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnEsquive: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnEsquive: end\n");

   return (stat);
}

int ASN1C_CR_EnEsquive::Decode ()
{
   return asn1PD_CR_EnEsquive (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PriseContact                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_PriseContact::ASN1C_CR_PriseContact (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PriseContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PriseContact: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PriseContact: end\n");
   return (stat);
}

int ASN1C_CR_PriseContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PriseContact (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PriseContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PriseContact: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PriseContact: end\n");

   return (stat);
}

int ASN1C_CR_PriseContact::Decode ()
{
   return asn1PD_CR_PriseContact (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RuptureContact                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_RuptureContact::ASN1C_CR_RuptureContact (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RuptureContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RuptureContact: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RuptureContact: end\n");
   return (stat);
}

int ASN1C_CR_RuptureContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RuptureContact (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RuptureContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RuptureContact: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RuptureContact: end\n");

   return (stat);
}

int ASN1C_CR_RuptureContact::Decode ()
{
   return asn1PD_CR_RuptureContact (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PrecisionContact                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_PrecisionContact::ASN1C_CR_PrecisionContact (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PrecisionContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PrecisionContact (ASN1CTXT* ctxt_p, ASN1T_CR_PrecisionContact value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PrecisionContact: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PrecisionContact: end\n");
   return (stat);
}

int ASN1C_CR_PrecisionContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PrecisionContact (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PrecisionContact (ASN1CTXT* ctxt_p, ASN1T_CR_PrecisionContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PrecisionContact: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PrecisionContact: end\n");

   return (stat);
}

int ASN1C_CR_PrecisionContact::Decode ()
{
   return asn1PD_CR_PrecisionContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EnnemiDetruit                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnnemiDetruit::ASN1C_CR_EnnemiDetruit (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EnnemiDetruit& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EnnemiDetruit (ASN1CTXT* ctxt_p, ASN1T_CR_EnnemiDetruit value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnnemiDetruit: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_EnnemiDetruit: end\n");
   return (stat);
}

int ASN1C_CR_EnnemiDetruit::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnnemiDetruit (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_EnnemiDetruit (ASN1CTXT* ctxt_p, ASN1T_CR_EnnemiDetruit* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnnemiDetruit: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_EnnemiDetruit: end\n");

   return (stat);
}

int ASN1C_CR_EnnemiDetruit::Decode ()
{
   return asn1PD_CR_EnnemiDetruit (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PrisAPartieParTirDirect                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_PrisAPartieParTirDirect::ASN1C_CR_PrisAPartieParTirDirect (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PrisAPartieParTirDirect (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PrisAPartieParTirDirect: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PrisAPartieParTirDirect: end\n");
   return (stat);
}

int ASN1C_CR_PrisAPartieParTirDirect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PrisAPartieParTirDirect (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PrisAPartieParTirDirect (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PrisAPartieParTirDirect: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PrisAPartieParTirDirect: end\n");

   return (stat);
}

int ASN1C_CR_PrisAPartieParTirDirect::Decode ()
{
   return asn1PD_CR_PrisAPartieParTirDirect (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PrisSousTirArtillerie                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_PrisSousTirArtillerie::ASN1C_CR_PrisSousTirArtillerie (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PrisSousTirArtillerie (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PrisSousTirArtillerie: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PrisSousTirArtillerie: end\n");
   return (stat);
}

int ASN1C_CR_PrisSousTirArtillerie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PrisSousTirArtillerie (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PrisSousTirArtillerie (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PrisSousTirArtillerie: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PrisSousTirArtillerie: end\n");

   return (stat);
}

int ASN1C_CR_PrisSousTirArtillerie::Decode ()
{
   return asn1PD_CR_PrisSousTirArtillerie (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PointTenuParEni                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_PointTenuParEni::ASN1C_CR_PointTenuParEni (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PointTenuParEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PointTenuParEni (ASN1CTXT* ctxt_p, ASN1T_CR_PointTenuParEni value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PointTenuParEni: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PointTenuParEni: end\n");
   return (stat);
}

int ASN1C_CR_PointTenuParEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PointTenuParEni (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PointTenuParEni (ASN1CTXT* ctxt_p, ASN1T_CR_PointTenuParEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PointTenuParEni: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PointTenuParEni: end\n");

   return (stat);
}

int ASN1C_CR_PointTenuParEni::Decode ()
{
   return asn1PD_CR_PointTenuParEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ProgressionVersEni                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_ProgressionVersEni::ASN1C_CR_ProgressionVersEni (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ProgressionVersEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ProgressionVersEni (ASN1CTXT* ctxt_p, ASN1T_CR_ProgressionVersEni value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ProgressionVersEni: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ProgressionVersEni: end\n");
   return (stat);
}

int ASN1C_CR_ProgressionVersEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ProgressionVersEni (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ProgressionVersEni (ASN1CTXT* ctxt_p, ASN1T_CR_ProgressionVersEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ProgressionVersEni: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ProgressionVersEni: end\n");

   return (stat);
}

int ASN1C_CR_ProgressionVersEni::Decode ()
{
   return asn1PD_CR_ProgressionVersEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_Decroche                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_Decroche::ASN1C_CR_Decroche (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Decroche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Decroche: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Decroche: end\n");
   return (stat);
}

int ASN1C_CR_Decroche::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Decroche (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Decroche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Decroche: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Decroche: end\n");

   return (stat);
}

int ASN1C_CR_Decroche::Decode ()
{
   return asn1PD_CR_Decroche (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EniSurObjectif                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EniSurObjectif::ASN1C_CR_EniSurObjectif (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EniSurObjectif& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EniSurObjectif (ASN1CTXT* ctxt_p, ASN1T_CR_EniSurObjectif value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EniSurObjectif: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_EniSurObjectif: end\n");
   return (stat);
}

int ASN1C_CR_EniSurObjectif::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EniSurObjectif (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_EniSurObjectif (ASN1CTXT* ctxt_p, ASN1T_CR_EniSurObjectif* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EniSurObjectif: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_EniSurObjectif: end\n");

   return (stat);
}

int ASN1C_CR_EniSurObjectif::Decode ()
{
   return asn1PD_CR_EniSurObjectif (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_Riposte                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_Riposte::ASN1C_CR_Riposte (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Riposte (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Riposte: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Riposte: end\n");
   return (stat);
}

int ASN1C_CR_Riposte::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Riposte (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Riposte (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Riposte: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Riposte: end\n");

   return (stat);
}

int ASN1C_CR_Riposte::Decode ()
{
   return asn1PD_CR_Riposte (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Releve                                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_Releve::ASN1C_CR_Releve (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_Releve& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_Releve (ASN1CTXT* ctxt_p, ASN1T_CR_Releve value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Releve: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_Releve: end\n");
   return (stat);
}

int ASN1C_CR_Releve::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Releve (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_Releve (ASN1CTXT* ctxt_p, ASN1T_CR_Releve* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Releve: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_Releve: end\n");

   return (stat);
}

int ASN1C_CR_Releve::Decode ()
{
   return asn1PD_CR_Releve (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SuitUnite                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_SuitUnite::ASN1C_CR_SuitUnite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SuitUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SuitUnite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SuitUnite: end\n");
   return (stat);
}

int ASN1C_CR_SuitUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SuitUnite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SuitUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SuitUnite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SuitUnite: end\n");

   return (stat);
}

int ASN1C_CR_SuitUnite::Decode ()
{
   return asn1PD_CR_SuitUnite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PasseEnAppui                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_PasseEnAppui::ASN1C_CR_PasseEnAppui (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PasseEnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PasseEnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PasseEnAppui: end\n");
   return (stat);
}

int ASN1C_CR_PasseEnAppui::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PasseEnAppui (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PasseEnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PasseEnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PasseEnAppui: end\n");

   return (stat);
}

int ASN1C_CR_PasseEnAppui::Decode ()
{
   return asn1PD_CR_PasseEnAppui (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnAppui                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnAppui::ASN1C_CR_EnAppui (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnAppui: end\n");
   return (stat);
}

int ASN1C_CR_EnAppui::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnAppui (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnAppui: end\n");

   return (stat);
}

int ASN1C_CR_EnAppui::Decode ()
{
   return asn1PD_CR_EnAppui (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_NonOperationnel                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_NonOperationnel::ASN1C_CR_NonOperationnel (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_NonOperationnel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_NonOperationnel: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_NonOperationnel: end\n");
   return (stat);
}

int ASN1C_CR_NonOperationnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_NonOperationnel (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_NonOperationnel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_NonOperationnel: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_NonOperationnel: end\n");

   return (stat);
}

int ASN1C_CR_NonOperationnel::Decode ()
{
   return asn1PD_CR_NonOperationnel (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Operationnel                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_Operationnel::ASN1C_CR_Operationnel (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Operationnel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Operationnel: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Operationnel: end\n");
   return (stat);
}

int ASN1C_CR_Operationnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Operationnel (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Operationnel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Operationnel: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Operationnel: end\n");

   return (stat);
}

int ASN1C_CR_Operationnel::Decode ()
{
   return asn1PD_CR_Operationnel (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AmbianceVitesse                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_AmbianceVitesse::ASN1C_CR_AmbianceVitesse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AmbianceVitesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AmbianceVitesse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AmbianceVitesse: end\n");
   return (stat);
}

int ASN1C_CR_AmbianceVitesse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AmbianceVitesse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AmbianceVitesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AmbianceVitesse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AmbianceVitesse: end\n");

   return (stat);
}

int ASN1C_CR_AmbianceVitesse::Decode ()
{
   return asn1PD_CR_AmbianceVitesse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AmbianceSurete                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_AmbianceSurete::ASN1C_CR_AmbianceSurete (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AmbianceSurete (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AmbianceSurete: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AmbianceSurete: end\n");
   return (stat);
}

int ASN1C_CR_AmbianceSurete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AmbianceSurete (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AmbianceSurete (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AmbianceSurete: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AmbianceSurete: end\n");

   return (stat);
}

int ASN1C_CR_AmbianceSurete::Decode ()
{
   return asn1PD_CR_AmbianceSurete (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SurLima                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_SurLima::ASN1C_CR_SurLima (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SurLima& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SurLima (ASN1CTXT* ctxt_p, ASN1T_CR_SurLima value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SurLima: start\n");

   stat = asn1PE_EnumTypeLima (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SurLima: end\n");
   return (stat);
}

int ASN1C_CR_SurLima::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SurLima (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SurLima (ASN1CTXT* ctxt_p, ASN1T_CR_SurLima* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SurLima: start\n");

   stat = asn1PD_EnumTypeLima (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SurLima: end\n");

   return (stat);
}

int ASN1C_CR_SurLima::Decode ()
{
   return asn1PD_CR_SurLima (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DebutAmenagementBerges                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutAmenagementBerges::ASN1C_CR_DebutAmenagementBerges (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutAmenagementBerges (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutAmenagementBerges: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutAmenagementBerges: end\n");
   return (stat);
}

int ASN1C_CR_DebutAmenagementBerges::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutAmenagementBerges (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutAmenagementBerges (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutAmenagementBerges: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutAmenagementBerges: end\n");

   return (stat);
}

int ASN1C_CR_DebutAmenagementBerges::Decode ()
{
   return asn1PD_CR_DebutAmenagementBerges (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinAmenagementBerges                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinAmenagementBerges::ASN1C_CR_FinAmenagementBerges (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinAmenagementBerges (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinAmenagementBerges: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinAmenagementBerges: end\n");
   return (stat);
}

int ASN1C_CR_FinAmenagementBerges::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinAmenagementBerges (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinAmenagementBerges (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinAmenagementBerges: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinAmenagementBerges: end\n");

   return (stat);
}

int ASN1C_CR_FinAmenagementBerges::Decode ()
{
   return asn1PD_CR_FinAmenagementBerges (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObstacleEnAttenteActivation                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObstacleEnAttenteActivation::ASN1C_CR_ObstacleEnAttenteActivation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ObstacleEnAttenteActivation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ObstacleEnAttenteActivation (ASN1CTXT* ctxt_p, ASN1T_CR_ObstacleEnAttenteActivation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObstacleEnAttenteActivation: start\n");

   stat = asn1PE_KnowledgeObject (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ObstacleEnAttenteActivation: end\n");
   return (stat);
}

int ASN1C_CR_ObstacleEnAttenteActivation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObstacleEnAttenteActivation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ObstacleEnAttenteActivation (ASN1CTXT* ctxt_p, ASN1T_CR_ObstacleEnAttenteActivation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObstacleEnAttenteActivation: start\n");

   stat = asn1PD_KnowledgeObject (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ObstacleEnAttenteActivation: end\n");

   return (stat);
}

int ASN1C_CR_ObstacleEnAttenteActivation::Decode ()
{
   return asn1PD_CR_ObstacleEnAttenteActivation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DebutTravaux                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutTravaux::ASN1C_CR_DebutTravaux (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutTravaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutTravaux: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutTravaux: end\n");
   return (stat);
}

int ASN1C_CR_DebutTravaux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutTravaux (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutTravaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutTravaux: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutTravaux: end\n");

   return (stat);
}

int ASN1C_CR_DebutTravaux::Decode ()
{
   return asn1PD_CR_DebutTravaux (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinTravaux                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinTravaux::ASN1C_CR_FinTravaux (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinTravaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinTravaux: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinTravaux: end\n");
   return (stat);
}

int ASN1C_CR_FinTravaux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinTravaux (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinTravaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinTravaux: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinTravaux: end\n");

   return (stat);
}

int ASN1C_CR_FinTravaux::Decode ()
{
   return asn1PD_CR_FinTravaux (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObstacleDegage                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObstacleDegage::ASN1C_CR_ObstacleDegage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ObstacleDegage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObstacleDegage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ObstacleDegage: end\n");
   return (stat);
}

int ASN1C_CR_ObstacleDegage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObstacleDegage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ObstacleDegage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObstacleDegage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ObstacleDegage: end\n");

   return (stat);
}

int ASN1C_CR_ObstacleDegage::Decode ()
{
   return asn1PD_CR_ObstacleDegage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_OrganisationChantier                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_OrganisationChantier::ASN1C_CR_OrganisationChantier (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_OrganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_OrganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_OrganisationChantier: end\n");
   return (stat);
}

int ASN1C_CR_OrganisationChantier::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_OrganisationChantier (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_OrganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_OrganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_OrganisationChantier: end\n");

   return (stat);
}

int ASN1C_CR_OrganisationChantier::Decode ()
{
   return asn1PD_CR_OrganisationChantier (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DesorganisationChantier                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_DesorganisationChantier::ASN1C_CR_DesorganisationChantier (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DesorganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DesorganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DesorganisationChantier: end\n");
   return (stat);
}

int ASN1C_CR_DesorganisationChantier::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DesorganisationChantier (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DesorganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DesorganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DesorganisationChantier: end\n");

   return (stat);
}

int ASN1C_CR_DesorganisationChantier::Decode ()
{
   return asn1PD_CR_DesorganisationChantier (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissancePositionObstacle                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissancePositionObstacle::ASN1C_CR_ReconnaissancePositionObstacle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissancePositionObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissancePositionObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissancePositionObstacle: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissancePositionObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissancePositionObstacle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissancePositionObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissancePositionObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissancePositionObstacle: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissancePositionObstacle::Decode ()
{
   return asn1PD_CR_ReconnaissancePositionObstacle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ContournementRealise                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ContournementRealise::ASN1C_CR_ContournementRealise (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ContournementRealise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ContournementRealise: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ContournementRealise: end\n");
   return (stat);
}

int ASN1C_CR_ContournementRealise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ContournementRealise (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ContournementRealise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ContournementRealise: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ContournementRealise: end\n");

   return (stat);
}

int ASN1C_CR_ContournementRealise::Decode ()
{
   return asn1PD_CR_ContournementRealise (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteRenforcement                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteRenforcement::ASN1C_CR_AttenteRenforcement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteRenforcement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteRenforcement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteRenforcement: end\n");
   return (stat);
}

int ASN1C_CR_AttenteRenforcement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteRenforcement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteRenforcement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteRenforcement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteRenforcement: end\n");

   return (stat);
}

int ASN1C_CR_AttenteRenforcement::Decode ()
{
   return asn1PD_CR_AttenteRenforcement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutExploitationSiteFranchissement                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutExploitationSiteFranchissement::ASN1C_CR_DebutExploitationSiteFranchissement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutExploitationSiteFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutExploitationSiteFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutExploitationSiteFranchissement: end\n");
   return (stat);
}

int ASN1C_CR_DebutExploitationSiteFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutExploitationSiteFranchissement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutExploitationSiteFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutExploitationSiteFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutExploitationSiteFranchissement: end\n");

   return (stat);
}

int ASN1C_CR_DebutExploitationSiteFranchissement::Decode ()
{
   return asn1PD_CR_DebutExploitationSiteFranchissement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinExploitationSiteFranchissement                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinExploitationSiteFranchissement::ASN1C_CR_FinExploitationSiteFranchissement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinExploitationSiteFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinExploitationSiteFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinExploitationSiteFranchissement: end\n");
   return (stat);
}

int ASN1C_CR_FinExploitationSiteFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinExploitationSiteFranchissement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinExploitationSiteFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinExploitationSiteFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinExploitationSiteFranchissement: end\n");

   return (stat);
}

int ASN1C_CR_FinExploitationSiteFranchissement::Decode ()
{
   return asn1PD_CR_FinExploitationSiteFranchissement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReussiteRenforcement                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReussiteRenforcement::ASN1C_CR_ReussiteRenforcement (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ReussiteRenforcement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ReussiteRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_ReussiteRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReussiteRenforcement: start\n");

   /* encode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PE_Agent (ctxt_p, pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_CR_ReussiteRenforcement: end\n");
   return (stat);
}

int ASN1C_CR_ReussiteRenforcement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReussiteRenforcement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CR_ReussiteRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_ReussiteRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReussiteRenforcement: start\n");

   /* decode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PD_Agent (ctxt_p, &pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_CR_ReussiteRenforcement: end\n");

   return (stat);
}

int ASN1C_CR_ReussiteRenforcement::Decode ()
{
   return asn1PD_CR_ReussiteRenforcement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EchecRenforcement                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_EchecRenforcement::ASN1C_CR_EchecRenforcement (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EchecRenforcement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EchecRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_EchecRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EchecRenforcement: start\n");

   /* encode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PE_Agent (ctxt_p, pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_CR_EchecRenforcement: end\n");
   return (stat);
}

int ASN1C_CR_EchecRenforcement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EchecRenforcement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CR_EchecRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_EchecRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EchecRenforcement: start\n");

   /* decode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PD_Agent (ctxt_p, &pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_CR_EchecRenforcement: end\n");

   return (stat);
}

int ASN1C_CR_EchecRenforcement::Decode ()
{
   return asn1PD_CR_EchecRenforcement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_RegimeMaintenanceDelaiDepasse                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_RegimeMaintenanceDelaiDepasse::ASN1C_CR_RegimeMaintenanceDelaiDepasse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RegimeMaintenanceDelaiDepasse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RegimeMaintenanceDelaiDepasse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RegimeMaintenanceDelaiDepasse: end\n");
   return (stat);
}

int ASN1C_CR_RegimeMaintenanceDelaiDepasse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RegimeMaintenanceDelaiDepasse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RegimeMaintenanceDelaiDepasse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RegimeMaintenanceDelaiDepasse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RegimeMaintenanceDelaiDepasse: end\n");

   return (stat);
}

int ASN1C_CR_RegimeMaintenanceDelaiDepasse::Decode ()
{
   return asn1PD_CR_RegimeMaintenanceDelaiDepasse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SectionDeployee                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_SectionDeployee::ASN1C_CR_SectionDeployee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SectionDeployee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SectionDeployee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SectionDeployee: end\n");
   return (stat);
}

int ASN1C_CR_SectionDeployee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SectionDeployee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SectionDeployee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SectionDeployee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SectionDeployee: end\n");

   return (stat);
}

int ASN1C_CR_SectionDeployee::Decode ()
{
   return asn1PD_CR_SectionDeployee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ANouveauDisponibleApresReparation                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_ANouveauDisponibleApresReparation::ASN1C_CR_ANouveauDisponibleApresReparation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ANouveauDisponibleApresReparation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ANouveauDisponibleApresReparation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ANouveauDisponibleApresReparation: end\n");
   return (stat);
}

int ASN1C_CR_ANouveauDisponibleApresReparation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ANouveauDisponibleApresReparation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ANouveauDisponibleApresReparation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ANouveauDisponibleApresReparation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ANouveauDisponibleApresReparation: end\n");

   return (stat);
}

int ASN1C_CR_ANouveauDisponibleApresReparation::Decode ()
{
   return asn1PD_CR_ANouveauDisponibleApresReparation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MaterielRepareSurPlace                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_MaterielRepareSurPlace::ASN1C_CR_MaterielRepareSurPlace (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_MaterielRepareSurPlace& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_MaterielRepareSurPlace (ASN1CTXT* ctxt_p, ASN1T_CR_MaterielRepareSurPlace value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MaterielRepareSurPlace: start\n");

   stat = asn1PE_TypeEquipement (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_MaterielRepareSurPlace: end\n");
   return (stat);
}

int ASN1C_CR_MaterielRepareSurPlace::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MaterielRepareSurPlace (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_MaterielRepareSurPlace (ASN1CTXT* ctxt_p, ASN1T_CR_MaterielRepareSurPlace* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MaterielRepareSurPlace: start\n");

   stat = asn1PD_TypeEquipement (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_MaterielRepareSurPlace: end\n");

   return (stat);
}

int ASN1C_CR_MaterielRepareSurPlace::Decode ()
{
   return asn1PD_CR_MaterielRepareSurPlace (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_MaterielRetourDeMaintenance                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_MaterielRetourDeMaintenance::ASN1C_CR_MaterielRetourDeMaintenance (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_MaterielRetourDeMaintenance& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_MaterielRetourDeMaintenance (ASN1CTXT* ctxt_p, ASN1T_CR_MaterielRetourDeMaintenance value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MaterielRetourDeMaintenance: start\n");

   stat = asn1PE_TypeEquipement (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_MaterielRetourDeMaintenance: end\n");
   return (stat);
}

int ASN1C_CR_MaterielRetourDeMaintenance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MaterielRetourDeMaintenance (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_MaterielRetourDeMaintenance (ASN1CTXT* ctxt_p, ASN1T_CR_MaterielRetourDeMaintenance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MaterielRetourDeMaintenance: start\n");

   stat = asn1PD_TypeEquipement (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_MaterielRetourDeMaintenance: end\n");

   return (stat);
}

int ASN1C_CR_MaterielRetourDeMaintenance::Decode ()
{
   return asn1PD_CR_MaterielRetourDeMaintenance (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeRavitaillementDotations                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeRavitaillementDotations::ASN1C_CR_DemandeRavitaillementDotations (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeRavitaillementDotations (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeRavitaillementDotations: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeRavitaillementDotations: end\n");
   return (stat);
}

int ASN1C_CR_DemandeRavitaillementDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeRavitaillementDotations (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeRavitaillementDotations (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeRavitaillementDotations: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeRavitaillementDotations: end\n");

   return (stat);
}

int ASN1C_CR_DemandeRavitaillementDotations::Decode ()
{
   return asn1PD_CR_DemandeRavitaillementDotations (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeRavitaillementStock                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeRavitaillementStock::ASN1C_CR_DemandeRavitaillementStock (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeRavitaillementStock (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeRavitaillementStock: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeRavitaillementStock: end\n");
   return (stat);
}

int ASN1C_CR_DemandeRavitaillementStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeRavitaillementStock (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeRavitaillementStock (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeRavitaillementStock: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeRavitaillementStock: end\n");

   return (stat);
}

int ASN1C_CR_DemandeRavitaillementStock::Decode ()
{
   return asn1PD_CR_DemandeRavitaillementStock (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeEvacuationSanitaire                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeEvacuationSanitaire::ASN1C_CR_DemandeEvacuationSanitaire (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeEvacuationSanitaire (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeEvacuationSanitaire: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeEvacuationSanitaire: end\n");
   return (stat);
}

int ASN1C_CR_DemandeEvacuationSanitaire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeEvacuationSanitaire (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeEvacuationSanitaire (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeEvacuationSanitaire: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeEvacuationSanitaire: end\n");

   return (stat);
}

int ASN1C_CR_DemandeEvacuationSanitaire::Decode ()
{
   return asn1PD_CR_DemandeEvacuationSanitaire (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeEvacuationMateriel                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeEvacuationMateriel::ASN1C_CR_DemandeEvacuationMateriel (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeEvacuationMateriel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeEvacuationMateriel: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeEvacuationMateriel: end\n");
   return (stat);
}

int ASN1C_CR_DemandeEvacuationMateriel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeEvacuationMateriel (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeEvacuationMateriel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeEvacuationMateriel: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeEvacuationMateriel: end\n");

   return (stat);
}

int ASN1C_CR_DemandeEvacuationMateriel::Decode ()
{
   return asn1PD_CR_DemandeEvacuationMateriel (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AllocationConsentieBientotEpuisee                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_AllocationConsentieBientotEpuisee::ASN1C_CR_AllocationConsentieBientotEpuisee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_AllocationConsentieBientotEpuisee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_AllocationConsentieBientotEpuisee (ASN1CTXT* ctxt_p, ASN1T_CR_AllocationConsentieBientotEpuisee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AllocationConsentieBientotEpuisee: start\n");

   stat = asn1PE_TypeDotation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_AllocationConsentieBientotEpuisee: end\n");
   return (stat);
}

int ASN1C_CR_AllocationConsentieBientotEpuisee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AllocationConsentieBientotEpuisee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_AllocationConsentieBientotEpuisee (ASN1CTXT* ctxt_p, ASN1T_CR_AllocationConsentieBientotEpuisee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AllocationConsentieBientotEpuisee: start\n");

   stat = asn1PD_TypeDotation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_AllocationConsentieBientotEpuisee: end\n");

   return (stat);
}

int ASN1C_CR_AllocationConsentieBientotEpuisee::Decode ()
{
   return asn1PD_CR_AllocationConsentieBientotEpuisee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DepassementCapaciteStockage                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_DepassementCapaciteStockage::ASN1C_CR_DepassementCapaciteStockage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DepassementCapaciteStockage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DepassementCapaciteStockage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DepassementCapaciteStockage: end\n");
   return (stat);
}

int ASN1C_CR_DepassementCapaciteStockage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DepassementCapaciteStockage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DepassementCapaciteStockage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DepassementCapaciteStockage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DepassementCapaciteStockage: end\n");

   return (stat);
}

int ASN1C_CR_DepassementCapaciteStockage::Decode ()
{
   return asn1PD_CR_DepassementCapaciteStockage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SeuilLogistiqueDotationDepasse                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_SeuilLogistiqueDotationDepasse::ASN1C_CR_SeuilLogistiqueDotationDepasse (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SeuilLogistiqueDotationDepasse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SeuilLogistiqueDotationDepasse (ASN1CTXT* ctxt_p, ASN1T_CR_SeuilLogistiqueDotationDepasse value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SeuilLogistiqueDotationDepasse: start\n");

   stat = asn1PE_TypeDotation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SeuilLogistiqueDotationDepasse: end\n");
   return (stat);
}

int ASN1C_CR_SeuilLogistiqueDotationDepasse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SeuilLogistiqueDotationDepasse (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SeuilLogistiqueDotationDepasse (ASN1CTXT* ctxt_p, ASN1T_CR_SeuilLogistiqueDotationDepasse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SeuilLogistiqueDotationDepasse: start\n");

   stat = asn1PD_TypeDotation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SeuilLogistiqueDotationDepasse: end\n");

   return (stat);
}

int ASN1C_CR_SeuilLogistiqueDotationDepasse::Decode ()
{
   return asn1PD_CR_SeuilLogistiqueDotationDepasse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SeuilLogistiqueStockDepasse                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_SeuilLogistiqueStockDepasse::ASN1C_CR_SeuilLogistiqueStockDepasse (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SeuilLogistiqueStockDepasse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SeuilLogistiqueStockDepasse (ASN1CTXT* ctxt_p, ASN1T_CR_SeuilLogistiqueStockDepasse value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SeuilLogistiqueStockDepasse: start\n");

   stat = asn1PE_TypeDotation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SeuilLogistiqueStockDepasse: end\n");
   return (stat);
}

int ASN1C_CR_SeuilLogistiqueStockDepasse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SeuilLogistiqueStockDepasse (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SeuilLogistiqueStockDepasse (ASN1CTXT* ctxt_p, ASN1T_CR_SeuilLogistiqueStockDepasse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SeuilLogistiqueStockDepasse: start\n");

   stat = asn1PD_TypeDotation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SeuilLogistiqueStockDepasse: end\n");

   return (stat);
}

int ASN1C_CR_SeuilLogistiqueStockDepasse::Decode ()
{
   return asn1PD_CR_SeuilLogistiqueStockDepasse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementDotationsEffectue                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementDotationsEffectue::ASN1C_CR_RavitaillementDotationsEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementDotationsEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementDotationsEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementDotationsEffectue: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementDotationsEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementDotationsEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementDotationsEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementDotationsEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementDotationsEffectue: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementDotationsEffectue::Decode ()
{
   return asn1PD_CR_RavitaillementDotationsEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementStockEffectue                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementStockEffectue::ASN1C_CR_RavitaillementStockEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementStockEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementStockEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementStockEffectue: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementStockEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementStockEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementStockEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementStockEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementStockEffectue: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementStockEffectue::Decode ()
{
   return asn1PD_CR_RavitaillementStockEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementDotationsAnnule                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementDotationsAnnule::ASN1C_CR_RavitaillementDotationsAnnule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementDotationsAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementDotationsAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementDotationsAnnule: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementDotationsAnnule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementDotationsAnnule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementDotationsAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementDotationsAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementDotationsAnnule: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementDotationsAnnule::Decode ()
{
   return asn1PD_CR_RavitaillementDotationsAnnule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementStockAnnule                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementStockAnnule::ASN1C_CR_RavitaillementStockAnnule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementStockAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementStockAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementStockAnnule: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementStockAnnule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementStockAnnule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementStockAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementStockAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementStockAnnule: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementStockAnnule::Decode ()
{
   return asn1PD_CR_RavitaillementStockAnnule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_HumainRetourDeSante                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_HumainRetourDeSante::ASN1C_CR_HumainRetourDeSante (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_HumainRetourDeSante (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_HumainRetourDeSante: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_HumainRetourDeSante: end\n");
   return (stat);
}

int ASN1C_CR_HumainRetourDeSante::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_HumainRetourDeSante (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_HumainRetourDeSante (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_HumainRetourDeSante: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_HumainRetourDeSante: end\n");

   return (stat);
}

int ASN1C_CR_HumainRetourDeSante::Decode ()
{
   return asn1PD_CR_HumainRetourDeSante (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_VSRAM_PretEnCours                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_VSRAM_PretEnCours::ASN1C_CR_VSRAM_PretEnCours (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_VSRAM_PretEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_VSRAM_PretEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_VSRAM_PretEnCours: end\n");
   return (stat);
}

int ASN1C_CR_VSRAM_PretEnCours::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_VSRAM_PretEnCours (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_VSRAM_PretEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_VSRAM_PretEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_VSRAM_PretEnCours: end\n");

   return (stat);
}

int ASN1C_CR_VSRAM_PretEnCours::Decode ()
{
   return asn1PD_CR_VSRAM_PretEnCours (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_VSRAM_PretAnnule                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_VSRAM_PretAnnule::ASN1C_CR_VSRAM_PretAnnule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_VSRAM_PretAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_VSRAM_PretAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_VSRAM_PretAnnule: end\n");
   return (stat);
}

int ASN1C_CR_VSRAM_PretAnnule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_VSRAM_PretAnnule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_VSRAM_PretAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_VSRAM_PretAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_VSRAM_PretAnnule: end\n");

   return (stat);
}

int ASN1C_CR_VSRAM_PretAnnule::Decode ()
{
   return asn1PD_CR_VSRAM_PretAnnule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_VSRAM_PretEffectue                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_VSRAM_PretEffectue::ASN1C_CR_VSRAM_PretEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_VSRAM_PretEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_VSRAM_PretEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_VSRAM_PretEffectue: end\n");
   return (stat);
}

int ASN1C_CR_VSRAM_PretEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_VSRAM_PretEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_VSRAM_PretEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_VSRAM_PretEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_VSRAM_PretEffectue: end\n");

   return (stat);
}

int ASN1C_CR_VSRAM_PretEffectue::Decode ()
{
   return asn1PD_CR_VSRAM_PretEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_VSRAM_RecuperationEffectuee                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_VSRAM_RecuperationEffectuee::ASN1C_CR_VSRAM_RecuperationEffectuee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_VSRAM_RecuperationEffectuee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_VSRAM_RecuperationEffectuee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_VSRAM_RecuperationEffectuee: end\n");
   return (stat);
}

int ASN1C_CR_VSRAM_RecuperationEffectuee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_VSRAM_RecuperationEffectuee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_VSRAM_RecuperationEffectuee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_VSRAM_RecuperationEffectuee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_VSRAM_RecuperationEffectuee: end\n");

   return (stat);
}

int ASN1C_CR_VSRAM_RecuperationEffectuee::Decode ()
{
   return asn1PD_CR_VSRAM_RecuperationEffectuee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_DeplacementVersPointChargement                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_DeplacementVersPointChargement::ASN1C_CR_Convoi_DeplacementVersPointChargement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_DeplacementVersPointChargement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_DeplacementVersPointChargement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_DeplacementVersPointChargement: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_DeplacementVersPointChargement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_DeplacementVersPointChargement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_DeplacementVersPointChargement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_DeplacementVersPointChargement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_DeplacementVersPointChargement: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_DeplacementVersPointChargement::Decode ()
{
   return asn1PD_CR_Convoi_DeplacementVersPointChargement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_ChargementEnCours                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_ChargementEnCours::ASN1C_CR_Convoi_ChargementEnCours (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_ChargementEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_ChargementEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_ChargementEnCours: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_ChargementEnCours::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_ChargementEnCours (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_ChargementEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_ChargementEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_ChargementEnCours: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_ChargementEnCours::Decode ()
{
   return asn1PD_CR_Convoi_ChargementEnCours (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_ChargementEffectue                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_ChargementEffectue::ASN1C_CR_Convoi_ChargementEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_ChargementEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_ChargementEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_ChargementEffectue: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_ChargementEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_ChargementEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_ChargementEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_ChargementEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_ChargementEffectue: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_ChargementEffectue::Decode ()
{
   return asn1PD_CR_Convoi_ChargementEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_DeplacementVersPointDechargement                */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_DeplacementVersPointDechargement::ASN1C_CR_Convoi_DeplacementVersPointDechargement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_DeplacementVersPointDechargement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_DeplacementVersPointDechargement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_DeplacementVersPointDechargement: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_DeplacementVersPointDechargement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_DeplacementVersPointDechargement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_DeplacementVersPointDechargement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_DeplacementVersPointDechargement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_DeplacementVersPointDechargement: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_DeplacementVersPointDechargement::Decode ()
{
   return asn1PD_CR_Convoi_DeplacementVersPointDechargement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_DechargementEnCours                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_DechargementEnCours::ASN1C_CR_Convoi_DechargementEnCours (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_DechargementEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_DechargementEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_DechargementEnCours: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_DechargementEnCours::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_DechargementEnCours (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_DechargementEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_DechargementEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_DechargementEnCours: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_DechargementEnCours::Decode ()
{
   return asn1PD_CR_Convoi_DechargementEnCours (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_DechargementEffectue                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_DechargementEffectue::ASN1C_CR_Convoi_DechargementEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_DechargementEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_DechargementEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_DechargementEffectue: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_DechargementEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_DechargementEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_DechargementEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_DechargementEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_DechargementEffectue: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_DechargementEffectue::Decode ()
{
   return asn1PD_CR_Convoi_DechargementEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Convoi_Retour                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_Convoi_Retour::ASN1C_CR_Convoi_Retour (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Convoi_Retour (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Convoi_Retour: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Convoi_Retour: end\n");
   return (stat);
}

int ASN1C_CR_Convoi_Retour::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Convoi_Retour (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Convoi_Retour (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Convoi_Retour: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Convoi_Retour: end\n");

   return (stat);
}

int ASN1C_CR_Convoi_Retour::Decode ()
{
   return asn1PD_CR_Convoi_Retour (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnCoursRavitaillement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnCoursRavitaillement::ASN1C_CR_EnCoursRavitaillement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnCoursRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnCoursRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnCoursRavitaillement: end\n");
   return (stat);
}

int ASN1C_CR_EnCoursRavitaillement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnCoursRavitaillement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnCoursRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnCoursRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnCoursRavitaillement: end\n");

   return (stat);
}

int ASN1C_CR_EnCoursRavitaillement::Decode ()
{
   return asn1PD_CR_EnCoursRavitaillement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementTermine                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementTermine::ASN1C_CR_RavitaillementTermine (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementTermine: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementTermine: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementTermine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementTermine (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementTermine: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementTermine: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementTermine::Decode ()
{
   return asn1PD_CR_RavitaillementTermine (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_HelicoptereEnObservation                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_HelicoptereEnObservation::ASN1C_CR_HelicoptereEnObservation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_HelicoptereEnObservation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_HelicoptereEnObservation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_HelicoptereEnObservation: end\n");
   return (stat);
}

int ASN1C_CR_HelicoptereEnObservation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_HelicoptereEnObservation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_HelicoptereEnObservation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_HelicoptereEnObservation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_HelicoptereEnObservation: end\n");

   return (stat);
}

int ASN1C_CR_HelicoptereEnObservation::Decode ()
{
   return asn1PD_CR_HelicoptereEnObservation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PerteInfoGuidage                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_PerteInfoGuidage::ASN1C_CR_PerteInfoGuidage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PerteInfoGuidage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PerteInfoGuidage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PerteInfoGuidage: end\n");
   return (stat);
}

int ASN1C_CR_PerteInfoGuidage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PerteInfoGuidage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PerteInfoGuidage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PerteInfoGuidage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PerteInfoGuidage: end\n");

   return (stat);
}

int ASN1C_CR_PerteInfoGuidage::Decode ()
{
   return asn1PD_CR_PerteInfoGuidage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TransportUnitePasPrete                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportUnitePasPrete::ASN1C_CR_TransportUnitePasPrete (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TransportUnitePasPrete& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TransportUnitePasPrete (ASN1CTXT* ctxt_p, ASN1T_CR_TransportUnitePasPrete value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportUnitePasPrete: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TransportUnitePasPrete: end\n");
   return (stat);
}

int ASN1C_CR_TransportUnitePasPrete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportUnitePasPrete (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TransportUnitePasPrete (ASN1CTXT* ctxt_p, ASN1T_CR_TransportUnitePasPrete* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportUnitePasPrete: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TransportUnitePasPrete: end\n");

   return (stat);
}

int ASN1C_CR_TransportUnitePasPrete::Decode ()
{
   return asn1PD_CR_TransportUnitePasPrete (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TransportUnitePrete                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportUnitePrete::ASN1C_CR_TransportUnitePrete (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TransportUnitePrete& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TransportUnitePrete (ASN1CTXT* ctxt_p, ASN1T_CR_TransportUnitePrete value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportUnitePrete: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TransportUnitePrete: end\n");
   return (stat);
}

int ASN1C_CR_TransportUnitePrete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportUnitePrete (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TransportUnitePrete (ASN1CTXT* ctxt_p, ASN1T_CR_TransportUnitePrete* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportUnitePrete: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TransportUnitePrete: end\n");

   return (stat);
}

int ASN1C_CR_TransportUnitePrete::Decode ()
{
   return asn1PD_CR_TransportUnitePrete (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TransportEnCours                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportEnCours::ASN1C_CR_TransportEnCours (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TransportEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TransportEnCours: end\n");
   return (stat);
}

int ASN1C_CR_TransportEnCours::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportEnCours (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TransportEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TransportEnCours: end\n");

   return (stat);
}

int ASN1C_CR_TransportEnCours::Decode ()
{
   return asn1PD_CR_TransportEnCours (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TransportEmbarquement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportEmbarquement::ASN1C_CR_TransportEmbarquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TransportEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TransportEmbarquement: end\n");
   return (stat);
}

int ASN1C_CR_TransportEmbarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportEmbarquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TransportEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TransportEmbarquement: end\n");

   return (stat);
}

int ASN1C_CR_TransportEmbarquement::Decode ()
{
   return asn1PD_CR_TransportEmbarquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TransportDebarquement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportDebarquement::ASN1C_CR_TransportDebarquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TransportDebarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportDebarquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TransportDebarquement: end\n");
   return (stat);
}

int ASN1C_CR_TransportDebarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportDebarquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TransportDebarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportDebarquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TransportDebarquement: end\n");

   return (stat);
}

int ASN1C_CR_TransportDebarquement::Decode ()
{
   return asn1PD_CR_TransportDebarquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_VehiculeLaisseSurPosition                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_VehiculeLaisseSurPosition::ASN1C_CR_VehiculeLaisseSurPosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_VehiculeLaisseSurPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_VehiculeLaisseSurPosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_VehiculeLaisseSurPosition: end\n");
   return (stat);
}

int ASN1C_CR_VehiculeLaisseSurPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_VehiculeLaisseSurPosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_VehiculeLaisseSurPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_VehiculeLaisseSurPosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_VehiculeLaisseSurPosition: end\n");

   return (stat);
}

int ASN1C_CR_VehiculeLaisseSurPosition::Decode ()
{
   return asn1PD_CR_VehiculeLaisseSurPosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RejointPositionEmbarquement                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_RejointPositionEmbarquement::ASN1C_CR_RejointPositionEmbarquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RejointPositionEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RejointPositionEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RejointPositionEmbarquement: end\n");
   return (stat);
}

int ASN1C_CR_RejointPositionEmbarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RejointPositionEmbarquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RejointPositionEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RejointPositionEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RejointPositionEmbarquement: end\n");

   return (stat);
}

int ASN1C_CR_RejointPositionEmbarquement::Decode ()
{
   return asn1PD_CR_RejointPositionEmbarquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnAttenteTransporteurs                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnAttenteTransporteurs::ASN1C_CR_EnAttenteTransporteurs (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnAttenteTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnAttenteTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnAttenteTransporteurs: end\n");
   return (stat);
}

int ASN1C_CR_EnAttenteTransporteurs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnAttenteTransporteurs (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnAttenteTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnAttenteTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnAttenteTransporteurs: end\n");

   return (stat);
}

int ASN1C_CR_EnAttenteTransporteurs::Decode ()
{
   return asn1PD_CR_EnAttenteTransporteurs (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ContamineNBC                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_ContamineNBC::ASN1C_CR_ContamineNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ContamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ContamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ContamineNBC: end\n");
   return (stat);
}

int ASN1C_CR_ContamineNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ContamineNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ContamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ContamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ContamineNBC: end\n");

   return (stat);
}

int ASN1C_CR_ContamineNBC::Decode ()
{
   return asn1PD_CR_ContamineNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecontamineNBC                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecontamineNBC::ASN1C_CR_DecontamineNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecontamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecontamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecontamineNBC: end\n");
   return (stat);
}

int ASN1C_CR_DecontamineNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecontamineNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecontamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecontamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecontamineNBC: end\n");

   return (stat);
}

int ASN1C_CR_DecontamineNBC::Decode ()
{
   return asn1PD_CR_DecontamineNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TenueProtectionNBCMise                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_TenueProtectionNBCMise::ASN1C_CR_TenueProtectionNBCMise (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TenueProtectionNBCMise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TenueProtectionNBCMise: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TenueProtectionNBCMise: end\n");
   return (stat);
}

int ASN1C_CR_TenueProtectionNBCMise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TenueProtectionNBCMise (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TenueProtectionNBCMise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TenueProtectionNBCMise: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TenueProtectionNBCMise: end\n");

   return (stat);
}

int ASN1C_CR_TenueProtectionNBCMise::Decode ()
{
   return asn1PD_CR_TenueProtectionNBCMise (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TenueProtectionNBCEnlevee                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_TenueProtectionNBCEnlevee::ASN1C_CR_TenueProtectionNBCEnlevee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TenueProtectionNBCEnlevee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TenueProtectionNBCEnlevee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TenueProtectionNBCEnlevee: end\n");
   return (stat);
}

int ASN1C_CR_TenueProtectionNBCEnlevee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TenueProtectionNBCEnlevee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TenueProtectionNBCEnlevee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TenueProtectionNBCEnlevee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TenueProtectionNBCEnlevee: end\n");

   return (stat);
}

int ASN1C_CR_TenueProtectionNBCEnlevee::Decode ()
{
   return asn1PD_CR_TenueProtectionNBCEnlevee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AlerteNBCNiveau4                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_AlerteNBCNiveau4::ASN1C_CR_AlerteNBCNiveau4 (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AlerteNBCNiveau4 (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AlerteNBCNiveau4: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AlerteNBCNiveau4: end\n");
   return (stat);
}

int ASN1C_CR_AlerteNBCNiveau4::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AlerteNBCNiveau4 (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AlerteNBCNiveau4 (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AlerteNBCNiveau4: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AlerteNBCNiveau4: end\n");

   return (stat);
}

int ASN1C_CR_AlerteNBCNiveau4::Decode ()
{
   return asn1PD_CR_AlerteNBCNiveau4 (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinAlerteNBCNiveau4                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinAlerteNBCNiveau4::ASN1C_CR_FinAlerteNBCNiveau4 (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinAlerteNBCNiveau4 (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinAlerteNBCNiveau4: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinAlerteNBCNiveau4: end\n");
   return (stat);
}

int ASN1C_CR_FinAlerteNBCNiveau4::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinAlerteNBCNiveau4 (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinAlerteNBCNiveau4 (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinAlerteNBCNiveau4: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinAlerteNBCNiveau4: end\n");

   return (stat);
}

int ASN1C_CR_FinAlerteNBCNiveau4::Decode ()
{
   return asn1PD_CR_FinAlerteNBCNiveau4 (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SiteDecontaminationAnime                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteDecontaminationAnime::ASN1C_CR_SiteDecontaminationAnime (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteDecontaminationAnime (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteDecontaminationAnime: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteDecontaminationAnime: end\n");
   return (stat);
}

int ASN1C_CR_SiteDecontaminationAnime::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteDecontaminationAnime (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteDecontaminationAnime (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteDecontaminationAnime: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteDecontaminationAnime: end\n");

   return (stat);
}

int ASN1C_CR_SiteDecontaminationAnime::Decode ()
{
   return asn1PD_CR_SiteDecontaminationAnime (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SiteDecontaminationDesactive                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteDecontaminationDesactive::ASN1C_CR_SiteDecontaminationDesactive (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteDecontaminationDesactive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteDecontaminationDesactive: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteDecontaminationDesactive: end\n");
   return (stat);
}

int ASN1C_CR_SiteDecontaminationDesactive::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteDecontaminationDesactive (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteDecontaminationDesactive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteDecontaminationDesactive: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteDecontaminationDesactive: end\n");

   return (stat);
}

int ASN1C_CR_SiteDecontaminationDesactive::Decode ()
{
   return asn1PD_CR_SiteDecontaminationDesactive (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeDecontamination                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeDecontamination::ASN1C_CR_DemandeDecontamination (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeDecontamination (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeDecontamination: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeDecontamination: end\n");
   return (stat);
}

int ASN1C_CR_DemandeDecontamination::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeDecontamination (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeDecontamination (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeDecontamination: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeDecontamination: end\n");

   return (stat);
}

int ASN1C_CR_DemandeDecontamination::Decode ()
{
   return asn1PD_CR_DemandeDecontamination (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ZoneReconnue                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_ZoneReconnue::ASN1C_CR_ZoneReconnue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ZoneReconnue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ZoneReconnue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ZoneReconnue: end\n");
   return (stat);
}

int ASN1C_CR_ZoneReconnue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ZoneReconnue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ZoneReconnue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ZoneReconnue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ZoneReconnue: end\n");

   return (stat);
}

int ASN1C_CR_ZoneReconnue::Decode ()
{
   return asn1PD_CR_ZoneReconnue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ZoneDecontaminee                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_ZoneDecontaminee::ASN1C_CR_ZoneDecontaminee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ZoneDecontaminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ZoneDecontaminee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ZoneDecontaminee: end\n");
   return (stat);
}

int ASN1C_CR_ZoneDecontaminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ZoneDecontaminee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ZoneDecontaminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ZoneDecontaminee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ZoneDecontaminee: end\n");

   return (stat);
}

int ASN1C_CR_ZoneDecontaminee::Decode ()
{
   return asn1PD_CR_ZoneDecontaminee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SiteROTAReconnu                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteROTAReconnu::ASN1C_CR_SiteROTAReconnu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteROTAReconnu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteROTAReconnu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteROTAReconnu: end\n");
   return (stat);
}

int ASN1C_CR_SiteROTAReconnu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteROTAReconnu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteROTAReconnu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteROTAReconnu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteROTAReconnu: end\n");

   return (stat);
}

int ASN1C_CR_SiteROTAReconnu::Decode ()
{
   return asn1PD_CR_SiteROTAReconnu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_IncidentNBCTermine                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_IncidentNBCTermine::ASN1C_CR_IncidentNBCTermine (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_IncidentNBCTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_IncidentNBCTermine: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_IncidentNBCTermine: end\n");
   return (stat);
}

int ASN1C_CR_IncidentNBCTermine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_IncidentNBCTermine (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_IncidentNBCTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_IncidentNBCTermine: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_IncidentNBCTermine: end\n");

   return (stat);
}

int ASN1C_CR_IncidentNBCTermine::Decode ()
{
   return asn1PD_CR_IncidentNBCTermine (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_UniteDecontaminee                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteDecontaminee::ASN1C_CR_UniteDecontaminee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteDecontaminee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteDecontaminee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteDecontaminee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteDecontaminee: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteDecontaminee: end\n");
   return (stat);
}

int ASN1C_CR_UniteDecontaminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteDecontaminee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteDecontaminee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteDecontaminee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteDecontaminee: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteDecontaminee: end\n");

   return (stat);
}

int ASN1C_CR_UniteDecontaminee::Decode ()
{
   return asn1PD_CR_UniteDecontaminee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SiteSature                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteSature::ASN1C_CR_SiteSature (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteSature (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteSature: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteSature: end\n");
   return (stat);
}

int ASN1C_CR_SiteSature::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteSature (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteSature (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteSature: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteSature: end\n");

   return (stat);
}

int ASN1C_CR_SiteSature::Decode ()
{
   return asn1PD_CR_SiteSature (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutMesure                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutMesure::ASN1C_CR_DebutMesure (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutMesure (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutMesure: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutMesure: end\n");
   return (stat);
}

int ASN1C_CR_DebutMesure::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutMesure (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutMesure (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutMesure: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutMesure: end\n");

   return (stat);
}

int ASN1C_CR_DebutMesure::Decode ()
{
   return asn1PD_CR_DebutMesure (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinMesure                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinMesure::ASN1C_CR_FinMesure (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinMesure (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinMesure: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinMesure: end\n");
   return (stat);
}

int ASN1C_CR_FinMesure::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinMesure (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinMesure (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinMesure: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinMesure: end\n");

   return (stat);
}

int ASN1C_CR_FinMesure::Decode ()
{
   return asn1PD_CR_FinMesure (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissanceTerminee                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissanceTerminee::ASN1C_CR_ReconnaissanceTerminee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissanceTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissanceTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissanceTerminee: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissanceTerminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissanceTerminee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissanceTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissanceTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissanceTerminee: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissanceTerminee::Decode ()
{
   return asn1PD_CR_ReconnaissanceTerminee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissanceInitialeTerminee                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissanceInitialeTerminee::ASN1C_CR_ReconnaissanceInitialeTerminee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissanceInitialeTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissanceInitialeTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissanceInitialeTerminee: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissanceInitialeTerminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissanceInitialeTerminee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissanceInitialeTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissanceInitialeTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissanceInitialeTerminee: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissanceInitialeTerminee::Decode ()
{
   return asn1PD_CR_ReconnaissanceInitialeTerminee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RejointPlotRavitaillement                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_RejointPlotRavitaillement::ASN1C_CR_RejointPlotRavitaillement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RejointPlotRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RejointPlotRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RejointPlotRavitaillement: end\n");
   return (stat);
}

int ASN1C_CR_RejointPlotRavitaillement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RejointPlotRavitaillement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RejointPlotRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RejointPlotRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RejointPlotRavitaillement: end\n");

   return (stat);
}

int ASN1C_CR_RejointPlotRavitaillement::Decode ()
{
   return asn1PD_CR_RejointPlotRavitaillement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PremierCoupParti                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_PremierCoupParti::ASN1C_CR_PremierCoupParti (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PremierCoupParti (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PremierCoupParti: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PremierCoupParti: end\n");
   return (stat);
}

int ASN1C_CR_PremierCoupParti::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PremierCoupParti (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PremierCoupParti (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PremierCoupParti: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PremierCoupParti: end\n");

   return (stat);
}

int ASN1C_CR_PremierCoupParti::Decode ()
{
   return asn1PD_CR_PremierCoupParti (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirExecute                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirExecute::ASN1C_CR_TirExecute (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirExecute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirExecute: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirExecute: end\n");
   return (stat);
}

int ASN1C_CR_TirExecute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirExecute (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirExecute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirExecute: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirExecute: end\n");

   return (stat);
}

int ASN1C_CR_TirExecute::Decode ()
{
   return asn1PD_CR_TirExecute (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirHorsDePortee                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirHorsDePortee::ASN1C_CR_TirHorsDePortee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirHorsDePortee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirHorsDePortee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirHorsDePortee: end\n");
   return (stat);
}

int ASN1C_CR_TirHorsDePortee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirHorsDePortee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirHorsDePortee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirHorsDePortee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirHorsDePortee: end\n");

   return (stat);
}

int ASN1C_CR_TirHorsDePortee::Decode ()
{
   return asn1PD_CR_TirHorsDePortee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirImpossiblePlusDeMunitions                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirImpossiblePlusDeMunitions::ASN1C_CR_TirImpossiblePlusDeMunitions (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirImpossiblePlusDeMunitions (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirImpossiblePlusDeMunitions: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirImpossiblePlusDeMunitions: end\n");
   return (stat);
}

int ASN1C_CR_TirImpossiblePlusDeMunitions::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirImpossiblePlusDeMunitions (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirImpossiblePlusDeMunitions (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirImpossiblePlusDeMunitions: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirImpossiblePlusDeMunitions: end\n");

   return (stat);
}

int ASN1C_CR_TirImpossiblePlusDeMunitions::Decode ()
{
   return asn1PD_CR_TirImpossiblePlusDeMunitions (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirAnnule                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirAnnule::ASN1C_CR_TirAnnule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirAnnule: end\n");
   return (stat);
}

int ASN1C_CR_TirAnnule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirAnnule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirAnnule: end\n");

   return (stat);
}

int ASN1C_CR_TirAnnule::Decode ()
{
   return asn1PD_CR_TirAnnule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ChangementDePosition                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ChangementDePosition::ASN1C_CR_ChangementDePosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ChangementDePosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ChangementDePosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ChangementDePosition: end\n");
   return (stat);
}

int ASN1C_CR_ChangementDePosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ChangementDePosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ChangementDePosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ChangementDePosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ChangementDePosition: end\n");

   return (stat);
}

int ASN1C_CR_ChangementDePosition::Decode ()
{
   return asn1PD_CR_ChangementDePosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutInstallation                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutInstallation::ASN1C_CR_DebutInstallation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutInstallation: end\n");
   return (stat);
}

int ASN1C_CR_DebutInstallation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutInstallation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutInstallation: end\n");

   return (stat);
}

int ASN1C_CR_DebutInstallation::Decode ()
{
   return asn1PD_CR_DebutInstallation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinInstallation                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinInstallation::ASN1C_CR_FinInstallation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinInstallation: end\n");
   return (stat);
}

int ASN1C_CR_FinInstallation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinInstallation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinInstallation: end\n");

   return (stat);
}

int ASN1C_CR_FinInstallation::Decode ()
{
   return asn1PD_CR_FinInstallation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PretPourConduiteTir                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_PretPourConduiteTir::ASN1C_CR_PretPourConduiteTir (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PretPourConduiteTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PretPourConduiteTir: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PretPourConduiteTir: end\n");
   return (stat);
}

int ASN1C_CR_PretPourConduiteTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PretPourConduiteTir (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PretPourConduiteTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PretPourConduiteTir: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PretPourConduiteTir: end\n");

   return (stat);
}

int ASN1C_CR_PretPourConduiteTir::Decode ()
{
   return asn1PD_CR_PretPourConduiteTir (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReceptionOrdreDeFeu                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReceptionOrdreDeFeu::ASN1C_CR_ReceptionOrdreDeFeu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReceptionOrdreDeFeu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReceptionOrdreDeFeu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReceptionOrdreDeFeu: end\n");
   return (stat);
}

int ASN1C_CR_ReceptionOrdreDeFeu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReceptionOrdreDeFeu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReceptionOrdreDeFeu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReceptionOrdreDeFeu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReceptionOrdreDeFeu: end\n");

   return (stat);
}

int ASN1C_CR_ReceptionOrdreDeFeu::Decode ()
{
   return asn1PD_CR_ReceptionOrdreDeFeu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PretAuTir                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_PretAuTir::ASN1C_CR_PretAuTir (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PretAuTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PretAuTir: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PretAuTir: end\n");
   return (stat);
}

int ASN1C_CR_PretAuTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PretAuTir (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PretAuTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PretAuTir: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PretAuTir: end\n");

   return (stat);
}

int ASN1C_CR_PretAuTir::Decode ()
{
   return asn1PD_CR_PretAuTir (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObservationTirIndirect                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObservationTirIndirect::ASN1C_CR_ObservationTirIndirect (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ObservationTirIndirect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ObservationTirIndirect (ASN1CTXT* ctxt_p, ASN1T_CR_ObservationTirIndirect value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObservationTirIndirect: start\n");

   stat = asn1PE_TirPion (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ObservationTirIndirect: end\n");
   return (stat);
}

int ASN1C_CR_ObservationTirIndirect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObservationTirIndirect (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ObservationTirIndirect (ASN1CTXT* ctxt_p, ASN1T_CR_ObservationTirIndirect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObservationTirIndirect: start\n");

   stat = asn1PD_TirPion (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ObservationTirIndirect: end\n");

   return (stat);
}

int ASN1C_CR_ObservationTirIndirect::Decode ()
{
   return asn1PD_CR_ObservationTirIndirect (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ZoneImplantationOccupee                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_ZoneImplantationOccupee::ASN1C_CR_ZoneImplantationOccupee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ZoneImplantationOccupee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ZoneImplantationOccupee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ZoneImplantationOccupee: end\n");
   return (stat);
}

int ASN1C_CR_ZoneImplantationOccupee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ZoneImplantationOccupee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ZoneImplantationOccupee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ZoneImplantationOccupee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ZoneImplantationOccupee: end\n");

   return (stat);
}

int ASN1C_CR_ZoneImplantationOccupee::Decode ()
{
   return asn1PD_CR_ZoneImplantationOccupee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_InstallationSurZoneImplantation                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_InstallationSurZoneImplantation::ASN1C_CR_InstallationSurZoneImplantation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_InstallationSurZoneImplantation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_InstallationSurZoneImplantation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_InstallationSurZoneImplantation: end\n");
   return (stat);
}

int ASN1C_CR_InstallationSurZoneImplantation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_InstallationSurZoneImplantation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_InstallationSurZoneImplantation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_InstallationSurZoneImplantation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_InstallationSurZoneImplantation: end\n");

   return (stat);
}

int ASN1C_CR_InstallationSurZoneImplantation::Decode ()
{
   return asn1PD_CR_InstallationSurZoneImplantation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PresencePopulation                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_PresencePopulation::ASN1C_CR_PresencePopulation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PresencePopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PresencePopulation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PresencePopulation: end\n");
   return (stat);
}

int ASN1C_CR_PresencePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PresencePopulation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PresencePopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PresencePopulation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PresencePopulation: end\n");

   return (stat);
}

int ASN1C_CR_PresencePopulation::Decode ()
{
   return asn1PD_CR_PresencePopulation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_OrientationPopulationVersCampRefugies                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_OrientationPopulationVersCampRefugies::ASN1C_CR_OrientationPopulationVersCampRefugies (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_OrientationPopulationVersCampRefugies (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_OrientationPopulationVersCampRefugies: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_OrientationPopulationVersCampRefugies: end\n");
   return (stat);
}

int ASN1C_CR_OrientationPopulationVersCampRefugies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_OrientationPopulationVersCampRefugies (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_OrientationPopulationVersCampRefugies (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_OrientationPopulationVersCampRefugies: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_OrientationPopulationVersCampRefugies: end\n");

   return (stat);
}

int ASN1C_CR_OrientationPopulationVersCampRefugies::Decode ()
{
   return asn1PD_CR_OrientationPopulationVersCampRefugies (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PasDeCampRefugiesDisponible                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_PasDeCampRefugiesDisponible::ASN1C_CR_PasDeCampRefugiesDisponible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PasDeCampRefugiesDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PasDeCampRefugiesDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PasDeCampRefugiesDisponible: end\n");
   return (stat);
}

int ASN1C_CR_PasDeCampRefugiesDisponible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PasDeCampRefugiesDisponible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PasDeCampRefugiesDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PasDeCampRefugiesDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PasDeCampRefugiesDisponible: end\n");

   return (stat);
}

int ASN1C_CR_PasDeCampRefugiesDisponible::Decode ()
{
   return asn1PD_CR_PasDeCampRefugiesDisponible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PresenceEnnemiRendu                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_PresenceEnnemiRendu::ASN1C_CR_PresenceEnnemiRendu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PresenceEnnemiRendu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PresenceEnnemiRendu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PresenceEnnemiRendu: end\n");
   return (stat);
}

int ASN1C_CR_PresenceEnnemiRendu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PresenceEnnemiRendu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PresenceEnnemiRendu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PresenceEnnemiRendu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PresenceEnnemiRendu: end\n");

   return (stat);
}

int ASN1C_CR_PresenceEnnemiRendu::Decode ()
{
   return asn1PD_CR_PresenceEnnemiRendu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_OrientationEnnemiRenduVersCampPrisonniers              */
/*                                                            */
/**************************************************************/

ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers: end\n");
   return (stat);
}

int ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers: end\n");

   return (stat);
}

int ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::Decode ()
{
   return asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PasDeCampPrisonniersDisponible                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_PasDeCampPrisonniersDisponible::ASN1C_CR_PasDeCampPrisonniersDisponible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PasDeCampPrisonniersDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PasDeCampPrisonniersDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PasDeCampPrisonniersDisponible: end\n");
   return (stat);
}

int ASN1C_CR_PasDeCampPrisonniersDisponible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PasDeCampPrisonniersDisponible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PasDeCampPrisonniersDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PasDeCampPrisonniersDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PasDeCampPrisonniersDisponible: end\n");

   return (stat);
}

int ASN1C_CR_PasDeCampPrisonniersDisponible::Decode ()
{
   return asn1PD_CR_PasDeCampPrisonniersDisponible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Rendu                                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_Rendu::ASN1C_CR_Rendu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Rendu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Rendu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Rendu: end\n");
   return (stat);
}

int ASN1C_CR_Rendu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Rendu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Rendu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Rendu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Rendu: end\n");

   return (stat);
}

int ASN1C_CR_Rendu::Decode ()
{
   return asn1PD_CR_Rendu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Trace                                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_Trace::ASN1C_CR_Trace (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_Trace& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_Trace (ASN1CTXT* ctxt_p, ASN1T_CR_Trace value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Trace: start\n");

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_Trace: end\n");
   return (stat);
}

int ASN1C_CR_Trace::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Trace (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_Trace (ASN1CTXT* ctxt_p, ASN1T_CR_Trace* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Trace: start\n");

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_Trace: end\n");

   return (stat);
}

int ASN1C_CR_Trace::Decode ()
{
   return asn1PD_CR_Trace (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TraceID                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_TraceID::ASN1C_CR_TraceID (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TraceID& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TraceID (ASN1CTXT* ctxt_p, ASN1T_CR_TraceID value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TraceID: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TraceID: end\n");
   return (stat);
}

int ASN1C_CR_TraceID::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TraceID (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TraceID (ASN1CTXT* ctxt_p, ASN1T_CR_TraceID* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TraceID: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TraceID: end\n");

   return (stat);
}

int ASN1C_CR_TraceID::Decode ()
{
   return asn1PD_CR_TraceID (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TirDansZoneInterdite                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirDansZoneInterdite::ASN1C_CR_TirDansZoneInterdite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirDansZoneInterdite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirDansZoneInterdite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirDansZoneInterdite: end\n");
   return (stat);
}

int ASN1C_CR_TirDansZoneInterdite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirDansZoneInterdite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirDansZoneInterdite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirDansZoneInterdite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirDansZoneInterdite: end\n");

   return (stat);
}

int ASN1C_CR_TirDansZoneInterdite::Decode ()
{
   return asn1PD_CR_TirDansZoneInterdite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirSurCampAmi                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirSurCampAmi::ASN1C_CR_TirSurCampAmi (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TirSurCampAmi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TirSurCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampAmi value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirSurCampAmi: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TirSurCampAmi: end\n");
   return (stat);
}

int ASN1C_CR_TirSurCampAmi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirSurCampAmi (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TirSurCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampAmi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirSurCampAmi: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TirSurCampAmi: end\n");

   return (stat);
}

int ASN1C_CR_TirSurCampAmi::Decode ()
{
   return asn1PD_CR_TirSurCampAmi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TireParCampAmi                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_TireParCampAmi::ASN1C_CR_TireParCampAmi (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TireParCampAmi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TireParCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampAmi value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TireParCampAmi: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TireParCampAmi: end\n");
   return (stat);
}

int ASN1C_CR_TireParCampAmi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TireParCampAmi (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TireParCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampAmi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TireParCampAmi: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TireParCampAmi: end\n");

   return (stat);
}

int ASN1C_CR_TireParCampAmi::Decode ()
{
   return asn1PD_CR_TireParCampAmi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TirSurCampNeutre                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirSurCampNeutre::ASN1C_CR_TirSurCampNeutre (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TirSurCampNeutre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TirSurCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampNeutre value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirSurCampNeutre: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TirSurCampNeutre: end\n");
   return (stat);
}

int ASN1C_CR_TirSurCampNeutre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirSurCampNeutre (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TirSurCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampNeutre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirSurCampNeutre: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TirSurCampNeutre: end\n");

   return (stat);
}

int ASN1C_CR_TirSurCampNeutre::Decode ()
{
   return asn1PD_CR_TirSurCampNeutre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TireParCampNeutre                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_TireParCampNeutre::ASN1C_CR_TireParCampNeutre (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TireParCampNeutre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TireParCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampNeutre value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TireParCampNeutre: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TireParCampNeutre: end\n");
   return (stat);
}

int ASN1C_CR_TireParCampNeutre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TireParCampNeutre (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TireParCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampNeutre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TireParCampNeutre: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TireParCampNeutre: end\n");

   return (stat);
}

int ASN1C_CR_TireParCampNeutre::Decode ()
{
   return asn1PD_CR_TireParCampNeutre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TirSurCivil                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirSurCivil::ASN1C_CR_TirSurCivil (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TirSurCivil& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TirSurCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCivil value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirSurCivil: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TirSurCivil: end\n");
   return (stat);
}

int ASN1C_CR_TirSurCivil::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirSurCivil (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TirSurCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCivil* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirSurCivil: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TirSurCivil: end\n");

   return (stat);
}

int ASN1C_CR_TirSurCivil::Decode ()
{
   return asn1PD_CR_TirSurCivil (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TireParCivil                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_TireParCivil::ASN1C_CR_TireParCivil (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TireParCivil& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TireParCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCivil value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TireParCivil: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TireParCivil: end\n");
   return (stat);
}

int ASN1C_CR_TireParCivil::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TireParCivil (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TireParCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCivil* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TireParCivil: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TireParCivil: end\n");

   return (stat);
}

int ASN1C_CR_TireParCivil::Decode ()
{
   return asn1PD_CR_TireParCivil (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DestructionPC                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_DestructionPC::ASN1C_CR_DestructionPC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DestructionPC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DestructionPC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DestructionPC: end\n");
   return (stat);
}

int ASN1C_CR_DestructionPC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DestructionPC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DestructionPC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DestructionPC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DestructionPC: end\n");

   return (stat);
}

int ASN1C_CR_DestructionPC::Decode ()
{
   return asn1PD_CR_DestructionPC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecesBlesse                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecesBlesse::ASN1C_CR_DecesBlesse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecesBlesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecesBlesse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecesBlesse: end\n");
   return (stat);
}

int ASN1C_CR_DecesBlesse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecesBlesse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecesBlesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecesBlesse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecesBlesse: end\n");

   return (stat);
}

int ASN1C_CR_DecesBlesse::Decode ()
{
   return asn1PD_CR_DecesBlesse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecesBlessePendantTransport                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecesBlessePendantTransport::ASN1C_CR_DecesBlessePendantTransport (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecesBlessePendantTransport (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecesBlessePendantTransport: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecesBlessePendantTransport: end\n");
   return (stat);
}

int ASN1C_CR_DecesBlessePendantTransport::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecesBlessePendantTransport (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecesBlessePendantTransport (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecesBlessePendantTransport: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecesBlessePendantTransport: end\n");

   return (stat);
}

int ASN1C_CR_DecesBlessePendantTransport::Decode ()
{
   return asn1PD_CR_DecesBlessePendantTransport (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecesBlessePendantHospitalisation                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecesBlessePendantHospitalisation::ASN1C_CR_DecesBlessePendantHospitalisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecesBlessePendantHospitalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecesBlessePendantHospitalisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecesBlessePendantHospitalisation: end\n");
   return (stat);
}

int ASN1C_CR_DecesBlessePendantHospitalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecesBlessePendantHospitalisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecesBlessePendantHospitalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecesBlessePendantHospitalisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecesBlessePendantHospitalisation: end\n");

   return (stat);
}

int ASN1C_CR_DecesBlessePendantHospitalisation::Decode ()
{
   return asn1PD_CR_DecesBlessePendantHospitalisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossibleUnitesSubordonneesNonOperationnelles  */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles::ASN1C_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles::Decode ()
{
   return asn1PD_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossibleLimaInvalide                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossibleLimaInvalide::ASN1C_CR_MissionImpossibleLimaInvalide (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossibleLimaInvalide (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossibleLimaInvalide: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossibleLimaInvalide: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossibleLimaInvalide::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossibleLimaInvalide (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossibleLimaInvalide (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossibleLimaInvalide: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossibleLimaInvalide: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossibleLimaInvalide::Decode ()
{
   return asn1PD_CR_MissionImpossibleLimaInvalide (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossibleZoneHorsFuseau                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossibleZoneHorsFuseau::ASN1C_CR_MissionImpossibleZoneHorsFuseau (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossibleZoneHorsFuseau (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossibleZoneHorsFuseau: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossibleZoneHorsFuseau: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossibleZoneHorsFuseau::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossibleZoneHorsFuseau (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossibleZoneHorsFuseau (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossibleZoneHorsFuseau: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossibleZoneHorsFuseau: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossibleZoneHorsFuseau::Decode ()
{
   return asn1PD_CR_MissionImpossibleZoneHorsFuseau (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RapportDeForceDefavorable                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_RapportDeForceDefavorable::ASN1C_CR_RapportDeForceDefavorable (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RapportDeForceDefavorable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RapportDeForceDefavorable: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RapportDeForceDefavorable: end\n");
   return (stat);
}

int ASN1C_CR_RapportDeForceDefavorable::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RapportDeForceDefavorable (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RapportDeForceDefavorable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RapportDeForceDefavorable: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RapportDeForceDefavorable: end\n");

   return (stat);
}

int ASN1C_CR_RapportDeForceDefavorable::Decode ()
{
   return asn1PD_CR_RapportDeForceDefavorable (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TerrainDifficile                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_TerrainDifficile::ASN1C_CR_TerrainDifficile (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TerrainDifficile (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TerrainDifficile: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TerrainDifficile: end\n");
   return (stat);
}

int ASN1C_CR_TerrainDifficile::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TerrainDifficile (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TerrainDifficile (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TerrainDifficile: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TerrainDifficile: end\n");

   return (stat);
}

int ASN1C_CR_TerrainDifficile::Decode ()
{
   return asn1PD_CR_TerrainDifficile (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PlusDeCarburant                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_PlusDeCarburant::ASN1C_CR_PlusDeCarburant (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PlusDeCarburant (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PlusDeCarburant: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PlusDeCarburant: end\n");
   return (stat);
}

int ASN1C_CR_PlusDeCarburant::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PlusDeCarburant (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PlusDeCarburant (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PlusDeCarburant: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PlusDeCarburant: end\n");

   return (stat);
}

int ASN1C_CR_PlusDeCarburant::Decode ()
{
   return asn1PD_CR_PlusDeCarburant (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DispositifDisperse                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_DispositifDisperse::ASN1C_CR_DispositifDisperse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DispositifDisperse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DispositifDisperse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DispositifDisperse: end\n");
   return (stat);
}

int ASN1C_CR_DispositifDisperse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DispositifDisperse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DispositifDisperse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DispositifDisperse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DispositifDisperse: end\n");

   return (stat);
}

int ASN1C_CR_DispositifDisperse::Decode ()
{
   return asn1PD_CR_DispositifDisperse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutNeutralisation                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutNeutralisation::ASN1C_CR_DebutNeutralisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutNeutralisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutNeutralisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutNeutralisation: end\n");
   return (stat);
}

int ASN1C_CR_DebutNeutralisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutNeutralisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutNeutralisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutNeutralisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutNeutralisation: end\n");

   return (stat);
}

int ASN1C_CR_DebutNeutralisation::Decode ()
{
   return asn1PD_CR_DebutNeutralisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinNeutralisation                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinNeutralisation::ASN1C_CR_FinNeutralisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinNeutralisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinNeutralisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinNeutralisation: end\n");
   return (stat);
}

int ASN1C_CR_FinNeutralisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinNeutralisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinNeutralisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinNeutralisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinNeutralisation: end\n");

   return (stat);
}

int ASN1C_CR_FinNeutralisation::Decode ()
{
   return asn1PD_CR_FinNeutralisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutSilenceRadio                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutSilenceRadio::ASN1C_CR_DebutSilenceRadio (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutSilenceRadio: end\n");
   return (stat);
}

int ASN1C_CR_DebutSilenceRadio::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutSilenceRadio (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutSilenceRadio: end\n");

   return (stat);
}

int ASN1C_CR_DebutSilenceRadio::Decode ()
{
   return asn1PD_CR_DebutSilenceRadio (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinSilenceRadio                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinSilenceRadio::ASN1C_CR_FinSilenceRadio (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinSilenceRadio: end\n");
   return (stat);
}

int ASN1C_CR_FinSilenceRadio::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinSilenceRadio (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinSilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinSilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinSilenceRadio: end\n");

   return (stat);
}

int ASN1C_CR_FinSilenceRadio::Decode ()
{
   return asn1PD_CR_FinSilenceRadio (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutSilenceRadar                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutSilenceRadar::ASN1C_CR_DebutSilenceRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutSilenceRadar: end\n");
   return (stat);
}

int ASN1C_CR_DebutSilenceRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutSilenceRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutSilenceRadar: end\n");

   return (stat);
}

int ASN1C_CR_DebutSilenceRadar::Decode ()
{
   return asn1PD_CR_DebutSilenceRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinSilenceRadar                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinSilenceRadar::ASN1C_CR_FinSilenceRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinSilenceRadar: end\n");
   return (stat);
}

int ASN1C_CR_FinSilenceRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinSilenceRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinSilenceRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinSilenceRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinSilenceRadar: end\n");

   return (stat);
}

int ASN1C_CR_FinSilenceRadar::Decode ()
{
   return asn1PD_CR_FinSilenceRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirRestreint                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirRestreint::ASN1C_CR_TirRestreint (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirRestreint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirRestreint: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirRestreint: end\n");
   return (stat);
}

int ASN1C_CR_TirRestreint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirRestreint (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirRestreint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirRestreint: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirRestreint: end\n");

   return (stat);
}

int ASN1C_CR_TirRestreint::Decode ()
{
   return asn1PD_CR_TirRestreint (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirInterdit                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirInterdit::ASN1C_CR_TirInterdit (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirInterdit (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirInterdit: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirInterdit: end\n");
   return (stat);
}

int ASN1C_CR_TirInterdit::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirInterdit (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirInterdit (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirInterdit: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirInterdit: end\n");

   return (stat);
}

int ASN1C_CR_TirInterdit::Decode ()
{
   return asn1PD_CR_TirInterdit (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirLibre                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirLibre::ASN1C_CR_TirLibre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirLibre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirLibre: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirLibre: end\n");
   return (stat);
}

int ASN1C_CR_TirLibre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirLibre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirLibre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirLibre: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirLibre: end\n");

   return (stat);
}

int ASN1C_CR_TirLibre::Decode ()
{
   return asn1PD_CR_TirLibre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_UniteDetectee                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteDetectee::ASN1C_CR_UniteDetectee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteDetectee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteDetectee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteDetectee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteDetectee: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteDetectee: end\n");
   return (stat);
}

int ASN1C_CR_UniteDetectee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteDetectee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteDetectee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteDetectee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteDetectee: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteDetectee: end\n");

   return (stat);
}

int ASN1C_CR_UniteDetectee::Decode ()
{
   return asn1PD_CR_UniteDetectee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_UniteAmieReconnue                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteAmieReconnue::ASN1C_CR_UniteAmieReconnue (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteAmieReconnue& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteAmieReconnue (ASN1CTXT* ctxt_p, ASN1T_CR_UniteAmieReconnue value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteAmieReconnue: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteAmieReconnue: end\n");
   return (stat);
}

int ASN1C_CR_UniteAmieReconnue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteAmieReconnue (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteAmieReconnue (ASN1CTXT* ctxt_p, ASN1T_CR_UniteAmieReconnue* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteAmieReconnue: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteAmieReconnue: end\n");

   return (stat);
}

int ASN1C_CR_UniteAmieReconnue::Decode ()
{
   return asn1PD_CR_UniteAmieReconnue (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_UniteEnnemieReconnue                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteEnnemieReconnue::ASN1C_CR_UniteEnnemieReconnue (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteEnnemieReconnue& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteEnnemieReconnue (ASN1CTXT* ctxt_p, ASN1T_CR_UniteEnnemieReconnue value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteEnnemieReconnue: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteEnnemieReconnue: end\n");
   return (stat);
}

int ASN1C_CR_UniteEnnemieReconnue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteEnnemieReconnue (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteEnnemieReconnue (ASN1CTXT* ctxt_p, ASN1T_CR_UniteEnnemieReconnue* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteEnnemieReconnue: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteEnnemieReconnue: end\n");

   return (stat);
}

int ASN1C_CR_UniteEnnemieReconnue::Decode ()
{
   return asn1PD_CR_UniteEnnemieReconnue (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_UniteNeutreReconnue                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteNeutreReconnue::ASN1C_CR_UniteNeutreReconnue (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteNeutreReconnue& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteNeutreReconnue (ASN1CTXT* ctxt_p, ASN1T_CR_UniteNeutreReconnue value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteNeutreReconnue: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteNeutreReconnue: end\n");
   return (stat);
}

int ASN1C_CR_UniteNeutreReconnue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteNeutreReconnue (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteNeutreReconnue (ASN1CTXT* ctxt_p, ASN1T_CR_UniteNeutreReconnue* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteNeutreReconnue: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteNeutreReconnue: end\n");

   return (stat);
}

int ASN1C_CR_UniteNeutreReconnue::Decode ()
{
   return asn1PD_CR_UniteNeutreReconnue (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_UniteAmieIdentifiee                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteAmieIdentifiee::ASN1C_CR_UniteAmieIdentifiee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteAmieIdentifiee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteAmieIdentifiee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteAmieIdentifiee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteAmieIdentifiee: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteAmieIdentifiee: end\n");
   return (stat);
}

int ASN1C_CR_UniteAmieIdentifiee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteAmieIdentifiee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteAmieIdentifiee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteAmieIdentifiee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteAmieIdentifiee: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteAmieIdentifiee: end\n");

   return (stat);
}

int ASN1C_CR_UniteAmieIdentifiee::Decode ()
{
   return asn1PD_CR_UniteAmieIdentifiee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_UniteEnnemieIdentifiee                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteEnnemieIdentifiee::ASN1C_CR_UniteEnnemieIdentifiee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteEnnemieIdentifiee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteEnnemieIdentifiee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteEnnemieIdentifiee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteEnnemieIdentifiee: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteEnnemieIdentifiee: end\n");
   return (stat);
}

int ASN1C_CR_UniteEnnemieIdentifiee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteEnnemieIdentifiee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteEnnemieIdentifiee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteEnnemieIdentifiee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteEnnemieIdentifiee: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteEnnemieIdentifiee: end\n");

   return (stat);
}

int ASN1C_CR_UniteEnnemieIdentifiee::Decode ()
{
   return asn1PD_CR_UniteEnnemieIdentifiee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_UniteNeutreIdentifiee                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteNeutreIdentifiee::ASN1C_CR_UniteNeutreIdentifiee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteNeutreIdentifiee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteNeutreIdentifiee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteNeutreIdentifiee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteNeutreIdentifiee: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteNeutreIdentifiee: end\n");
   return (stat);
}

int ASN1C_CR_UniteNeutreIdentifiee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteNeutreIdentifiee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteNeutreIdentifiee (ASN1CTXT* ctxt_p, ASN1T_CR_UniteNeutreIdentifiee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteNeutreIdentifiee: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteNeutreIdentifiee: end\n");

   return (stat);
}

int ASN1C_CR_UniteNeutreIdentifiee::Decode ()
{
   return asn1PD_CR_UniteNeutreIdentifiee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ObjetDetecte                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObjetDetecte::ASN1C_CR_ObjetDetecte (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ObjetDetecte& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ObjetDetecte (ASN1CTXT* ctxt_p, ASN1T_CR_ObjetDetecte value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObjetDetecte: start\n");

   stat = asn1PE_KnowledgeObject (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ObjetDetecte: end\n");
   return (stat);
}

int ASN1C_CR_ObjetDetecte::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObjetDetecte (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ObjetDetecte (ASN1CTXT* ctxt_p, ASN1T_CR_ObjetDetecte* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObjetDetecte: start\n");

   stat = asn1PD_KnowledgeObject (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ObjetDetecte: end\n");

   return (stat);
}

int ASN1C_CR_ObjetDetecte::Decode ()
{
   return asn1PD_CR_ObjetDetecte (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EmploiForceInterdit                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_EmploiForceInterdit::ASN1C_CR_EmploiForceInterdit (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EmploiForceInterdit (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EmploiForceInterdit: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EmploiForceInterdit: end\n");
   return (stat);
}

int ASN1C_CR_EmploiForceInterdit::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EmploiForceInterdit (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EmploiForceInterdit (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EmploiForceInterdit: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EmploiForceInterdit: end\n");

   return (stat);
}

int ASN1C_CR_EmploiForceInterdit::Decode ()
{
   return asn1PD_CR_EmploiForceInterdit (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MaintienADistanceParMoyensNonLetaux                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_MaintienADistanceParMoyensNonLetaux::ASN1C_CR_MaintienADistanceParMoyensNonLetaux (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MaintienADistanceParMoyensNonLetaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MaintienADistanceParMoyensNonLetaux: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MaintienADistanceParMoyensNonLetaux: end\n");
   return (stat);
}

int ASN1C_CR_MaintienADistanceParMoyensNonLetaux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MaintienADistanceParMoyensNonLetaux (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MaintienADistanceParMoyensNonLetaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MaintienADistanceParMoyensNonLetaux: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MaintienADistanceParMoyensNonLetaux: end\n");

   return (stat);
}

int ASN1C_CR_MaintienADistanceParMoyensNonLetaux::Decode ()
{
   return asn1PD_CR_MaintienADistanceParMoyensNonLetaux (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DispersionParMoyensDeDefenseActifs                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_DispersionParMoyensDeDefenseActifs::ASN1C_CR_DispersionParMoyensDeDefenseActifs (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DispersionParMoyensDeDefenseActifs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DispersionParMoyensDeDefenseActifs: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DispersionParMoyensDeDefenseActifs: end\n");
   return (stat);
}

int ASN1C_CR_DispersionParMoyensDeDefenseActifs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DispersionParMoyensDeDefenseActifs (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DispersionParMoyensDeDefenseActifs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DispersionParMoyensDeDefenseActifs: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DispersionParMoyensDeDefenseActifs: end\n");

   return (stat);
}

int ASN1C_CR_DispersionParMoyensDeDefenseActifs::Decode ()
{
   return asn1PD_CR_DispersionParMoyensDeDefenseActifs (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ArmesLetalesAutorisees                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_ArmesLetalesAutorisees::ASN1C_CR_ArmesLetalesAutorisees (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ArmesLetalesAutorisees (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ArmesLetalesAutorisees: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ArmesLetalesAutorisees: end\n");
   return (stat);
}

int ASN1C_CR_ArmesLetalesAutorisees::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ArmesLetalesAutorisees (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ArmesLetalesAutorisees (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ArmesLetalesAutorisees: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ArmesLetalesAutorisees: end\n");

   return (stat);
}

int ASN1C_CR_ArmesLetalesAutorisees::Decode ()
{
   return asn1PD_CR_ArmesLetalesAutorisees (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PopulationDetectee                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_PopulationDetectee::ASN1C_CR_PopulationDetectee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PopulationDetectee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PopulationDetectee (ASN1CTXT* ctxt_p, ASN1T_CR_PopulationDetectee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PopulationDetectee: start\n");

   stat = asn1PE_KnowledgePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PopulationDetectee: end\n");
   return (stat);
}

int ASN1C_CR_PopulationDetectee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PopulationDetectee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PopulationDetectee (ASN1CTXT* ctxt_p, ASN1T_CR_PopulationDetectee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PopulationDetectee: start\n");

   stat = asn1PD_KnowledgePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PopulationDetectee: end\n");

   return (stat);
}

int ASN1C_CR_PopulationDetectee::Decode ()
{
   return asn1PD_CR_PopulationDetectee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PriseAPartieParPopulation                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_PriseAPartieParPopulation::ASN1C_CR_PriseAPartieParPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PriseAPartieParPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PriseAPartieParPopulation (ASN1CTXT* ctxt_p, ASN1T_CR_PriseAPartieParPopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PriseAPartieParPopulation: start\n");

   stat = asn1PE_KnowledgePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PriseAPartieParPopulation: end\n");
   return (stat);
}

int ASN1C_CR_PriseAPartieParPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PriseAPartieParPopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PriseAPartieParPopulation (ASN1CTXT* ctxt_p, ASN1T_CR_PriseAPartieParPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PriseAPartieParPopulation: start\n");

   stat = asn1PD_KnowledgePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PriseAPartieParPopulation: end\n");

   return (stat);
}

int ASN1C_CR_PriseAPartieParPopulation::Decode ()
{
   return asn1PD_CR_PriseAPartieParPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_RiposteContrePopulation                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_RiposteContrePopulation::ASN1C_CR_RiposteContrePopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_RiposteContrePopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_RiposteContrePopulation (ASN1CTXT* ctxt_p, ASN1T_CR_RiposteContrePopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RiposteContrePopulation: start\n");

   stat = asn1PE_KnowledgePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_RiposteContrePopulation: end\n");
   return (stat);
}

int ASN1C_CR_RiposteContrePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RiposteContrePopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_RiposteContrePopulation (ASN1CTXT* ctxt_p, ASN1T_CR_RiposteContrePopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RiposteContrePopulation: start\n");

   stat = asn1PD_KnowledgePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_RiposteContrePopulation: end\n");

   return (stat);
}

int ASN1C_CR_RiposteContrePopulation::Decode ()
{
   return asn1PD_CR_RiposteContrePopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PopulationDangereuseAProximite                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_PopulationDangereuseAProximite::ASN1C_CR_PopulationDangereuseAProximite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PopulationDangereuseAProximite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PopulationDangereuseAProximite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PopulationDangereuseAProximite: end\n");
   return (stat);
}

int ASN1C_CR_PopulationDangereuseAProximite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PopulationDangereuseAProximite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PopulationDangereuseAProximite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PopulationDangereuseAProximite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PopulationDangereuseAProximite: end\n");

   return (stat);
}

int ASN1C_CR_PopulationDangereuseAProximite::Decode ()
{
   return asn1PD_CR_PopulationDangereuseAProximite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EsquiveFaceAPopulation                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_EsquiveFaceAPopulation::ASN1C_CR_EsquiveFaceAPopulation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EsquiveFaceAPopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EsquiveFaceAPopulation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EsquiveFaceAPopulation: end\n");
   return (stat);
}

int ASN1C_CR_EsquiveFaceAPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EsquiveFaceAPopulation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EsquiveFaceAPopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EsquiveFaceAPopulation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EsquiveFaceAPopulation: end\n");

   return (stat);
}

int ASN1C_CR_EsquiveFaceAPopulation::Decode ()
{
   return asn1PD_CR_EsquiveFaceAPopulation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecrochageFaceAPopulation                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecrochageFaceAPopulation::ASN1C_CR_DecrochageFaceAPopulation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecrochageFaceAPopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecrochageFaceAPopulation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecrochageFaceAPopulation: end\n");
   return (stat);
}

int ASN1C_CR_DecrochageFaceAPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecrochageFaceAPopulation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecrochageFaceAPopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecrochageFaceAPopulation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecrochageFaceAPopulation: end\n");

   return (stat);
}

int ASN1C_CR_DecrochageFaceAPopulation::Decode ()
{
   return asn1PD_CR_DecrochageFaceAPopulation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MiseEnPlaceControleDeFoule                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_MiseEnPlaceControleDeFoule::ASN1C_CR_MiseEnPlaceControleDeFoule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MiseEnPlaceControleDeFoule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MiseEnPlaceControleDeFoule: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MiseEnPlaceControleDeFoule: end\n");
   return (stat);
}

int ASN1C_CR_MiseEnPlaceControleDeFoule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MiseEnPlaceControleDeFoule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MiseEnPlaceControleDeFoule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MiseEnPlaceControleDeFoule: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MiseEnPlaceControleDeFoule: end\n");

   return (stat);
}

int ASN1C_CR_MiseEnPlaceControleDeFoule::Decode ()
{
   return asn1PD_CR_MiseEnPlaceControleDeFoule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MiseEnPlaceFiltrage                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_MiseEnPlaceFiltrage::ASN1C_CR_MiseEnPlaceFiltrage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MiseEnPlaceFiltrage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MiseEnPlaceFiltrage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MiseEnPlaceFiltrage: end\n");
   return (stat);
}

int ASN1C_CR_MiseEnPlaceFiltrage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MiseEnPlaceFiltrage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MiseEnPlaceFiltrage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MiseEnPlaceFiltrage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MiseEnPlaceFiltrage: end\n");

   return (stat);
}

int ASN1C_CR_MiseEnPlaceFiltrage::Decode ()
{
   return asn1PD_CR_MiseEnPlaceFiltrage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AnimationBarrage                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_AnimationBarrage::ASN1C_CR_AnimationBarrage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AnimationBarrage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AnimationBarrage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AnimationBarrage: end\n");
   return (stat);
}

int ASN1C_CR_AnimationBarrage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AnimationBarrage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AnimationBarrage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AnimationBarrage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AnimationBarrage: end\n");

   return (stat);
}

int ASN1C_CR_AnimationBarrage::Decode ()
{
   return asn1PD_CR_AnimationBarrage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AnimationCanalisation                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_AnimationCanalisation::ASN1C_CR_AnimationCanalisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AnimationCanalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AnimationCanalisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AnimationCanalisation: end\n");
   return (stat);
}

int ASN1C_CR_AnimationCanalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AnimationCanalisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AnimationCanalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AnimationCanalisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AnimationCanalisation: end\n");

   return (stat);
}

int ASN1C_CR_AnimationCanalisation::Decode ()
{
   return asn1PD_CR_AnimationCanalisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_CollecteRenseignementsSurPopulations                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_CollecteRenseignementsSurPopulations::ASN1C_CR_CollecteRenseignementsSurPopulations (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_CollecteRenseignementsSurPopulations (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_CollecteRenseignementsSurPopulations: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_CollecteRenseignementsSurPopulations: end\n");
   return (stat);
}

int ASN1C_CR_CollecteRenseignementsSurPopulations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_CollecteRenseignementsSurPopulations (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_CollecteRenseignementsSurPopulations (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_CollecteRenseignementsSurPopulations: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_CollecteRenseignementsSurPopulations: end\n");

   return (stat);
}

int ASN1C_CR_CollecteRenseignementsSurPopulations::Decode ()
{
   return asn1PD_CR_CollecteRenseignementsSurPopulations (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PopulationReconnue                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_PopulationReconnue::ASN1C_CR_PopulationReconnue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PopulationReconnue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PopulationReconnue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PopulationReconnue: end\n");
   return (stat);
}

int ASN1C_CR_PopulationReconnue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PopulationReconnue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PopulationReconnue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PopulationReconnue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PopulationReconnue: end\n");

   return (stat);
}

int ASN1C_CR_PopulationReconnue::Decode ()
{
   return asn1PD_CR_PopulationReconnue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttitudeCalme                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttitudeCalme::ASN1C_CR_AttitudeCalme (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttitudeCalme (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttitudeCalme: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttitudeCalme: end\n");
   return (stat);
}

int ASN1C_CR_AttitudeCalme::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttitudeCalme (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttitudeCalme (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttitudeCalme: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttitudeCalme: end\n");

   return (stat);
}

int ASN1C_CR_AttitudeCalme::Decode ()
{
   return asn1PD_CR_AttitudeCalme (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttitudeAgitee                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttitudeAgitee::ASN1C_CR_AttitudeAgitee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttitudeAgitee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttitudeAgitee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttitudeAgitee: end\n");
   return (stat);
}

int ASN1C_CR_AttitudeAgitee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttitudeAgitee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttitudeAgitee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttitudeAgitee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttitudeAgitee: end\n");

   return (stat);
}

int ASN1C_CR_AttitudeAgitee::Decode ()
{
   return asn1PD_CR_AttitudeAgitee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttitudeExcitee                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttitudeExcitee::ASN1C_CR_AttitudeExcitee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttitudeExcitee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttitudeExcitee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttitudeExcitee: end\n");
   return (stat);
}

int ASN1C_CR_AttitudeExcitee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttitudeExcitee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttitudeExcitee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttitudeExcitee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttitudeExcitee: end\n");

   return (stat);
}

int ASN1C_CR_AttitudeExcitee::Decode ()
{
   return asn1PD_CR_AttitudeExcitee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttitudeAgressive                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttitudeAgressive::ASN1C_CR_AttitudeAgressive (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttitudeAgressive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttitudeAgressive: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttitudeAgressive: end\n");
   return (stat);
}

int ASN1C_CR_AttitudeAgressive::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttitudeAgressive (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttitudeAgressive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttitudeAgressive: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttitudeAgressive: end\n");

   return (stat);
}

int ASN1C_CR_AttitudeAgressive::Decode ()
{
   return asn1PD_CR_AttitudeAgressive (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AggravationAttitude                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_AggravationAttitude::ASN1C_CR_AggravationAttitude (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AggravationAttitude (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AggravationAttitude: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AggravationAttitude: end\n");
   return (stat);
}

int ASN1C_CR_AggravationAttitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AggravationAttitude (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AggravationAttitude (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AggravationAttitude: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AggravationAttitude: end\n");

   return (stat);
}

int ASN1C_CR_AggravationAttitude::Decode ()
{
   return asn1PD_CR_AggravationAttitude (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AffrontementAvecForcesEnnemies                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_AffrontementAvecForcesEnnemies::ASN1C_CR_AffrontementAvecForcesEnnemies (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AffrontementAvecForcesEnnemies (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AffrontementAvecForcesEnnemies: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AffrontementAvecForcesEnnemies: end\n");
   return (stat);
}

int ASN1C_CR_AffrontementAvecForcesEnnemies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AffrontementAvecForcesEnnemies (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AffrontementAvecForcesEnnemies (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AffrontementAvecForcesEnnemies: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AffrontementAvecForcesEnnemies: end\n");

   return (stat);
}

int ASN1C_CR_AffrontementAvecForcesEnnemies::Decode ()
{
   return asn1PD_CR_AffrontementAvecForcesEnnemies (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PopulationTemporairementControlee                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_PopulationTemporairementControlee::ASN1C_CR_PopulationTemporairementControlee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PopulationTemporairementControlee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PopulationTemporairementControlee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PopulationTemporairementControlee: end\n");
   return (stat);
}

int ASN1C_CR_PopulationTemporairementControlee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PopulationTemporairementControlee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PopulationTemporairementControlee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PopulationTemporairementControlee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PopulationTemporairementControlee: end\n");

   return (stat);
}

int ASN1C_CR_PopulationTemporairementControlee::Decode ()
{
   return asn1PD_CR_PopulationTemporairementControlee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PopulationTemporairementRepoussee                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_PopulationTemporairementRepoussee::ASN1C_CR_PopulationTemporairementRepoussee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PopulationTemporairementRepoussee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PopulationTemporairementRepoussee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PopulationTemporairementRepoussee: end\n");
   return (stat);
}

int ASN1C_CR_PopulationTemporairementRepoussee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PopulationTemporairementRepoussee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PopulationTemporairementRepoussee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PopulationTemporairementRepoussee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PopulationTemporairementRepoussee: end\n");

   return (stat);
}

int ASN1C_CR_PopulationTemporairementRepoussee::Decode ()
{
   return asn1PD_CR_PopulationTemporairementRepoussee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RepriseDesAffrontements                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_RepriseDesAffrontements::ASN1C_CR_RepriseDesAffrontements (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RepriseDesAffrontements (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RepriseDesAffrontements: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RepriseDesAffrontements: end\n");
   return (stat);
}

int ASN1C_CR_RepriseDesAffrontements::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RepriseDesAffrontements (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RepriseDesAffrontements (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RepriseDesAffrontements: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RepriseDesAffrontements: end\n");

   return (stat);
}

int ASN1C_CR_RepriseDesAffrontements::Decode ()
{
   return asn1PD_CR_RepriseDesAffrontements (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AgressionDePopulation                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_AgressionDePopulation::ASN1C_CR_AgressionDePopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_AgressionDePopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_AgressionDePopulation (ASN1CTXT* ctxt_p, ASN1T_CR_AgressionDePopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AgressionDePopulation: start\n");

   stat = asn1PE_KnowledgePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_AgressionDePopulation: end\n");
   return (stat);
}

int ASN1C_CR_AgressionDePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AgressionDePopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_AgressionDePopulation (ASN1CTXT* ctxt_p, ASN1T_CR_AgressionDePopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AgressionDePopulation: start\n");

   stat = asn1PD_KnowledgePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_AgressionDePopulation: end\n");

   return (stat);
}

int ASN1C_CR_AgressionDePopulation::Decode ()
{
   return asn1PD_CR_AgressionDePopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_AgressionParPopulation                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_AgressionParPopulation::ASN1C_CR_AgressionParPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_AgressionParPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_AgressionParPopulation (ASN1CTXT* ctxt_p, ASN1T_CR_AgressionParPopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AgressionParPopulation: start\n");

   stat = asn1PE_KnowledgePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_AgressionParPopulation: end\n");
   return (stat);
}

int ASN1C_CR_AgressionParPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AgressionParPopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_AgressionParPopulation (ASN1CTXT* ctxt_p, ASN1T_CR_AgressionParPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AgressionParPopulation: start\n");

   stat = asn1PD_KnowledgePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_AgressionParPopulation: end\n");

   return (stat);
}

int ASN1C_CR_AgressionParPopulation::Decode ()
{
   return asn1PD_CR_AgressionParPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_RiposteContreAgressionParPopulation                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_RiposteContreAgressionParPopulation::ASN1C_CR_RiposteContreAgressionParPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_RiposteContreAgressionParPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_RiposteContreAgressionParPopulation (ASN1CTXT* ctxt_p, ASN1T_CR_RiposteContreAgressionParPopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RiposteContreAgressionParPopulation: start\n");

   stat = asn1PE_KnowledgePopulation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_RiposteContreAgressionParPopulation: end\n");
   return (stat);
}

int ASN1C_CR_RiposteContreAgressionParPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RiposteContreAgressionParPopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_RiposteContreAgressionParPopulation (ASN1CTXT* ctxt_p, ASN1T_CR_RiposteContreAgressionParPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RiposteContreAgressionParPopulation: start\n");

   stat = asn1PD_KnowledgePopulation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_RiposteContreAgressionParPopulation: end\n");

   return (stat);
}

int ASN1C_CR_RiposteContreAgressionParPopulation::Decode ()
{
   return asn1PD_CR_RiposteContreAgressionParPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_AttaqueInstallation                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttaqueInstallation::ASN1C_CR_AttaqueInstallation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttaqueInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttaqueInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttaqueInstallation: end\n");
   return (stat);
}

int ASN1C_CR_AttaqueInstallation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttaqueInstallation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttaqueInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttaqueInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttaqueInstallation: end\n");

   return (stat);
}

int ASN1C_CR_AttaqueInstallation::Decode ()
{
   return asn1PD_CR_AttaqueInstallation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnStationnement                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnStationnement::ASN1C_CR_EnStationnement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnStationnement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnStationnement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnStationnement: end\n");
   return (stat);
}

int ASN1C_CR_EnStationnement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnStationnement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnStationnement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnStationnement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnStationnement: end\n");

   return (stat);
}

int ASN1C_CR_EnStationnement::Decode ()
{
   return asn1PD_CR_EnStationnement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ExecutionAttentat                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_ExecutionAttentat::ASN1C_CR_ExecutionAttentat (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ExecutionAttentat (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ExecutionAttentat: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ExecutionAttentat: end\n");
   return (stat);
}

int ASN1C_CR_ExecutionAttentat::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ExecutionAttentat (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ExecutionAttentat (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ExecutionAttentat: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ExecutionAttentat: end\n");

   return (stat);
}

int ASN1C_CR_ExecutionAttentat::Decode ()
{
   return asn1PD_CR_ExecutionAttentat (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumTypeCR                                                */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeCR::ASN1C_EnumTypeCR (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeCR& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeCR (ASN1CTXT* ctxt_p, ASN1T_EnumTypeCR value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeCR: start\n");

   switch (value) {
      case EnumTypeCR::message: ui = 0; break;
      case EnumTypeCR::operationel: ui = 1; break;
      case EnumTypeCR::evenement_exceptionnel: ui = 2; break;
      case EnumTypeCR::warning: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeCR: end\n");
   return (stat);
}

int ASN1C_EnumTypeCR::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeCR (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeCR (ASN1CTXT* ctxt_p, ASN1T_EnumTypeCR* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeCR: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeCR::message; break;
      case 1: *pvalue = EnumTypeCR::operationel; break;
      case 2: *pvalue = EnumTypeCR::evenement_exceptionnel; break;
      case 3: *pvalue = EnumTypeCR::warning; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeCR: end\n");

   return (stat);
}

int ASN1C_EnumTypeCR::Decode ()
{
   return asn1PD_EnumTypeCR (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCR_cr                                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgCR_cr::ASN1C_MsgCR_cr (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCR_cr& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCR_cr (ASN1CTXT* ctxt_p, ASN1T_MsgCR_cr* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCR_cr: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 242);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* cr_ras */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.cr_ras");

         stat = asn1PE_CR_RAS (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_obstacle */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_obstacle");

         stat = asn1PE_CR_EnPosteFaceAObstacle (ctxt_p, pvalue->u.cr_en_poste_face_a_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_contournement_obstacle */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.cr_en_contournement_obstacle");

         stat = asn1PE_CR_EnContournementObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible");

         stat = asn1PE_CR_MissionImpossible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_sur_axe */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_sur_axe");

         stat = asn1PE_CR_ProgressionSurAxe (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_position */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_position");

         stat = asn1PE_CR_ProgressionVersPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_arrive_sur_position */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.cr_arrive_sur_position");

         stat = asn1PE_CR_ArriveSurPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_point */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_point");

         stat = asn1PE_CR_ReconnaissancePoint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_direction_dangereuse */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_direction_dangereuse");

         stat = asn1PE_CR_EnPosteFaceADirectionDangereuse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_jalonnement */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.cr_en_jalonnement");

         stat = asn1PE_CR_EnJalonnement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_preparation_mission */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.cr_preparation_mission");

         stat = asn1PE_CR_PreparationMission (ctxt_p, pvalue->u.cr_preparation_mission);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mission */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mission");

         stat = asn1PE_CR_DebutMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mission */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mission");

         stat = asn1PE_CR_FinMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_installe */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_installe");

         stat = asn1PE_CR_DispositifInstalle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_position */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.cr_en_position");

         stat = asn1PE_CR_EnPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_objectif_atteint */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.cr_objectif_atteint");

         stat = asn1PE_CR_ObjectifAtteint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debouche */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.cr_debouche");

         stat = asn1PE_CR_Debouche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_unite */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_unite");

         stat = asn1PE_CR_RejointUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_escorte_unite */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.cr_escorte_unite");

         stat = asn1PE_CR_EscorteUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_freinage */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.cr_en_freinage");

         stat = asn1PE_CR_EnFreinage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_assaut */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.cr_assaut");

         stat = asn1PE_CR_Assaut (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_couverture */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.cr_en_couverture");

         stat = asn1PE_CR_EnCouverture (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_eclairage */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.cr_en_eclairage");

         stat = asn1PE_CR_EnEclairage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_manoeuvre_ravitaillement */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.cr_en_manoeuvre_ravitaillement");

         stat = asn1PE_CR_EnManoeuvreRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_pia */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_pia");

         stat = asn1PE_CR_SurPIA (ctxt_p, pvalue->u.cr_sur_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_passage_sur_pia */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.cr_passage_sur_pia");

         stat = asn1PE_CR_PassageSurPIA (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_recueillie */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_recueillie");

         stat = asn1PE_CR_UniteRecueillie (ctxt_p, pvalue->u.cr_unite_recueillie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_de_franchissement */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_de_franchissement");

         stat = asn1PE_CR_EnCoursDeFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_poursuivre */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_poursuivre");

         stat = asn1PE_CR_AttenteOrdrePoursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_deboucher */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_deboucher");

         stat = asn1PE_CR_AttenteOrdreDeboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fixe */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.cr_fixe");

         stat = asn1PE_CR_Fixe (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_esquive */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.cr_en_esquive");

         stat = asn1PE_CR_EnEsquive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_prise_contact */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.cr_prise_contact");

         stat = asn1PE_CR_PriseContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rupture_contact */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.cr_rupture_contact");

         stat = asn1PE_CR_RuptureContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_precision_contact */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.cr_precision_contact");

         stat = asn1PE_CR_PrecisionContact (ctxt_p, pvalue->u.cr_precision_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ennemi_detruit */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.cr_ennemi_detruit");

         stat = asn1PE_CR_EnnemiDetruit (ctxt_p, pvalue->u.cr_ennemi_detruit);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pris_a_partie_par_tir_direct */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.cr_pris_a_partie_par_tir_direct");

         stat = asn1PE_CR_PrisAPartieParTirDirect (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pris_sous_tir_artillerie */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.cr_pris_sous_tir_artillerie");

         stat = asn1PE_CR_PrisSousTirArtillerie (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_point_tenu_par_eni */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.cr_point_tenu_par_eni");

         stat = asn1PE_CR_PointTenuParEni (ctxt_p, pvalue->u.cr_point_tenu_par_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_eni */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_eni");

         stat = asn1PE_CR_ProgressionVersEni (ctxt_p, pvalue->u.cr_progression_vers_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_decroche */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.cr_decroche");

         stat = asn1PE_CR_Decroche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_eni_sur_objectif */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.cr_eni_sur_objectif");

         stat = asn1PE_CR_EniSurObjectif (ctxt_p, pvalue->u.cr_eni_sur_objectif);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte");

         stat = asn1PE_CR_Riposte (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_controle_zone */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_controle_zone");

         stat = asn1PE_CR_DebutControleZone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_controle_zone */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_controle_zone");

         stat = asn1PE_CR_FinControleZone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_surveillance */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_surveillance");

         stat = asn1PE_CR_DebutSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_surveillance */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_surveillance");

         stat = asn1PE_CR_FinSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_infiltration */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.cr_en_infiltration");

         stat = asn1PE_CR_EnInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_exfiltration */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.cr_en_exfiltration");

         stat = asn1PE_CR_EnExfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_condition_favorable_pour_infiltration */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_condition_favorable_pour_infiltration");

         stat = asn1PE_CR_AttenteConditionFavorablePourInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_lance */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_lance");

         stat = asn1PE_CR_DroneLance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_en_exploitation */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_en_exploitation");

         stat = asn1PE_CR_DroneEnExploitation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_exploite */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_exploite");

         stat = asn1PE_CR_DroneExploite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_disponible */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_disponible");

         stat = asn1PE_CR_DroneDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mise_en_oeuvre_drone */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mise_en_oeuvre_drone");

         stat = asn1PE_CR_DebutMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mise_en_oeuvre_drone */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mise_en_oeuvre_drone");

         stat = asn1PE_CR_FinMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_activation_brouillage */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.cr_activation_brouillage");

         stat = asn1PE_CR_ActivationBrouillage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_desactivation_brouillage */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.cr_desactivation_brouillage");

         stat = asn1PE_CR_DesactivationBrouillage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_activation_systeme_ecoute */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.cr_activation_systeme_ecoute");

         stat = asn1PE_CR_ActivationSystemeEcoute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_desactivation_systeme_ecoute */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.cr_desactivation_systeme_ecoute");

         stat = asn1PE_CR_DesactivationSystemeEcoute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_activation_systeme_ecoute_radar */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.cr_activation_systeme_ecoute_radar");

         stat = asn1PE_CR_ActivationSystemeEcouteRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_desactivation_systeme_ecoute_radar */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.cr_desactivation_systeme_ecoute_radar");

         stat = asn1PE_CR_DesactivationSystemeEcouteRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_liaison */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_liaison");

         stat = asn1PE_CR_DebutLiaison (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_liaison */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_liaison");

         stat = asn1PE_CR_FinLiaison (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_etablissement_liaison_impossible */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.cr_etablissement_liaison_impossible");

         stat = asn1PE_CR_EtablissementLiaisonImpossible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_trop_distante */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_trop_distante");

         stat = asn1PE_CR_UniteTropDistante (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_enregistrement_donnes */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.cr_enregistrement_donnes");

         stat = asn1PE_CR_EnregistrementDonnes (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_exploitation_donnees */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.cr_exploitation_donnees");

         stat = asn1PE_CR_ExploitationDonnees (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_extraction_donnes */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.cr_extraction_donnes");

         stat = asn1PE_CR_ExtractionDonnes (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_releve */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.cr_releve");

         stat = asn1PE_CR_Releve (ctxt_p, pvalue->u.cr_releve);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_suit_unite */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.cr_suit_unite");

         stat = asn1PE_CR_SuitUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_passe_en_appui */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.cr_passe_en_appui");

         stat = asn1PE_CR_PasseEnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_appui */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.cr_en_appui");

         stat = asn1PE_CR_EnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_non_operationnelle */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.cr_non_operationnelle");

         stat = asn1PE_CR_NonOperationnel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_operationnelle */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.cr_operationnelle");

         stat = asn1PE_CR_Operationnel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_vitesse */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_vitesse");

         stat = asn1PE_CR_AmbianceVitesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_surete */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_surete");

         stat = asn1PE_CR_AmbianceSurete (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_lima */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_lima");

         stat = asn1PE_CR_SurLima (ctxt_p, pvalue->u.cr_sur_lima);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_travaux */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_travaux");

         stat = asn1PE_CR_DebutTravaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_travaux */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_travaux");

         stat = asn1PE_CR_FinTravaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_degage */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_degage");

         stat = asn1PE_CR_ObstacleDegage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_organisation_chantier */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.cr_organisation_chantier");

         stat = asn1PE_CR_OrganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_desorganisation_chantier */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.cr_desorganisation_chantier");

         stat = asn1PE_CR_DesorganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_position_obstacle */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_position_obstacle");

         stat = asn1PE_CR_ReconnaissancePositionObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_contournement_realise */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.cr_contournement_realise");

         stat = asn1PE_CR_ContournementRealise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_renforcement */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_renforcement");

         stat = asn1PE_CR_AttenteRenforcement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_exploitation_site_franchissement */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_exploitation_site_franchissement");

         stat = asn1PE_CR_DebutExploitationSiteFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_exploitation_site_franchissement */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_exploitation_site_franchissement");

         stat = asn1PE_CR_FinExploitationSiteFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reussite_renforcement */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.cr_reussite_renforcement");

         stat = asn1PE_CR_ReussiteRenforcement (ctxt_p, pvalue->u.cr_reussite_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_echec_renforcement */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.cr_echec_renforcement");

         stat = asn1PE_CR_EchecRenforcement (ctxt_p, pvalue->u.cr_echec_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_en_attente_activation */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_en_attente_activation");

         stat = asn1PE_CR_ObstacleEnAttenteActivation (ctxt_p, pvalue->u.cr_obstacle_en_attente_activation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_amenagement_berges */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_amenagement_berges");

         stat = asn1PE_CR_DebutAmenagementBerges (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_amenagement_berges */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_amenagement_berges");

         stat = asn1PE_CR_FinAmenagementBerges (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_regime_maintenance_delai_depasse */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.cr_regime_maintenance_delai_depasse");

         stat = asn1PE_CR_RegimeMaintenanceDelaiDepasse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_section_deployee */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.cr_section_deployee");

         stat = asn1PE_CR_SectionDeployee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_a_nouveau_disponible_apres_reparation */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.cr_a_nouveau_disponible_apres_reparation");

         stat = asn1PE_CR_ANouveauDisponibleApresReparation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_materiel_retour_de_maintenance */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.cr_materiel_retour_de_maintenance");

         stat = asn1PE_CR_MaterielRetourDeMaintenance (ctxt_p, pvalue->u.cr_materiel_retour_de_maintenance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_materiel_repare_sur_place */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.cr_materiel_repare_sur_place");

         stat = asn1PE_CR_MaterielRepareSurPlace (ctxt_p, pvalue->u.cr_materiel_repare_sur_place);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_ravitaillement_dotations */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_ravitaillement_dotations");

         stat = asn1PE_CR_DemandeRavitaillementDotations (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_ravitaillement_stock */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_ravitaillement_stock");

         stat = asn1PE_CR_DemandeRavitaillementStock (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_sanitaire */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_sanitaire");

         stat = asn1PE_CR_DemandeEvacuationSanitaire (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_materiel */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_materiel");

         stat = asn1PE_CR_DemandeEvacuationMateriel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_allocation_consentie_bientot_epuisee */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.cr_allocation_consentie_bientot_epuisee");

         stat = asn1PE_CR_AllocationConsentieBientotEpuisee (ctxt_p, pvalue->u.cr_allocation_consentie_bientot_epuisee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_depassement_capacite_stockage */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.cr_depassement_capacite_stockage");

         stat = asn1PE_CR_DepassementCapaciteStockage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_seuil_logistique_dotation_depasse */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.cr_seuil_logistique_dotation_depasse");

         stat = asn1PE_CR_SeuilLogistiqueDotationDepasse (ctxt_p, pvalue->u.cr_seuil_logistique_dotation_depasse);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_seuil_logistique_stock_depasse */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.cr_seuil_logistique_stock_depasse");

         stat = asn1PE_CR_SeuilLogistiqueStockDepasse (ctxt_p, pvalue->u.cr_seuil_logistique_stock_depasse);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_dotations_effectue */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_dotations_effectue");

         stat = asn1PE_CR_RavitaillementDotationsEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_stock_effectue */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_stock_effectue");

         stat = asn1PE_CR_RavitaillementStockEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_dotations_annule */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_dotations_annule");

         stat = asn1PE_CR_RavitaillementDotationsAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_stock_annule */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_stock_annule");

         stat = asn1PE_CR_RavitaillementStockAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_humain_retour_de_sante */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.cr_humain_retour_de_sante");

         stat = asn1PE_CR_HumainRetourDeSante (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_pret_en_cours */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_pret_en_cours");

         stat = asn1PE_CR_VSRAM_PretEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_pret_annule */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_pret_annule");

         stat = asn1PE_CR_VSRAM_PretAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_pret_effectue */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_pret_effectue");

         stat = asn1PE_CR_VSRAM_PretEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_recuperation_effectuee */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_recuperation_effectuee");

         stat = asn1PE_CR_VSRAM_RecuperationEffectuee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_deplacement_vers_point_chargement */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_deplacement_vers_point_chargement");

         stat = asn1PE_CR_Convoi_DeplacementVersPointChargement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_chargement_en_cours */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_chargement_en_cours");

         stat = asn1PE_CR_Convoi_ChargementEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_chargement_effectue */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_chargement_effectue");

         stat = asn1PE_CR_Convoi_ChargementEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_deplacement_vers_point_dechargement */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_deplacement_vers_point_dechargement");

         stat = asn1PE_CR_Convoi_DeplacementVersPointDechargement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_dechargement_en_cours */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_dechargement_en_cours");

         stat = asn1PE_CR_Convoi_DechargementEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_dechargement_effectue */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_dechargement_effectue");

         stat = asn1PE_CR_Convoi_DechargementEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_retour */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_retour");

         stat = asn1PE_CR_Convoi_Retour (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_ravitaillement */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_ravitaillement");

         stat = asn1PE_CR_EnCoursRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_termine */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_termine");

         stat = asn1PE_CR_RavitaillementTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_helicoptere_en_observation */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.cr_helicoptere_en_observation");

         stat = asn1PE_CR_HelicoptereEnObservation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_perte_info_guidage */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.cr_perte_info_guidage");

         stat = asn1PE_CR_PerteInfoGuidage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_unite_pas_prete */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_unite_pas_prete");

         stat = asn1PE_CR_TransportUnitePasPrete (ctxt_p, pvalue->u.cr_transport_unite_pas_prete);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_unite_prete */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_unite_prete");

         stat = asn1PE_CR_TransportUnitePrete (ctxt_p, pvalue->u.cr_transport_unite_prete);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_en_cours */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_en_cours");

         stat = asn1PE_CR_TransportEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_embarquement */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_embarquement");

         stat = asn1PE_CR_TransportEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_debarquement */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_debarquement");

         stat = asn1PE_CR_TransportDebarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_vehicule_laisse_sur_position */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.cr_vehicule_laisse_sur_position");

         stat = asn1PE_CR_VehiculeLaisseSurPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_position_embarquement */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_position_embarquement");

         stat = asn1PE_CR_RejointPositionEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_attente_transporteurs */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.cr_en_attente_transporteurs");

         stat = asn1PE_CR_EnAttenteTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_contamine_nbc */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.cr_contamine_nbc");

         stat = asn1PE_CR_ContamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_decontamine_nbc */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.cr_decontamine_nbc");

         stat = asn1PE_CR_DecontamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_mise */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_mise");

         stat = asn1PE_CR_TenueProtectionNBCMise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_enlevee */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_enlevee");

         stat = asn1PE_CR_TenueProtectionNBCEnlevee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_alerte_nbc_niveau_4 */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.cr_alerte_nbc_niveau_4");

         stat = asn1PE_CR_AlerteNBCNiveau4 (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_alerte_nbc_niveau_4 */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_alerte_nbc_niveau_4");

         stat = asn1PE_CR_FinAlerteNBCNiveau4 (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_anime */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_anime");

         stat = asn1PE_CR_SiteDecontaminationAnime (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_desactive */
      case 142:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_desactive");

         stat = asn1PE_CR_SiteDecontaminationDesactive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_decontamination */
      case 143:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_decontamination");

         stat = asn1PE_CR_DemandeDecontamination (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_reconnue */
      case 144:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_reconnue");

         stat = asn1PE_CR_ZoneReconnue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_decontaminee */
      case 145:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_decontaminee");

         stat = asn1PE_CR_ZoneDecontaminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_rota_reconnu */
      case 146:
         PU_PUSHNAME (ctxt_p, "u.cr_site_rota_reconnu");

         stat = asn1PE_CR_SiteROTAReconnu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_incident_nbc_termine */
      case 147:
         PU_PUSHNAME (ctxt_p, "u.cr_incident_nbc_termine");

         stat = asn1PE_CR_IncidentNBCTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_decontaminee */
      case 148:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_decontaminee");

         stat = asn1PE_CR_UniteDecontaminee (ctxt_p, pvalue->u.cr_unite_decontaminee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_sature */
      case 149:
         PU_PUSHNAME (ctxt_p, "u.cr_site_sature");

         stat = asn1PE_CR_SiteSature (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mesure */
      case 150:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mesure");

         stat = asn1PE_CR_DebutMesure (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mesure */
      case 151:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mesure");

         stat = asn1PE_CR_FinMesure (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_terminee */
      case 152:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_terminee");

         stat = asn1PE_CR_ReconnaissanceTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_initiale_terminee */
      case 153:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_initiale_terminee");

         stat = asn1PE_CR_ReconnaissanceInitialeTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_plot_ravitaillement */
      case 154:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_plot_ravitaillement");

         stat = asn1PE_CR_RejointPlotRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_premier_coup_parti */
      case 155:
         PU_PUSHNAME (ctxt_p, "u.cr_premier_coup_parti");

         stat = asn1PE_CR_PremierCoupParti (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_execute */
      case 156:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_execute");

         stat = asn1PE_CR_TirExecute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_hors_de_portee */
      case 157:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_hors_de_portee");

         stat = asn1PE_CR_TirHorsDePortee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_impossible_plus_de_munitions */
      case 158:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_impossible_plus_de_munitions");

         stat = asn1PE_CR_TirImpossiblePlusDeMunitions (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_annule */
      case 159:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_annule");

         stat = asn1PE_CR_TirAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_changement_de_position */
      case 160:
         PU_PUSHNAME (ctxt_p, "u.cr_changement_de_position");

         stat = asn1PE_CR_ChangementDePosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_installation */
      case 161:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_installation");

         stat = asn1PE_CR_DebutInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_installation */
      case 162:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_installation");

         stat = asn1PE_CR_FinInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_pour_conduite_tir */
      case 163:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_pour_conduite_tir");

         stat = asn1PE_CR_PretPourConduiteTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_observation_tir_indirect */
      case 164:
         PU_PUSHNAME (ctxt_p, "u.cr_observation_tir_indirect");

         stat = asn1PE_CR_ObservationTirIndirect (ctxt_p, pvalue->u.cr_observation_tir_indirect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_implantation_occupee */
      case 165:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_implantation_occupee");

         stat = asn1PE_CR_ZoneImplantationOccupee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_installation_sur_zone_implantation */
      case 166:
         PU_PUSHNAME (ctxt_p, "u.cr_installation_sur_zone_implantation");

         stat = asn1PE_CR_InstallationSurZoneImplantation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reception_ordre_de_feu */
      case 167:
         PU_PUSHNAME (ctxt_p, "u.cr_reception_ordre_de_feu");

         stat = asn1PE_CR_ReceptionOrdreDeFeu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_au_tir */
      case 168:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_au_tir");

         stat = asn1PE_CR_PretAuTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_population */
      case 169:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_population");

         stat = asn1PE_CR_PresencePopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_population_vers_camp_refugies */
      case 170:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_population_vers_camp_refugies");

         stat = asn1PE_CR_OrientationPopulationVersCampRefugies (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_refugies_disponible */
      case 171:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_refugies_disponible");

         stat = asn1PE_CR_PasDeCampRefugiesDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_ennemi_rendu */
      case 172:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_ennemi_rendu");

         stat = asn1PE_CR_PresenceEnnemiRendu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_ennemi_rendu_vers_camp_prisonniers */
      case 173:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_ennemi_rendu_vers_camp_prisonniers");

         stat = asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_prisonniers_disponible */
      case 174:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_prisonniers_disponible");

         stat = asn1PE_CR_PasDeCampPrisonniersDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rendu */
      case 175:
         PU_PUSHNAME (ctxt_p, "u.cr_rendu");

         stat = asn1PE_CR_Rendu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_dans_zone_interdite */
      case 176:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_dans_zone_interdite");

         stat = asn1PE_CR_TirDansZoneInterdite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_ami */
      case 177:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_ami");

         stat = asn1PE_CR_TirSurCampAmi (ctxt_p, pvalue->u.cr_tir_sur_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_ami */
      case 178:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_ami");

         stat = asn1PE_CR_TireParCampAmi (ctxt_p, pvalue->u.cr_tire_par_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_neutre */
      case 179:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_neutre");

         stat = asn1PE_CR_TirSurCampNeutre (ctxt_p, pvalue->u.cr_tir_sur_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_neutre */
      case 180:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_neutre");

         stat = asn1PE_CR_TireParCampNeutre (ctxt_p, pvalue->u.cr_tire_par_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_civil */
      case 181:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_civil");

         stat = asn1PE_CR_TirSurCivil (ctxt_p, pvalue->u.cr_tir_sur_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_civil */
      case 182:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_civil");

         stat = asn1PE_CR_TireParCivil (ctxt_p, pvalue->u.cr_tire_par_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_destruction_pc */
      case 183:
         PU_PUSHNAME (ctxt_p, "u.cr_destruction_pc");

         stat = asn1PE_CR_DestructionPC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse */
      case 184:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse");

         stat = asn1PE_CR_DecesBlesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_transport */
      case 185:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_transport");

         stat = asn1PE_CR_DecesBlessePendantTransport (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_hospitalisation */
      case 186:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_hospitalisation");

         stat = asn1PE_CR_DecesBlessePendantHospitalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_unites_subordonnees_non_operationnelles */
      case 187:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_unites_subordonnees_non_operationnelles");

         stat = asn1PE_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_lima_invalide */
      case 188:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_lima_invalide");

         stat = asn1PE_CR_MissionImpossibleLimaInvalide (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_zone_hors_fuseau */
      case 189:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_zone_hors_fuseau");

         stat = asn1PE_CR_MissionImpossibleZoneHorsFuseau (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rapport_de_force_defavorable */
      case 190:
         PU_PUSHNAME (ctxt_p, "u.cr_rapport_de_force_defavorable");

         stat = asn1PE_CR_RapportDeForceDefavorable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_terrain_difficile */
      case 191:
         PU_PUSHNAME (ctxt_p, "u.cr_terrain_difficile");

         stat = asn1PE_CR_TerrainDifficile (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_plus_de_carburant */
      case 192:
         PU_PUSHNAME (ctxt_p, "u.cr_plus_de_carburant");

         stat = asn1PE_CR_PlusDeCarburant (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_disperse */
      case 193:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_disperse");

         stat = asn1PE_CR_DispositifDisperse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_neutralisation */
      case 194:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_neutralisation");

         stat = asn1PE_CR_DebutNeutralisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_neutralisation */
      case 195:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_neutralisation");

         stat = asn1PE_CR_FinNeutralisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_silence_radio */
      case 196:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_silence_radio");

         stat = asn1PE_CR_DebutSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_silence_radio */
      case 197:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_silence_radio");

         stat = asn1PE_CR_FinSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_silence_radar */
      case 198:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_silence_radar");

         stat = asn1PE_CR_DebutSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_silence_radar */
      case 199:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_silence_radar");

         stat = asn1PE_CR_FinSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_restreint */
      case 200:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_restreint");

         stat = asn1PE_CR_TirRestreint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_interdit */
      case 201:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_interdit");

         stat = asn1PE_CR_TirInterdit (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_libre */
      case 202:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_libre");

         stat = asn1PE_CR_TirLibre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_detectee */
      case 203:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_detectee");

         stat = asn1PE_CR_UniteDetectee (ctxt_p, pvalue->u.cr_unite_detectee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_amie_reconnue */
      case 204:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_amie_reconnue");

         stat = asn1PE_CR_UniteAmieReconnue (ctxt_p, pvalue->u.cr_unite_amie_reconnue);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_ennemie_reconnue */
      case 205:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_ennemie_reconnue");

         stat = asn1PE_CR_UniteEnnemieReconnue (ctxt_p, pvalue->u.cr_unite_ennemie_reconnue);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_neutre_reconnue */
      case 206:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_neutre_reconnue");

         stat = asn1PE_CR_UniteNeutreReconnue (ctxt_p, pvalue->u.cr_unite_neutre_reconnue);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_amie_identifiee */
      case 207:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_amie_identifiee");

         stat = asn1PE_CR_UniteAmieIdentifiee (ctxt_p, pvalue->u.cr_unite_amie_identifiee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_ennemie_identifiee */
      case 208:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_ennemie_identifiee");

         stat = asn1PE_CR_UniteEnnemieIdentifiee (ctxt_p, pvalue->u.cr_unite_ennemie_identifiee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_neutre_identifiee */
      case 209:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_neutre_identifiee");

         stat = asn1PE_CR_UniteNeutreIdentifiee (ctxt_p, pvalue->u.cr_unite_neutre_identifiee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_objet_detecte */
      case 210:
         PU_PUSHNAME (ctxt_p, "u.cr_objet_detecte");

         stat = asn1PE_CR_ObjetDetecte (ctxt_p, pvalue->u.cr_objet_detecte);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace */
      case 211:
         PU_PUSHNAME (ctxt_p, "u.cr_trace");

         stat = asn1PE_CR_Trace (ctxt_p, pvalue->u.cr_trace);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace_id */
      case 212:
         PU_PUSHNAME (ctxt_p, "u.cr_trace_id");

         stat = asn1PE_CR_TraceID (ctxt_p, pvalue->u.cr_trace_id);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_emploi_force_interdit */
      case 213:
         PU_PUSHNAME (ctxt_p, "u.cr_emploi_force_interdit");

         stat = asn1PE_CR_EmploiForceInterdit (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_maintien_a_distance_par_moyens_non_letaux */
      case 214:
         PU_PUSHNAME (ctxt_p, "u.cr_maintien_a_distance_par_moyens_non_letaux");

         stat = asn1PE_CR_MaintienADistanceParMoyensNonLetaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispersion_par_moyens_de_defense_actifs */
      case 215:
         PU_PUSHNAME (ctxt_p, "u.cr_dispersion_par_moyens_de_defense_actifs");

         stat = asn1PE_CR_DispersionParMoyensDeDefenseActifs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_armes_letales_autorisees */
      case 216:
         PU_PUSHNAME (ctxt_p, "u.cr_armes_letales_autorisees");

         stat = asn1PE_CR_ArmesLetalesAutorisees (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_detectee */
      case 217:
         PU_PUSHNAME (ctxt_p, "u.cr_population_detectee");

         stat = asn1PE_CR_PopulationDetectee (ctxt_p, pvalue->u.cr_population_detectee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_prise_a_partie_par_population */
      case 218:
         PU_PUSHNAME (ctxt_p, "u.cr_prise_a_partie_par_population");

         stat = asn1PE_CR_PriseAPartieParPopulation (ctxt_p, pvalue->u.cr_prise_a_partie_par_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte_contre_population */
      case 219:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte_contre_population");

         stat = asn1PE_CR_RiposteContrePopulation (ctxt_p, pvalue->u.cr_riposte_contre_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_dangereuse_a_proximite */
      case 220:
         PU_PUSHNAME (ctxt_p, "u.cr_population_dangereuse_a_proximite");

         stat = asn1PE_CR_PopulationDangereuseAProximite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_esquive_face_a_population */
      case 221:
         PU_PUSHNAME (ctxt_p, "u.cr_esquive_face_a_population");

         stat = asn1PE_CR_EsquiveFaceAPopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_decrochage_face_a_population */
      case 222:
         PU_PUSHNAME (ctxt_p, "u.cr_decrochage_face_a_population");

         stat = asn1PE_CR_DecrochageFaceAPopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mise_en_place_controle_de_foule */
      case 223:
         PU_PUSHNAME (ctxt_p, "u.cr_mise_en_place_controle_de_foule");

         stat = asn1PE_CR_MiseEnPlaceControleDeFoule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mise_en_place_filtrage */
      case 224:
         PU_PUSHNAME (ctxt_p, "u.cr_mise_en_place_filtrage");

         stat = asn1PE_CR_MiseEnPlaceFiltrage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_animation_barrage */
      case 225:
         PU_PUSHNAME (ctxt_p, "u.cr_animation_barrage");

         stat = asn1PE_CR_AnimationBarrage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_animation_canalisation */
      case 226:
         PU_PUSHNAME (ctxt_p, "u.cr_animation_canalisation");

         stat = asn1PE_CR_AnimationCanalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_collecte_renseignements_sur_populations */
      case 227:
         PU_PUSHNAME (ctxt_p, "u.cr_collecte_renseignements_sur_populations");

         stat = asn1PE_CR_CollecteRenseignementsSurPopulations (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_reconnue */
      case 228:
         PU_PUSHNAME (ctxt_p, "u.cr_population_reconnue");

         stat = asn1PE_CR_PopulationReconnue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_calme */
      case 229:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_calme");

         stat = asn1PE_CR_AttitudeCalme (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_agitee */
      case 230:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_agitee");

         stat = asn1PE_CR_AttitudeAgitee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_excitee */
      case 231:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_excitee");

         stat = asn1PE_CR_AttitudeExcitee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_agressive */
      case 232:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_agressive");

         stat = asn1PE_CR_AttitudeAgressive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_aggravation_attitude */
      case 233:
         PU_PUSHNAME (ctxt_p, "u.cr_aggravation_attitude");

         stat = asn1PE_CR_AggravationAttitude (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_affrontement_avec_forces_ennemies */
      case 234:
         PU_PUSHNAME (ctxt_p, "u.cr_affrontement_avec_forces_ennemies");

         stat = asn1PE_CR_AffrontementAvecForcesEnnemies (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_temporairement_controlee */
      case 235:
         PU_PUSHNAME (ctxt_p, "u.cr_population_temporairement_controlee");

         stat = asn1PE_CR_PopulationTemporairementControlee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_temporairement_repoussee */
      case 236:
         PU_PUSHNAME (ctxt_p, "u.cr_population_temporairement_repoussee");

         stat = asn1PE_CR_PopulationTemporairementRepoussee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reprise_des_affrontements */
      case 237:
         PU_PUSHNAME (ctxt_p, "u.cr_reprise_des_affrontements");

         stat = asn1PE_CR_RepriseDesAffrontements (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_agression_de_population */
      case 238:
         PU_PUSHNAME (ctxt_p, "u.cr_agression_de_population");

         stat = asn1PE_CR_AgressionDePopulation (ctxt_p, pvalue->u.cr_agression_de_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_agression_par_population */
      case 239:
         PU_PUSHNAME (ctxt_p, "u.cr_agression_par_population");

         stat = asn1PE_CR_AgressionParPopulation (ctxt_p, pvalue->u.cr_agression_par_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte_contre_agression_par_population */
      case 240:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte_contre_agression_par_population");

         stat = asn1PE_CR_RiposteContreAgressionParPopulation (ctxt_p, pvalue->u.cr_riposte_contre_agression_par_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attaque_installation */
      case 241:
         PU_PUSHNAME (ctxt_p, "u.cr_attaque_installation");

         stat = asn1PE_CR_AttaqueInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_stationnement */
      case 242:
         PU_PUSHNAME (ctxt_p, "u.cr_en_stationnement");

         stat = asn1PE_CR_EnStationnement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_execution_attentat */
      case 243:
         PU_PUSHNAME (ctxt_p, "u.cr_execution_attentat");

         stat = asn1PE_CR_ExecutionAttentat (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgCR_cr: end\n");
   return (stat);
}

int ASN1C_MsgCR_cr::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCR_cr (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCR_cr (ASN1CTXT* ctxt_p, ASN1T_MsgCR_cr* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgCR_cr: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 242);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* cr_ras */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.cr_ras");

         stat = asn1PD_CR_RAS (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_obstacle */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_obstacle");

         stat = asn1PD_CR_EnPosteFaceAObstacle (ctxt_p, &pvalue->u.cr_en_poste_face_a_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_contournement_obstacle */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.cr_en_contournement_obstacle");

         stat = asn1PD_CR_EnContournementObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible");

         stat = asn1PD_CR_MissionImpossible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_sur_axe */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_sur_axe");

         stat = asn1PD_CR_ProgressionSurAxe (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_position */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_position");

         stat = asn1PD_CR_ProgressionVersPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_arrive_sur_position */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.cr_arrive_sur_position");

         stat = asn1PD_CR_ArriveSurPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_point */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_point");

         stat = asn1PD_CR_ReconnaissancePoint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_direction_dangereuse */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_direction_dangereuse");

         stat = asn1PD_CR_EnPosteFaceADirectionDangereuse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_jalonnement */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.cr_en_jalonnement");

         stat = asn1PD_CR_EnJalonnement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_preparation_mission */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.cr_preparation_mission");

         pvalue->u.cr_preparation_mission = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CR_PreparationMission);
         if (pvalue->u.cr_preparation_mission == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CR_PreparationMission (ctxt_p, pvalue->u.cr_preparation_mission);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mission */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mission");

         stat = asn1PD_CR_DebutMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mission */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mission");

         stat = asn1PD_CR_FinMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_installe */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_installe");

         stat = asn1PD_CR_DispositifInstalle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_position */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.cr_en_position");

         stat = asn1PD_CR_EnPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_objectif_atteint */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.cr_objectif_atteint");

         stat = asn1PD_CR_ObjectifAtteint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debouche */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.cr_debouche");

         stat = asn1PD_CR_Debouche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_unite */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_unite");

         stat = asn1PD_CR_RejointUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_escorte_unite */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.cr_escorte_unite");

         stat = asn1PD_CR_EscorteUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_freinage */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.cr_en_freinage");

         stat = asn1PD_CR_EnFreinage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_assaut */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.cr_assaut");

         stat = asn1PD_CR_Assaut (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_couverture */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.cr_en_couverture");

         stat = asn1PD_CR_EnCouverture (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_eclairage */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.cr_en_eclairage");

         stat = asn1PD_CR_EnEclairage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_manoeuvre_ravitaillement */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.cr_en_manoeuvre_ravitaillement");

         stat = asn1PD_CR_EnManoeuvreRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_pia */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_pia");

         stat = asn1PD_CR_SurPIA (ctxt_p, &pvalue->u.cr_sur_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_passage_sur_pia */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.cr_passage_sur_pia");

         stat = asn1PD_CR_PassageSurPIA (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_recueillie */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_recueillie");

         stat = asn1PD_CR_UniteRecueillie (ctxt_p, &pvalue->u.cr_unite_recueillie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_de_franchissement */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_de_franchissement");

         stat = asn1PD_CR_EnCoursDeFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_poursuivre */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_poursuivre");

         stat = asn1PD_CR_AttenteOrdrePoursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_deboucher */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_deboucher");

         stat = asn1PD_CR_AttenteOrdreDeboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fixe */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.cr_fixe");

         stat = asn1PD_CR_Fixe (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_esquive */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.cr_en_esquive");

         stat = asn1PD_CR_EnEsquive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_prise_contact */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.cr_prise_contact");

         stat = asn1PD_CR_PriseContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rupture_contact */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.cr_rupture_contact");

         stat = asn1PD_CR_RuptureContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_precision_contact */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.cr_precision_contact");

         stat = asn1PD_CR_PrecisionContact (ctxt_p, &pvalue->u.cr_precision_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ennemi_detruit */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.cr_ennemi_detruit");

         stat = asn1PD_CR_EnnemiDetruit (ctxt_p, &pvalue->u.cr_ennemi_detruit);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pris_a_partie_par_tir_direct */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.cr_pris_a_partie_par_tir_direct");

         stat = asn1PD_CR_PrisAPartieParTirDirect (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pris_sous_tir_artillerie */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.cr_pris_sous_tir_artillerie");

         stat = asn1PD_CR_PrisSousTirArtillerie (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_point_tenu_par_eni */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.cr_point_tenu_par_eni");

         stat = asn1PD_CR_PointTenuParEni (ctxt_p, &pvalue->u.cr_point_tenu_par_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_eni */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_eni");

         stat = asn1PD_CR_ProgressionVersEni (ctxt_p, &pvalue->u.cr_progression_vers_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_decroche */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.cr_decroche");

         stat = asn1PD_CR_Decroche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_eni_sur_objectif */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.cr_eni_sur_objectif");

         stat = asn1PD_CR_EniSurObjectif (ctxt_p, &pvalue->u.cr_eni_sur_objectif);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte");

         stat = asn1PD_CR_Riposte (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_controle_zone */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_controle_zone");

         stat = asn1PD_CR_DebutControleZone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_controle_zone */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_controle_zone");

         stat = asn1PD_CR_FinControleZone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_surveillance */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_surveillance");

         stat = asn1PD_CR_DebutSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_surveillance */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_surveillance");

         stat = asn1PD_CR_FinSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_infiltration */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.cr_en_infiltration");

         stat = asn1PD_CR_EnInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_exfiltration */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.cr_en_exfiltration");

         stat = asn1PD_CR_EnExfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_condition_favorable_pour_infiltration */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_condition_favorable_pour_infiltration");

         stat = asn1PD_CR_AttenteConditionFavorablePourInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_lance */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_lance");

         stat = asn1PD_CR_DroneLance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_en_exploitation */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_en_exploitation");

         stat = asn1PD_CR_DroneEnExploitation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_exploite */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_exploite");

         stat = asn1PD_CR_DroneExploite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_disponible */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_disponible");

         stat = asn1PD_CR_DroneDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mise_en_oeuvre_drone */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mise_en_oeuvre_drone");

         stat = asn1PD_CR_DebutMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mise_en_oeuvre_drone */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mise_en_oeuvre_drone");

         stat = asn1PD_CR_FinMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_activation_brouillage */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.cr_activation_brouillage");

         stat = asn1PD_CR_ActivationBrouillage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_desactivation_brouillage */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.cr_desactivation_brouillage");

         stat = asn1PD_CR_DesactivationBrouillage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_activation_systeme_ecoute */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.cr_activation_systeme_ecoute");

         stat = asn1PD_CR_ActivationSystemeEcoute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_desactivation_systeme_ecoute */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.cr_desactivation_systeme_ecoute");

         stat = asn1PD_CR_DesactivationSystemeEcoute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_activation_systeme_ecoute_radar */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.cr_activation_systeme_ecoute_radar");

         stat = asn1PD_CR_ActivationSystemeEcouteRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_desactivation_systeme_ecoute_radar */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.cr_desactivation_systeme_ecoute_radar");

         stat = asn1PD_CR_DesactivationSystemeEcouteRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_liaison */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_liaison");

         stat = asn1PD_CR_DebutLiaison (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_liaison */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_liaison");

         stat = asn1PD_CR_FinLiaison (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_etablissement_liaison_impossible */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.cr_etablissement_liaison_impossible");

         stat = asn1PD_CR_EtablissementLiaisonImpossible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_trop_distante */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_trop_distante");

         stat = asn1PD_CR_UniteTropDistante (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_enregistrement_donnes */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.cr_enregistrement_donnes");

         stat = asn1PD_CR_EnregistrementDonnes (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_exploitation_donnees */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.cr_exploitation_donnees");

         stat = asn1PD_CR_ExploitationDonnees (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_extraction_donnes */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.cr_extraction_donnes");

         stat = asn1PD_CR_ExtractionDonnes (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_releve */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.cr_releve");

         stat = asn1PD_CR_Releve (ctxt_p, &pvalue->u.cr_releve);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_suit_unite */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.cr_suit_unite");

         stat = asn1PD_CR_SuitUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_passe_en_appui */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.cr_passe_en_appui");

         stat = asn1PD_CR_PasseEnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_appui */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.cr_en_appui");

         stat = asn1PD_CR_EnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_non_operationnelle */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.cr_non_operationnelle");

         stat = asn1PD_CR_NonOperationnel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_operationnelle */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.cr_operationnelle");

         stat = asn1PD_CR_Operationnel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_vitesse */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_vitesse");

         stat = asn1PD_CR_AmbianceVitesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_surete */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_surete");

         stat = asn1PD_CR_AmbianceSurete (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_lima */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_lima");

         stat = asn1PD_CR_SurLima (ctxt_p, &pvalue->u.cr_sur_lima);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_travaux */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_travaux");

         stat = asn1PD_CR_DebutTravaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_travaux */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_travaux");

         stat = asn1PD_CR_FinTravaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_degage */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_degage");

         stat = asn1PD_CR_ObstacleDegage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_organisation_chantier */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.cr_organisation_chantier");

         stat = asn1PD_CR_OrganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_desorganisation_chantier */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.cr_desorganisation_chantier");

         stat = asn1PD_CR_DesorganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_position_obstacle */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_position_obstacle");

         stat = asn1PD_CR_ReconnaissancePositionObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_contournement_realise */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.cr_contournement_realise");

         stat = asn1PD_CR_ContournementRealise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_renforcement */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_renforcement");

         stat = asn1PD_CR_AttenteRenforcement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_exploitation_site_franchissement */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_exploitation_site_franchissement");

         stat = asn1PD_CR_DebutExploitationSiteFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_exploitation_site_franchissement */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_exploitation_site_franchissement");

         stat = asn1PD_CR_FinExploitationSiteFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reussite_renforcement */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.cr_reussite_renforcement");

         pvalue->u.cr_reussite_renforcement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CR_ReussiteRenforcement);
         if (pvalue->u.cr_reussite_renforcement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CR_ReussiteRenforcement (ctxt_p, pvalue->u.cr_reussite_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_echec_renforcement */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.cr_echec_renforcement");

         pvalue->u.cr_echec_renforcement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CR_EchecRenforcement);
         if (pvalue->u.cr_echec_renforcement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CR_EchecRenforcement (ctxt_p, pvalue->u.cr_echec_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_en_attente_activation */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_en_attente_activation");

         stat = asn1PD_CR_ObstacleEnAttenteActivation (ctxt_p, &pvalue->u.cr_obstacle_en_attente_activation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_amenagement_berges */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_amenagement_berges");

         stat = asn1PD_CR_DebutAmenagementBerges (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_amenagement_berges */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_amenagement_berges");

         stat = asn1PD_CR_FinAmenagementBerges (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_regime_maintenance_delai_depasse */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.cr_regime_maintenance_delai_depasse");

         stat = asn1PD_CR_RegimeMaintenanceDelaiDepasse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_section_deployee */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.cr_section_deployee");

         stat = asn1PD_CR_SectionDeployee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_a_nouveau_disponible_apres_reparation */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.cr_a_nouveau_disponible_apres_reparation");

         stat = asn1PD_CR_ANouveauDisponibleApresReparation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_materiel_retour_de_maintenance */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.cr_materiel_retour_de_maintenance");

         stat = asn1PD_CR_MaterielRetourDeMaintenance (ctxt_p, &pvalue->u.cr_materiel_retour_de_maintenance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_materiel_repare_sur_place */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.cr_materiel_repare_sur_place");

         stat = asn1PD_CR_MaterielRepareSurPlace (ctxt_p, &pvalue->u.cr_materiel_repare_sur_place);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_ravitaillement_dotations */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_ravitaillement_dotations");

         stat = asn1PD_CR_DemandeRavitaillementDotations (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_ravitaillement_stock */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_ravitaillement_stock");

         stat = asn1PD_CR_DemandeRavitaillementStock (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_sanitaire */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_sanitaire");

         stat = asn1PD_CR_DemandeEvacuationSanitaire (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_materiel */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_materiel");

         stat = asn1PD_CR_DemandeEvacuationMateriel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_allocation_consentie_bientot_epuisee */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.cr_allocation_consentie_bientot_epuisee");

         stat = asn1PD_CR_AllocationConsentieBientotEpuisee (ctxt_p, &pvalue->u.cr_allocation_consentie_bientot_epuisee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_depassement_capacite_stockage */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.cr_depassement_capacite_stockage");

         stat = asn1PD_CR_DepassementCapaciteStockage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_seuil_logistique_dotation_depasse */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.cr_seuil_logistique_dotation_depasse");

         stat = asn1PD_CR_SeuilLogistiqueDotationDepasse (ctxt_p, &pvalue->u.cr_seuil_logistique_dotation_depasse);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_seuil_logistique_stock_depasse */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.cr_seuil_logistique_stock_depasse");

         stat = asn1PD_CR_SeuilLogistiqueStockDepasse (ctxt_p, &pvalue->u.cr_seuil_logistique_stock_depasse);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_dotations_effectue */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_dotations_effectue");

         stat = asn1PD_CR_RavitaillementDotationsEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_stock_effectue */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_stock_effectue");

         stat = asn1PD_CR_RavitaillementStockEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_dotations_annule */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_dotations_annule");

         stat = asn1PD_CR_RavitaillementDotationsAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_stock_annule */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_stock_annule");

         stat = asn1PD_CR_RavitaillementStockAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_humain_retour_de_sante */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.cr_humain_retour_de_sante");

         stat = asn1PD_CR_HumainRetourDeSante (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_pret_en_cours */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_pret_en_cours");

         stat = asn1PD_CR_VSRAM_PretEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_pret_annule */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_pret_annule");

         stat = asn1PD_CR_VSRAM_PretAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_pret_effectue */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_pret_effectue");

         stat = asn1PD_CR_VSRAM_PretEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_vsram_recuperation_effectuee */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.cr_vsram_recuperation_effectuee");

         stat = asn1PD_CR_VSRAM_RecuperationEffectuee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_deplacement_vers_point_chargement */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_deplacement_vers_point_chargement");

         stat = asn1PD_CR_Convoi_DeplacementVersPointChargement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_chargement_en_cours */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_chargement_en_cours");

         stat = asn1PD_CR_Convoi_ChargementEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_chargement_effectue */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_chargement_effectue");

         stat = asn1PD_CR_Convoi_ChargementEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_deplacement_vers_point_dechargement */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_deplacement_vers_point_dechargement");

         stat = asn1PD_CR_Convoi_DeplacementVersPointDechargement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_dechargement_en_cours */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_dechargement_en_cours");

         stat = asn1PD_CR_Convoi_DechargementEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_dechargement_effectue */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_dechargement_effectue");

         stat = asn1PD_CR_Convoi_DechargementEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_convoi_retour */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.cr_convoi_retour");

         stat = asn1PD_CR_Convoi_Retour (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_ravitaillement */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_ravitaillement");

         stat = asn1PD_CR_EnCoursRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_termine */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_termine");

         stat = asn1PD_CR_RavitaillementTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_helicoptere_en_observation */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.cr_helicoptere_en_observation");

         stat = asn1PD_CR_HelicoptereEnObservation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_perte_info_guidage */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.cr_perte_info_guidage");

         stat = asn1PD_CR_PerteInfoGuidage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_unite_pas_prete */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_unite_pas_prete");

         stat = asn1PD_CR_TransportUnitePasPrete (ctxt_p, &pvalue->u.cr_transport_unite_pas_prete);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_unite_prete */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_unite_prete");

         stat = asn1PD_CR_TransportUnitePrete (ctxt_p, &pvalue->u.cr_transport_unite_prete);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_en_cours */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_en_cours");

         stat = asn1PD_CR_TransportEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_embarquement */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_embarquement");

         stat = asn1PD_CR_TransportEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_debarquement */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_debarquement");

         stat = asn1PD_CR_TransportDebarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_vehicule_laisse_sur_position */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.cr_vehicule_laisse_sur_position");

         stat = asn1PD_CR_VehiculeLaisseSurPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_position_embarquement */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_position_embarquement");

         stat = asn1PD_CR_RejointPositionEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_attente_transporteurs */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.cr_en_attente_transporteurs");

         stat = asn1PD_CR_EnAttenteTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_contamine_nbc */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.cr_contamine_nbc");

         stat = asn1PD_CR_ContamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_decontamine_nbc */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.cr_decontamine_nbc");

         stat = asn1PD_CR_DecontamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_mise */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_mise");

         stat = asn1PD_CR_TenueProtectionNBCMise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_enlevee */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_enlevee");

         stat = asn1PD_CR_TenueProtectionNBCEnlevee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_alerte_nbc_niveau_4 */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.cr_alerte_nbc_niveau_4");

         stat = asn1PD_CR_AlerteNBCNiveau4 (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_alerte_nbc_niveau_4 */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_alerte_nbc_niveau_4");

         stat = asn1PD_CR_FinAlerteNBCNiveau4 (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_anime */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_anime");

         stat = asn1PD_CR_SiteDecontaminationAnime (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_desactive */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_desactive");

         stat = asn1PD_CR_SiteDecontaminationDesactive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_decontamination */
      case 142:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_decontamination");

         stat = asn1PD_CR_DemandeDecontamination (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_reconnue */
      case 143:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_reconnue");

         stat = asn1PD_CR_ZoneReconnue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_decontaminee */
      case 144:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_decontaminee");

         stat = asn1PD_CR_ZoneDecontaminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_rota_reconnu */
      case 145:
         PU_PUSHNAME (ctxt_p, "u.cr_site_rota_reconnu");

         stat = asn1PD_CR_SiteROTAReconnu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_incident_nbc_termine */
      case 146:
         PU_PUSHNAME (ctxt_p, "u.cr_incident_nbc_termine");

         stat = asn1PD_CR_IncidentNBCTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_decontaminee */
      case 147:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_decontaminee");

         stat = asn1PD_CR_UniteDecontaminee (ctxt_p, &pvalue->u.cr_unite_decontaminee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_sature */
      case 148:
         PU_PUSHNAME (ctxt_p, "u.cr_site_sature");

         stat = asn1PD_CR_SiteSature (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mesure */
      case 149:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mesure");

         stat = asn1PD_CR_DebutMesure (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mesure */
      case 150:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mesure");

         stat = asn1PD_CR_FinMesure (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_terminee */
      case 151:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_terminee");

         stat = asn1PD_CR_ReconnaissanceTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_initiale_terminee */
      case 152:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_initiale_terminee");

         stat = asn1PD_CR_ReconnaissanceInitialeTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_plot_ravitaillement */
      case 153:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_plot_ravitaillement");

         stat = asn1PD_CR_RejointPlotRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_premier_coup_parti */
      case 154:
         PU_PUSHNAME (ctxt_p, "u.cr_premier_coup_parti");

         stat = asn1PD_CR_PremierCoupParti (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_execute */
      case 155:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_execute");

         stat = asn1PD_CR_TirExecute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_hors_de_portee */
      case 156:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_hors_de_portee");

         stat = asn1PD_CR_TirHorsDePortee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_impossible_plus_de_munitions */
      case 157:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_impossible_plus_de_munitions");

         stat = asn1PD_CR_TirImpossiblePlusDeMunitions (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_annule */
      case 158:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_annule");

         stat = asn1PD_CR_TirAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_changement_de_position */
      case 159:
         PU_PUSHNAME (ctxt_p, "u.cr_changement_de_position");

         stat = asn1PD_CR_ChangementDePosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_installation */
      case 160:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_installation");

         stat = asn1PD_CR_DebutInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_installation */
      case 161:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_installation");

         stat = asn1PD_CR_FinInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_pour_conduite_tir */
      case 162:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_pour_conduite_tir");

         stat = asn1PD_CR_PretPourConduiteTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_observation_tir_indirect */
      case 163:
         PU_PUSHNAME (ctxt_p, "u.cr_observation_tir_indirect");

         stat = asn1PD_CR_ObservationTirIndirect (ctxt_p, &pvalue->u.cr_observation_tir_indirect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_implantation_occupee */
      case 164:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_implantation_occupee");

         stat = asn1PD_CR_ZoneImplantationOccupee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_installation_sur_zone_implantation */
      case 165:
         PU_PUSHNAME (ctxt_p, "u.cr_installation_sur_zone_implantation");

         stat = asn1PD_CR_InstallationSurZoneImplantation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reception_ordre_de_feu */
      case 166:
         PU_PUSHNAME (ctxt_p, "u.cr_reception_ordre_de_feu");

         stat = asn1PD_CR_ReceptionOrdreDeFeu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_au_tir */
      case 167:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_au_tir");

         stat = asn1PD_CR_PretAuTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_population */
      case 168:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_population");

         stat = asn1PD_CR_PresencePopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_population_vers_camp_refugies */
      case 169:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_population_vers_camp_refugies");

         stat = asn1PD_CR_OrientationPopulationVersCampRefugies (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_refugies_disponible */
      case 170:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_refugies_disponible");

         stat = asn1PD_CR_PasDeCampRefugiesDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_ennemi_rendu */
      case 171:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_ennemi_rendu");

         stat = asn1PD_CR_PresenceEnnemiRendu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_ennemi_rendu_vers_camp_prisonniers */
      case 172:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_ennemi_rendu_vers_camp_prisonniers");

         stat = asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_prisonniers_disponible */
      case 173:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_prisonniers_disponible");

         stat = asn1PD_CR_PasDeCampPrisonniersDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rendu */
      case 174:
         PU_PUSHNAME (ctxt_p, "u.cr_rendu");

         stat = asn1PD_CR_Rendu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_dans_zone_interdite */
      case 175:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_dans_zone_interdite");

         stat = asn1PD_CR_TirDansZoneInterdite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_ami */
      case 176:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_ami");

         stat = asn1PD_CR_TirSurCampAmi (ctxt_p, &pvalue->u.cr_tir_sur_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_ami */
      case 177:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_ami");

         stat = asn1PD_CR_TireParCampAmi (ctxt_p, &pvalue->u.cr_tire_par_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_neutre */
      case 178:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_neutre");

         stat = asn1PD_CR_TirSurCampNeutre (ctxt_p, &pvalue->u.cr_tir_sur_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_neutre */
      case 179:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_neutre");

         stat = asn1PD_CR_TireParCampNeutre (ctxt_p, &pvalue->u.cr_tire_par_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_civil */
      case 180:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_civil");

         stat = asn1PD_CR_TirSurCivil (ctxt_p, &pvalue->u.cr_tir_sur_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_civil */
      case 181:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_civil");

         stat = asn1PD_CR_TireParCivil (ctxt_p, &pvalue->u.cr_tire_par_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_destruction_pc */
      case 182:
         PU_PUSHNAME (ctxt_p, "u.cr_destruction_pc");

         stat = asn1PD_CR_DestructionPC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse */
      case 183:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse");

         stat = asn1PD_CR_DecesBlesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_transport */
      case 184:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_transport");

         stat = asn1PD_CR_DecesBlessePendantTransport (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_hospitalisation */
      case 185:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_hospitalisation");

         stat = asn1PD_CR_DecesBlessePendantHospitalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_unites_subordonnees_non_operationnelles */
      case 186:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_unites_subordonnees_non_operationnelles");

         stat = asn1PD_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_lima_invalide */
      case 187:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_lima_invalide");

         stat = asn1PD_CR_MissionImpossibleLimaInvalide (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_zone_hors_fuseau */
      case 188:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_zone_hors_fuseau");

         stat = asn1PD_CR_MissionImpossibleZoneHorsFuseau (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rapport_de_force_defavorable */
      case 189:
         PU_PUSHNAME (ctxt_p, "u.cr_rapport_de_force_defavorable");

         stat = asn1PD_CR_RapportDeForceDefavorable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_terrain_difficile */
      case 190:
         PU_PUSHNAME (ctxt_p, "u.cr_terrain_difficile");

         stat = asn1PD_CR_TerrainDifficile (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_plus_de_carburant */
      case 191:
         PU_PUSHNAME (ctxt_p, "u.cr_plus_de_carburant");

         stat = asn1PD_CR_PlusDeCarburant (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_disperse */
      case 192:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_disperse");

         stat = asn1PD_CR_DispositifDisperse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_neutralisation */
      case 193:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_neutralisation");

         stat = asn1PD_CR_DebutNeutralisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_neutralisation */
      case 194:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_neutralisation");

         stat = asn1PD_CR_FinNeutralisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_silence_radio */
      case 195:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_silence_radio");

         stat = asn1PD_CR_DebutSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_silence_radio */
      case 196:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_silence_radio");

         stat = asn1PD_CR_FinSilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_silence_radar */
      case 197:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_silence_radar");

         stat = asn1PD_CR_DebutSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_silence_radar */
      case 198:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_silence_radar");

         stat = asn1PD_CR_FinSilenceRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_restreint */
      case 199:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_restreint");

         stat = asn1PD_CR_TirRestreint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_interdit */
      case 200:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_interdit");

         stat = asn1PD_CR_TirInterdit (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_libre */
      case 201:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_libre");

         stat = asn1PD_CR_TirLibre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_detectee */
      case 202:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_detectee");

         stat = asn1PD_CR_UniteDetectee (ctxt_p, &pvalue->u.cr_unite_detectee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_amie_reconnue */
      case 203:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_amie_reconnue");

         stat = asn1PD_CR_UniteAmieReconnue (ctxt_p, &pvalue->u.cr_unite_amie_reconnue);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_ennemie_reconnue */
      case 204:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_ennemie_reconnue");

         stat = asn1PD_CR_UniteEnnemieReconnue (ctxt_p, &pvalue->u.cr_unite_ennemie_reconnue);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_neutre_reconnue */
      case 205:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_neutre_reconnue");

         stat = asn1PD_CR_UniteNeutreReconnue (ctxt_p, &pvalue->u.cr_unite_neutre_reconnue);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_amie_identifiee */
      case 206:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_amie_identifiee");

         stat = asn1PD_CR_UniteAmieIdentifiee (ctxt_p, &pvalue->u.cr_unite_amie_identifiee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_ennemie_identifiee */
      case 207:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_ennemie_identifiee");

         stat = asn1PD_CR_UniteEnnemieIdentifiee (ctxt_p, &pvalue->u.cr_unite_ennemie_identifiee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_neutre_identifiee */
      case 208:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_neutre_identifiee");

         stat = asn1PD_CR_UniteNeutreIdentifiee (ctxt_p, &pvalue->u.cr_unite_neutre_identifiee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_objet_detecte */
      case 209:
         PU_PUSHNAME (ctxt_p, "u.cr_objet_detecte");

         stat = asn1PD_CR_ObjetDetecte (ctxt_p, &pvalue->u.cr_objet_detecte);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace */
      case 210:
         PU_PUSHNAME (ctxt_p, "u.cr_trace");

         stat = asn1PD_CR_Trace (ctxt_p, &pvalue->u.cr_trace);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace_id */
      case 211:
         PU_PUSHNAME (ctxt_p, "u.cr_trace_id");

         stat = asn1PD_CR_TraceID (ctxt_p, &pvalue->u.cr_trace_id);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_emploi_force_interdit */
      case 212:
         PU_PUSHNAME (ctxt_p, "u.cr_emploi_force_interdit");

         stat = asn1PD_CR_EmploiForceInterdit (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_maintien_a_distance_par_moyens_non_letaux */
      case 213:
         PU_PUSHNAME (ctxt_p, "u.cr_maintien_a_distance_par_moyens_non_letaux");

         stat = asn1PD_CR_MaintienADistanceParMoyensNonLetaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispersion_par_moyens_de_defense_actifs */
      case 214:
         PU_PUSHNAME (ctxt_p, "u.cr_dispersion_par_moyens_de_defense_actifs");

         stat = asn1PD_CR_DispersionParMoyensDeDefenseActifs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_armes_letales_autorisees */
      case 215:
         PU_PUSHNAME (ctxt_p, "u.cr_armes_letales_autorisees");

         stat = asn1PD_CR_ArmesLetalesAutorisees (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_detectee */
      case 216:
         PU_PUSHNAME (ctxt_p, "u.cr_population_detectee");

         stat = asn1PD_CR_PopulationDetectee (ctxt_p, &pvalue->u.cr_population_detectee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_prise_a_partie_par_population */
      case 217:
         PU_PUSHNAME (ctxt_p, "u.cr_prise_a_partie_par_population");

         stat = asn1PD_CR_PriseAPartieParPopulation (ctxt_p, &pvalue->u.cr_prise_a_partie_par_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte_contre_population */
      case 218:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte_contre_population");

         stat = asn1PD_CR_RiposteContrePopulation (ctxt_p, &pvalue->u.cr_riposte_contre_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_dangereuse_a_proximite */
      case 219:
         PU_PUSHNAME (ctxt_p, "u.cr_population_dangereuse_a_proximite");

         stat = asn1PD_CR_PopulationDangereuseAProximite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_esquive_face_a_population */
      case 220:
         PU_PUSHNAME (ctxt_p, "u.cr_esquive_face_a_population");

         stat = asn1PD_CR_EsquiveFaceAPopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_decrochage_face_a_population */
      case 221:
         PU_PUSHNAME (ctxt_p, "u.cr_decrochage_face_a_population");

         stat = asn1PD_CR_DecrochageFaceAPopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mise_en_place_controle_de_foule */
      case 222:
         PU_PUSHNAME (ctxt_p, "u.cr_mise_en_place_controle_de_foule");

         stat = asn1PD_CR_MiseEnPlaceControleDeFoule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mise_en_place_filtrage */
      case 223:
         PU_PUSHNAME (ctxt_p, "u.cr_mise_en_place_filtrage");

         stat = asn1PD_CR_MiseEnPlaceFiltrage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_animation_barrage */
      case 224:
         PU_PUSHNAME (ctxt_p, "u.cr_animation_barrage");

         stat = asn1PD_CR_AnimationBarrage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_animation_canalisation */
      case 225:
         PU_PUSHNAME (ctxt_p, "u.cr_animation_canalisation");

         stat = asn1PD_CR_AnimationCanalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_collecte_renseignements_sur_populations */
      case 226:
         PU_PUSHNAME (ctxt_p, "u.cr_collecte_renseignements_sur_populations");

         stat = asn1PD_CR_CollecteRenseignementsSurPopulations (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_reconnue */
      case 227:
         PU_PUSHNAME (ctxt_p, "u.cr_population_reconnue");

         stat = asn1PD_CR_PopulationReconnue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_calme */
      case 228:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_calme");

         stat = asn1PD_CR_AttitudeCalme (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_agitee */
      case 229:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_agitee");

         stat = asn1PD_CR_AttitudeAgitee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_excitee */
      case 230:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_excitee");

         stat = asn1PD_CR_AttitudeExcitee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attitude_agressive */
      case 231:
         PU_PUSHNAME (ctxt_p, "u.cr_attitude_agressive");

         stat = asn1PD_CR_AttitudeAgressive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_aggravation_attitude */
      case 232:
         PU_PUSHNAME (ctxt_p, "u.cr_aggravation_attitude");

         stat = asn1PD_CR_AggravationAttitude (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_affrontement_avec_forces_ennemies */
      case 233:
         PU_PUSHNAME (ctxt_p, "u.cr_affrontement_avec_forces_ennemies");

         stat = asn1PD_CR_AffrontementAvecForcesEnnemies (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_temporairement_controlee */
      case 234:
         PU_PUSHNAME (ctxt_p, "u.cr_population_temporairement_controlee");

         stat = asn1PD_CR_PopulationTemporairementControlee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_population_temporairement_repoussee */
      case 235:
         PU_PUSHNAME (ctxt_p, "u.cr_population_temporairement_repoussee");

         stat = asn1PD_CR_PopulationTemporairementRepoussee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reprise_des_affrontements */
      case 236:
         PU_PUSHNAME (ctxt_p, "u.cr_reprise_des_affrontements");

         stat = asn1PD_CR_RepriseDesAffrontements (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_agression_de_population */
      case 237:
         PU_PUSHNAME (ctxt_p, "u.cr_agression_de_population");

         stat = asn1PD_CR_AgressionDePopulation (ctxt_p, &pvalue->u.cr_agression_de_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_agression_par_population */
      case 238:
         PU_PUSHNAME (ctxt_p, "u.cr_agression_par_population");

         stat = asn1PD_CR_AgressionParPopulation (ctxt_p, &pvalue->u.cr_agression_par_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte_contre_agression_par_population */
      case 239:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte_contre_agression_par_population");

         stat = asn1PD_CR_RiposteContreAgressionParPopulation (ctxt_p, &pvalue->u.cr_riposte_contre_agression_par_population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attaque_installation */
      case 240:
         PU_PUSHNAME (ctxt_p, "u.cr_attaque_installation");

         stat = asn1PD_CR_AttaqueInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_stationnement */
      case 241:
         PU_PUSHNAME (ctxt_p, "u.cr_en_stationnement");

         stat = asn1PD_CR_EnStationnement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_execution_attentat */
      case 242:
         PU_PUSHNAME (ctxt_p, "u.cr_execution_attentat");

         stat = asn1PD_CR_ExecutionAttentat (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgCR_cr: end\n");

   return (stat);
}

int ASN1C_MsgCR_cr::Decode ()
{
   return asn1PD_MsgCR_cr (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCR                                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgCR::ASN1C_MsgCR (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCR& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCR (ASN1CTXT* ctxt_p, ASN1T_MsgCR* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCR: start\n");

   /* encode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PE_OID (ctxt_p, pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_cr */

   PU_PUSHNAME (ctxt_p, "type_cr");

   stat = asn1PE_EnumTypeCR (ctxt_p, pvalue->type_cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cr */

   PU_PUSHNAME (ctxt_p, "cr");

   stat = asn1PE_MsgCR_cr (ctxt_p, &pvalue->cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCR: end\n");
   return (stat);
}

int ASN1C_MsgCR::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCR (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCR (ASN1CTXT* ctxt_p, ASN1T_MsgCR* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCR: start\n");

   /* decode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_cr */

   PU_PUSHNAME (ctxt_p, "type_cr");

   stat = asn1PD_EnumTypeCR (ctxt_p, &pvalue->type_cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cr */

   PU_PUSHNAME (ctxt_p, "cr");

   stat = asn1PD_MsgCR_cr (ctxt_p, &pvalue->cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCR: end\n");

   return (stat);
}

int ASN1C_MsgCR::Decode ()
{
   return asn1PD_MsgCR (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 16-Aug-2005.
 */
#include "ScipioCR.h"

/**************************************************************/
/*                                                            */
/*  EnumTypeTerrain                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeTerrain::ASN1C_EnumTypeTerrain (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeTerrain& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeTerrain (ASN1CTXT* ctxt_p, ASN1T_EnumTypeTerrain value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeTerrain: start\n");

   switch (value) {
      case EnumTypeTerrain::vide: ui = 0; break;
      case EnumTypeTerrain::route: ui = 1; break;
      case EnumTypeTerrain::foret: ui = 2; break;
      case EnumTypeTerrain::urbain: ui = 3; break;
      case EnumTypeTerrain::pont: ui = 4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeTerrain: end\n");
   return (stat);
}

int ASN1C_EnumTypeTerrain::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeTerrain (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeTerrain (ASN1CTXT* ctxt_p, ASN1T_EnumTypeTerrain* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeTerrain: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeTerrain::vide; break;
      case 1: *pvalue = EnumTypeTerrain::route; break;
      case 2: *pvalue = EnumTypeTerrain::foret; break;
      case 3: *pvalue = EnumTypeTerrain::urbain; break;
      case 4: *pvalue = EnumTypeTerrain::pont; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeTerrain: end\n");

   return (stat);
}

int ASN1C_EnumTypeTerrain::Decode ()
{
   return asn1PD_EnumTypeTerrain (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_RAS                                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_RAS::ASN1C_CR_RAS (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RAS (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RAS: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RAS: end\n");
   return (stat);
}

int ASN1C_CR_RAS::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RAS (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RAS (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RAS: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RAS: end\n");

   return (stat);
}

int ASN1C_CR_RAS::Decode ()
{
   return asn1PD_CR_RAS (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosteFaceAObstacle                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosteFaceAObstacle::ASN1C_CR_EnPosteFaceAObstacle (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EnPosteFaceAObstacle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EnPosteFaceAObstacle (ASN1CTXT* ctxt_p, ASN1T_CR_EnPosteFaceAObstacle value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosteFaceAObstacle: start\n");

   stat = asn1PE_KnowledgeObject (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_EnPosteFaceAObstacle: end\n");
   return (stat);
}

int ASN1C_CR_EnPosteFaceAObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosteFaceAObstacle (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_EnPosteFaceAObstacle (ASN1CTXT* ctxt_p, ASN1T_CR_EnPosteFaceAObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosteFaceAObstacle: start\n");

   stat = asn1PD_KnowledgeObject (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_EnPosteFaceAObstacle: end\n");

   return (stat);
}

int ASN1C_CR_EnPosteFaceAObstacle::Decode ()
{
   return asn1PD_CR_EnPosteFaceAObstacle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EnContournementObstacle                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnContournementObstacle::ASN1C_CR_EnContournementObstacle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnContournementObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnContournementObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnContournementObstacle: end\n");
   return (stat);
}

int ASN1C_CR_EnContournementObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnContournementObstacle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnContournementObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnContournementObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnContournementObstacle: end\n");

   return (stat);
}

int ASN1C_CR_EnContournementObstacle::Decode ()
{
   return asn1PD_CR_EnContournementObstacle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossible                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossible::ASN1C_CR_MissionImpossible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossible: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossible: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossible::Decode ()
{
   return asn1PD_CR_MissionImpossible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PretPourNouvelleMission                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_PretPourNouvelleMission::ASN1C_CR_PretPourNouvelleMission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PretPourNouvelleMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PretPourNouvelleMission: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PretPourNouvelleMission: end\n");
   return (stat);
}

int ASN1C_CR_PretPourNouvelleMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PretPourNouvelleMission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PretPourNouvelleMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PretPourNouvelleMission: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PretPourNouvelleMission: end\n");

   return (stat);
}

int ASN1C_CR_PretPourNouvelleMission::Decode ()
{
   return asn1PD_CR_PretPourNouvelleMission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RejointFuseau                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_RejointFuseau::ASN1C_CR_RejointFuseau (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RejointFuseau (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RejointFuseau: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RejointFuseau: end\n");
   return (stat);
}

int ASN1C_CR_RejointFuseau::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RejointFuseau (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RejointFuseau (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RejointFuseau: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RejointFuseau: end\n");

   return (stat);
}

int ASN1C_CR_RejointFuseau::Decode ()
{
   return asn1PD_CR_RejointFuseau (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FuseauRejoint                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_FuseauRejoint::ASN1C_CR_FuseauRejoint (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FuseauRejoint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FuseauRejoint: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FuseauRejoint: end\n");
   return (stat);
}

int ASN1C_CR_FuseauRejoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FuseauRejoint (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FuseauRejoint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FuseauRejoint: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FuseauRejoint: end\n");

   return (stat);
}

int ASN1C_CR_FuseauRejoint::Decode ()
{
   return asn1PD_CR_FuseauRejoint (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ProgressionSurAxe                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_ProgressionSurAxe::ASN1C_CR_ProgressionSurAxe (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ProgressionSurAxe (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ProgressionSurAxe: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ProgressionSurAxe: end\n");
   return (stat);
}

int ASN1C_CR_ProgressionSurAxe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ProgressionSurAxe (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ProgressionSurAxe (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ProgressionSurAxe: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ProgressionSurAxe: end\n");

   return (stat);
}

int ASN1C_CR_ProgressionSurAxe::Decode ()
{
   return asn1PD_CR_ProgressionSurAxe (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ProgressionVersLocalisation                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_ProgressionVersLocalisation::ASN1C_CR_ProgressionVersLocalisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ProgressionVersLocalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ProgressionVersLocalisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ProgressionVersLocalisation: end\n");
   return (stat);
}

int ASN1C_CR_ProgressionVersLocalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ProgressionVersLocalisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ProgressionVersLocalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ProgressionVersLocalisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ProgressionVersLocalisation: end\n");

   return (stat);
}

int ASN1C_CR_ProgressionVersLocalisation::Decode ()
{
   return asn1PD_CR_ProgressionVersLocalisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ArriveSurLocalisation                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_ArriveSurLocalisation::ASN1C_CR_ArriveSurLocalisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ArriveSurLocalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ArriveSurLocalisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ArriveSurLocalisation: end\n");
   return (stat);
}

int ASN1C_CR_ArriveSurLocalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ArriveSurLocalisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ArriveSurLocalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ArriveSurLocalisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ArriveSurLocalisation: end\n");

   return (stat);
}

int ASN1C_CR_ArriveSurLocalisation::Decode ()
{
   return asn1PD_CR_ArriveSurLocalisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissanceLocalisation                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissanceLocalisation::ASN1C_CR_ReconnaissanceLocalisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissanceLocalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissanceLocalisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissanceLocalisation: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissanceLocalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissanceLocalisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissanceLocalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissanceLocalisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissanceLocalisation: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissanceLocalisation::Decode ()
{
   return asn1PD_CR_ReconnaissanceLocalisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosteFaceADirectionDangereuse                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosteFaceADirectionDangereuse::ASN1C_CR_EnPosteFaceADirectionDangereuse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnPosteFaceADirectionDangereuse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosteFaceADirectionDangereuse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnPosteFaceADirectionDangereuse: end\n");
   return (stat);
}

int ASN1C_CR_EnPosteFaceADirectionDangereuse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosteFaceADirectionDangereuse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnPosteFaceADirectionDangereuse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosteFaceADirectionDangereuse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnPosteFaceADirectionDangereuse: end\n");

   return (stat);
}

int ASN1C_CR_EnPosteFaceADirectionDangereuse::Decode ()
{
   return asn1PD_CR_EnPosteFaceADirectionDangereuse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosteSurBond                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosteSurBond::ASN1C_CR_EnPosteSurBond (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnPosteSurBond (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosteSurBond: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnPosteSurBond: end\n");
   return (stat);
}

int ASN1C_CR_EnPosteSurBond::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosteSurBond (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnPosteSurBond (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosteSurBond: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnPosteSurBond: end\n");

   return (stat);
}

int ASN1C_CR_EnPosteSurBond::Decode ()
{
   return asn1PD_CR_EnPosteSurBond (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnJalonnement                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnJalonnement::ASN1C_CR_EnJalonnement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnJalonnement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnJalonnement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnJalonnement: end\n");
   return (stat);
}

int ASN1C_CR_EnJalonnement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnJalonnement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnJalonnement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnJalonnement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnJalonnement: end\n");

   return (stat);
}

int ASN1C_CR_EnJalonnement::Decode ()
{
   return asn1PD_CR_EnJalonnement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PreparationMission                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_PreparationMission::ASN1C_CR_PreparationMission (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PreparationMission& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PreparationMission (ASN1CTXT* ctxt_p, ASN1T_CR_PreparationMission* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PreparationMission: start\n");

   PU_NEWFIELD (ctxt_p, "delaiPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.delaiPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode delai */

   if (pvalue->m.delaiPresent) {
      PU_PUSHNAME (ctxt_p, "delai");

      stat = pe_UnconsInteger (ctxt_p, pvalue->delai);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_CR_PreparationMission: end\n");
   return (stat);
}

int ASN1C_CR_PreparationMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PreparationMission (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CR_PreparationMission (ASN1CTXT* ctxt_p, ASN1T_CR_PreparationMission* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_CR_PreparationMission: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "delaiPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.delaiPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode delai */

   if (pvalue->m.delaiPresent) {
      PU_PUSHNAME (ctxt_p, "delai");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->delai);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_CR_PreparationMission: end\n");

   return (stat);
}

int ASN1C_CR_PreparationMission::Decode ()
{
   return asn1PD_CR_PreparationMission (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DebutMission                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutMission::ASN1C_CR_DebutMission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutMission: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutMission: end\n");
   return (stat);
}

int ASN1C_CR_DebutMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutMission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutMission: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutMission: end\n");

   return (stat);
}

int ASN1C_CR_DebutMission::Decode ()
{
   return asn1PD_CR_DebutMission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinMission                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinMission::ASN1C_CR_FinMission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinMission: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinMission: end\n");
   return (stat);
}

int ASN1C_CR_FinMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinMission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinMission: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinMission: end\n");

   return (stat);
}

int ASN1C_CR_FinMission::Decode ()
{
   return asn1PD_CR_FinMission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DispositifInstalle                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_DispositifInstalle::ASN1C_CR_DispositifInstalle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DispositifInstalle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DispositifInstalle: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DispositifInstalle: end\n");
   return (stat);
}

int ASN1C_CR_DispositifInstalle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DispositifInstalle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DispositifInstalle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DispositifInstalle: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DispositifInstalle: end\n");

   return (stat);
}

int ASN1C_CR_DispositifInstalle::Decode ()
{
   return asn1PD_CR_DispositifInstalle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnPosition                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnPosition::ASN1C_CR_EnPosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnPosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnPosition: end\n");
   return (stat);
}

int ASN1C_CR_EnPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnPosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnPosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnPosition: end\n");

   return (stat);
}

int ASN1C_CR_EnPosition::Decode ()
{
   return asn1PD_CR_EnPosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObjectifAtteint                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObjectifAtteint::ASN1C_CR_ObjectifAtteint (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ObjectifAtteint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObjectifAtteint: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ObjectifAtteint: end\n");
   return (stat);
}

int ASN1C_CR_ObjectifAtteint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObjectifAtteint (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ObjectifAtteint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObjectifAtteint: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ObjectifAtteint: end\n");

   return (stat);
}

int ASN1C_CR_ObjectifAtteint::Decode ()
{
   return asn1PD_CR_ObjectifAtteint (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Debouche                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_Debouche::ASN1C_CR_Debouche (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Debouche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Debouche: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Debouche: end\n");
   return (stat);
}

int ASN1C_CR_Debouche::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Debouche (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Debouche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Debouche: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Debouche: end\n");

   return (stat);
}

int ASN1C_CR_Debouche::Decode ()
{
   return asn1PD_CR_Debouche (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SurPIA                                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_SurPIA::ASN1C_CR_SurPIA (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SurPIA& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SurPIA (ASN1CTXT* ctxt_p, ASN1T_CR_SurPIA value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SurPIA: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SurPIA: end\n");
   return (stat);
}

int ASN1C_CR_SurPIA::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SurPIA (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SurPIA (ASN1CTXT* ctxt_p, ASN1T_CR_SurPIA* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SurPIA: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SurPIA: end\n");

   return (stat);
}

int ASN1C_CR_SurPIA::Decode ()
{
   return asn1PD_CR_SurPIA (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PassageSurPIA                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_PassageSurPIA::ASN1C_CR_PassageSurPIA (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PassageSurPIA (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PassageSurPIA: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PassageSurPIA: end\n");
   return (stat);
}

int ASN1C_CR_PassageSurPIA::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PassageSurPIA (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PassageSurPIA (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PassageSurPIA: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PassageSurPIA: end\n");

   return (stat);
}

int ASN1C_CR_PassageSurPIA::Decode ()
{
   return asn1PD_CR_PassageSurPIA (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_UniteRecueillie                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_UniteRecueillie::ASN1C_CR_UniteRecueillie (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_UniteRecueillie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_UniteRecueillie (ASN1CTXT* ctxt_p, ASN1T_CR_UniteRecueillie value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_UniteRecueillie: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_UniteRecueillie: end\n");
   return (stat);
}

int ASN1C_CR_UniteRecueillie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_UniteRecueillie (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_UniteRecueillie (ASN1CTXT* ctxt_p, ASN1T_CR_UniteRecueillie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_UniteRecueillie: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_UniteRecueillie: end\n");

   return (stat);
}

int ASN1C_CR_UniteRecueillie::Decode ()
{
   return asn1PD_CR_UniteRecueillie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EnCoursDeFranchissement                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnCoursDeFranchissement::ASN1C_CR_EnCoursDeFranchissement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnCoursDeFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnCoursDeFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnCoursDeFranchissement: end\n");
   return (stat);
}

int ASN1C_CR_EnCoursDeFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnCoursDeFranchissement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnCoursDeFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnCoursDeFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnCoursDeFranchissement: end\n");

   return (stat);
}

int ASN1C_CR_EnCoursDeFranchissement::Decode ()
{
   return asn1PD_CR_EnCoursDeFranchissement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteOrdrePoursuivre                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteOrdrePoursuivre::ASN1C_CR_AttenteOrdrePoursuivre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteOrdrePoursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteOrdrePoursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteOrdrePoursuivre: end\n");
   return (stat);
}

int ASN1C_CR_AttenteOrdrePoursuivre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteOrdrePoursuivre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteOrdrePoursuivre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteOrdrePoursuivre: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteOrdrePoursuivre: end\n");

   return (stat);
}

int ASN1C_CR_AttenteOrdrePoursuivre::Decode ()
{
   return asn1PD_CR_AttenteOrdrePoursuivre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteOrdreDeboucher                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteOrdreDeboucher::ASN1C_CR_AttenteOrdreDeboucher (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteOrdreDeboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteOrdreDeboucher: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteOrdreDeboucher: end\n");
   return (stat);
}

int ASN1C_CR_AttenteOrdreDeboucher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteOrdreDeboucher (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteOrdreDeboucher (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteOrdreDeboucher: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteOrdreDeboucher: end\n");

   return (stat);
}

int ASN1C_CR_AttenteOrdreDeboucher::Decode ()
{
   return asn1PD_CR_AttenteOrdreDeboucher (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnControleZone                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnControleZone::ASN1C_CR_EnControleZone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnControleZone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnControleZone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnControleZone: end\n");
   return (stat);
}

int ASN1C_CR_EnControleZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnControleZone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnControleZone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnControleZone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnControleZone: end\n");

   return (stat);
}

int ASN1C_CR_EnControleZone::Decode ()
{
   return asn1PD_CR_EnControleZone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnSurveillance                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnSurveillance::ASN1C_CR_EnSurveillance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnSurveillance: end\n");
   return (stat);
}

int ASN1C_CR_EnSurveillance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnSurveillance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnSurveillance: end\n");

   return (stat);
}

int ASN1C_CR_EnSurveillance::Decode ()
{
   return asn1PD_CR_EnSurveillance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnInfiltration                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnInfiltration::ASN1C_CR_EnInfiltration (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnInfiltration: end\n");
   return (stat);
}

int ASN1C_CR_EnInfiltration::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnInfiltration (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnInfiltration: end\n");

   return (stat);
}

int ASN1C_CR_EnInfiltration::Decode ()
{
   return asn1PD_CR_EnInfiltration (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnExfiltration                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnExfiltration::ASN1C_CR_EnExfiltration (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnExfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnExfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnExfiltration: end\n");
   return (stat);
}

int ASN1C_CR_EnExfiltration::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnExfiltration (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnExfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnExfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnExfiltration: end\n");

   return (stat);
}

int ASN1C_CR_EnExfiltration::Decode ()
{
   return asn1PD_CR_EnExfiltration (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteConditionFavorablePourInfiltration              */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteConditionFavorablePourInfiltration::ASN1C_CR_AttenteConditionFavorablePourInfiltration (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteConditionFavorablePourInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteConditionFavorablePourInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteConditionFavorablePourInfiltration: end\n");
   return (stat);
}

int ASN1C_CR_AttenteConditionFavorablePourInfiltration::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteConditionFavorablePourInfiltration (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteConditionFavorablePourInfiltration (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteConditionFavorablePourInfiltration: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteConditionFavorablePourInfiltration: end\n");

   return (stat);
}

int ASN1C_CR_AttenteConditionFavorablePourInfiltration::Decode ()
{
   return asn1PD_CR_AttenteConditionFavorablePourInfiltration (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneLance                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneLance::ASN1C_CR_DroneLance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneLance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneLance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneLance: end\n");
   return (stat);
}

int ASN1C_CR_DroneLance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneLance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneLance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneLance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneLance: end\n");

   return (stat);
}

int ASN1C_CR_DroneLance::Decode ()
{
   return asn1PD_CR_DroneLance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneEnExploitation                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneEnExploitation::ASN1C_CR_DroneEnExploitation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneEnExploitation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneEnExploitation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneEnExploitation: end\n");
   return (stat);
}

int ASN1C_CR_DroneEnExploitation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneEnExploitation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneEnExploitation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneEnExploitation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneEnExploitation: end\n");

   return (stat);
}

int ASN1C_CR_DroneEnExploitation::Decode ()
{
   return asn1PD_CR_DroneEnExploitation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DroneExploite                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_DroneExploite::ASN1C_CR_DroneExploite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DroneExploite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DroneExploite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DroneExploite: end\n");
   return (stat);
}

int ASN1C_CR_DroneExploite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DroneExploite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DroneExploite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DroneExploite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DroneExploite: end\n");

   return (stat);
}

int ASN1C_CR_DroneExploite::Decode ()
{
   return asn1PD_CR_DroneExploite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutMiseEnOeuvreDrone                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutMiseEnOeuvreDrone::ASN1C_CR_DebutMiseEnOeuvreDrone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutMiseEnOeuvreDrone: end\n");
   return (stat);
}

int ASN1C_CR_DebutMiseEnOeuvreDrone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutMiseEnOeuvreDrone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutMiseEnOeuvreDrone: end\n");

   return (stat);
}

int ASN1C_CR_DebutMiseEnOeuvreDrone::Decode ()
{
   return asn1PD_CR_DebutMiseEnOeuvreDrone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinMiseEnOeuvreDrone                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinMiseEnOeuvreDrone::ASN1C_CR_FinMiseEnOeuvreDrone (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinMiseEnOeuvreDrone: end\n");
   return (stat);
}

int ASN1C_CR_FinMiseEnOeuvreDrone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinMiseEnOeuvreDrone (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinMiseEnOeuvreDrone (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinMiseEnOeuvreDrone: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinMiseEnOeuvreDrone: end\n");

   return (stat);
}

int ASN1C_CR_FinMiseEnOeuvreDrone::Decode ()
{
   return asn1PD_CR_FinMiseEnOeuvreDrone (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Brouille                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_Brouille::ASN1C_CR_Brouille (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Brouille (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Brouille: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Brouille: end\n");
   return (stat);
}

int ASN1C_CR_Brouille::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Brouille (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Brouille (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Brouille: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Brouille: end\n");

   return (stat);
}

int ASN1C_CR_Brouille::Decode ()
{
   return asn1PD_CR_Brouille (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnEcoute                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnEcoute::ASN1C_CR_EnEcoute (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnEcoute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnEcoute: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnEcoute: end\n");
   return (stat);
}

int ASN1C_CR_EnEcoute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnEcoute (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnEcoute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnEcoute: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnEcoute: end\n");

   return (stat);
}

int ASN1C_CR_EnEcoute::Decode ()
{
   return asn1PD_CR_EnEcoute (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnEcouteRadar                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnEcouteRadar::ASN1C_CR_EnEcouteRadar (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnEcouteRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnEcouteRadar: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnEcouteRadar: end\n");
   return (stat);
}

int ASN1C_CR_EnEcouteRadar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnEcouteRadar (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnEcouteRadar (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnEcouteRadar: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnEcouteRadar: end\n");

   return (stat);
}

int ASN1C_CR_EnEcouteRadar::Decode ()
{
   return asn1PD_CR_EnEcouteRadar (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Automate_PriseContact                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_Automate_PriseContact::ASN1C_CR_Automate_PriseContact (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Automate_PriseContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Automate_PriseContact: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Automate_PriseContact: end\n");
   return (stat);
}

int ASN1C_CR_Automate_PriseContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Automate_PriseContact (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Automate_PriseContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Automate_PriseContact: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Automate_PriseContact: end\n");

   return (stat);
}

int ASN1C_CR_Automate_PriseContact::Decode ()
{
   return asn1PD_CR_Automate_PriseContact (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Automate_RuptureContact                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_Automate_RuptureContact::ASN1C_CR_Automate_RuptureContact (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Automate_RuptureContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Automate_RuptureContact: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Automate_RuptureContact: end\n");
   return (stat);
}

int ASN1C_CR_Automate_RuptureContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Automate_RuptureContact (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Automate_RuptureContact (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Automate_RuptureContact: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Automate_RuptureContact: end\n");

   return (stat);
}

int ASN1C_CR_Automate_RuptureContact::Decode ()
{
   return asn1PD_CR_Automate_RuptureContact (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Pion_PriseContact                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_Pion_PriseContact::ASN1C_CR_Pion_PriseContact (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_Pion_PriseContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_Pion_PriseContact (ASN1CTXT* ctxt_p, ASN1T_CR_Pion_PriseContact value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Pion_PriseContact: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_Pion_PriseContact: end\n");
   return (stat);
}

int ASN1C_CR_Pion_PriseContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Pion_PriseContact (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_Pion_PriseContact (ASN1CTXT* ctxt_p, ASN1T_CR_Pion_PriseContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Pion_PriseContact: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_Pion_PriseContact: end\n");

   return (stat);
}

int ASN1C_CR_Pion_PriseContact::Decode ()
{
   return asn1PD_CR_Pion_PriseContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_Pion_RuptureContact                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_Pion_RuptureContact::ASN1C_CR_Pion_RuptureContact (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_Pion_RuptureContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_Pion_RuptureContact (ASN1CTXT* ctxt_p, ASN1T_CR_Pion_RuptureContact value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Pion_RuptureContact: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_Pion_RuptureContact: end\n");
   return (stat);
}

int ASN1C_CR_Pion_RuptureContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Pion_RuptureContact (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_Pion_RuptureContact (ASN1CTXT* ctxt_p, ASN1T_CR_Pion_RuptureContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Pion_RuptureContact: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_Pion_RuptureContact: end\n");

   return (stat);
}

int ASN1C_CR_Pion_RuptureContact::Decode ()
{
   return asn1PD_CR_Pion_RuptureContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PrecisionContact                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_PrecisionContact::ASN1C_CR_PrecisionContact (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PrecisionContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PrecisionContact (ASN1CTXT* ctxt_p, ASN1T_CR_PrecisionContact value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PrecisionContact: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PrecisionContact: end\n");
   return (stat);
}

int ASN1C_CR_PrecisionContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PrecisionContact (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PrecisionContact (ASN1CTXT* ctxt_p, ASN1T_CR_PrecisionContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PrecisionContact: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PrecisionContact: end\n");

   return (stat);
}

int ASN1C_CR_PrecisionContact::Decode ()
{
   return asn1PD_CR_PrecisionContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EnnemiDetruit                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnnemiDetruit::ASN1C_CR_EnnemiDetruit (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EnnemiDetruit& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EnnemiDetruit (ASN1CTXT* ctxt_p, ASN1T_CR_EnnemiDetruit value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnnemiDetruit: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_EnnemiDetruit: end\n");
   return (stat);
}

int ASN1C_CR_EnnemiDetruit::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnnemiDetruit (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_EnnemiDetruit (ASN1CTXT* ctxt_p, ASN1T_CR_EnnemiDetruit* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnnemiDetruit: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_EnnemiDetruit: end\n");

   return (stat);
}

int ASN1C_CR_EnnemiDetruit::Decode ()
{
   return asn1PD_CR_EnnemiDetruit (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PerteDeContactVisuel                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_PerteDeContactVisuel::ASN1C_CR_PerteDeContactVisuel (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PerteDeContactVisuel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PerteDeContactVisuel (ASN1CTXT* ctxt_p, ASN1T_CR_PerteDeContactVisuel value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PerteDeContactVisuel: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PerteDeContactVisuel: end\n");
   return (stat);
}

int ASN1C_CR_PerteDeContactVisuel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PerteDeContactVisuel (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PerteDeContactVisuel (ASN1CTXT* ctxt_p, ASN1T_CR_PerteDeContactVisuel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PerteDeContactVisuel: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PerteDeContactVisuel: end\n");

   return (stat);
}

int ASN1C_CR_PerteDeContactVisuel::Decode ()
{
   return asn1PD_CR_PerteDeContactVisuel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PosteFaceEni                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_PosteFaceEni::ASN1C_CR_PosteFaceEni (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PosteFaceEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PosteFaceEni (ASN1CTXT* ctxt_p, ASN1T_CR_PosteFaceEni value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PosteFaceEni: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PosteFaceEni: end\n");
   return (stat);
}

int ASN1C_CR_PosteFaceEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PosteFaceEni (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PosteFaceEni (ASN1CTXT* ctxt_p, ASN1T_CR_PosteFaceEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PosteFaceEni: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PosteFaceEni: end\n");

   return (stat);
}

int ASN1C_CR_PosteFaceEni::Decode ()
{
   return asn1PD_CR_PosteFaceEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PriseAPartie                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_PriseAPartie::ASN1C_CR_PriseAPartie (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PriseAPartie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PriseAPartie (ASN1CTXT* ctxt_p, ASN1T_CR_PriseAPartie value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PriseAPartie: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PriseAPartie: end\n");
   return (stat);
}

int ASN1C_CR_PriseAPartie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PriseAPartie (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PriseAPartie (ASN1CTXT* ctxt_p, ASN1T_CR_PriseAPartie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PriseAPartie: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PriseAPartie: end\n");

   return (stat);
}

int ASN1C_CR_PriseAPartie::Decode ()
{
   return asn1PD_CR_PriseAPartie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PointTenuParEni                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_PointTenuParEni::ASN1C_CR_PointTenuParEni (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PointTenuParEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PointTenuParEni (ASN1CTXT* ctxt_p, ASN1T_CR_PointTenuParEni value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PointTenuParEni: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PointTenuParEni: end\n");
   return (stat);
}

int ASN1C_CR_PointTenuParEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PointTenuParEni (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PointTenuParEni (ASN1CTXT* ctxt_p, ASN1T_CR_PointTenuParEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PointTenuParEni: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PointTenuParEni: end\n");

   return (stat);
}

int ASN1C_CR_PointTenuParEni::Decode ()
{
   return asn1PD_CR_PointTenuParEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ProgressionVersEni                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_ProgressionVersEni::ASN1C_CR_ProgressionVersEni (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ProgressionVersEni& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ProgressionVersEni (ASN1CTXT* ctxt_p, ASN1T_CR_ProgressionVersEni value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ProgressionVersEni: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ProgressionVersEni: end\n");
   return (stat);
}

int ASN1C_CR_ProgressionVersEni::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ProgressionVersEni (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ProgressionVersEni (ASN1CTXT* ctxt_p, ASN1T_CR_ProgressionVersEni* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ProgressionVersEni: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ProgressionVersEni: end\n");

   return (stat);
}

int ASN1C_CR_ProgressionVersEni::Decode ()
{
   return asn1PD_CR_ProgressionVersEni (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_PresenceEniProbable                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_PresenceEniProbable::ASN1C_CR_PresenceEniProbable (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PresenceEniProbable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PresenceEniProbable: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PresenceEniProbable: end\n");
   return (stat);
}

int ASN1C_CR_PresenceEniProbable::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PresenceEniProbable (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PresenceEniProbable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PresenceEniProbable: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PresenceEniProbable: end\n");

   return (stat);
}

int ASN1C_CR_PresenceEniProbable::Decode ()
{
   return asn1PD_CR_PresenceEniProbable (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Decroche                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_Decroche::ASN1C_CR_Decroche (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Decroche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Decroche: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Decroche: end\n");
   return (stat);
}

int ASN1C_CR_Decroche::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Decroche (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Decroche (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Decroche: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Decroche: end\n");

   return (stat);
}

int ASN1C_CR_Decroche::Decode ()
{
   return asn1PD_CR_Decroche (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EniSurObjectif                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_EniSurObjectif::ASN1C_CR_EniSurObjectif (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EniSurObjectif& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EniSurObjectif (ASN1CTXT* ctxt_p, ASN1T_CR_EniSurObjectif value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EniSurObjectif: start\n");

   stat = asn1PE_KnowledgeAgent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_EniSurObjectif: end\n");
   return (stat);
}

int ASN1C_CR_EniSurObjectif::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EniSurObjectif (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_EniSurObjectif (ASN1CTXT* ctxt_p, ASN1T_CR_EniSurObjectif* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EniSurObjectif: start\n");

   stat = asn1PD_KnowledgeAgent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_EniSurObjectif: end\n");

   return (stat);
}

int ASN1C_CR_EniSurObjectif::Decode ()
{
   return asn1PD_CR_EniSurObjectif (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_Riposte                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_Riposte::ASN1C_CR_Riposte (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_Riposte (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Riposte: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_Riposte: end\n");
   return (stat);
}

int ASN1C_CR_Riposte::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Riposte (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_Riposte (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Riposte: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_Riposte: end\n");

   return (stat);
}

int ASN1C_CR_Riposte::Decode ()
{
   return asn1PD_CR_Riposte (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Releve                                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_Releve::ASN1C_CR_Releve (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_Releve& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_Releve (ASN1CTXT* ctxt_p, ASN1T_CR_Releve value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Releve: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_Releve: end\n");
   return (stat);
}

int ASN1C_CR_Releve::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Releve (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_Releve (ASN1CTXT* ctxt_p, ASN1T_CR_Releve* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Releve: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_Releve: end\n");

   return (stat);
}

int ASN1C_CR_Releve::Decode ()
{
   return asn1PD_CR_Releve (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SuitUnite                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_SuitUnite::ASN1C_CR_SuitUnite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SuitUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SuitUnite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SuitUnite: end\n");
   return (stat);
}

int ASN1C_CR_SuitUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SuitUnite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SuitUnite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SuitUnite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SuitUnite: end\n");

   return (stat);
}

int ASN1C_CR_SuitUnite::Decode ()
{
   return asn1PD_CR_SuitUnite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PasseEnAppui                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_PasseEnAppui::ASN1C_CR_PasseEnAppui (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PasseEnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PasseEnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PasseEnAppui: end\n");
   return (stat);
}

int ASN1C_CR_PasseEnAppui::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PasseEnAppui (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PasseEnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PasseEnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PasseEnAppui: end\n");

   return (stat);
}

int ASN1C_CR_PasseEnAppui::Decode ()
{
   return asn1PD_CR_PasseEnAppui (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnAppui                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnAppui::ASN1C_CR_EnAppui (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnAppui: end\n");
   return (stat);
}

int ASN1C_CR_EnAppui::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnAppui (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnAppui (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnAppui: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnAppui: end\n");

   return (stat);
}

int ASN1C_CR_EnAppui::Decode ()
{
   return asn1PD_CR_EnAppui (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DetruitTactiquement                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_DetruitTactiquement::ASN1C_CR_DetruitTactiquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DetruitTactiquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DetruitTactiquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DetruitTactiquement: end\n");
   return (stat);
}

int ASN1C_CR_DetruitTactiquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DetruitTactiquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DetruitTactiquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DetruitTactiquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DetruitTactiquement: end\n");

   return (stat);
}

int ASN1C_CR_DetruitTactiquement::Decode ()
{
   return asn1PD_CR_DetruitTactiquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AmbianceVitesse                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_AmbianceVitesse::ASN1C_CR_AmbianceVitesse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AmbianceVitesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AmbianceVitesse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AmbianceVitesse: end\n");
   return (stat);
}

int ASN1C_CR_AmbianceVitesse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AmbianceVitesse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AmbianceVitesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AmbianceVitesse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AmbianceVitesse: end\n");

   return (stat);
}

int ASN1C_CR_AmbianceVitesse::Decode ()
{
   return asn1PD_CR_AmbianceVitesse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AmbianceSurete                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_AmbianceSurete::ASN1C_CR_AmbianceSurete (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AmbianceSurete (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AmbianceSurete: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AmbianceSurete: end\n");
   return (stat);
}

int ASN1C_CR_AmbianceSurete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AmbianceSurete (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AmbianceSurete (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AmbianceSurete: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AmbianceSurete: end\n");

   return (stat);
}

int ASN1C_CR_AmbianceSurete::Decode ()
{
   return asn1PD_CR_AmbianceSurete (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SurLima                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_SurLima::ASN1C_CR_SurLima (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SurLima& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SurLima (ASN1CTXT* ctxt_p, ASN1T_CR_SurLima value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SurLima: start\n");

   stat = asn1PE_EnumTypeLima (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SurLima: end\n");
   return (stat);
}

int ASN1C_CR_SurLima::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SurLima (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SurLima (ASN1CTXT* ctxt_p, ASN1T_CR_SurLima* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SurLima: start\n");

   stat = asn1PD_EnumTypeLima (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SurLima: end\n");

   return (stat);
}

int ASN1C_CR_SurLima::Decode ()
{
   return asn1PD_CR_SurLima (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SurTypeTerrainParticulier                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_SurTypeTerrainParticulier::ASN1C_CR_SurTypeTerrainParticulier (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SurTypeTerrainParticulier& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SurTypeTerrainParticulier (ASN1CTXT* ctxt_p, ASN1T_CR_SurTypeTerrainParticulier value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SurTypeTerrainParticulier: start\n");

   stat = asn1PE_EnumTypeTerrain (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SurTypeTerrainParticulier: end\n");
   return (stat);
}

int ASN1C_CR_SurTypeTerrainParticulier::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SurTypeTerrainParticulier (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SurTypeTerrainParticulier (ASN1CTXT* ctxt_p, ASN1T_CR_SurTypeTerrainParticulier* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SurTypeTerrainParticulier: start\n");

   stat = asn1PD_EnumTypeTerrain (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SurTypeTerrainParticulier: end\n");

   return (stat);
}

int ASN1C_CR_SurTypeTerrainParticulier::Decode ()
{
   return asn1PD_CR_SurTypeTerrainParticulier (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ObstacleEnAttenteActivation                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObstacleEnAttenteActivation::ASN1C_CR_ObstacleEnAttenteActivation (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ObstacleEnAttenteActivation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ObstacleEnAttenteActivation (ASN1CTXT* ctxt_p, ASN1T_CR_ObstacleEnAttenteActivation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObstacleEnAttenteActivation: start\n");

   stat = asn1PE_KnowledgeObject (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ObstacleEnAttenteActivation: end\n");
   return (stat);
}

int ASN1C_CR_ObstacleEnAttenteActivation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObstacleEnAttenteActivation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ObstacleEnAttenteActivation (ASN1CTXT* ctxt_p, ASN1T_CR_ObstacleEnAttenteActivation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObstacleEnAttenteActivation: start\n");

   stat = asn1PD_KnowledgeObject (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ObstacleEnAttenteActivation: end\n");

   return (stat);
}

int ASN1C_CR_ObstacleEnAttenteActivation::Decode ()
{
   return asn1PD_CR_ObstacleEnAttenteActivation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TravauxRealises                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_TravauxRealises::ASN1C_CR_TravauxRealises (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TravauxRealises (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TravauxRealises: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TravauxRealises: end\n");
   return (stat);
}

int ASN1C_CR_TravauxRealises::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TravauxRealises (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TravauxRealises (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TravauxRealises: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TravauxRealises: end\n");

   return (stat);
}

int ASN1C_CR_TravauxRealises::Decode ()
{
   return asn1PD_CR_TravauxRealises (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObstacleDegage                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObstacleDegage::ASN1C_CR_ObstacleDegage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ObstacleDegage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObstacleDegage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ObstacleDegage: end\n");
   return (stat);
}

int ASN1C_CR_ObstacleDegage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObstacleDegage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ObstacleDegage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObstacleDegage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ObstacleDegage: end\n");

   return (stat);
}

int ASN1C_CR_ObstacleDegage::Decode ()
{
   return asn1PD_CR_ObstacleDegage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_OrganisationChantier                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_OrganisationChantier::ASN1C_CR_OrganisationChantier (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_OrganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_OrganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_OrganisationChantier: end\n");
   return (stat);
}

int ASN1C_CR_OrganisationChantier::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_OrganisationChantier (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_OrganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_OrganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_OrganisationChantier: end\n");

   return (stat);
}

int ASN1C_CR_OrganisationChantier::Decode ()
{
   return asn1PD_CR_OrganisationChantier (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DesorganisationChantier                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_DesorganisationChantier::ASN1C_CR_DesorganisationChantier (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DesorganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DesorganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DesorganisationChantier: end\n");
   return (stat);
}

int ASN1C_CR_DesorganisationChantier::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DesorganisationChantier (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DesorganisationChantier (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DesorganisationChantier: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DesorganisationChantier: end\n");

   return (stat);
}

int ASN1C_CR_DesorganisationChantier::Decode ()
{
   return asn1PD_CR_DesorganisationChantier (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissancePositionObstacle                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissancePositionObstacle::ASN1C_CR_ReconnaissancePositionObstacle (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissancePositionObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissancePositionObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissancePositionObstacle: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissancePositionObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissancePositionObstacle (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissancePositionObstacle (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissancePositionObstacle: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissancePositionObstacle: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissancePositionObstacle::Decode ()
{
   return asn1PD_CR_ReconnaissancePositionObstacle (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ContournementRealise                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ContournementRealise::ASN1C_CR_ContournementRealise (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ContournementRealise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ContournementRealise: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ContournementRealise: end\n");
   return (stat);
}

int ASN1C_CR_ContournementRealise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ContournementRealise (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ContournementRealise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ContournementRealise: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ContournementRealise: end\n");

   return (stat);
}

int ASN1C_CR_ContournementRealise::Decode ()
{
   return asn1PD_CR_ContournementRealise (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AttenteRenforcement                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_AttenteRenforcement::ASN1C_CR_AttenteRenforcement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AttenteRenforcement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AttenteRenforcement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AttenteRenforcement: end\n");
   return (stat);
}

int ASN1C_CR_AttenteRenforcement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AttenteRenforcement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AttenteRenforcement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AttenteRenforcement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AttenteRenforcement: end\n");

   return (stat);
}

int ASN1C_CR_AttenteRenforcement::Decode ()
{
   return asn1PD_CR_AttenteRenforcement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutTravaux                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutTravaux::ASN1C_CR_DebutTravaux (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutTravaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutTravaux: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutTravaux: end\n");
   return (stat);
}

int ASN1C_CR_DebutTravaux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutTravaux (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutTravaux (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutTravaux: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutTravaux: end\n");

   return (stat);
}

int ASN1C_CR_DebutTravaux::Decode ()
{
   return asn1PD_CR_DebutTravaux (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutFranchissement                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutFranchissement::ASN1C_CR_DebutFranchissement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutFranchissement: end\n");
   return (stat);
}

int ASN1C_CR_DebutFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutFranchissement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutFranchissement: end\n");

   return (stat);
}

int ASN1C_CR_DebutFranchissement::Decode ()
{
   return asn1PD_CR_DebutFranchissement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_FinFranchissement                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_FinFranchissement::ASN1C_CR_FinFranchissement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_FinFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_FinFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_FinFranchissement: end\n");
   return (stat);
}

int ASN1C_CR_FinFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_FinFranchissement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_FinFranchissement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_FinFranchissement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_FinFranchissement: end\n");

   return (stat);
}

int ASN1C_CR_FinFranchissement::Decode ()
{
   return asn1PD_CR_FinFranchissement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReussiteRenforcement                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReussiteRenforcement::ASN1C_CR_ReussiteRenforcement (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ReussiteRenforcement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ReussiteRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_ReussiteRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReussiteRenforcement: start\n");

   /* encode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PE_Agent (ctxt_p, pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_CR_ReussiteRenforcement: end\n");
   return (stat);
}

int ASN1C_CR_ReussiteRenforcement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReussiteRenforcement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CR_ReussiteRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_ReussiteRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReussiteRenforcement: start\n");

   /* decode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PD_Agent (ctxt_p, &pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_CR_ReussiteRenforcement: end\n");

   return (stat);
}

int ASN1C_CR_ReussiteRenforcement::Decode ()
{
   return asn1PD_CR_ReussiteRenforcement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_EchecRenforcement                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_EchecRenforcement::ASN1C_CR_EchecRenforcement (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_EchecRenforcement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_EchecRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_EchecRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EchecRenforcement: start\n");

   /* encode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PE_Agent (ctxt_p, pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_CR_EchecRenforcement: end\n");
   return (stat);
}

int ASN1C_CR_EchecRenforcement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EchecRenforcement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CR_EchecRenforcement (ASN1CTXT* ctxt_p, ASN1T_CR_EchecRenforcement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EchecRenforcement: start\n");

   /* decode pion_renforcant */

   PU_PUSHNAME (ctxt_p, "pion_renforcant");

   stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforcant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automate_renforce */

   PU_PUSHNAME (ctxt_p, "automate_renforce");

   stat = asn1PD_Agent (ctxt_p, &pvalue->automate_renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_CR_EchecRenforcement: end\n");

   return (stat);
}

int ASN1C_CR_EchecRenforcement::Decode ()
{
   return asn1PD_CR_EchecRenforcement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ItineraireRetabli                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_ItineraireRetabli::ASN1C_CR_ItineraireRetabli (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ItineraireRetabli (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ItineraireRetabli: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ItineraireRetabli: end\n");
   return (stat);
}

int ASN1C_CR_ItineraireRetabli::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ItineraireRetabli (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ItineraireRetabli (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ItineraireRetabli: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ItineraireRetabli: end\n");

   return (stat);
}

int ASN1C_CR_ItineraireRetabli::Decode ()
{
   return asn1PD_CR_ItineraireRetabli (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RenforcementBientotFini                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_RenforcementBientotFini::ASN1C_CR_RenforcementBientotFini (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_RenforcementBientotFini& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_RenforcementBientotFini (ASN1CTXT* ctxt_p, ASN1T_CR_RenforcementBientotFini value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RenforcementBientotFini: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_RenforcementBientotFini: end\n");
   return (stat);
}

int ASN1C_CR_RenforcementBientotFini::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RenforcementBientotFini (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_RenforcementBientotFini (ASN1CTXT* ctxt_p, ASN1T_CR_RenforcementBientotFini* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RenforcementBientotFini: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_RenforcementBientotFini: end\n");

   return (stat);
}

int ASN1C_CR_RenforcementBientotFini::Decode ()
{
   return asn1PD_CR_RenforcementBientotFini (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SituationLogFavorable                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_SituationLogFavorable::ASN1C_CR_SituationLogFavorable (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SituationLogFavorable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SituationLogFavorable: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SituationLogFavorable: end\n");
   return (stat);
}

int ASN1C_CR_SituationLogFavorable::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SituationLogFavorable (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SituationLogFavorable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SituationLogFavorable: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SituationLogFavorable: end\n");

   return (stat);
}

int ASN1C_CR_SituationLogFavorable::Decode ()
{
   return asn1PD_CR_SituationLogFavorable (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SituationLogDefavorable                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_SituationLogDefavorable::ASN1C_CR_SituationLogDefavorable (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_SituationLogDefavorable& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_SituationLogDefavorable (ASN1CTXT* ctxt_p, ASN1T_CR_SituationLogDefavorable value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SituationLogDefavorable: start\n");

   stat = asn1PE_EnumFamilleDotation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_SituationLogDefavorable: end\n");
   return (stat);
}

int ASN1C_CR_SituationLogDefavorable::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SituationLogDefavorable (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_SituationLogDefavorable (ASN1CTXT* ctxt_p, ASN1T_CR_SituationLogDefavorable* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SituationLogDefavorable: start\n");

   stat = asn1PD_EnumFamilleDotation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_SituationLogDefavorable: end\n");

   return (stat);
}

int ASN1C_CR_SituationLogDefavorable::Decode ()
{
   return asn1PD_CR_SituationLogDefavorable (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_SectionDeployee                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_SectionDeployee::ASN1C_CR_SectionDeployee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SectionDeployee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SectionDeployee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SectionDeployee: end\n");
   return (stat);
}

int ASN1C_CR_SectionDeployee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SectionDeployee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SectionDeployee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SectionDeployee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SectionDeployee: end\n");

   return (stat);
}

int ASN1C_CR_SectionDeployee::Decode ()
{
   return asn1PD_CR_SectionDeployee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MaterielRetourDeMaintenance                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_MaterielRetourDeMaintenance::ASN1C_CR_MaterielRetourDeMaintenance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MaterielRetourDeMaintenance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MaterielRetourDeMaintenance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MaterielRetourDeMaintenance: end\n");
   return (stat);
}

int ASN1C_CR_MaterielRetourDeMaintenance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MaterielRetourDeMaintenance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MaterielRetourDeMaintenance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MaterielRetourDeMaintenance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MaterielRetourDeMaintenance: end\n");

   return (stat);
}

int ASN1C_CR_MaterielRetourDeMaintenance::Decode ()
{
   return asn1PD_CR_MaterielRetourDeMaintenance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeRavitaillement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeRavitaillement::ASN1C_CR_DemandeRavitaillement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeRavitaillement: end\n");
   return (stat);
}

int ASN1C_CR_DemandeRavitaillement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeRavitaillement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeRavitaillement: end\n");

   return (stat);
}

int ASN1C_CR_DemandeRavitaillement::Decode ()
{
   return asn1PD_CR_DemandeRavitaillement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeEvacuationSanitaire                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeEvacuationSanitaire::ASN1C_CR_DemandeEvacuationSanitaire (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeEvacuationSanitaire (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeEvacuationSanitaire: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeEvacuationSanitaire: end\n");
   return (stat);
}

int ASN1C_CR_DemandeEvacuationSanitaire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeEvacuationSanitaire (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeEvacuationSanitaire (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeEvacuationSanitaire: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeEvacuationSanitaire: end\n");

   return (stat);
}

int ASN1C_CR_DemandeEvacuationSanitaire::Decode ()
{
   return asn1PD_CR_DemandeEvacuationSanitaire (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeEvacuationMateriel                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeEvacuationMateriel::ASN1C_CR_DemandeEvacuationMateriel (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeEvacuationMateriel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeEvacuationMateriel: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeEvacuationMateriel: end\n");
   return (stat);
}

int ASN1C_CR_DemandeEvacuationMateriel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeEvacuationMateriel (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeEvacuationMateriel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeEvacuationMateriel: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeEvacuationMateriel: end\n");

   return (stat);
}

int ASN1C_CR_DemandeEvacuationMateriel::Decode ()
{
   return asn1PD_CR_DemandeEvacuationMateriel (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AllocationConsentieBientotEpuisee                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_AllocationConsentieBientotEpuisee::ASN1C_CR_AllocationConsentieBientotEpuisee (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_AllocationConsentieBientotEpuisee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_AllocationConsentieBientotEpuisee (ASN1CTXT* ctxt_p, ASN1T_CR_AllocationConsentieBientotEpuisee value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AllocationConsentieBientotEpuisee: start\n");

   stat = asn1PE_TypeDotation (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_AllocationConsentieBientotEpuisee: end\n");
   return (stat);
}

int ASN1C_CR_AllocationConsentieBientotEpuisee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AllocationConsentieBientotEpuisee (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_AllocationConsentieBientotEpuisee (ASN1CTXT* ctxt_p, ASN1T_CR_AllocationConsentieBientotEpuisee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AllocationConsentieBientotEpuisee: start\n");

   stat = asn1PD_TypeDotation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_AllocationConsentieBientotEpuisee: end\n");

   return (stat);
}

int ASN1C_CR_AllocationConsentieBientotEpuisee::Decode ()
{
   return asn1PD_CR_AllocationConsentieBientotEpuisee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementDotationsEffectue                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementDotationsEffectue::ASN1C_CR_RavitaillementDotationsEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementDotationsEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementDotationsEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementDotationsEffectue: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementDotationsEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementDotationsEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementDotationsEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementDotationsEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementDotationsEffectue: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementDotationsEffectue::Decode ()
{
   return asn1PD_CR_RavitaillementDotationsEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementStockEffectue                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementStockEffectue::ASN1C_CR_RavitaillementStockEffectue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementStockEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementStockEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementStockEffectue: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementStockEffectue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementStockEffectue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementStockEffectue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementStockEffectue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementStockEffectue: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementStockEffectue::Decode ()
{
   return asn1PD_CR_RavitaillementStockEffectue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_HumainRetourDeSante                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_HumainRetourDeSante::ASN1C_CR_HumainRetourDeSante (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_HumainRetourDeSante (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_HumainRetourDeSante: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_HumainRetourDeSante: end\n");
   return (stat);
}

int ASN1C_CR_HumainRetourDeSante::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_HumainRetourDeSante (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_HumainRetourDeSante (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_HumainRetourDeSante: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_HumainRetourDeSante: end\n");

   return (stat);
}

int ASN1C_CR_HumainRetourDeSante::Decode ()
{
   return asn1PD_CR_HumainRetourDeSante (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnCoursRavitaillement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnCoursRavitaillement::ASN1C_CR_EnCoursRavitaillement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnCoursRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnCoursRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnCoursRavitaillement: end\n");
   return (stat);
}

int ASN1C_CR_EnCoursRavitaillement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnCoursRavitaillement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnCoursRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnCoursRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnCoursRavitaillement: end\n");

   return (stat);
}

int ASN1C_CR_EnCoursRavitaillement::Decode ()
{
   return asn1PD_CR_EnCoursRavitaillement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RavitaillementTermine                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_RavitaillementTermine::ASN1C_CR_RavitaillementTermine (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RavitaillementTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RavitaillementTermine: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RavitaillementTermine: end\n");
   return (stat);
}

int ASN1C_CR_RavitaillementTermine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RavitaillementTermine (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RavitaillementTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RavitaillementTermine: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RavitaillementTermine: end\n");

   return (stat);
}

int ASN1C_CR_RavitaillementTermine::Decode ()
{
   return asn1PD_CR_RavitaillementTermine (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_HelicoptereEnObservation                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_HelicoptereEnObservation::ASN1C_CR_HelicoptereEnObservation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_HelicoptereEnObservation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_HelicoptereEnObservation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_HelicoptereEnObservation: end\n");
   return (stat);
}

int ASN1C_CR_HelicoptereEnObservation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_HelicoptereEnObservation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_HelicoptereEnObservation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_HelicoptereEnObservation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_HelicoptereEnObservation: end\n");

   return (stat);
}

int ASN1C_CR_HelicoptereEnObservation::Decode ()
{
   return asn1PD_CR_HelicoptereEnObservation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PerteInfoGuidage                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_PerteInfoGuidage::ASN1C_CR_PerteInfoGuidage (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PerteInfoGuidage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PerteInfoGuidage: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PerteInfoGuidage: end\n");
   return (stat);
}

int ASN1C_CR_PerteInfoGuidage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PerteInfoGuidage (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PerteInfoGuidage (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PerteInfoGuidage: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PerteInfoGuidage: end\n");

   return (stat);
}

int ASN1C_CR_PerteInfoGuidage::Decode ()
{
   return asn1PD_CR_PerteInfoGuidage (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TransportUnitePasPrete                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportUnitePasPrete::ASN1C_CR_TransportUnitePasPrete (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TransportUnitePasPrete& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TransportUnitePasPrete (ASN1CTXT* ctxt_p, ASN1T_CR_TransportUnitePasPrete value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportUnitePasPrete: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TransportUnitePasPrete: end\n");
   return (stat);
}

int ASN1C_CR_TransportUnitePasPrete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportUnitePasPrete (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TransportUnitePasPrete (ASN1CTXT* ctxt_p, ASN1T_CR_TransportUnitePasPrete* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportUnitePasPrete: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TransportUnitePasPrete: end\n");

   return (stat);
}

int ASN1C_CR_TransportUnitePasPrete::Decode ()
{
   return asn1PD_CR_TransportUnitePasPrete (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TransportEnCours                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportEnCours::ASN1C_CR_TransportEnCours (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TransportEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TransportEnCours: end\n");
   return (stat);
}

int ASN1C_CR_TransportEnCours::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportEnCours (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TransportEnCours (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportEnCours: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TransportEnCours: end\n");

   return (stat);
}

int ASN1C_CR_TransportEnCours::Decode ()
{
   return asn1PD_CR_TransportEnCours (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TransportEmbarquement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportEmbarquement::ASN1C_CR_TransportEmbarquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TransportEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TransportEmbarquement: end\n");
   return (stat);
}

int ASN1C_CR_TransportEmbarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportEmbarquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TransportEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TransportEmbarquement: end\n");

   return (stat);
}

int ASN1C_CR_TransportEmbarquement::Decode ()
{
   return asn1PD_CR_TransportEmbarquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TransportDebarquement                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_TransportDebarquement::ASN1C_CR_TransportDebarquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TransportDebarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TransportDebarquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TransportDebarquement: end\n");
   return (stat);
}

int ASN1C_CR_TransportDebarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TransportDebarquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TransportDebarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TransportDebarquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TransportDebarquement: end\n");

   return (stat);
}

int ASN1C_CR_TransportDebarquement::Decode ()
{
   return asn1PD_CR_TransportDebarquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_VehiculeLaisseSurPosition                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_VehiculeLaisseSurPosition::ASN1C_CR_VehiculeLaisseSurPosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_VehiculeLaisseSurPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_VehiculeLaisseSurPosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_VehiculeLaisseSurPosition: end\n");
   return (stat);
}

int ASN1C_CR_VehiculeLaisseSurPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_VehiculeLaisseSurPosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_VehiculeLaisseSurPosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_VehiculeLaisseSurPosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_VehiculeLaisseSurPosition: end\n");

   return (stat);
}

int ASN1C_CR_VehiculeLaisseSurPosition::Decode ()
{
   return asn1PD_CR_VehiculeLaisseSurPosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RejointPositionEmbarquement                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_RejointPositionEmbarquement::ASN1C_CR_RejointPositionEmbarquement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RejointPositionEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RejointPositionEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RejointPositionEmbarquement: end\n");
   return (stat);
}

int ASN1C_CR_RejointPositionEmbarquement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RejointPositionEmbarquement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RejointPositionEmbarquement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RejointPositionEmbarquement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RejointPositionEmbarquement: end\n");

   return (stat);
}

int ASN1C_CR_RejointPositionEmbarquement::Decode ()
{
   return asn1PD_CR_RejointPositionEmbarquement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_EnAttenteTransporteurs                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_EnAttenteTransporteurs::ASN1C_CR_EnAttenteTransporteurs (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_EnAttenteTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_EnAttenteTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_EnAttenteTransporteurs: end\n");
   return (stat);
}

int ASN1C_CR_EnAttenteTransporteurs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_EnAttenteTransporteurs (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_EnAttenteTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_EnAttenteTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_EnAttenteTransporteurs: end\n");

   return (stat);
}

int ASN1C_CR_EnAttenteTransporteurs::Decode ()
{
   return asn1PD_CR_EnAttenteTransporteurs (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ContamineNBC                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_ContamineNBC::ASN1C_CR_ContamineNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ContamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ContamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ContamineNBC: end\n");
   return (stat);
}

int ASN1C_CR_ContamineNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ContamineNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ContamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ContamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ContamineNBC: end\n");

   return (stat);
}

int ASN1C_CR_ContamineNBC::Decode ()
{
   return asn1PD_CR_ContamineNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecontamineNBC                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecontamineNBC::ASN1C_CR_DecontamineNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecontamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecontamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecontamineNBC: end\n");
   return (stat);
}

int ASN1C_CR_DecontamineNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecontamineNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecontamineNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecontamineNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecontamineNBC: end\n");

   return (stat);
}

int ASN1C_CR_DecontamineNBC::Decode ()
{
   return asn1PD_CR_DecontamineNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TenueProtectionNBCMise                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_TenueProtectionNBCMise::ASN1C_CR_TenueProtectionNBCMise (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TenueProtectionNBCMise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TenueProtectionNBCMise: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TenueProtectionNBCMise: end\n");
   return (stat);
}

int ASN1C_CR_TenueProtectionNBCMise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TenueProtectionNBCMise (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TenueProtectionNBCMise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TenueProtectionNBCMise: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TenueProtectionNBCMise: end\n");

   return (stat);
}

int ASN1C_CR_TenueProtectionNBCMise::Decode ()
{
   return asn1PD_CR_TenueProtectionNBCMise (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TenueProtectionNBCEnlevee                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_TenueProtectionNBCEnlevee::ASN1C_CR_TenueProtectionNBCEnlevee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TenueProtectionNBCEnlevee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TenueProtectionNBCEnlevee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TenueProtectionNBCEnlevee: end\n");
   return (stat);
}

int ASN1C_CR_TenueProtectionNBCEnlevee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TenueProtectionNBCEnlevee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TenueProtectionNBCEnlevee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TenueProtectionNBCEnlevee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TenueProtectionNBCEnlevee: end\n");

   return (stat);
}

int ASN1C_CR_TenueProtectionNBCEnlevee::Decode ()
{
   return asn1PD_CR_TenueProtectionNBCEnlevee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_AlerteNBC                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_AlerteNBC::ASN1C_CR_AlerteNBC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_AlerteNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_AlerteNBC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_AlerteNBC: end\n");
   return (stat);
}

int ASN1C_CR_AlerteNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_AlerteNBC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_AlerteNBC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_AlerteNBC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_AlerteNBC: end\n");

   return (stat);
}

int ASN1C_CR_AlerteNBC::Decode ()
{
   return asn1PD_CR_AlerteNBC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SiteDecontaminationAnime                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteDecontaminationAnime::ASN1C_CR_SiteDecontaminationAnime (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteDecontaminationAnime (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteDecontaminationAnime: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteDecontaminationAnime: end\n");
   return (stat);
}

int ASN1C_CR_SiteDecontaminationAnime::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteDecontaminationAnime (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteDecontaminationAnime (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteDecontaminationAnime: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteDecontaminationAnime: end\n");

   return (stat);
}

int ASN1C_CR_SiteDecontaminationAnime::Decode ()
{
   return asn1PD_CR_SiteDecontaminationAnime (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SiteDecontaminationDesactive                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteDecontaminationDesactive::ASN1C_CR_SiteDecontaminationDesactive (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteDecontaminationDesactive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteDecontaminationDesactive: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteDecontaminationDesactive: end\n");
   return (stat);
}

int ASN1C_CR_SiteDecontaminationDesactive::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteDecontaminationDesactive (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteDecontaminationDesactive (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteDecontaminationDesactive: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteDecontaminationDesactive: end\n");

   return (stat);
}

int ASN1C_CR_SiteDecontaminationDesactive::Decode ()
{
   return asn1PD_CR_SiteDecontaminationDesactive (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DemandeDecontamination                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_DemandeDecontamination::ASN1C_CR_DemandeDecontamination (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DemandeDecontamination (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DemandeDecontamination: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DemandeDecontamination: end\n");
   return (stat);
}

int ASN1C_CR_DemandeDecontamination::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DemandeDecontamination (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DemandeDecontamination (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DemandeDecontamination: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DemandeDecontamination: end\n");

   return (stat);
}

int ASN1C_CR_DemandeDecontamination::Decode ()
{
   return asn1PD_CR_DemandeDecontamination (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ZoneReconnue                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_ZoneReconnue::ASN1C_CR_ZoneReconnue (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ZoneReconnue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ZoneReconnue: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ZoneReconnue: end\n");
   return (stat);
}

int ASN1C_CR_ZoneReconnue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ZoneReconnue (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ZoneReconnue (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ZoneReconnue: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ZoneReconnue: end\n");

   return (stat);
}

int ASN1C_CR_ZoneReconnue::Decode ()
{
   return asn1PD_CR_ZoneReconnue (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ZoneDecontaminee                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_ZoneDecontaminee::ASN1C_CR_ZoneDecontaminee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ZoneDecontaminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ZoneDecontaminee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ZoneDecontaminee: end\n");
   return (stat);
}

int ASN1C_CR_ZoneDecontaminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ZoneDecontaminee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ZoneDecontaminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ZoneDecontaminee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ZoneDecontaminee: end\n");

   return (stat);
}

int ASN1C_CR_ZoneDecontaminee::Decode ()
{
   return asn1PD_CR_ZoneDecontaminee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SiteROTAReconnu                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_SiteROTAReconnu::ASN1C_CR_SiteROTAReconnu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SiteROTAReconnu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SiteROTAReconnu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SiteROTAReconnu: end\n");
   return (stat);
}

int ASN1C_CR_SiteROTAReconnu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SiteROTAReconnu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SiteROTAReconnu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SiteROTAReconnu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SiteROTAReconnu: end\n");

   return (stat);
}

int ASN1C_CR_SiteROTAReconnu::Decode ()
{
   return asn1PD_CR_SiteROTAReconnu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_IncidentNBCTermine                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_IncidentNBCTermine::ASN1C_CR_IncidentNBCTermine (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_IncidentNBCTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_IncidentNBCTermine: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_IncidentNBCTermine: end\n");
   return (stat);
}

int ASN1C_CR_IncidentNBCTermine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_IncidentNBCTermine (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_IncidentNBCTermine (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_IncidentNBCTermine: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_IncidentNBCTermine: end\n");

   return (stat);
}

int ASN1C_CR_IncidentNBCTermine::Decode ()
{
   return asn1PD_CR_IncidentNBCTermine (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PionDecontamine                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_PionDecontamine::ASN1C_CR_PionDecontamine (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_PionDecontamine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_PionDecontamine (ASN1CTXT* ctxt_p, ASN1T_CR_PionDecontamine value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PionDecontamine: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_PionDecontamine: end\n");
   return (stat);
}

int ASN1C_CR_PionDecontamine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PionDecontamine (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_PionDecontamine (ASN1CTXT* ctxt_p, ASN1T_CR_PionDecontamine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PionDecontamine: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_PionDecontamine: end\n");

   return (stat);
}

int ASN1C_CR_PionDecontamine::Decode ()
{
   return asn1PD_CR_PionDecontamine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissanceTerminee                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissanceTerminee::ASN1C_CR_ReconnaissanceTerminee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissanceTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissanceTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissanceTerminee: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissanceTerminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissanceTerminee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissanceTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissanceTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissanceTerminee: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissanceTerminee::Decode ()
{
   return asn1PD_CR_ReconnaissanceTerminee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReconnaissanceInitialeTerminee                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReconnaissanceInitialeTerminee::ASN1C_CR_ReconnaissanceInitialeTerminee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReconnaissanceInitialeTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReconnaissanceInitialeTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReconnaissanceInitialeTerminee: end\n");
   return (stat);
}

int ASN1C_CR_ReconnaissanceInitialeTerminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReconnaissanceInitialeTerminee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReconnaissanceInitialeTerminee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReconnaissanceInitialeTerminee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReconnaissanceInitialeTerminee: end\n");

   return (stat);
}

int ASN1C_CR_ReconnaissanceInitialeTerminee::Decode ()
{
   return asn1PD_CR_ReconnaissanceInitialeTerminee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RejointPlotRavitaillement                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_RejointPlotRavitaillement::ASN1C_CR_RejointPlotRavitaillement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RejointPlotRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RejointPlotRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RejointPlotRavitaillement: end\n");
   return (stat);
}

int ASN1C_CR_RejointPlotRavitaillement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RejointPlotRavitaillement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RejointPlotRavitaillement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RejointPlotRavitaillement: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RejointPlotRavitaillement: end\n");

   return (stat);
}

int ASN1C_CR_RejointPlotRavitaillement::Decode ()
{
   return asn1PD_CR_RejointPlotRavitaillement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PremierCoupParti                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_PremierCoupParti::ASN1C_CR_PremierCoupParti (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PremierCoupParti (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PremierCoupParti: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PremierCoupParti: end\n");
   return (stat);
}

int ASN1C_CR_PremierCoupParti::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PremierCoupParti (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PremierCoupParti (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PremierCoupParti: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PremierCoupParti: end\n");

   return (stat);
}

int ASN1C_CR_PremierCoupParti::Decode ()
{
   return asn1PD_CR_PremierCoupParti (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirExecute                                             */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirExecute::ASN1C_CR_TirExecute (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirExecute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirExecute: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirExecute: end\n");
   return (stat);
}

int ASN1C_CR_TirExecute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirExecute (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirExecute (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirExecute: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirExecute: end\n");

   return (stat);
}

int ASN1C_CR_TirExecute::Decode ()
{
   return asn1PD_CR_TirExecute (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirHorsDePortee                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirHorsDePortee::ASN1C_CR_TirHorsDePortee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirHorsDePortee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirHorsDePortee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirHorsDePortee: end\n");
   return (stat);
}

int ASN1C_CR_TirHorsDePortee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirHorsDePortee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirHorsDePortee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirHorsDePortee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirHorsDePortee: end\n");

   return (stat);
}

int ASN1C_CR_TirHorsDePortee::Decode ()
{
   return asn1PD_CR_TirHorsDePortee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirAnnule                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirAnnule::ASN1C_CR_TirAnnule (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirAnnule: end\n");
   return (stat);
}

int ASN1C_CR_TirAnnule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirAnnule (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirAnnule (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirAnnule: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirAnnule: end\n");

   return (stat);
}

int ASN1C_CR_TirAnnule::Decode ()
{
   return asn1PD_CR_TirAnnule (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ChangementDePosition                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_ChangementDePosition::ASN1C_CR_ChangementDePosition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ChangementDePosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ChangementDePosition: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ChangementDePosition: end\n");
   return (stat);
}

int ASN1C_CR_ChangementDePosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ChangementDePosition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ChangementDePosition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ChangementDePosition: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ChangementDePosition: end\n");

   return (stat);
}

int ASN1C_CR_ChangementDePosition::Decode ()
{
   return asn1PD_CR_ChangementDePosition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutSurveillance                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutSurveillance::ASN1C_CR_DebutSurveillance (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutSurveillance: end\n");
   return (stat);
}

int ASN1C_CR_DebutSurveillance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutSurveillance (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutSurveillance (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutSurveillance: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutSurveillance: end\n");

   return (stat);
}

int ASN1C_CR_DebutSurveillance::Decode ()
{
   return asn1PD_CR_DebutSurveillance (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DebutInstallation                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DebutInstallation::ASN1C_CR_DebutInstallation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DebutInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DebutInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DebutInstallation: end\n");
   return (stat);
}

int ASN1C_CR_DebutInstallation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DebutInstallation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DebutInstallation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DebutInstallation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DebutInstallation: end\n");

   return (stat);
}

int ASN1C_CR_DebutInstallation::Decode ()
{
   return asn1PD_CR_DebutInstallation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PretPourConduiteTir                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_PretPourConduiteTir::ASN1C_CR_PretPourConduiteTir (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PretPourConduiteTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PretPourConduiteTir: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PretPourConduiteTir: end\n");
   return (stat);
}

int ASN1C_CR_PretPourConduiteTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PretPourConduiteTir (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PretPourConduiteTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PretPourConduiteTir: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PretPourConduiteTir: end\n");

   return (stat);
}

int ASN1C_CR_PretPourConduiteTir::Decode ()
{
   return asn1PD_CR_PretPourConduiteTir (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ReceptionOrdreDeFeu                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_ReceptionOrdreDeFeu::ASN1C_CR_ReceptionOrdreDeFeu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ReceptionOrdreDeFeu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ReceptionOrdreDeFeu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ReceptionOrdreDeFeu: end\n");
   return (stat);
}

int ASN1C_CR_ReceptionOrdreDeFeu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ReceptionOrdreDeFeu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ReceptionOrdreDeFeu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ReceptionOrdreDeFeu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ReceptionOrdreDeFeu: end\n");

   return (stat);
}

int ASN1C_CR_ReceptionOrdreDeFeu::Decode ()
{
   return asn1PD_CR_ReceptionOrdreDeFeu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PretAuTir                                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_PretAuTir::ASN1C_CR_PretAuTir (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PretAuTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PretAuTir: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PretAuTir: end\n");
   return (stat);
}

int ASN1C_CR_PretAuTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PretAuTir (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PretAuTir (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PretAuTir: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PretAuTir: end\n");

   return (stat);
}

int ASN1C_CR_PretAuTir::Decode ()
{
   return asn1PD_CR_PretAuTir (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_ObservationTirIndirect                                 */
/*                                                            */
/**************************************************************/

ASN1C_CR_ObservationTirIndirect::ASN1C_CR_ObservationTirIndirect (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_ObservationTirIndirect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_ObservationTirIndirect (ASN1CTXT* ctxt_p, ASN1T_CR_ObservationTirIndirect value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ObservationTirIndirect: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_ObservationTirIndirect: end\n");
   return (stat);
}

int ASN1C_CR_ObservationTirIndirect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ObservationTirIndirect (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_ObservationTirIndirect (ASN1CTXT* ctxt_p, ASN1T_CR_ObservationTirIndirect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ObservationTirIndirect: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_ObservationTirIndirect: end\n");

   return (stat);
}

int ASN1C_CR_ObservationTirIndirect::Decode ()
{
   return asn1PD_CR_ObservationTirIndirect (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_ZoneImplantationOccupee                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_ZoneImplantationOccupee::ASN1C_CR_ZoneImplantationOccupee (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_ZoneImplantationOccupee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_ZoneImplantationOccupee: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_ZoneImplantationOccupee: end\n");
   return (stat);
}

int ASN1C_CR_ZoneImplantationOccupee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_ZoneImplantationOccupee (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_ZoneImplantationOccupee (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_ZoneImplantationOccupee: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_ZoneImplantationOccupee: end\n");

   return (stat);
}

int ASN1C_CR_ZoneImplantationOccupee::Decode ()
{
   return asn1PD_CR_ZoneImplantationOccupee (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_InstallationSurZoneImplantation                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_InstallationSurZoneImplantation::ASN1C_CR_InstallationSurZoneImplantation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_InstallationSurZoneImplantation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_InstallationSurZoneImplantation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_InstallationSurZoneImplantation: end\n");
   return (stat);
}

int ASN1C_CR_InstallationSurZoneImplantation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_InstallationSurZoneImplantation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_InstallationSurZoneImplantation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_InstallationSurZoneImplantation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_InstallationSurZoneImplantation: end\n");

   return (stat);
}

int ASN1C_CR_InstallationSurZoneImplantation::Decode ()
{
   return asn1PD_CR_InstallationSurZoneImplantation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PresencePopulation                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_PresencePopulation::ASN1C_CR_PresencePopulation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PresencePopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PresencePopulation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PresencePopulation: end\n");
   return (stat);
}

int ASN1C_CR_PresencePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PresencePopulation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PresencePopulation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PresencePopulation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PresencePopulation: end\n");

   return (stat);
}

int ASN1C_CR_PresencePopulation::Decode ()
{
   return asn1PD_CR_PresencePopulation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_OrientationPopulationVersCampRefugies                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_OrientationPopulationVersCampRefugies::ASN1C_CR_OrientationPopulationVersCampRefugies (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_OrientationPopulationVersCampRefugies (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_OrientationPopulationVersCampRefugies: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_OrientationPopulationVersCampRefugies: end\n");
   return (stat);
}

int ASN1C_CR_OrientationPopulationVersCampRefugies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_OrientationPopulationVersCampRefugies (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_OrientationPopulationVersCampRefugies (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_OrientationPopulationVersCampRefugies: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_OrientationPopulationVersCampRefugies: end\n");

   return (stat);
}

int ASN1C_CR_OrientationPopulationVersCampRefugies::Decode ()
{
   return asn1PD_CR_OrientationPopulationVersCampRefugies (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PasDeCampRefugiesDisponible                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_PasDeCampRefugiesDisponible::ASN1C_CR_PasDeCampRefugiesDisponible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PasDeCampRefugiesDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PasDeCampRefugiesDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PasDeCampRefugiesDisponible: end\n");
   return (stat);
}

int ASN1C_CR_PasDeCampRefugiesDisponible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PasDeCampRefugiesDisponible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PasDeCampRefugiesDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PasDeCampRefugiesDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PasDeCampRefugiesDisponible: end\n");

   return (stat);
}

int ASN1C_CR_PasDeCampRefugiesDisponible::Decode ()
{
   return asn1PD_CR_PasDeCampRefugiesDisponible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PresenceEnnemiRendu                                    */
/*                                                            */
/**************************************************************/

ASN1C_CR_PresenceEnnemiRendu::ASN1C_CR_PresenceEnnemiRendu (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PresenceEnnemiRendu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PresenceEnnemiRendu: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PresenceEnnemiRendu: end\n");
   return (stat);
}

int ASN1C_CR_PresenceEnnemiRendu::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PresenceEnnemiRendu (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PresenceEnnemiRendu (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PresenceEnnemiRendu: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PresenceEnnemiRendu: end\n");

   return (stat);
}

int ASN1C_CR_PresenceEnnemiRendu::Decode ()
{
   return asn1PD_CR_PresenceEnnemiRendu (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_OrientationEnnemiRenduVersCampPrisonniers              */
/*                                                            */
/**************************************************************/

ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers: end\n");
   return (stat);
}

int ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers: end\n");

   return (stat);
}

int ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::Decode ()
{
   return asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PasDeCampPrisonniersDisponible                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_PasDeCampPrisonniersDisponible::ASN1C_CR_PasDeCampPrisonniersDisponible (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PasDeCampPrisonniersDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PasDeCampPrisonniersDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PasDeCampPrisonniersDisponible: end\n");
   return (stat);
}

int ASN1C_CR_PasDeCampPrisonniersDisponible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PasDeCampPrisonniersDisponible (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PasDeCampPrisonniersDisponible (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PasDeCampPrisonniersDisponible: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PasDeCampPrisonniersDisponible: end\n");

   return (stat);
}

int ASN1C_CR_PasDeCampPrisonniersDisponible::Decode ()
{
   return asn1PD_CR_PasDeCampPrisonniersDisponible (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_Trace                                                  */
/*                                                            */
/**************************************************************/

ASN1C_CR_Trace::ASN1C_CR_Trace (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_Trace& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_Trace (ASN1CTXT* ctxt_p, ASN1T_CR_Trace value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_Trace: start\n");

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_Trace: end\n");
   return (stat);
}

int ASN1C_CR_Trace::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_Trace (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_Trace (ASN1CTXT* ctxt_p, ASN1T_CR_Trace* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_Trace: start\n");

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_Trace: end\n");

   return (stat);
}

int ASN1C_CR_Trace::Decode ()
{
   return asn1PD_CR_Trace (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TraceID                                                */
/*                                                            */
/**************************************************************/

ASN1C_CR_TraceID::ASN1C_CR_TraceID (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TraceID& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TraceID (ASN1CTXT* ctxt_p, ASN1T_CR_TraceID value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TraceID: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TraceID: end\n");
   return (stat);
}

int ASN1C_CR_TraceID::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TraceID (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TraceID (ASN1CTXT* ctxt_p, ASN1T_CR_TraceID* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TraceID: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TraceID: end\n");

   return (stat);
}

int ASN1C_CR_TraceID::Decode ()
{
   return asn1PD_CR_TraceID (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TirDansZoneInterdite                                   */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirDansZoneInterdite::ASN1C_CR_TirDansZoneInterdite (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirDansZoneInterdite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirDansZoneInterdite: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirDansZoneInterdite: end\n");
   return (stat);
}

int ASN1C_CR_TirDansZoneInterdite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirDansZoneInterdite (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirDansZoneInterdite (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirDansZoneInterdite: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirDansZoneInterdite: end\n");

   return (stat);
}

int ASN1C_CR_TirDansZoneInterdite::Decode ()
{
   return asn1PD_CR_TirDansZoneInterdite (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirSurCampAmi                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirSurCampAmi::ASN1C_CR_TirSurCampAmi (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TirSurCampAmi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TirSurCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampAmi value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirSurCampAmi: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TirSurCampAmi: end\n");
   return (stat);
}

int ASN1C_CR_TirSurCampAmi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirSurCampAmi (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TirSurCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampAmi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirSurCampAmi: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TirSurCampAmi: end\n");

   return (stat);
}

int ASN1C_CR_TirSurCampAmi::Decode ()
{
   return asn1PD_CR_TirSurCampAmi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TireParCampAmi                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_TireParCampAmi::ASN1C_CR_TireParCampAmi (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TireParCampAmi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TireParCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampAmi value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TireParCampAmi: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TireParCampAmi: end\n");
   return (stat);
}

int ASN1C_CR_TireParCampAmi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TireParCampAmi (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TireParCampAmi (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampAmi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TireParCampAmi: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TireParCampAmi: end\n");

   return (stat);
}

int ASN1C_CR_TireParCampAmi::Decode ()
{
   return asn1PD_CR_TireParCampAmi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TirSurCampNeutre                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirSurCampNeutre::ASN1C_CR_TirSurCampNeutre (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TirSurCampNeutre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TirSurCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampNeutre value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirSurCampNeutre: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TirSurCampNeutre: end\n");
   return (stat);
}

int ASN1C_CR_TirSurCampNeutre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirSurCampNeutre (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TirSurCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCampNeutre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirSurCampNeutre: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TirSurCampNeutre: end\n");

   return (stat);
}

int ASN1C_CR_TirSurCampNeutre::Decode ()
{
   return asn1PD_CR_TirSurCampNeutre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TireParCampNeutre                                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_TireParCampNeutre::ASN1C_CR_TireParCampNeutre (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TireParCampNeutre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TireParCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampNeutre value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TireParCampNeutre: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TireParCampNeutre: end\n");
   return (stat);
}

int ASN1C_CR_TireParCampNeutre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TireParCampNeutre (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TireParCampNeutre (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCampNeutre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TireParCampNeutre: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TireParCampNeutre: end\n");

   return (stat);
}

int ASN1C_CR_TireParCampNeutre::Decode ()
{
   return asn1PD_CR_TireParCampNeutre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TirSurCivil                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirSurCivil::ASN1C_CR_TirSurCivil (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TirSurCivil& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TirSurCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCivil value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirSurCivil: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TirSurCivil: end\n");
   return (stat);
}

int ASN1C_CR_TirSurCivil::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirSurCivil (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TirSurCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TirSurCivil* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirSurCivil: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TirSurCivil: end\n");

   return (stat);
}

int ASN1C_CR_TirSurCivil::Decode ()
{
   return asn1PD_CR_TirSurCivil (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_TireParCivil                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_TireParCivil::ASN1C_CR_TireParCivil (
   ASN1MessageBuffer& msgBuf, ASN1T_CR_TireParCivil& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CR_TireParCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCivil value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TireParCivil: start\n");

   stat = asn1PE_Agent (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CR_TireParCivil: end\n");
   return (stat);
}

int ASN1C_CR_TireParCivil::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TireParCivil (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CR_TireParCivil (ASN1CTXT* ctxt_p, ASN1T_CR_TireParCivil* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TireParCivil: start\n");

   stat = asn1PD_Agent (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CR_TireParCivil: end\n");

   return (stat);
}

int ASN1C_CR_TireParCivil::Decode ()
{
   return asn1PD_CR_TireParCivil (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CR_DestructionPC                                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_DestructionPC::ASN1C_CR_DestructionPC (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DestructionPC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DestructionPC: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DestructionPC: end\n");
   return (stat);
}

int ASN1C_CR_DestructionPC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DestructionPC (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DestructionPC (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DestructionPC: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DestructionPC: end\n");

   return (stat);
}

int ASN1C_CR_DestructionPC::Decode ()
{
   return asn1PD_CR_DestructionPC (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecesBlesse                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecesBlesse::ASN1C_CR_DecesBlesse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecesBlesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecesBlesse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecesBlesse: end\n");
   return (stat);
}

int ASN1C_CR_DecesBlesse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecesBlesse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecesBlesse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecesBlesse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecesBlesse: end\n");

   return (stat);
}

int ASN1C_CR_DecesBlesse::Decode ()
{
   return asn1PD_CR_DecesBlesse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecesBlessePendantTransport                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecesBlessePendantTransport::ASN1C_CR_DecesBlessePendantTransport (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecesBlessePendantTransport (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecesBlessePendantTransport: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecesBlessePendantTransport: end\n");
   return (stat);
}

int ASN1C_CR_DecesBlessePendantTransport::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecesBlessePendantTransport (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecesBlessePendantTransport (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecesBlessePendantTransport: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecesBlessePendantTransport: end\n");

   return (stat);
}

int ASN1C_CR_DecesBlessePendantTransport::Decode ()
{
   return asn1PD_CR_DecesBlessePendantTransport (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DecesBlessePendantHospitalisation                      */
/*                                                            */
/**************************************************************/

ASN1C_CR_DecesBlessePendantHospitalisation::ASN1C_CR_DecesBlessePendantHospitalisation (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DecesBlessePendantHospitalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DecesBlessePendantHospitalisation: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DecesBlessePendantHospitalisation: end\n");
   return (stat);
}

int ASN1C_CR_DecesBlessePendantHospitalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DecesBlessePendantHospitalisation (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DecesBlessePendantHospitalisation (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DecesBlessePendantHospitalisation: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DecesBlessePendantHospitalisation: end\n");

   return (stat);
}

int ASN1C_CR_DecesBlessePendantHospitalisation::Decode ()
{
   return asn1PD_CR_DecesBlessePendantHospitalisation (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossiblePionsSubordonnesNonOperationnels      */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossiblePionsSubordonnesNonOperationnels::ASN1C_CR_MissionImpossiblePionsSubordonnesNonOperationnels (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossiblePionsSubordonnesNonOperationnels (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossiblePionsSubordonnesNonOperationnels: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossiblePionsSubordonnesNonOperationnels: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossiblePionsSubordonnesNonOperationnels::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossiblePionsSubordonnesNonOperationnels (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossiblePionsSubordonnesNonOperationnels (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossiblePionsSubordonnesNonOperationnels: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossiblePionsSubordonnesNonOperationnels: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossiblePionsSubordonnesNonOperationnels::Decode ()
{
   return asn1PD_CR_MissionImpossiblePionsSubordonnesNonOperationnels (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossibleLimaInvalide                          */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossibleLimaInvalide::ASN1C_CR_MissionImpossibleLimaInvalide (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossibleLimaInvalide (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossibleLimaInvalide: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossibleLimaInvalide: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossibleLimaInvalide::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossibleLimaInvalide (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossibleLimaInvalide (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossibleLimaInvalide: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossibleLimaInvalide: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossibleLimaInvalide::Decode ()
{
   return asn1PD_CR_MissionImpossibleLimaInvalide (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_MissionImpossibleZoneHorsFuseau                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_MissionImpossibleZoneHorsFuseau::ASN1C_CR_MissionImpossibleZoneHorsFuseau (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_MissionImpossibleZoneHorsFuseau (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_MissionImpossibleZoneHorsFuseau: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_MissionImpossibleZoneHorsFuseau: end\n");
   return (stat);
}

int ASN1C_CR_MissionImpossibleZoneHorsFuseau::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_MissionImpossibleZoneHorsFuseau (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_MissionImpossibleZoneHorsFuseau (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_MissionImpossibleZoneHorsFuseau: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_MissionImpossibleZoneHorsFuseau: end\n");

   return (stat);
}

int ASN1C_CR_MissionImpossibleZoneHorsFuseau::Decode ()
{
   return asn1PD_CR_MissionImpossibleZoneHorsFuseau (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_RapportDeForceDefavorable                              */
/*                                                            */
/**************************************************************/

ASN1C_CR_RapportDeForceDefavorable::ASN1C_CR_RapportDeForceDefavorable (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_RapportDeForceDefavorable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_RapportDeForceDefavorable: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_RapportDeForceDefavorable: end\n");
   return (stat);
}

int ASN1C_CR_RapportDeForceDefavorable::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_RapportDeForceDefavorable (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_RapportDeForceDefavorable (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_RapportDeForceDefavorable: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_RapportDeForceDefavorable: end\n");

   return (stat);
}

int ASN1C_CR_RapportDeForceDefavorable::Decode ()
{
   return asn1PD_CR_RapportDeForceDefavorable (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TerrainDifficile                                       */
/*                                                            */
/**************************************************************/

ASN1C_CR_TerrainDifficile::ASN1C_CR_TerrainDifficile (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TerrainDifficile (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TerrainDifficile: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TerrainDifficile: end\n");
   return (stat);
}

int ASN1C_CR_TerrainDifficile::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TerrainDifficile (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TerrainDifficile (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TerrainDifficile: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TerrainDifficile: end\n");

   return (stat);
}

int ASN1C_CR_TerrainDifficile::Decode ()
{
   return asn1PD_CR_TerrainDifficile (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PlusDeCarburant                                        */
/*                                                            */
/**************************************************************/

ASN1C_CR_PlusDeCarburant::ASN1C_CR_PlusDeCarburant (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PlusDeCarburant (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PlusDeCarburant: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PlusDeCarburant: end\n");
   return (stat);
}

int ASN1C_CR_PlusDeCarburant::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PlusDeCarburant (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PlusDeCarburant (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PlusDeCarburant: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PlusDeCarburant: end\n");

   return (stat);
}

int ASN1C_CR_PlusDeCarburant::Decode ()
{
   return asn1PD_CR_PlusDeCarburant (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_DispositifDisperse                                     */
/*                                                            */
/**************************************************************/

ASN1C_CR_DispositifDisperse::ASN1C_CR_DispositifDisperse (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_DispositifDisperse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_DispositifDisperse: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_DispositifDisperse: end\n");
   return (stat);
}

int ASN1C_CR_DispositifDisperse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_DispositifDisperse (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_DispositifDisperse (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_DispositifDisperse: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_DispositifDisperse: end\n");

   return (stat);
}

int ASN1C_CR_DispositifDisperse::Decode ()
{
   return asn1PD_CR_DispositifDisperse (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_PionNeutralise                                         */
/*                                                            */
/**************************************************************/

ASN1C_CR_PionNeutralise::ASN1C_CR_PionNeutralise (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_PionNeutralise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_PionNeutralise: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_PionNeutralise: end\n");
   return (stat);
}

int ASN1C_CR_PionNeutralise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_PionNeutralise (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_PionNeutralise (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_PionNeutralise: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_PionNeutralise: end\n");

   return (stat);
}

int ASN1C_CR_PionNeutralise::Decode ()
{
   return asn1PD_CR_PionNeutralise (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_SilenceRadio                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_SilenceRadio::ASN1C_CR_SilenceRadio (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_SilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_SilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_SilenceRadio: end\n");
   return (stat);
}

int ASN1C_CR_SilenceRadio::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_SilenceRadio (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_SilenceRadio (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_SilenceRadio: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_SilenceRadio: end\n");

   return (stat);
}

int ASN1C_CR_SilenceRadio::Decode ()
{
   return asn1PD_CR_SilenceRadio (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirRestreint                                           */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirRestreint::ASN1C_CR_TirRestreint (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirRestreint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirRestreint: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirRestreint: end\n");
   return (stat);
}

int ASN1C_CR_TirRestreint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirRestreint (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirRestreint (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirRestreint: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirRestreint: end\n");

   return (stat);
}

int ASN1C_CR_TirRestreint::Decode ()
{
   return asn1PD_CR_TirRestreint (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirInterdit                                            */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirInterdit::ASN1C_CR_TirInterdit (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirInterdit (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirInterdit: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirInterdit: end\n");
   return (stat);
}

int ASN1C_CR_TirInterdit::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirInterdit (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirInterdit (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirInterdit: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirInterdit: end\n");

   return (stat);
}

int ASN1C_CR_TirInterdit::Decode ()
{
   return asn1PD_CR_TirInterdit (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  CR_TirLibre                                               */
/*                                                            */
/**************************************************************/

ASN1C_CR_TirLibre::ASN1C_CR_TirLibre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_CR_TirLibre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CR_TirLibre: start\n");

   /* NULL */

   rtdiag ("asn1PE_CR_TirLibre: end\n");
   return (stat);
}

int ASN1C_CR_TirLibre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CR_TirLibre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_CR_TirLibre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_CR_TirLibre: start\n");

   /* NULL */

   rtdiag ("asn1PD_CR_TirLibre: end\n");

   return (stat);
}

int ASN1C_CR_TirLibre::Decode ()
{
   return asn1PD_CR_TirLibre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumTypeCR                                                */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeCR::ASN1C_EnumTypeCR (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeCR& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeCR (ASN1CTXT* ctxt_p, ASN1T_EnumTypeCR value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeCR: start\n");

   switch (value) {
      case EnumTypeCR::message: ui = 0; break;
      case EnumTypeCR::operationel: ui = 1; break;
      case EnumTypeCR::evenement_exceptionnel: ui = 2; break;
      case EnumTypeCR::warning: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeCR: end\n");
   return (stat);
}

int ASN1C_EnumTypeCR::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeCR (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeCR (ASN1CTXT* ctxt_p, ASN1T_EnumTypeCR* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeCR: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeCR::message; break;
      case 1: *pvalue = EnumTypeCR::operationel; break;
      case 2: *pvalue = EnumTypeCR::evenement_exceptionnel; break;
      case 3: *pvalue = EnumTypeCR::warning; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeCR: end\n");

   return (stat);
}

int ASN1C_EnumTypeCR::Decode ()
{
   return asn1PD_EnumTypeCR (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCR_cr                                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgCR_cr::ASN1C_MsgCR_cr (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCR_cr& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCR_cr (ASN1CTXT* ctxt_p, ASN1T_MsgCR_cr* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCR_cr: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 160);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* cr_ras */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.cr_ras");

         stat = asn1PE_CR_RAS (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_obstacle */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_obstacle");

         stat = asn1PE_CR_EnPosteFaceAObstacle (ctxt_p, pvalue->u.cr_en_poste_face_a_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_contournement_obstacle */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.cr_en_contournement_obstacle");

         stat = asn1PE_CR_EnContournementObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible");

         stat = asn1PE_CR_MissionImpossible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_pour_nouvelle_mission */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_pour_nouvelle_mission");

         stat = asn1PE_CR_PretPourNouvelleMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_fuseau */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_fuseau");

         stat = asn1PE_CR_RejointFuseau (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fuseau_rejoint */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.cr_fuseau_rejoint");

         stat = asn1PE_CR_FuseauRejoint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_sur_axe */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_sur_axe");

         stat = asn1PE_CR_ProgressionSurAxe (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_localisation */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_localisation");

         stat = asn1PE_CR_ProgressionVersLocalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_arrive_sur_localisation */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.cr_arrive_sur_localisation");

         stat = asn1PE_CR_ArriveSurLocalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_localisation */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_localisation");

         stat = asn1PE_CR_ReconnaissanceLocalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_direction_dangereuse */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_direction_dangereuse");

         stat = asn1PE_CR_EnPosteFaceADirectionDangereuse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_sur_bond */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_sur_bond");

         stat = asn1PE_CR_EnPosteSurBond (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_jalonnement */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.cr_en_jalonnement");

         stat = asn1PE_CR_EnJalonnement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_preparation_mission */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.cr_preparation_mission");

         stat = asn1PE_CR_PreparationMission (ctxt_p, pvalue->u.cr_preparation_mission);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mission */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mission");

         stat = asn1PE_CR_DebutMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mission */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mission");

         stat = asn1PE_CR_FinMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_installe */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_installe");

         stat = asn1PE_CR_DispositifInstalle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_position */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.cr_en_position");

         stat = asn1PE_CR_EnPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_objectif_atteint */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.cr_objectif_atteint");

         stat = asn1PE_CR_ObjectifAtteint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debouche */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.cr_debouche");

         stat = asn1PE_CR_Debouche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_pia */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_pia");

         stat = asn1PE_CR_SurPIA (ctxt_p, pvalue->u.cr_sur_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_passage_sur_pia */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.cr_passage_sur_pia");

         stat = asn1PE_CR_PassageSurPIA (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_recueillie */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_recueillie");

         stat = asn1PE_CR_UniteRecueillie (ctxt_p, pvalue->u.cr_unite_recueillie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_de_franchissement */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_de_franchissement");

         stat = asn1PE_CR_EnCoursDeFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_poursuivre */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_poursuivre");

         stat = asn1PE_CR_AttenteOrdrePoursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_deboucher */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_deboucher");

         stat = asn1PE_CR_AttenteOrdreDeboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_controle_zone */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.cr_en_controle_zone");

         stat = asn1PE_CR_EnControleZone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_surveillance */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.cr_en_surveillance");

         stat = asn1PE_CR_EnSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_infiltration */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.cr_en_infiltration");

         stat = asn1PE_CR_EnInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_exfiltration */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.cr_en_exfiltration");

         stat = asn1PE_CR_EnExfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_condition_favorable_pour_infiltration */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_condition_favorable_pour_infiltration");

         stat = asn1PE_CR_AttenteConditionFavorablePourInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_lance */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_lance");

         stat = asn1PE_CR_DroneLance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_en_exploitation */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_en_exploitation");

         stat = asn1PE_CR_DroneEnExploitation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_exploite */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_exploite");

         stat = asn1PE_CR_DroneExploite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mise_en_oeuvre_drone */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mise_en_oeuvre_drone");

         stat = asn1PE_CR_DebutMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mise_en_oeuvre_drone */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mise_en_oeuvre_drone");

         stat = asn1PE_CR_FinMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_brouille */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.cr_brouille");

         stat = asn1PE_CR_Brouille (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_ecoute */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.cr_en_ecoute");

         stat = asn1PE_CR_EnEcoute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_ecoute_radar */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.cr_en_ecoute_radar");

         stat = asn1PE_CR_EnEcouteRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_automate_prise_contact */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.cr_automate_prise_contact");

         stat = asn1PE_CR_Automate_PriseContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_automate_rupture_contact */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.cr_automate_rupture_contact");

         stat = asn1PE_CR_Automate_RuptureContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_prise_contact */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_prise_contact");

         stat = asn1PE_CR_Pion_PriseContact (ctxt_p, pvalue->u.cr_pion_prise_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_rupture_contact */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_rupture_contact");

         stat = asn1PE_CR_Pion_RuptureContact (ctxt_p, pvalue->u.cr_pion_rupture_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_precision_contact */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.cr_precision_contact");

         stat = asn1PE_CR_PrecisionContact (ctxt_p, pvalue->u.cr_precision_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ennemi_detruit */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.cr_ennemi_detruit");

         stat = asn1PE_CR_EnnemiDetruit (ctxt_p, pvalue->u.cr_ennemi_detruit);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_perte_de_contact_visuel */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.cr_perte_de_contact_visuel");

         stat = asn1PE_CR_PerteDeContactVisuel (ctxt_p, pvalue->u.cr_perte_de_contact_visuel);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_poste_face_eni */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.cr_poste_face_eni");

         stat = asn1PE_CR_PosteFaceEni (ctxt_p, pvalue->u.cr_poste_face_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_prise_a_partie */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.cr_prise_a_partie");

         stat = asn1PE_CR_PriseAPartie (ctxt_p, pvalue->u.cr_prise_a_partie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_point_tenu_par_eni */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.cr_point_tenu_par_eni");

         stat = asn1PE_CR_PointTenuParEni (ctxt_p, pvalue->u.cr_point_tenu_par_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_eni */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_eni");

         stat = asn1PE_CR_ProgressionVersEni (ctxt_p, pvalue->u.cr_progression_vers_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_eni_probable */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_eni_probable");

         stat = asn1PE_CR_PresenceEniProbable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_decroche */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.cr_decroche");

         stat = asn1PE_CR_Decroche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_eni_sur_objectif */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.cr_eni_sur_objectif");

         stat = asn1PE_CR_EniSurObjectif (ctxt_p, pvalue->u.cr_eni_sur_objectif);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte");

         stat = asn1PE_CR_Riposte (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_releve */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.cr_releve");

         stat = asn1PE_CR_Releve (ctxt_p, pvalue->u.cr_releve);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_suit_unite */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.cr_suit_unite");

         stat = asn1PE_CR_SuitUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_passe_en_appui */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.cr_passe_en_appui");

         stat = asn1PE_CR_PasseEnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_appui */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.cr_en_appui");

         stat = asn1PE_CR_EnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_detruit_tactiquement */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.cr_detruit_tactiquement");

         stat = asn1PE_CR_DetruitTactiquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_vitesse */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_vitesse");

         stat = asn1PE_CR_AmbianceVitesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_surete */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_surete");

         stat = asn1PE_CR_AmbianceSurete (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_lima */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_lima");

         stat = asn1PE_CR_SurLima (ctxt_p, pvalue->u.cr_sur_lima);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_type_terrain_particulier */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_type_terrain_particulier");

         stat = asn1PE_CR_SurTypeTerrainParticulier (ctxt_p, pvalue->u.cr_sur_type_terrain_particulier);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_en_attente_activation */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_en_attente_activation");

         stat = asn1PE_CR_ObstacleEnAttenteActivation (ctxt_p, pvalue->u.cr_obstacle_en_attente_activation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_travaux_realises */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.cr_travaux_realises");

         stat = asn1PE_CR_TravauxRealises (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_degage */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_degage");

         stat = asn1PE_CR_ObstacleDegage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_organisation_chantier */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.cr_organisation_chantier");

         stat = asn1PE_CR_OrganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_desorganisation_chantier */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.cr_desorganisation_chantier");

         stat = asn1PE_CR_DesorganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_position_obstacle */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_position_obstacle");

         stat = asn1PE_CR_ReconnaissancePositionObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_contournement_realise */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.cr_contournement_realise");

         stat = asn1PE_CR_ContournementRealise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_renforcement */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_renforcement");

         stat = asn1PE_CR_AttenteRenforcement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_travaux */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_travaux");

         stat = asn1PE_CR_DebutTravaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_franchissement */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_franchissement");

         stat = asn1PE_CR_DebutFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_franchissement */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_franchissement");

         stat = asn1PE_CR_FinFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reussite_renforcement */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.cr_reussite_renforcement");

         stat = asn1PE_CR_ReussiteRenforcement (ctxt_p, pvalue->u.cr_reussite_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_echec_renforcement */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.cr_echec_renforcement");

         stat = asn1PE_CR_EchecRenforcement (ctxt_p, pvalue->u.cr_echec_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_itineraire_retabli */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.cr_itineraire_retabli");

         stat = asn1PE_CR_ItineraireRetabli (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_renforcement_bientot_fini */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.cr_renforcement_bientot_fini");

         stat = asn1PE_CR_RenforcementBientotFini (ctxt_p, pvalue->u.cr_renforcement_bientot_fini);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_situation_log_favorable */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.cr_situation_log_favorable");

         stat = asn1PE_CR_SituationLogFavorable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_situation_log_defavorable */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.cr_situation_log_defavorable");

         stat = asn1PE_CR_SituationLogDefavorable (ctxt_p, pvalue->u.cr_situation_log_defavorable);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_section_deployee */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.cr_section_deployee");

         stat = asn1PE_CR_SectionDeployee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_materiel_retour_de_maintenance */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.cr_materiel_retour_de_maintenance");

         stat = asn1PE_CR_MaterielRetourDeMaintenance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_ravitaillement */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_ravitaillement");

         stat = asn1PE_CR_DemandeRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_sanitaire */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_sanitaire");

         stat = asn1PE_CR_DemandeEvacuationSanitaire (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_materiel */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_materiel");

         stat = asn1PE_CR_DemandeEvacuationMateriel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_allocation_consentie_bientot_epuisee */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.cr_allocation_consentie_bientot_epuisee");

         stat = asn1PE_CR_AllocationConsentieBientotEpuisee (ctxt_p, pvalue->u.cr_allocation_consentie_bientot_epuisee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_dotations_effectue */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_dotations_effectue");

         stat = asn1PE_CR_RavitaillementDotationsEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_stock_effectue */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_stock_effectue");

         stat = asn1PE_CR_RavitaillementStockEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_humain_retour_de_sante */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.cr_humain_retour_de_sante");

         stat = asn1PE_CR_HumainRetourDeSante (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_ravitaillement */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_ravitaillement");

         stat = asn1PE_CR_EnCoursRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_termine */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_termine");

         stat = asn1PE_CR_RavitaillementTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_helicoptere_en_observation */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.cr_helicoptere_en_observation");

         stat = asn1PE_CR_HelicoptereEnObservation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_perte_info_guidage */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.cr_perte_info_guidage");

         stat = asn1PE_CR_PerteInfoGuidage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_unite_pas_prete */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_unite_pas_prete");

         stat = asn1PE_CR_TransportUnitePasPrete (ctxt_p, pvalue->u.cr_transport_unite_pas_prete);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_en_cours */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_en_cours");

         stat = asn1PE_CR_TransportEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_embarquement */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_embarquement");

         stat = asn1PE_CR_TransportEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_debarquement */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_debarquement");

         stat = asn1PE_CR_TransportDebarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_vehicule_laisse_sur_position */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.cr_vehicule_laisse_sur_position");

         stat = asn1PE_CR_VehiculeLaisseSurPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_position_embarquement */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_position_embarquement");

         stat = asn1PE_CR_RejointPositionEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_attente_transporteurs */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.cr_en_attente_transporteurs");

         stat = asn1PE_CR_EnAttenteTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_contamine_nbc */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.cr_contamine_nbc");

         stat = asn1PE_CR_ContamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_decontamine_nbc */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.cr_decontamine_nbc");

         stat = asn1PE_CR_DecontamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_mise */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_mise");

         stat = asn1PE_CR_TenueProtectionNBCMise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_enlevee */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_enlevee");

         stat = asn1PE_CR_TenueProtectionNBCEnlevee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_alerte_nbc */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.cr_alerte_nbc");

         stat = asn1PE_CR_AlerteNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_anime */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_anime");

         stat = asn1PE_CR_SiteDecontaminationAnime (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_desactive */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_desactive");

         stat = asn1PE_CR_SiteDecontaminationDesactive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_decontamination */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_decontamination");

         stat = asn1PE_CR_DemandeDecontamination (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_reconnue */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_reconnue");

         stat = asn1PE_CR_ZoneReconnue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_decontaminee */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_decontaminee");

         stat = asn1PE_CR_ZoneDecontaminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_rota_reconnu */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.cr_site_rota_reconnu");

         stat = asn1PE_CR_SiteROTAReconnu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_incident_nbc_termine */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.cr_incident_nbc_termine");

         stat = asn1PE_CR_IncidentNBCTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_decontamine */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_decontamine");

         stat = asn1PE_CR_PionDecontamine (ctxt_p, pvalue->u.cr_pion_decontamine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_terminee */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_terminee");

         stat = asn1PE_CR_ReconnaissanceTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_initiale_terminee */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_initiale_terminee");

         stat = asn1PE_CR_ReconnaissanceInitialeTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_plot_ravitaillement */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_plot_ravitaillement");

         stat = asn1PE_CR_RejointPlotRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_premier_coup_parti */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.cr_premier_coup_parti");

         stat = asn1PE_CR_PremierCoupParti (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_execute */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_execute");

         stat = asn1PE_CR_TirExecute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_hors_de_portee */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_hors_de_portee");

         stat = asn1PE_CR_TirHorsDePortee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_annule */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_annule");

         stat = asn1PE_CR_TirAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_changement_de_position */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.cr_changement_de_position");

         stat = asn1PE_CR_ChangementDePosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_surveillance */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_surveillance");

         stat = asn1PE_CR_DebutSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_installation */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_installation");

         stat = asn1PE_CR_DebutInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_pour_conduite_tir */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_pour_conduite_tir");

         stat = asn1PE_CR_PretPourConduiteTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_observation_tir_indirect */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.cr_observation_tir_indirect");

         stat = asn1PE_CR_ObservationTirIndirect (ctxt_p, pvalue->u.cr_observation_tir_indirect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_implantation_occupee */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_implantation_occupee");

         stat = asn1PE_CR_ZoneImplantationOccupee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_installation_sur_zone_implantation */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.cr_installation_sur_zone_implantation");

         stat = asn1PE_CR_InstallationSurZoneImplantation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_reception_ordre_de_feu */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.cr_reception_ordre_de_feu");

         stat = asn1PE_CR_ReceptionOrdreDeFeu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_au_tir */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_au_tir");

         stat = asn1PE_CR_PretAuTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_population */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_population");

         stat = asn1PE_CR_PresencePopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_population_vers_camp_refugies */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_population_vers_camp_refugies");

         stat = asn1PE_CR_OrientationPopulationVersCampRefugies (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_refugies_disponible */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_refugies_disponible");

         stat = asn1PE_CR_PasDeCampRefugiesDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_ennemi_rendu */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_ennemi_rendu");

         stat = asn1PE_CR_PresenceEnnemiRendu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_ennemi_rendu_vers_camp_prisonniers */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_ennemi_rendu_vers_camp_prisonniers");

         stat = asn1PE_CR_OrientationEnnemiRenduVersCampPrisonniers (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_prisonniers_disponible */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_prisonniers_disponible");

         stat = asn1PE_CR_PasDeCampPrisonniersDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_dans_zone_interdite */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_dans_zone_interdite");

         stat = asn1PE_CR_TirDansZoneInterdite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_ami */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_ami");

         stat = asn1PE_CR_TirSurCampAmi (ctxt_p, pvalue->u.cr_tir_sur_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_ami */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_ami");

         stat = asn1PE_CR_TireParCampAmi (ctxt_p, pvalue->u.cr_tire_par_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_neutre */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_neutre");

         stat = asn1PE_CR_TirSurCampNeutre (ctxt_p, pvalue->u.cr_tir_sur_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_neutre */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_neutre");

         stat = asn1PE_CR_TireParCampNeutre (ctxt_p, pvalue->u.cr_tire_par_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_civil */
      case 142:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_civil");

         stat = asn1PE_CR_TirSurCivil (ctxt_p, pvalue->u.cr_tir_sur_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_civil */
      case 143:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_civil");

         stat = asn1PE_CR_TireParCivil (ctxt_p, pvalue->u.cr_tire_par_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_destruction_pc */
      case 144:
         PU_PUSHNAME (ctxt_p, "u.cr_destruction_pc");

         stat = asn1PE_CR_DestructionPC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse */
      case 145:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse");

         stat = asn1PE_CR_DecesBlesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_transport */
      case 146:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_transport");

         stat = asn1PE_CR_DecesBlessePendantTransport (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_hospitalisation */
      case 147:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_hospitalisation");

         stat = asn1PE_CR_DecesBlessePendantHospitalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_pions_subordonnes_non_operationnels */
      case 148:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_pions_subordonnes_non_operationnels");

         stat = asn1PE_CR_MissionImpossiblePionsSubordonnesNonOperationnels (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_lima_invalide */
      case 149:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_lima_invalide");

         stat = asn1PE_CR_MissionImpossibleLimaInvalide (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_zone_hors_fuseau */
      case 150:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_zone_hors_fuseau");

         stat = asn1PE_CR_MissionImpossibleZoneHorsFuseau (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_rapport_de_force_defavorable */
      case 151:
         PU_PUSHNAME (ctxt_p, "u.cr_rapport_de_force_defavorable");

         stat = asn1PE_CR_RapportDeForceDefavorable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_terrain_difficile */
      case 152:
         PU_PUSHNAME (ctxt_p, "u.cr_terrain_difficile");

         stat = asn1PE_CR_TerrainDifficile (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_plus_de_carburant */
      case 153:
         PU_PUSHNAME (ctxt_p, "u.cr_plus_de_carburant");

         stat = asn1PE_CR_PlusDeCarburant (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_disperse */
      case 154:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_disperse");

         stat = asn1PE_CR_DispositifDisperse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_neutralise */
      case 155:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_neutralise");

         stat = asn1PE_CR_PionNeutralise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_silence_radio */
      case 156:
         PU_PUSHNAME (ctxt_p, "u.cr_silence_radio");

         stat = asn1PE_CR_SilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_restreint */
      case 157:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_restreint");

         stat = asn1PE_CR_TirRestreint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_interdit */
      case 158:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_interdit");

         stat = asn1PE_CR_TirInterdit (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_libre */
      case 159:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_libre");

         stat = asn1PE_CR_TirLibre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace */
      case 160:
         PU_PUSHNAME (ctxt_p, "u.cr_trace");

         stat = asn1PE_CR_Trace (ctxt_p, pvalue->u.cr_trace);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace_id */
      case 161:
         PU_PUSHNAME (ctxt_p, "u.cr_trace_id");

         stat = asn1PE_CR_TraceID (ctxt_p, pvalue->u.cr_trace_id);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgCR_cr: end\n");
   return (stat);
}

int ASN1C_MsgCR_cr::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCR_cr (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCR_cr (ASN1CTXT* ctxt_p, ASN1T_MsgCR_cr* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgCR_cr: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 160);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* cr_ras */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.cr_ras");

         stat = asn1PD_CR_RAS (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_obstacle */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_obstacle");

         stat = asn1PD_CR_EnPosteFaceAObstacle (ctxt_p, &pvalue->u.cr_en_poste_face_a_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_contournement_obstacle */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.cr_en_contournement_obstacle");

         stat = asn1PD_CR_EnContournementObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible");

         stat = asn1PD_CR_MissionImpossible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_pour_nouvelle_mission */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_pour_nouvelle_mission");

         stat = asn1PD_CR_PretPourNouvelleMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_fuseau */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_fuseau");

         stat = asn1PD_CR_RejointFuseau (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fuseau_rejoint */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.cr_fuseau_rejoint");

         stat = asn1PD_CR_FuseauRejoint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_sur_axe */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_sur_axe");

         stat = asn1PD_CR_ProgressionSurAxe (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_localisation */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_localisation");

         stat = asn1PD_CR_ProgressionVersLocalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_arrive_sur_localisation */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.cr_arrive_sur_localisation");

         stat = asn1PD_CR_ArriveSurLocalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_localisation */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_localisation");

         stat = asn1PD_CR_ReconnaissanceLocalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_face_a_direction_dangereuse */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_face_a_direction_dangereuse");

         stat = asn1PD_CR_EnPosteFaceADirectionDangereuse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_poste_sur_bond */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.cr_en_poste_sur_bond");

         stat = asn1PD_CR_EnPosteSurBond (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_jalonnement */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.cr_en_jalonnement");

         stat = asn1PD_CR_EnJalonnement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_preparation_mission */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.cr_preparation_mission");

         pvalue->u.cr_preparation_mission = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CR_PreparationMission);
         if (pvalue->u.cr_preparation_mission == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CR_PreparationMission (ctxt_p, pvalue->u.cr_preparation_mission);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mission */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mission");

         stat = asn1PD_CR_DebutMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mission */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mission");

         stat = asn1PD_CR_FinMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_installe */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_installe");

         stat = asn1PD_CR_DispositifInstalle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_position */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.cr_en_position");

         stat = asn1PD_CR_EnPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_objectif_atteint */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.cr_objectif_atteint");

         stat = asn1PD_CR_ObjectifAtteint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debouche */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.cr_debouche");

         stat = asn1PD_CR_Debouche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_pia */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_pia");

         stat = asn1PD_CR_SurPIA (ctxt_p, &pvalue->u.cr_sur_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_passage_sur_pia */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.cr_passage_sur_pia");

         stat = asn1PD_CR_PassageSurPIA (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_unite_recueillie */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.cr_unite_recueillie");

         stat = asn1PD_CR_UniteRecueillie (ctxt_p, &pvalue->u.cr_unite_recueillie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_de_franchissement */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_de_franchissement");

         stat = asn1PD_CR_EnCoursDeFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_poursuivre */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_poursuivre");

         stat = asn1PD_CR_AttenteOrdrePoursuivre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_ordre_deboucher */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_ordre_deboucher");

         stat = asn1PD_CR_AttenteOrdreDeboucher (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_controle_zone */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.cr_en_controle_zone");

         stat = asn1PD_CR_EnControleZone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_surveillance */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.cr_en_surveillance");

         stat = asn1PD_CR_EnSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_infiltration */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.cr_en_infiltration");

         stat = asn1PD_CR_EnInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_exfiltration */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.cr_en_exfiltration");

         stat = asn1PD_CR_EnExfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_condition_favorable_pour_infiltration */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_condition_favorable_pour_infiltration");

         stat = asn1PD_CR_AttenteConditionFavorablePourInfiltration (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_lance */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_lance");

         stat = asn1PD_CR_DroneLance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_en_exploitation */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_en_exploitation");

         stat = asn1PD_CR_DroneEnExploitation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_drone_exploite */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.cr_drone_exploite");

         stat = asn1PD_CR_DroneExploite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_mise_en_oeuvre_drone */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_mise_en_oeuvre_drone");

         stat = asn1PD_CR_DebutMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_mise_en_oeuvre_drone */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_mise_en_oeuvre_drone");

         stat = asn1PD_CR_FinMiseEnOeuvreDrone (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_brouille */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.cr_brouille");

         stat = asn1PD_CR_Brouille (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_ecoute */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.cr_en_ecoute");

         stat = asn1PD_CR_EnEcoute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_ecoute_radar */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.cr_en_ecoute_radar");

         stat = asn1PD_CR_EnEcouteRadar (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_automate_prise_contact */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.cr_automate_prise_contact");

         stat = asn1PD_CR_Automate_PriseContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_automate_rupture_contact */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.cr_automate_rupture_contact");

         stat = asn1PD_CR_Automate_RuptureContact (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_prise_contact */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_prise_contact");

         stat = asn1PD_CR_Pion_PriseContact (ctxt_p, &pvalue->u.cr_pion_prise_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_rupture_contact */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_rupture_contact");

         stat = asn1PD_CR_Pion_RuptureContact (ctxt_p, &pvalue->u.cr_pion_rupture_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_precision_contact */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.cr_precision_contact");

         stat = asn1PD_CR_PrecisionContact (ctxt_p, &pvalue->u.cr_precision_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ennemi_detruit */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.cr_ennemi_detruit");

         stat = asn1PD_CR_EnnemiDetruit (ctxt_p, &pvalue->u.cr_ennemi_detruit);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_perte_de_contact_visuel */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.cr_perte_de_contact_visuel");

         stat = asn1PD_CR_PerteDeContactVisuel (ctxt_p, &pvalue->u.cr_perte_de_contact_visuel);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_poste_face_eni */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.cr_poste_face_eni");

         stat = asn1PD_CR_PosteFaceEni (ctxt_p, &pvalue->u.cr_poste_face_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_prise_a_partie */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.cr_prise_a_partie");

         stat = asn1PD_CR_PriseAPartie (ctxt_p, &pvalue->u.cr_prise_a_partie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_point_tenu_par_eni */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.cr_point_tenu_par_eni");

         stat = asn1PD_CR_PointTenuParEni (ctxt_p, &pvalue->u.cr_point_tenu_par_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_progression_vers_eni */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.cr_progression_vers_eni");

         stat = asn1PD_CR_ProgressionVersEni (ctxt_p, &pvalue->u.cr_progression_vers_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_eni_probable */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_eni_probable");

         stat = asn1PD_CR_PresenceEniProbable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_decroche */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.cr_decroche");

         stat = asn1PD_CR_Decroche (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_eni_sur_objectif */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.cr_eni_sur_objectif");

         stat = asn1PD_CR_EniSurObjectif (ctxt_p, &pvalue->u.cr_eni_sur_objectif);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_riposte */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.cr_riposte");

         stat = asn1PD_CR_Riposte (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_releve */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.cr_releve");

         stat = asn1PD_CR_Releve (ctxt_p, &pvalue->u.cr_releve);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_suit_unite */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.cr_suit_unite");

         stat = asn1PD_CR_SuitUnite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_passe_en_appui */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.cr_passe_en_appui");

         stat = asn1PD_CR_PasseEnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_appui */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.cr_en_appui");

         stat = asn1PD_CR_EnAppui (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_detruit_tactiquement */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.cr_detruit_tactiquement");

         stat = asn1PD_CR_DetruitTactiquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_vitesse */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_vitesse");

         stat = asn1PD_CR_AmbianceVitesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ambiance_surete */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.cr_ambiance_surete");

         stat = asn1PD_CR_AmbianceSurete (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_lima */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_lima");

         stat = asn1PD_CR_SurLima (ctxt_p, &pvalue->u.cr_sur_lima);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_sur_type_terrain_particulier */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.cr_sur_type_terrain_particulier");

         stat = asn1PD_CR_SurTypeTerrainParticulier (ctxt_p, &pvalue->u.cr_sur_type_terrain_particulier);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_en_attente_activation */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_en_attente_activation");

         stat = asn1PD_CR_ObstacleEnAttenteActivation (ctxt_p, &pvalue->u.cr_obstacle_en_attente_activation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_travaux_realises */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.cr_travaux_realises");

         stat = asn1PD_CR_TravauxRealises (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_obstacle_degage */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.cr_obstacle_degage");

         stat = asn1PD_CR_ObstacleDegage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_organisation_chantier */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.cr_organisation_chantier");

         stat = asn1PD_CR_OrganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_desorganisation_chantier */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.cr_desorganisation_chantier");

         stat = asn1PD_CR_DesorganisationChantier (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_position_obstacle */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_position_obstacle");

         stat = asn1PD_CR_ReconnaissancePositionObstacle (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_contournement_realise */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.cr_contournement_realise");

         stat = asn1PD_CR_ContournementRealise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_attente_renforcement */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.cr_attente_renforcement");

         stat = asn1PD_CR_AttenteRenforcement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_travaux */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_travaux");

         stat = asn1PD_CR_DebutTravaux (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_franchissement */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_franchissement");

         stat = asn1PD_CR_DebutFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_fin_franchissement */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.cr_fin_franchissement");

         stat = asn1PD_CR_FinFranchissement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reussite_renforcement */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.cr_reussite_renforcement");

         pvalue->u.cr_reussite_renforcement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CR_ReussiteRenforcement);
         if (pvalue->u.cr_reussite_renforcement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CR_ReussiteRenforcement (ctxt_p, pvalue->u.cr_reussite_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_echec_renforcement */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.cr_echec_renforcement");

         pvalue->u.cr_echec_renforcement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CR_EchecRenforcement);
         if (pvalue->u.cr_echec_renforcement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CR_EchecRenforcement (ctxt_p, pvalue->u.cr_echec_renforcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_itineraire_retabli */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.cr_itineraire_retabli");

         stat = asn1PD_CR_ItineraireRetabli (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_renforcement_bientot_fini */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.cr_renforcement_bientot_fini");

         stat = asn1PD_CR_RenforcementBientotFini (ctxt_p, &pvalue->u.cr_renforcement_bientot_fini);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_situation_log_favorable */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.cr_situation_log_favorable");

         stat = asn1PD_CR_SituationLogFavorable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_situation_log_defavorable */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.cr_situation_log_defavorable");

         stat = asn1PD_CR_SituationLogDefavorable (ctxt_p, &pvalue->u.cr_situation_log_defavorable);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_section_deployee */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.cr_section_deployee");

         stat = asn1PD_CR_SectionDeployee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_materiel_retour_de_maintenance */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.cr_materiel_retour_de_maintenance");

         stat = asn1PD_CR_MaterielRetourDeMaintenance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_ravitaillement */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_ravitaillement");

         stat = asn1PD_CR_DemandeRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_sanitaire */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_sanitaire");

         stat = asn1PD_CR_DemandeEvacuationSanitaire (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_evacuation_materiel */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_evacuation_materiel");

         stat = asn1PD_CR_DemandeEvacuationMateriel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_allocation_consentie_bientot_epuisee */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.cr_allocation_consentie_bientot_epuisee");

         stat = asn1PD_CR_AllocationConsentieBientotEpuisee (ctxt_p, &pvalue->u.cr_allocation_consentie_bientot_epuisee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_dotations_effectue */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_dotations_effectue");

         stat = asn1PD_CR_RavitaillementDotationsEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_stock_effectue */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_stock_effectue");

         stat = asn1PD_CR_RavitaillementStockEffectue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_humain_retour_de_sante */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.cr_humain_retour_de_sante");

         stat = asn1PD_CR_HumainRetourDeSante (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_cours_ravitaillement */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.cr_en_cours_ravitaillement");

         stat = asn1PD_CR_EnCoursRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_ravitaillement_termine */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.cr_ravitaillement_termine");

         stat = asn1PD_CR_RavitaillementTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_helicoptere_en_observation */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.cr_helicoptere_en_observation");

         stat = asn1PD_CR_HelicoptereEnObservation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_perte_info_guidage */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.cr_perte_info_guidage");

         stat = asn1PD_CR_PerteInfoGuidage (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_unite_pas_prete */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_unite_pas_prete");

         stat = asn1PD_CR_TransportUnitePasPrete (ctxt_p, &pvalue->u.cr_transport_unite_pas_prete);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_en_cours */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_en_cours");

         stat = asn1PD_CR_TransportEnCours (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_embarquement */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_embarquement");

         stat = asn1PD_CR_TransportEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_transport_debarquement */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.cr_transport_debarquement");

         stat = asn1PD_CR_TransportDebarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_vehicule_laisse_sur_position */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.cr_vehicule_laisse_sur_position");

         stat = asn1PD_CR_VehiculeLaisseSurPosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_position_embarquement */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_position_embarquement");

         stat = asn1PD_CR_RejointPositionEmbarquement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_en_attente_transporteurs */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.cr_en_attente_transporteurs");

         stat = asn1PD_CR_EnAttenteTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_contamine_nbc */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.cr_contamine_nbc");

         stat = asn1PD_CR_ContamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_decontamine_nbc */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.cr_decontamine_nbc");

         stat = asn1PD_CR_DecontamineNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_mise */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_mise");

         stat = asn1PD_CR_TenueProtectionNBCMise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tenue_protection_nbc_enlevee */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.cr_tenue_protection_nbc_enlevee");

         stat = asn1PD_CR_TenueProtectionNBCEnlevee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_alerte_nbc */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.cr_alerte_nbc");

         stat = asn1PD_CR_AlerteNBC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_anime */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_anime");

         stat = asn1PD_CR_SiteDecontaminationAnime (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_decontamination_desactive */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.cr_site_decontamination_desactive");

         stat = asn1PD_CR_SiteDecontaminationDesactive (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_demande_decontamination */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.cr_demande_decontamination");

         stat = asn1PD_CR_DemandeDecontamination (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_reconnue */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_reconnue");

         stat = asn1PD_CR_ZoneReconnue (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_decontaminee */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_decontaminee");

         stat = asn1PD_CR_ZoneDecontaminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_site_rota_reconnu */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.cr_site_rota_reconnu");

         stat = asn1PD_CR_SiteROTAReconnu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_incident_nbc_termine */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.cr_incident_nbc_termine");

         stat = asn1PD_CR_IncidentNBCTermine (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_decontamine */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_decontamine");

         stat = asn1PD_CR_PionDecontamine (ctxt_p, &pvalue->u.cr_pion_decontamine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_terminee */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_terminee");

         stat = asn1PD_CR_ReconnaissanceTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reconnaissance_initiale_terminee */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.cr_reconnaissance_initiale_terminee");

         stat = asn1PD_CR_ReconnaissanceInitialeTerminee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rejoint_plot_ravitaillement */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.cr_rejoint_plot_ravitaillement");

         stat = asn1PD_CR_RejointPlotRavitaillement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_premier_coup_parti */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.cr_premier_coup_parti");

         stat = asn1PD_CR_PremierCoupParti (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_execute */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_execute");

         stat = asn1PD_CR_TirExecute (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_hors_de_portee */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_hors_de_portee");

         stat = asn1PD_CR_TirHorsDePortee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_annule */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_annule");

         stat = asn1PD_CR_TirAnnule (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_changement_de_position */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.cr_changement_de_position");

         stat = asn1PD_CR_ChangementDePosition (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_surveillance */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_surveillance");

         stat = asn1PD_CR_DebutSurveillance (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_debut_installation */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.cr_debut_installation");

         stat = asn1PD_CR_DebutInstallation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_pour_conduite_tir */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_pour_conduite_tir");

         stat = asn1PD_CR_PretPourConduiteTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_observation_tir_indirect */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.cr_observation_tir_indirect");

         stat = asn1PD_CR_ObservationTirIndirect (ctxt_p, &pvalue->u.cr_observation_tir_indirect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_zone_implantation_occupee */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.cr_zone_implantation_occupee");

         stat = asn1PD_CR_ZoneImplantationOccupee (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_installation_sur_zone_implantation */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.cr_installation_sur_zone_implantation");

         stat = asn1PD_CR_InstallationSurZoneImplantation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_reception_ordre_de_feu */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.cr_reception_ordre_de_feu");

         stat = asn1PD_CR_ReceptionOrdreDeFeu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pret_au_tir */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.cr_pret_au_tir");

         stat = asn1PD_CR_PretAuTir (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_population */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_population");

         stat = asn1PD_CR_PresencePopulation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_population_vers_camp_refugies */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_population_vers_camp_refugies");

         stat = asn1PD_CR_OrientationPopulationVersCampRefugies (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_refugies_disponible */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_refugies_disponible");

         stat = asn1PD_CR_PasDeCampRefugiesDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_presence_ennemi_rendu */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.cr_presence_ennemi_rendu");

         stat = asn1PD_CR_PresenceEnnemiRendu (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_orientation_ennemi_rendu_vers_camp_prisonniers */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.cr_orientation_ennemi_rendu_vers_camp_prisonniers");

         stat = asn1PD_CR_OrientationEnnemiRenduVersCampPrisonniers (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pas_de_camp_prisonniers_disponible */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.cr_pas_de_camp_prisonniers_disponible");

         stat = asn1PD_CR_PasDeCampPrisonniersDisponible (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_dans_zone_interdite */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_dans_zone_interdite");

         stat = asn1PD_CR_TirDansZoneInterdite (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_ami */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_ami");

         stat = asn1PD_CR_TirSurCampAmi (ctxt_p, &pvalue->u.cr_tir_sur_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_ami */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_ami");

         stat = asn1PD_CR_TireParCampAmi (ctxt_p, &pvalue->u.cr_tire_par_camp_ami);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_camp_neutre */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_camp_neutre");

         stat = asn1PD_CR_TirSurCampNeutre (ctxt_p, &pvalue->u.cr_tir_sur_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_camp_neutre */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_camp_neutre");

         stat = asn1PD_CR_TireParCampNeutre (ctxt_p, &pvalue->u.cr_tire_par_camp_neutre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_sur_civil */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_sur_civil");

         stat = asn1PD_CR_TirSurCivil (ctxt_p, &pvalue->u.cr_tir_sur_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tire_par_civil */
      case 142:
         PU_PUSHNAME (ctxt_p, "u.cr_tire_par_civil");

         stat = asn1PD_CR_TireParCivil (ctxt_p, &pvalue->u.cr_tire_par_civil);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_destruction_pc */
      case 143:
         PU_PUSHNAME (ctxt_p, "u.cr_destruction_pc");

         stat = asn1PD_CR_DestructionPC (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse */
      case 144:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse");

         stat = asn1PD_CR_DecesBlesse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_transport */
      case 145:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_transport");

         stat = asn1PD_CR_DecesBlessePendantTransport (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_deces_blesse_pendant_hospitalisation */
      case 146:
         PU_PUSHNAME (ctxt_p, "u.cr_deces_blesse_pendant_hospitalisation");

         stat = asn1PD_CR_DecesBlessePendantHospitalisation (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_pions_subordonnes_non_operationnels */
      case 147:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_pions_subordonnes_non_operationnels");

         stat = asn1PD_CR_MissionImpossiblePionsSubordonnesNonOperationnels (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_lima_invalide */
      case 148:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_lima_invalide");

         stat = asn1PD_CR_MissionImpossibleLimaInvalide (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_mission_impossible_zone_hors_fuseau */
      case 149:
         PU_PUSHNAME (ctxt_p, "u.cr_mission_impossible_zone_hors_fuseau");

         stat = asn1PD_CR_MissionImpossibleZoneHorsFuseau (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_rapport_de_force_defavorable */
      case 150:
         PU_PUSHNAME (ctxt_p, "u.cr_rapport_de_force_defavorable");

         stat = asn1PD_CR_RapportDeForceDefavorable (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_terrain_difficile */
      case 151:
         PU_PUSHNAME (ctxt_p, "u.cr_terrain_difficile");

         stat = asn1PD_CR_TerrainDifficile (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_plus_de_carburant */
      case 152:
         PU_PUSHNAME (ctxt_p, "u.cr_plus_de_carburant");

         stat = asn1PD_CR_PlusDeCarburant (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_dispositif_disperse */
      case 153:
         PU_PUSHNAME (ctxt_p, "u.cr_dispositif_disperse");

         stat = asn1PD_CR_DispositifDisperse (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_pion_neutralise */
      case 154:
         PU_PUSHNAME (ctxt_p, "u.cr_pion_neutralise");

         stat = asn1PD_CR_PionNeutralise (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_silence_radio */
      case 155:
         PU_PUSHNAME (ctxt_p, "u.cr_silence_radio");

         stat = asn1PD_CR_SilenceRadio (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_restreint */
      case 156:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_restreint");

         stat = asn1PD_CR_TirRestreint (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_interdit */
      case 157:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_interdit");

         stat = asn1PD_CR_TirInterdit (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_tir_libre */
      case 158:
         PU_PUSHNAME (ctxt_p, "u.cr_tir_libre");

         stat = asn1PD_CR_TirLibre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace */
      case 159:
         PU_PUSHNAME (ctxt_p, "u.cr_trace");

         stat = asn1PD_CR_Trace (ctxt_p, &pvalue->u.cr_trace);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* cr_trace_id */
      case 160:
         PU_PUSHNAME (ctxt_p, "u.cr_trace_id");

         stat = asn1PD_CR_TraceID (ctxt_p, &pvalue->u.cr_trace_id);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgCR_cr: end\n");

   return (stat);
}

int ASN1C_MsgCR_cr::Decode ()
{
   return asn1PD_MsgCR_cr (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgCR                                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgCR::ASN1C_MsgCR (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgCR& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgCR (ASN1CTXT* ctxt_p, ASN1T_MsgCR* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgCR: start\n");

   /* encode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PE_OID (ctxt_p, pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_cr */

   PU_PUSHNAME (ctxt_p, "type_cr");

   stat = asn1PE_EnumTypeCR (ctxt_p, pvalue->type_cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cr */

   PU_PUSHNAME (ctxt_p, "cr");

   stat = asn1PE_MsgCR_cr (ctxt_p, &pvalue->cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgCR: end\n");
   return (stat);
}

int ASN1C_MsgCR::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgCR (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgCR (ASN1CTXT* ctxt_p, ASN1T_MsgCR* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgCR: start\n");

   /* decode unit_id */

   PU_PUSHNAME (ctxt_p, "unit_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->unit_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_cr */

   PU_PUSHNAME (ctxt_p, "type_cr");

   stat = asn1PD_EnumTypeCR (ctxt_p, &pvalue->type_cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cr */

   PU_PUSHNAME (ctxt_p, "cr");

   stat = asn1PD_MsgCR_cr (ctxt_p, &pvalue->cr);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgCR: end\n");

   return (stat);
}

int ASN1C_MsgCR::Decode ()
{
   return asn1PD_MsgCR (mpContext->GetPtr(), &msgData);
}


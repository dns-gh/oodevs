/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 17-Aug-2005.
 */
#include "ScipioPionMission_Misc.h"

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_Heliporter                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_Heliporter::ASN1C_Mission_Pion_Test_Heliporter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_Heliporter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_Heliporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Heliporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_Heliporter: start\n");

   /* encode agents */

   PU_PUSHNAME (ctxt_p, "agents");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->agents);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_Heliporter: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_Heliporter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_Heliporter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_Heliporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Heliporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_Heliporter: start\n");

   /* decode agents */

   PU_PUSHNAME (ctxt_p, "agents");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->agents);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_Heliporter: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_Heliporter::Decode ()
{
   return asn1PD_Mission_Pion_Test_Heliporter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_MoveTo_type_itineraire                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_MoveTo_type_itineraire::ASN1C_Mission_Pion_Test_MoveTo_type_itineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_MoveTo_type_itineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_MoveTo_type_itineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_MoveTo_type_itineraire value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_Test_MoveTo_type_itineraire: start\n");

   switch (value) {
      case Mission_Pion_Test_MoveTo_type_itineraire::movement: ui = 0; break;
      case Mission_Pion_Test_MoveTo_type_itineraire::recon: ui = 1; break;
      case Mission_Pion_Test_MoveTo_type_itineraire::infiltration: ui = 2; break;
      case Mission_Pion_Test_MoveTo_type_itineraire::assault: ui = 3; break;
      case Mission_Pion_Test_MoveTo_type_itineraire::retreat: ui = 4; break;
      case Mission_Pion_Test_MoveTo_type_itineraire::backup: ui = 5; break;
      case Mission_Pion_Test_MoveTo_type_itineraire::mine_clearance: ui = 6; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_Test_MoveTo_type_itineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_MoveTo_type_itineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_MoveTo_type_itineraire (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_MoveTo_type_itineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_MoveTo_type_itineraire* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_Test_MoveTo_type_itineraire: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::movement; break;
      case 1: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::recon; break;
      case 2: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::infiltration; break;
      case 3: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::assault; break;
      case 4: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::retreat; break;
      case 5: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::backup; break;
      case 6: *pvalue = Mission_Pion_Test_MoveTo_type_itineraire::mine_clearance; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_Test_MoveTo_type_itineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_MoveTo_type_itineraire::Decode ()
{
   return asn1PD_Mission_Pion_Test_MoveTo_type_itineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_MoveTo_verrouillage_vision              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_MoveTo_verrouillage_vision::ASN1C_Mission_Pion_Test_MoveTo_verrouillage_vision (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_MoveTo_verrouillage_vision& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_MoveTo_verrouillage_vision (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_MoveTo_verrouillage_vision value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_Test_MoveTo_verrouillage_vision: start\n");

   switch (value) {
      case Mission_Pion_Test_MoveTo_verrouillage_vision::rien: ui = 0; break;
      case Mission_Pion_Test_MoveTo_verrouillage_vision::point: ui = 1; break;
      case Mission_Pion_Test_MoveTo_verrouillage_vision::direction: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_Test_MoveTo_verrouillage_vision: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_MoveTo_verrouillage_vision::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_MoveTo_verrouillage_vision (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_MoveTo_verrouillage_vision (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_MoveTo_verrouillage_vision* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_Test_MoveTo_verrouillage_vision: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_Test_MoveTo_verrouillage_vision::rien; break;
      case 1: *pvalue = Mission_Pion_Test_MoveTo_verrouillage_vision::point; break;
      case 2: *pvalue = Mission_Pion_Test_MoveTo_verrouillage_vision::direction; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_Test_MoveTo_verrouillage_vision: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_MoveTo_verrouillage_vision::Decode ()
{
   return asn1PD_Mission_Pion_Test_MoveTo_verrouillage_vision (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_MoveTo                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_MoveTo::ASN1C_Mission_Pion_Test_MoveTo (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_MoveTo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_MoveTo (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_MoveTo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_MoveTo: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_itineraire */

   PU_PUSHNAME (ctxt_p, "type_itineraire");

   stat = asn1PE_Mission_Pion_Test_MoveTo_type_itineraire (ctxt_p, pvalue->type_itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode debarque */

   PU_PUSHNAME (ctxt_p, "debarque");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->debarque);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode verrouillage_vision */

   PU_PUSHNAME (ctxt_p, "verrouillage_vision");

   stat = asn1PE_Mission_Pion_Test_MoveTo_verrouillage_vision (ctxt_p, pvalue->verrouillage_vision);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode vision_point */

   PU_PUSHNAME (ctxt_p, "vision_point");

   stat = asn1PE_Point (ctxt_p, &pvalue->vision_point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode vision_direction */

   PU_PUSHNAME (ctxt_p, "vision_direction");

   stat = asn1PE_Direction (ctxt_p, pvalue->vision_direction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_MoveTo: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_MoveTo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_MoveTo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_MoveTo (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_MoveTo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_MoveTo: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_itineraire */

   PU_PUSHNAME (ctxt_p, "type_itineraire");

   stat = asn1PD_Mission_Pion_Test_MoveTo_type_itineraire (ctxt_p, &pvalue->type_itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode debarque */

   PU_PUSHNAME (ctxt_p, "debarque");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->debarque);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode verrouillage_vision */

   PU_PUSHNAME (ctxt_p, "verrouillage_vision");

   stat = asn1PD_Mission_Pion_Test_MoveTo_verrouillage_vision (ctxt_p, &pvalue->verrouillage_vision);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode vision_point */

   PU_PUSHNAME (ctxt_p, "vision_point");

   stat = asn1PD_Point (ctxt_p, &pvalue->vision_point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode vision_direction */

   PU_PUSHNAME (ctxt_p, "vision_direction");

   stat = asn1PD_Direction (ctxt_p, &pvalue->vision_direction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_MoveTo: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_MoveTo::Decode ()
{
   return asn1PD_Mission_Pion_Test_MoveTo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_CreateObject                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_CreateObject::ASN1C_Mission_Pion_Test_CreateObject (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_CreateObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_CreateObject (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_CreateObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_CreateObject: start\n");

   /* encode forme */

   PU_PUSHNAME (ctxt_p, "forme");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->forme);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumObjectType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode param */

   PU_PUSHNAME (ctxt_p, "param");

   stat = pe_UnconsInteger (ctxt_p, pvalue->param);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_CreateObject: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_CreateObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_CreateObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_CreateObject (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_CreateObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_CreateObject: start\n");

   /* decode forme */

   PU_PUSHNAME (ctxt_p, "forme");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->forme);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumObjectType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode param */

   PU_PUSHNAME (ctxt_p, "param");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->param);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_CreateObject: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_CreateObject::Decode ()
{
   return asn1PD_Mission_Pion_Test_CreateObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_DestroyObject                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_DestroyObject::ASN1C_Mission_Pion_Test_DestroyObject (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_DestroyObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_DestroyObject (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_DestroyObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_DestroyObject: start\n");

   /* encode objet */

   PU_PUSHNAME (ctxt_p, "objet");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_DestroyObject: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_DestroyObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_DestroyObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_DestroyObject (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_DestroyObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_DestroyObject: start\n");

   /* decode objet */

   PU_PUSHNAME (ctxt_p, "objet");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_DestroyObject: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_DestroyObject::Decode ()
{
   return asn1PD_Mission_Pion_Test_DestroyObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_CreateBypass                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_CreateBypass::ASN1C_Mission_Pion_Test_CreateBypass (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_CreateBypass& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_CreateBypass (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_CreateBypass* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_CreateBypass: start\n");

   /* encode objet */

   PU_PUSHNAME (ctxt_p, "objet");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_CreateBypass: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_CreateBypass::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_CreateBypass (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_CreateBypass (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_CreateBypass* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_CreateBypass: start\n");

   /* decode objet */

   PU_PUSHNAME (ctxt_p, "objet");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_CreateBypass: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_CreateBypass::Decode ()
{
   return asn1PD_Mission_Pion_Test_CreateBypass (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_Fire_munitions                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_Fire_munitions::ASN1C_Mission_Pion_Test_Fire_munitions (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_Fire_munitions& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_Fire_munitions (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Fire_munitions value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_Test_Fire_munitions: start\n");

   switch (value) {
      case Mission_Pion_Test_Fire_munitions::mun_obus_explosif: ui = 0; break;
      case Mission_Pion_Test_Fire_munitions::mun_obus_grenade: ui = 1; break;
      case Mission_Pion_Test_Fire_munitions::mun_obus_aced: ui = 2; break;
      case Mission_Pion_Test_Fire_munitions::mun_obus_fumigene: ui = 3; break;
      case Mission_Pion_Test_Fire_munitions::mun_obus_eclairant: ui = 4; break;
      case Mission_Pion_Test_Fire_munitions::mun_obus_mine: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_Test_Fire_munitions: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_Fire_munitions::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_Fire_munitions (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_Fire_munitions (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Fire_munitions* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_Test_Fire_munitions: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_Test_Fire_munitions::mun_obus_explosif; break;
      case 1: *pvalue = Mission_Pion_Test_Fire_munitions::mun_obus_grenade; break;
      case 2: *pvalue = Mission_Pion_Test_Fire_munitions::mun_obus_aced; break;
      case 3: *pvalue = Mission_Pion_Test_Fire_munitions::mun_obus_fumigene; break;
      case 4: *pvalue = Mission_Pion_Test_Fire_munitions::mun_obus_eclairant; break;
      case 5: *pvalue = Mission_Pion_Test_Fire_munitions::mun_obus_mine; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_Test_Fire_munitions: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_Fire_munitions::Decode ()
{
   return asn1PD_Mission_Pion_Test_Fire_munitions (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_Fire                                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_Fire::ASN1C_Mission_Pion_Test_Fire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_Fire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_Fire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Fire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_Fire: start\n");

   /* encode point */

   PU_PUSHNAME (ctxt_p, "point");

   stat = asn1PE_Point (ctxt_p, &pvalue->point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tir_indirect */

   PU_PUSHNAME (ctxt_p, "tir_indirect");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->tir_indirect);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode munitions */

   PU_PUSHNAME (ctxt_p, "munitions");

   stat = asn1PE_Mission_Pion_Test_Fire_munitions (ctxt_p, pvalue->munitions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_obus */

   PU_PUSHNAME (ctxt_p, "nb_obus");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_obus);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode targets */

   PU_PUSHNAME (ctxt_p, "targets");

   stat = asn1PE_ListKnowledgeAgent (ctxt_p, &pvalue->targets);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_Fire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_Fire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_Fire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_Fire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Fire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_Fire: start\n");

   /* decode point */

   PU_PUSHNAME (ctxt_p, "point");

   stat = asn1PD_Point (ctxt_p, &pvalue->point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tir_indirect */

   PU_PUSHNAME (ctxt_p, "tir_indirect");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->tir_indirect);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode munitions */

   PU_PUSHNAME (ctxt_p, "munitions");

   stat = asn1PD_Mission_Pion_Test_Fire_munitions (ctxt_p, &pvalue->munitions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_obus */

   PU_PUSHNAME (ctxt_p, "nb_obus");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_obus);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode targets */

   PU_PUSHNAME (ctxt_p, "targets");

   stat = asn1PD_ListKnowledgeAgent (ctxt_p, &pvalue->targets);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_Fire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_Fire::Decode ()
{
   return asn1PD_Mission_Pion_Test_Fire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_ChangePosture_posture                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_ChangePosture_posture::ASN1C_Mission_Pion_Test_ChangePosture_posture (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_ChangePosture_posture& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_ChangePosture_posture (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_ChangePosture_posture value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_Test_ChangePosture_posture: start\n");

   switch (value) {
      case Mission_Pion_Test_ChangePosture_posture::mouvement: ui = 0; break;
      case Mission_Pion_Test_ChangePosture_posture::arret: ui = 1; break;
      case Mission_Pion_Test_ChangePosture_posture::poste_reflexe: ui = 2; break;
      case Mission_Pion_Test_ChangePosture_posture::poste: ui = 3; break;
      case Mission_Pion_Test_ChangePosture_posture::poste_amenage: ui = 4; break;
      case Mission_Pion_Test_ChangePosture_posture::poste_prepare_genie: ui = 5; break;
      case Mission_Pion_Test_ChangePosture_posture::automatique: ui = 6; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_Test_ChangePosture_posture: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_ChangePosture_posture::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_ChangePosture_posture (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_ChangePosture_posture (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_ChangePosture_posture* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_Test_ChangePosture_posture: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_Test_ChangePosture_posture::mouvement; break;
      case 1: *pvalue = Mission_Pion_Test_ChangePosture_posture::arret; break;
      case 2: *pvalue = Mission_Pion_Test_ChangePosture_posture::poste_reflexe; break;
      case 3: *pvalue = Mission_Pion_Test_ChangePosture_posture::poste; break;
      case 4: *pvalue = Mission_Pion_Test_ChangePosture_posture::poste_amenage; break;
      case 5: *pvalue = Mission_Pion_Test_ChangePosture_posture::poste_prepare_genie; break;
      case 6: *pvalue = Mission_Pion_Test_ChangePosture_posture::automatique; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_Test_ChangePosture_posture: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_ChangePosture_posture::Decode ()
{
   return asn1PD_Mission_Pion_Test_ChangePosture_posture (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_ChangePosture                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_ChangePosture::ASN1C_Mission_Pion_Test_ChangePosture (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_ChangePosture& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_ChangePosture (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_ChangePosture* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_ChangePosture: start\n");

   /* encode posture */

   PU_PUSHNAME (ctxt_p, "posture");

   stat = asn1PE_Mission_Pion_Test_ChangePosture_posture (ctxt_p, pvalue->posture);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_ChangePosture: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_ChangePosture::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_ChangePosture (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_ChangePosture (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_ChangePosture* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_ChangePosture: start\n");

   /* decode posture */

   PU_PUSHNAME (ctxt_p, "posture");

   stat = asn1PD_Mission_Pion_Test_ChangePosture_posture (ctxt_p, &pvalue->posture);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_ChangePosture: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_ChangePosture::Decode ()
{
   return asn1PD_Mission_Pion_Test_ChangePosture (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_PathFind                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_PathFind::ASN1C_Mission_Pion_Test_PathFind (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_PathFind& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_PathFind (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_PathFind* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_PathFind: start\n");

   /* encode nb_pathfind */

   PU_PUSHNAME (ctxt_p, "nb_pathfind");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_pathfind);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_PathFind: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_PathFind::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_PathFind (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_PathFind (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_PathFind* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_PathFind: start\n");

   /* decode nb_pathfind */

   PU_PUSHNAME (ctxt_p, "nb_pathfind");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_pathfind);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_PathFind: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_PathFind::Decode ()
{
   return asn1PD_Mission_Pion_Test_PathFind (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_FindPosition_type_objectif              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_FindPosition_type_objectif::ASN1C_Mission_Pion_Test_FindPosition_type_objectif (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_FindPosition_type_objectif& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_FindPosition_type_objectif (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_FindPosition_type_objectif value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_Test_FindPosition_type_objectif: start\n");

   switch (value) {
      case Mission_Pion_Test_FindPosition_type_objectif::agent: ui = 0; break;
      case Mission_Pion_Test_FindPosition_type_objectif::point: ui = 1; break;
      case Mission_Pion_Test_FindPosition_type_objectif::rep_point: ui = 2; break;
      case Mission_Pion_Test_FindPosition_type_objectif::objet: ui = 3; break;
      case Mission_Pion_Test_FindPosition_type_objectif::zone: ui = 4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_Test_FindPosition_type_objectif: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_FindPosition_type_objectif::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_FindPosition_type_objectif (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_FindPosition_type_objectif (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_FindPosition_type_objectif* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_Test_FindPosition_type_objectif: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_Test_FindPosition_type_objectif::agent; break;
      case 1: *pvalue = Mission_Pion_Test_FindPosition_type_objectif::point; break;
      case 2: *pvalue = Mission_Pion_Test_FindPosition_type_objectif::rep_point; break;
      case 3: *pvalue = Mission_Pion_Test_FindPosition_type_objectif::objet; break;
      case 4: *pvalue = Mission_Pion_Test_FindPosition_type_objectif::zone; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_Test_FindPosition_type_objectif: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_FindPosition_type_objectif::Decode ()
{
   return asn1PD_Mission_Pion_Test_FindPosition_type_objectif (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_FindPosition_type_operation             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_FindPosition_type_operation::ASN1C_Mission_Pion_Test_FindPosition_type_operation (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_FindPosition_type_operation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_FindPosition_type_operation (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_FindPosition_type_operation value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_Test_FindPosition_type_operation: start\n");

   switch (value) {
      case Mission_Pion_Test_FindPosition_type_operation::see: ui = 0; break;
      case Mission_Pion_Test_FindPosition_type_operation::shoot: ui = 1; break;
      case Mission_Pion_Test_FindPosition_type_operation::add: ui = 2; break;
      case Mission_Pion_Test_FindPosition_type_operation::rem: ui = 3; break;
      case Mission_Pion_Test_FindPosition_type_operation::safety: ui = 4; break;
      case Mission_Pion_Test_FindPosition_type_operation::border: ui = 5; break;
      case Mission_Pion_Test_FindPosition_type_operation::appui: ui = 6; break;
      case Mission_Pion_Test_FindPosition_type_operation::support: ui = 7; break;
      case Mission_Pion_Test_FindPosition_type_operation::ambush: ui = 8; break;
      case Mission_Pion_Test_FindPosition_type_operation::random: ui = 9; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_Test_FindPosition_type_operation: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_FindPosition_type_operation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_FindPosition_type_operation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_FindPosition_type_operation (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_FindPosition_type_operation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_Test_FindPosition_type_operation: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_Test_FindPosition_type_operation::see; break;
      case 1: *pvalue = Mission_Pion_Test_FindPosition_type_operation::shoot; break;
      case 2: *pvalue = Mission_Pion_Test_FindPosition_type_operation::add; break;
      case 3: *pvalue = Mission_Pion_Test_FindPosition_type_operation::rem; break;
      case 4: *pvalue = Mission_Pion_Test_FindPosition_type_operation::safety; break;
      case 5: *pvalue = Mission_Pion_Test_FindPosition_type_operation::border; break;
      case 6: *pvalue = Mission_Pion_Test_FindPosition_type_operation::appui; break;
      case 7: *pvalue = Mission_Pion_Test_FindPosition_type_operation::support; break;
      case 8: *pvalue = Mission_Pion_Test_FindPosition_type_operation::ambush; break;
      case 9: *pvalue = Mission_Pion_Test_FindPosition_type_operation::random; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_Test_FindPosition_type_operation: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_FindPosition_type_operation::Decode ()
{
   return asn1PD_Mission_Pion_Test_FindPosition_type_operation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_FindPosition                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_FindPosition::ASN1C_Mission_Pion_Test_FindPosition (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_FindPosition& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_FindPosition (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_FindPosition* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_FindPosition: start\n");

   /* encode point */

   PU_PUSHNAME (ctxt_p, "point");

   stat = asn1PE_Point (ctxt_p, &pvalue->point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode retreat */

   PU_PUSHNAME (ctxt_p, "retreat");

   stat = asn1PE_Point (ctxt_p, &pvalue->retreat);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unite */

   PU_PUSHNAME (ctxt_p, "unite");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_objectif */

   PU_PUSHNAME (ctxt_p, "type_objectif");

   stat = asn1PE_Mission_Pion_Test_FindPosition_type_objectif (ctxt_p, pvalue->type_objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_operation */

   PU_PUSHNAME (ctxt_p, "type_operation");

   stat = asn1PE_Mission_Pion_Test_FindPosition_type_operation (ctxt_p, pvalue->type_operation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode avoid */

   PU_PUSHNAME (ctxt_p, "avoid");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->avoid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode reco */

   PU_PUSHNAME (ctxt_p, "reco");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->reco);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode no_obstacle_avoid */

   PU_PUSHNAME (ctxt_p, "no_obstacle_avoid");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->no_obstacle_avoid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode debordement */

   PU_PUSHNAME (ctxt_p, "debordement");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->debordement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode dec_points */

   PU_PUSHNAME (ctxt_p, "dec_points");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->dec_points);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode niveau_identification */

   PU_PUSHNAME (ctxt_p, "niveau_identification");

   stat = asn1PE_EnumUnitIdentificationLevel (ctxt_p, pvalue->niveau_identification);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode dgo */

   PU_PUSHNAME (ctxt_p, "dgo");

   stat = asn1PE_Direction (ctxt_p, pvalue->dgo);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_FindPosition: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_FindPosition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_FindPosition (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_FindPosition (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_FindPosition* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_FindPosition: start\n");

   /* decode point */

   PU_PUSHNAME (ctxt_p, "point");

   stat = asn1PD_Point (ctxt_p, &pvalue->point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode retreat */

   PU_PUSHNAME (ctxt_p, "retreat");

   stat = asn1PD_Point (ctxt_p, &pvalue->retreat);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unite */

   PU_PUSHNAME (ctxt_p, "unite");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_objectif */

   PU_PUSHNAME (ctxt_p, "type_objectif");

   stat = asn1PD_Mission_Pion_Test_FindPosition_type_objectif (ctxt_p, &pvalue->type_objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_operation */

   PU_PUSHNAME (ctxt_p, "type_operation");

   stat = asn1PD_Mission_Pion_Test_FindPosition_type_operation (ctxt_p, &pvalue->type_operation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode avoid */

   PU_PUSHNAME (ctxt_p, "avoid");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->avoid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode reco */

   PU_PUSHNAME (ctxt_p, "reco");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->reco);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode no_obstacle_avoid */

   PU_PUSHNAME (ctxt_p, "no_obstacle_avoid");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->no_obstacle_avoid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode debordement */

   PU_PUSHNAME (ctxt_p, "debordement");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->debordement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode dec_points */

   PU_PUSHNAME (ctxt_p, "dec_points");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->dec_points);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode niveau_identification */

   PU_PUSHNAME (ctxt_p, "niveau_identification");

   stat = asn1PD_EnumUnitIdentificationLevel (ctxt_p, &pvalue->niveau_identification);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode dgo */

   PU_PUSHNAME (ctxt_p, "dgo");

   stat = asn1PD_Direction (ctxt_p, &pvalue->dgo);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_FindPosition: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_FindPosition::Decode ()
{
   return asn1PD_Mission_Pion_Test_FindPosition (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Test_Reinforce                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Test_Reinforce::ASN1C_Mission_Pion_Test_Reinforce (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Test_Reinforce& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Test_Reinforce (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Reinforce* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Test_Reinforce: start\n");

   /* encode unite */

   PU_PUSHNAME (ctxt_p, "unite");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode renforce */

   PU_PUSHNAME (ctxt_p, "renforce");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Test_Reinforce: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Test_Reinforce::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Test_Reinforce (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Test_Reinforce (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Test_Reinforce* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Test_Reinforce: start\n");

   /* decode unite */

   PU_PUSHNAME (ctxt_p, "unite");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode renforce */

   PU_PUSHNAME (ctxt_p, "renforce");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->renforce);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Test_Reinforce: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Test_Reinforce::Decode ()
{
   return asn1PD_Mission_Pion_Test_Reinforce (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_PlastronEnnemi_type                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_PlastronEnnemi_type::ASN1C_Mission_Pion_PlastronEnnemi_type (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_PlastronEnnemi_type& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_PlastronEnnemi_type (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_PlastronEnnemi_type value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_PlastronEnnemi_type: start\n");

   switch (value) {
      case Mission_Pion_PlastronEnnemi_type::defense_statique: ui = 0; break;
      case Mission_Pion_PlastronEnnemi_type::defense_dynamique: ui = 1; break;
      case Mission_Pion_PlastronEnnemi_type::esquive: ui = 2; break;
      case Mission_Pion_PlastronEnnemi_type::reco_offensive: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_PlastronEnnemi_type: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_PlastronEnnemi_type::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_PlastronEnnemi_type (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_PlastronEnnemi_type (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_PlastronEnnemi_type* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_PlastronEnnemi_type: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_PlastronEnnemi_type::defense_statique; break;
      case 1: *pvalue = Mission_Pion_PlastronEnnemi_type::defense_dynamique; break;
      case 2: *pvalue = Mission_Pion_PlastronEnnemi_type::esquive; break;
      case 3: *pvalue = Mission_Pion_PlastronEnnemi_type::reco_offensive; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_PlastronEnnemi_type: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_PlastronEnnemi_type::Decode ()
{
   return asn1PD_Mission_Pion_PlastronEnnemi_type (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_PlastronEnnemi                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_PlastronEnnemi::ASN1C_Mission_Pion_PlastronEnnemi (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_PlastronEnnemi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_PlastronEnnemi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_PlastronEnnemi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_PlastronEnnemi: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_mission */

   PU_PUSHNAME (ctxt_p, "point_mission");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_Mission_Pion_PlastronEnnemi_type (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_PlastronEnnemi: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_PlastronEnnemi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_PlastronEnnemi (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_PlastronEnnemi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_PlastronEnnemi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_PlastronEnnemi: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_mission */

   PU_PUSHNAME (ctxt_p, "point_mission");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_Mission_Pion_PlastronEnnemi_type (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_PlastronEnnemi: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_PlastronEnnemi::Decode ()
{
   return asn1PD_Mission_Pion_PlastronEnnemi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_FaireMouvement                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_FaireMouvement::ASN1C_Mission_Pion_FaireMouvement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_FaireMouvement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_FaireMouvement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_FaireMouvement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_FaireMouvement: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_FaireMouvement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_FaireMouvement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_FaireMouvement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_FaireMouvement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_FaireMouvement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_FaireMouvement: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_FaireMouvement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_FaireMouvement::Decode ()
{
   return asn1PD_Mission_Pion_FaireMouvement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Suivre                                       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Suivre::ASN1C_Mission_Pion_Suivre (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Suivre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Suivre (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Suivre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Suivre: start\n");

   /* encode unite_a_suivre */

   PU_PUSHNAME (ctxt_p, "unite_a_suivre");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_suivre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Suivre: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Suivre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Suivre (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Suivre (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Suivre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Suivre: start\n");

   /* decode unite_a_suivre */

   PU_PUSHNAME (ctxt_p, "unite_a_suivre");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_suivre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Suivre: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Suivre::Decode ()
{
   return asn1PD_Mission_Pion_Suivre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_SeFaireDecontaminer                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_SeFaireDecontaminer::ASN1C_Mission_Pion_SeFaireDecontaminer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_SeFaireDecontaminer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_SeFaireDecontaminer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_SeFaireDecontaminer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_SeFaireDecontaminer: start\n");

   /* encode point_arrivee */

   PU_PUSHNAME (ctxt_p, "point_arrivee");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_arrivee);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode site_decontamination */

   PU_PUSHNAME (ctxt_p, "site_decontamination");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_decontamination);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_SeFaireDecontaminer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_SeFaireDecontaminer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_SeFaireDecontaminer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_SeFaireDecontaminer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_SeFaireDecontaminer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_SeFaireDecontaminer: start\n");

   /* decode point_arrivee */

   PU_PUSHNAME (ctxt_p, "point_arrivee");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_arrivee);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode site_decontamination */

   PU_PUSHNAME (ctxt_p, "site_decontamination");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_decontamination);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_SeFaireDecontaminer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_SeFaireDecontaminer::Decode ()
{
   return asn1PD_Mission_Pion_SeFaireDecontaminer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Franchir                                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Franchir::ASN1C_Mission_Pion_Franchir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Franchir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Franchir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Franchir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Franchir: start\n");

   /* encode pont_flottant */

   PU_PUSHNAME (ctxt_p, "pont_flottant");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->pont_flottant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_arrivee */

   PU_PUSHNAME (ctxt_p, "point_arrivee");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_arrivee);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Franchir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Franchir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Franchir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Franchir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Franchir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Franchir: start\n");

   /* decode pont_flottant */

   PU_PUSHNAME (ctxt_p, "pont_flottant");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->pont_flottant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_arrivee */

   PU_PUSHNAME (ctxt_p, "point_arrivee");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_arrivee);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Franchir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Franchir::Decode ()
{
   return asn1PD_Mission_Pion_Franchir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Decrocher                                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Decrocher::ASN1C_Mission_Pion_Decrocher (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Decrocher& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Decrocher (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Decrocher* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Decrocher: start\n");

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Decrocher: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Decrocher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Decrocher (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Decrocher (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Decrocher* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Decrocher: start\n");

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Decrocher: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Decrocher::Decode ()
{
   return asn1PD_Mission_Pion_Decrocher (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Stationner                                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Stationner::ASN1C_Mission_Pion_Stationner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Stationner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Stationner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Stationner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Stationner: start\n");

   /* encode point_attente */

   PU_PUSHNAME (ctxt_p, "point_attente");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_attente);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Stationner: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Stationner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Stationner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Stationner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Stationner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Stationner: start\n");

   /* decode point_attente */

   PU_PUSHNAME (ctxt_p, "point_attente");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_attente);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Stationner: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Stationner::Decode ()
{
   return asn1PD_Mission_Pion_Stationner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_SeFaireTransporter                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_SeFaireTransporter::ASN1C_Mission_Pion_SeFaireTransporter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_SeFaireTransporter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_SeFaireTransporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_SeFaireTransporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_SeFaireTransporter: start\n");

   /* encode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_SeFaireTransporter: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_SeFaireTransporter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_SeFaireTransporter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_SeFaireTransporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_SeFaireTransporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_SeFaireTransporter: start\n");

   /* decode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_SeFaireTransporter: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_SeFaireTransporter::Decode ()
{
   return asn1PD_Mission_Pion_SeFaireTransporter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_Generique                                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_Generique::ASN1C_Mission_Pion_Generique (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_Generique& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_Generique (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Generique* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_Generique: start\n");

   /* encode zones */

   PU_PUSHNAME (ctxt_p, "zones");

   stat = asn1PE_ListPolygon (ctxt_p, &pvalue->zones);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode points */

   PU_PUSHNAME (ctxt_p, "points");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->points);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PE_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unites */

   PU_PUSHNAME (ctxt_p, "unites");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automates */

   PU_PUSHNAME (ctxt_p, "automates");

   stat = asn1PE_ListAutomate (ctxt_p, &pvalue->automates);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode connaissances_agents */

   PU_PUSHNAME (ctxt_p, "connaissances_agents");

   stat = asn1PE_ListKnowledgeAgent (ctxt_p, &pvalue->connaissances_agents);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode connaissances_objets */

   PU_PUSHNAME (ctxt_p, "connaissances_objets");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->connaissances_objets);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_Generique: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_Generique::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_Generique (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_Generique (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_Generique* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_Generique: start\n");

   /* decode zones */

   PU_PUSHNAME (ctxt_p, "zones");

   stat = asn1PD_ListPolygon (ctxt_p, &pvalue->zones);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode points */

   PU_PUSHNAME (ctxt_p, "points");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->points);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PD_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unites */

   PU_PUSHNAME (ctxt_p, "unites");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automates */

   PU_PUSHNAME (ctxt_p, "automates");

   stat = asn1PD_ListAutomate (ctxt_p, &pvalue->automates);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode connaissances_agents */

   PU_PUSHNAME (ctxt_p, "connaissances_agents");

   stat = asn1PD_ListKnowledgeAgent (ctxt_p, &pvalue->connaissances_agents);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode connaissances_objets */

   PU_PUSHNAME (ctxt_p, "connaissances_objets");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->connaissances_objets);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_Generique: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_Generique::Decode ()
{
   return asn1PD_Mission_Pion_Generique (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_MILICE_Provoquer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_MILICE_Provoquer::ASN1C_Mission_Pion_MILICE_Provoquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_MILICE_Provoquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_MILICE_Provoquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_MILICE_Provoquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_MILICE_Provoquer: start\n");

   /* encode unite_a_provoquer */

   PU_PUSHNAME (ctxt_p, "unite_a_provoquer");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->unite_a_provoquer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_MILICE_Provoquer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_MILICE_Provoquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_MILICE_Provoquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_MILICE_Provoquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_MILICE_Provoquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_MILICE_Provoquer: start\n");

   /* decode unite_a_provoquer */

   PU_PUSHNAME (ctxt_p, "unite_a_provoquer");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->unite_a_provoquer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_MILICE_Provoquer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_MILICE_Provoquer::Decode ()
{
   return asn1PD_Mission_Pion_MILICE_Provoquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_MILICE_PrendreEtTenir                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_MILICE_PrendreEtTenir::ASN1C_Mission_Pion_MILICE_PrendreEtTenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_MILICE_PrendreEtTenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_MILICE_PrendreEtTenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_MILICE_PrendreEtTenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_MILICE_PrendreEtTenir: start\n");

   /* encode point_a_prendre */

   PU_PUSHNAME (ctxt_p, "point_a_prendre");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_a_prendre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_MILICE_PrendreEtTenir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_MILICE_PrendreEtTenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_MILICE_PrendreEtTenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_MILICE_PrendreEtTenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_MILICE_PrendreEtTenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_MILICE_PrendreEtTenir: start\n");

   /* decode point_a_prendre */

   PU_PUSHNAME (ctxt_p, "point_a_prendre");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_a_prendre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_MILICE_PrendreEtTenir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_MILICE_PrendreEtTenir::Decode ()
{
   return asn1PD_Mission_Pion_MILICE_PrendreEtTenir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_MILICE_DetruireEmbuscade                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_MILICE_DetruireEmbuscade::ASN1C_Mission_Pion_MILICE_DetruireEmbuscade (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_MILICE_DetruireEmbuscade& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_MILICE_DetruireEmbuscade (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_MILICE_DetruireEmbuscade* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_MILICE_DetruireEmbuscade: start\n");

   /* encode position_embuscade */

   PU_PUSHNAME (ctxt_p, "position_embuscade");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_embuscade);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode position_regroupement */

   PU_PUSHNAME (ctxt_p, "position_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nature_obstacle */

   PU_PUSHNAME (ctxt_p, "nature_obstacle");

   stat = asn1PE_EnumObjectType (ctxt_p, pvalue->nature_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_MILICE_DetruireEmbuscade: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_MILICE_DetruireEmbuscade::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_MILICE_DetruireEmbuscade (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_MILICE_DetruireEmbuscade (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_MILICE_DetruireEmbuscade* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_MILICE_DetruireEmbuscade: start\n");

   /* decode position_embuscade */

   PU_PUSHNAME (ctxt_p, "position_embuscade");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_embuscade);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode position_regroupement */

   PU_PUSHNAME (ctxt_p, "position_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nature_obstacle */

   PU_PUSHNAME (ctxt_p, "nature_obstacle");

   stat = asn1PD_EnumObjectType (ctxt_p, &pvalue->nature_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_MILICE_DetruireEmbuscade: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_MILICE_DetruireEmbuscade::Decode ()
{
   return asn1PD_Mission_Pion_MILICE_DetruireEmbuscade (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_JOINT_MARINE_Transporter                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_JOINT_MARINE_Transporter::ASN1C_Mission_Pion_JOINT_MARINE_Transporter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_JOINT_MARINE_Transporter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_JOINT_MARINE_Transporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_JOINT_MARINE_Transporter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_JOINT_MARINE_Transporter: start\n");

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->avec_materiel != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode unites_a_transporter */

   PU_PUSHNAME (ctxt_p, "unites_a_transporter");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_transporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode avec_materiel */

   if (pvalue->avec_materiel != FALSE) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Pion_JOINT_MARINE_Transporter: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_JOINT_MARINE_Transporter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_JOINT_MARINE_Transporter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_JOINT_MARINE_Transporter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_JOINT_MARINE_Transporter* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL avec_materielPresent;

   rtdiag ("asn1PD_Mission_Pion_JOINT_MARINE_Transporter: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "avec_materielPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else avec_materielPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode unites_a_transporter */

   PU_PUSHNAME (ctxt_p, "unites_a_transporter");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_transporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_debarquement */

   PU_PUSHNAME (ctxt_p, "point_debarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_embarquement */

   PU_PUSHNAME (ctxt_p, "point_embarquement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_embarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode avec_materiel */

   if (avec_materielPresent) {
      PU_PUSHNAME (ctxt_p, "avec_materiel");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->avec_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->avec_materiel = FALSE;
   }


   rtdiag ("asn1PD_Mission_Pion_JOINT_MARINE_Transporter: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_JOINT_MARINE_Transporter::Decode ()
{
   return asn1PD_Mission_Pion_JOINT_MARINE_Transporter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_JOINT_AIR_EffectuerRaid                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_JOINT_AIR_EffectuerRaid::ASN1C_Mission_Pion_JOINT_AIR_EffectuerRaid (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_JOINT_AIR_EffectuerRaid& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_JOINT_AIR_EffectuerRaid (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_JOINT_AIR_EffectuerRaid* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_JOINT_AIR_EffectuerRaid: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_JOINT_AIR_EffectuerRaid: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_JOINT_AIR_EffectuerRaid::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_JOINT_AIR_EffectuerRaid (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_JOINT_AIR_EffectuerRaid (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_JOINT_AIR_EffectuerRaid* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_JOINT_AIR_EffectuerRaid: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_JOINT_AIR_EffectuerRaid: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_JOINT_AIR_EffectuerRaid::Decode ()
{
   return asn1PD_Mission_Pion_JOINT_AIR_EffectuerRaid (mpContext->GetPtr(), &msgData);
}


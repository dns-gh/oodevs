/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 04-Oct-2006.
 */
#include "ScipioHierarchie.h"

/**************************************************************/
/*                                                            */
/*  EnumDiplomatie                                            */
/*                                                            */
/**************************************************************/

ASN1C_EnumDiplomatie::ASN1C_EnumDiplomatie (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumDiplomatie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumDiplomatie (ASN1CTXT* ctxt_p, ASN1T_EnumDiplomatie value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumDiplomatie: start\n");

   switch (value) {
      case EnumDiplomatie::inconnu: ui = 0; break;
      case EnumDiplomatie::ami: ui = 1; break;
      case EnumDiplomatie::ennemi: ui = 2; break;
      case EnumDiplomatie::neutre: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumDiplomatie: end\n");
   return (stat);
}

int ASN1C_EnumDiplomatie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumDiplomatie (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumDiplomatie (ASN1CTXT* ctxt_p, ASN1T_EnumDiplomatie* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumDiplomatie: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumDiplomatie::inconnu; break;
      case 1: *pvalue = EnumDiplomatie::ami; break;
      case 2: *pvalue = EnumDiplomatie::ennemi; break;
      case 3: *pvalue = EnumDiplomatie::neutre; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumDiplomatie: end\n");

   return (stat);
}

int ASN1C_EnumDiplomatie::Decode ()
{
   return asn1PD_EnumDiplomatie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeDiplomatie                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeDiplomatie::ASN1C_MsgChangeDiplomatie (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeDiplomatie& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeDiplomatie (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeDiplomatie: start\n");

   /* encode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PE_EnumDiplomatie (ctxt_p, pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeDiplomatie: end\n");
   return (stat);
}

int ASN1C_MsgChangeDiplomatie::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeDiplomatie (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeDiplomatie (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatie* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeDiplomatie: start\n");

   /* decode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PD_EnumDiplomatie (ctxt_p, &pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeDiplomatie: end\n");

   return (stat);
}

int ASN1C_MsgChangeDiplomatie::Decode ()
{
   return asn1PD_MsgChangeDiplomatie (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeDiplomatieErrorCode                             */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeDiplomatieErrorCode::ASN1C_EnumChangeDiplomatieErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeDiplomatieErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeDiplomatieErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeDiplomatieErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeDiplomatieErrorCode: start\n");

   switch (value) {
      case EnumChangeDiplomatieErrorCode::no_error: ui = 0; break;
      case EnumChangeDiplomatieErrorCode::error_invalid_camp: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeDiplomatieErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeDiplomatieErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeDiplomatieErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeDiplomatieErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeDiplomatieErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeDiplomatieErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeDiplomatieErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeDiplomatieErrorCode::error_invalid_camp; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeDiplomatieErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeDiplomatieErrorCode::Decode ()
{
   return asn1PD_EnumChangeDiplomatieErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeDiplomatieAck                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeDiplomatieAck::ASN1C_MsgChangeDiplomatieAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeDiplomatieAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeDiplomatieAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatieAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeDiplomatieAck: start\n");

   /* encode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PE_EnumDiplomatie (ctxt_p, pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeDiplomatieErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeDiplomatieAck: end\n");
   return (stat);
}

int ASN1C_MsgChangeDiplomatieAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeDiplomatieAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeDiplomatieAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomatieAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeDiplomatieAck: start\n");

   /* decode oid_camp1 */

   PU_PUSHNAME (ctxt_p, "oid_camp1");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp2 */

   PU_PUSHNAME (ctxt_p, "oid_camp2");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode diplomatie */

   PU_PUSHNAME (ctxt_p, "diplomatie");

   stat = asn1PD_EnumDiplomatie (ctxt_p, &pvalue->diplomatie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeDiplomatieErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeDiplomatieAck: end\n");

   return (stat);
}

int ASN1C_MsgChangeDiplomatieAck::Decode ()
{
   return asn1PD_MsgChangeDiplomatieAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeGroupeConnaissance                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeGroupeConnaissance::ASN1C_MsgChangeGroupeConnaissance (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeGroupeConnaissance& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeGroupeConnaissance (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeGroupeConnaissance: start\n");

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeGroupeConnaissance: end\n");
   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeGroupeConnaissance (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeGroupeConnaissance (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeGroupeConnaissance: start\n");

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeGroupeConnaissance: end\n");

   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissance::Decode ()
{
   return asn1PD_MsgChangeGroupeConnaissance (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeGroupeConnaissanceErrorCode                     */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeGroupeConnaissanceErrorCode::ASN1C_EnumChangeGroupeConnaissanceErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeGroupeConnaissanceErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeGroupeConnaissanceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeGroupeConnaissanceErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeGroupeConnaissanceErrorCode: start\n");

   switch (value) {
      case EnumChangeGroupeConnaissanceErrorCode::no_error: ui = 0; break;
      case EnumChangeGroupeConnaissanceErrorCode::error_invalid_automate: ui = 1; break;
      case EnumChangeGroupeConnaissanceErrorCode::error_invalid_camp: ui = 2; break;
      case EnumChangeGroupeConnaissanceErrorCode::error_invalid_groupe_connaissance: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeGroupeConnaissanceErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeGroupeConnaissanceErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeGroupeConnaissanceErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeGroupeConnaissanceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeGroupeConnaissanceErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeGroupeConnaissanceErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeGroupeConnaissanceErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeGroupeConnaissanceErrorCode::error_invalid_automate; break;
      case 2: *pvalue = EnumChangeGroupeConnaissanceErrorCode::error_invalid_camp; break;
      case 3: *pvalue = EnumChangeGroupeConnaissanceErrorCode::error_invalid_groupe_connaissance; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeGroupeConnaissanceErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeGroupeConnaissanceErrorCode::Decode ()
{
   return asn1PD_EnumChangeGroupeConnaissanceErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeGroupeConnaissanceAck                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeGroupeConnaissanceAck::ASN1C_MsgChangeGroupeConnaissanceAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeGroupeConnaissanceAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeGroupeConnaissanceAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissanceAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeGroupeConnaissanceAck: start\n");

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeGroupeConnaissanceErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeGroupeConnaissanceAck: end\n");
   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissanceAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeGroupeConnaissanceAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeGroupeConnaissanceAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissanceAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeGroupeConnaissanceAck: start\n");

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeGroupeConnaissanceErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeGroupeConnaissanceAck: end\n");

   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissanceAck::Decode ()
{
   return asn1PD_MsgChangeGroupeConnaissanceAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeLiensLogistiques                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeLiensLogistiques::ASN1C_MsgChangeLiensLogistiques (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeLiensLogistiques& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeLiensLogistiques (ASN1CTXT* ctxt_p, ASN1T_MsgChangeLiensLogistiques* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeLiensLogistiques: start\n");

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_tc2Present);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_maintenancePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_santePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_ravitaillementPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgChangeLiensLogistiques: end\n");
   return (stat);
}

int ASN1C_MsgChangeLiensLogistiques::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeLiensLogistiques (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeLiensLogistiques (ASN1CTXT* ctxt_p, ASN1T_MsgChangeLiensLogistiques* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgChangeLiensLogistiques: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_tc2Present = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_maintenancePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_santePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_ravitaillementPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgChangeLiensLogistiques: end\n");

   return (stat);
}

int ASN1C_MsgChangeLiensLogistiques::Decode ()
{
   return asn1PD_MsgChangeLiensLogistiques (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeLiensLogistiquesErrorCode                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeLiensLogistiquesErrorCode::ASN1C_EnumChangeLiensLogistiquesErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeLiensLogistiquesErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeLiensLogistiquesErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeLiensLogistiquesErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeLiensLogistiquesErrorCode: start\n");

   switch (value) {
      case EnumChangeLiensLogistiquesErrorCode::no_error: ui = 0; break;
      case EnumChangeLiensLogistiquesErrorCode::error_invalid_automate: ui = 1; break;
      case EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_tc2: ui = 2; break;
      case EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_maintenance: ui = 3; break;
      case EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_sante: ui = 4; break;
      case EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_ravitaillement: ui = 5; break;
      case EnumChangeLiensLogistiquesErrorCode::error_unit_surrendered: ui = 6; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeLiensLogistiquesErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeLiensLogistiquesErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeLiensLogistiquesErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeLiensLogistiquesErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeLiensLogistiquesErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeLiensLogistiquesErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeLiensLogistiquesErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeLiensLogistiquesErrorCode::error_invalid_automate; break;
      case 2: *pvalue = EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_tc2; break;
      case 3: *pvalue = EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_maintenance; break;
      case 4: *pvalue = EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_sante; break;
      case 5: *pvalue = EnumChangeLiensLogistiquesErrorCode::error_invalid_automate_ravitaillement; break;
      case 6: *pvalue = EnumChangeLiensLogistiquesErrorCode::error_unit_surrendered; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeLiensLogistiquesErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeLiensLogistiquesErrorCode::Decode ()
{
   return asn1PD_EnumChangeLiensLogistiquesErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeLiensLogistiquesAck                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeLiensLogistiquesAck::ASN1C_MsgChangeLiensLogistiquesAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeLiensLogistiquesAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeLiensLogistiquesAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeLiensLogistiquesAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeLiensLogistiquesAck: start\n");

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_tc2Present);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_maintenancePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_santePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_ravitaillementPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeLiensLogistiquesErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeLiensLogistiquesAck: end\n");
   return (stat);
}

int ASN1C_MsgChangeLiensLogistiquesAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeLiensLogistiquesAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeLiensLogistiquesAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeLiensLogistiquesAck* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgChangeLiensLogistiquesAck: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_tc2Present = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_maintenancePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_santePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_ravitaillementPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeLiensLogistiquesErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeLiensLogistiquesAck: end\n");

   return (stat);
}

int ASN1C_MsgChangeLiensLogistiquesAck::Decode ()
{
   return asn1PD_MsgChangeLiensLogistiquesAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeAutomate                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeAutomate::ASN1C_MsgChangeAutomate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeAutomate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeAutomate (ASN1CTXT* ctxt_p, ASN1T_MsgChangeAutomate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeAutomate: start\n");

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeAutomate: end\n");
   return (stat);
}

int ASN1C_MsgChangeAutomate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeAutomate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeAutomate (ASN1CTXT* ctxt_p, ASN1T_MsgChangeAutomate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeAutomate: start\n");

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeAutomate: end\n");

   return (stat);
}

int ASN1C_MsgChangeAutomate::Decode ()
{
   return asn1PD_MsgChangeAutomate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeAutomateErrorCode                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeAutomateErrorCode::ASN1C_EnumChangeAutomateErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeAutomateErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeAutomateErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeAutomateErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeAutomateErrorCode: start\n");

   switch (value) {
      case EnumChangeAutomateErrorCode::no_error: ui = 0; break;
      case EnumChangeAutomateErrorCode::error_invalid_pion: ui = 1; break;
      case EnumChangeAutomateErrorCode::error_invalid_automate: ui = 2; break;
      case EnumChangeAutomateErrorCode::error_camps_incompatibles: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeAutomateErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeAutomateErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeAutomateErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeAutomateErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeAutomateErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeAutomateErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeAutomateErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeAutomateErrorCode::error_invalid_pion; break;
      case 2: *pvalue = EnumChangeAutomateErrorCode::error_invalid_automate; break;
      case 3: *pvalue = EnumChangeAutomateErrorCode::error_camps_incompatibles; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeAutomateErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeAutomateErrorCode::Decode ()
{
   return asn1PD_EnumChangeAutomateErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeAutomateAck                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeAutomateAck::ASN1C_MsgChangeAutomateAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeAutomateAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeAutomateAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeAutomateAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeAutomateAck: start\n");

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeAutomateErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeAutomateAck: end\n");
   return (stat);
}

int ASN1C_MsgChangeAutomateAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeAutomateAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeAutomateAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeAutomateAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeAutomateAck: start\n");

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeAutomateErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeAutomateAck: end\n");

   return (stat);
}

int ASN1C_MsgChangeAutomateAck::Decode ()
{
   return asn1PD_MsgChangeAutomateAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomateCreation                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomateCreation::ASN1C_MsgAutomateCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomateCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomateCreation (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomateCreation: start\n");

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_tc2Present);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_maintenancePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_santePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_ravitaillementPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_automate */

   PU_PUSHNAME (ctxt_p, "type_automate");

   stat = asn1PE_TypeAutomate (ctxt_p, pvalue->type_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PE_Automate (ctxt_p, pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgAutomateCreation: end\n");
   return (stat);
}

int ASN1C_MsgAutomateCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomateCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomateCreation (ASN1CTXT* ctxt_p, ASN1T_MsgAutomateCreation* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgAutomateCreation: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_tc2Present = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_maintenancePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_santePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_ravitaillementPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_automate */

   PU_PUSHNAME (ctxt_p, "type_automate");

   stat = asn1PD_TypeAutomate (ctxt_p, &pvalue->type_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PD_Automate (ctxt_p, &pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgAutomateCreation: end\n");

   return (stat);
}

int ASN1C_MsgAutomateCreation::Decode ()
{
   return asn1PD_MsgAutomateCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPionCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgPionCreation::ASN1C_MsgPionCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPionCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPionCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPionCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPionCreation: start\n");

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_pion */

   PU_PUSHNAME (ctxt_p, "type_pion");

   stat = asn1PE_TypePion (ctxt_p, pvalue->type_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPionCreation: end\n");
   return (stat);
}

int ASN1C_MsgPionCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPionCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPionCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPionCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPionCreation: start\n");

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_pion */

   PU_PUSHNAME (ctxt_p, "type_pion");

   stat = asn1PD_TypePion (ctxt_p, &pvalue->type_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPionCreation: end\n");

   return (stat);
}

int ASN1C_MsgPionCreation::Decode ()
{
   return asn1PD_MsgPionCreation (mpContext->GetPtr(), &msgData);
}


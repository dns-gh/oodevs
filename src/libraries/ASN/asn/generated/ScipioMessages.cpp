/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 22-Nov-2005.
 */
#include "ScipioMessages.h"

/**************************************************************/
/*                                                            */
/*  NbChoice                                                  */
/*                                                            */
/**************************************************************/

ASN1C_NbChoice::ASN1C_NbChoice (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_NbChoice (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_NbChoice: start\n");

   /* NULL */

   rtdiag ("asn1PE_NbChoice: end\n");
   return (stat);
}

int ASN1C_NbChoice::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_NbChoice (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_NbChoice (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_NbChoice: start\n");

   /* NULL */

   rtdiag ("asn1PD_NbChoice: end\n");

   return (stat);
}

int ASN1C_NbChoice::Decode ()
{
   return asn1PD_NbChoice (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgsSimMos                                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimMos::ASN1C_MsgsSimMos (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimMos& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimMos (ASN1CTXT* ctxt_p, ASN1T_MsgsSimMos* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsSimMos: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 81);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ctrl_info */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_info");

         stat = asn1PE_MsgCtrlInfo (ctxt_p, pvalue->u.msg_ctrl_info);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_begin_tick */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_begin_tick");

         stat = asn1PE_MsgCtrlBeginTick (ctxt_p, pvalue->u.msg_ctrl_begin_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_end_tick */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_end_tick");

         stat = asn1PE_MsgCtrlEndTick (ctxt_p, pvalue->u.msg_ctrl_end_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_stop_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop_ack");

         stat = asn1PE_MsgCtrlStopAck (ctxt_p, pvalue->u.msg_ctrl_stop_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause_ack");

         stat = asn1PE_MsgCtrlPauseAck (ctxt_p, pvalue->u.msg_ctrl_pause_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume_ack");

         stat = asn1PE_MsgCtrlResumeAck (ctxt_p, pvalue->u.msg_ctrl_resume_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor_ack");

         stat = asn1PE_MsgCtrlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_ctrl_change_time_factor_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale_ack");

         stat = asn1PE_MsgCtrlMeteoGlobaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale_ack */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale_ack");

         stat = asn1PE_MsgCtrlMeteoLocaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_begin */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_begin");

         stat = asn1PE_MsgCtrlCheckPointSaveBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_end */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_end");

         stat = asn1PE_MsgCtrlCheckPointSaveEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_load_begin */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_load_begin");

         stat = asn1PE_MsgCtrlCheckPointLoadBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_load_end */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_load_end");

         stat = asn1PE_MsgCtrlCheckPointLoadEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency_ack */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency_ack");

         stat = asn1PE_MsgCtrlCheckPointSetFrequencyAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now_ack */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now_ack");

         stat = asn1PE_MsgCtrlCheckPointSaveNowAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_begin */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_begin");

         stat = asn1PE_MsgCtrlSendCurrentStateBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_end */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_end");

         stat = asn1PE_MsgCtrlSendCurrentStateEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_creation */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation");

         stat = asn1PE_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction");

         stat = asn1PE_MsgLimitDestruction (ctxt_p, pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation");

         stat = asn1PE_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction");

         stat = asn1PE_MsgLimaDestruction (ctxt_p, pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_creation */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_creation");

         stat = asn1PE_MsgAutomateCreation (ctxt_p, pvalue->u.msg_automate_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_creation */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_creation");

         stat = asn1PE_MsgPionCreation (ctxt_p, pvalue->u.msg_pion_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         stat = asn1PE_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_creation */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_creation");

         stat = asn1PE_MsgUnitKnowledgeCreation (ctxt_p, pvalue->u.msg_unit_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_update */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_update");

         stat = asn1PE_MsgUnitKnowledgeUpdate (ctxt_p, pvalue->u.msg_unit_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_destruction */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_destruction");

         stat = asn1PE_MsgUnitKnowledgeDestruction (ctxt_p, pvalue->u.msg_unit_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_attributes */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_attributes");

         stat = asn1PE_MsgUnitAttributes (ctxt_p, pvalue->u.msg_unit_attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_dotations */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_dotations");

         stat = asn1PE_MsgUnitDotations (ctxt_p, pvalue->u.msg_unit_dotations);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_pathfind */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_pathfind");

         stat = asn1PE_MsgUnitPathFind (ctxt_p, pvalue->u.msg_unit_pathfind);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_pion_fire */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.msg_start_pion_fire");

         stat = asn1PE_MsgStartPionFire (ctxt_p, pvalue->u.msg_start_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_pion_fire */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_pion_fire");

         stat = asn1PE_MsgStopPionFire (ctxt_p, pvalue->u.msg_stop_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_population_fire */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.msg_start_population_fire");

         stat = asn1PE_MsgStartPopulationFire (ctxt_p, pvalue->u.msg_start_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_population_fire */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_population_fire");

         stat = asn1PE_MsgStopPopulationFire (ctxt_p, pvalue->u.msg_stop_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_explosion */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.msg_explosion");

         stat = asn1PE_MsgExplosion (ctxt_p, pvalue->u.msg_explosion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_fire_effect */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.msg_start_fire_effect");

         stat = asn1PE_MsgStartFireEffect (ctxt_p, pvalue->u.msg_start_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_fire_effect */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_fire_effect");

         stat = asn1PE_MsgStopFireEffect (ctxt_p, pvalue->u.msg_stop_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_cr */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.msg_cr");

         stat = asn1PE_MsgCR (ctxt_p, pvalue->u.msg_cr);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_order_management */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.msg_order_management");

         stat = asn1PE_MsgOrderManagement (ctxt_p, pvalue->u.msg_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_attente_ordre_conduite */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.msg_attente_ordre_conduite");

         stat = asn1PE_MsgAttenteOrdreConduite (ctxt_p, pvalue->u.msg_attente_ordre_conduite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_annule_attente_ordre_conduite */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.msg_annule_attente_ordre_conduite");

         stat = asn1PE_MsgAnnuleAttenteOrdreConduite (ctxt_p, pvalue->u.msg_annule_attente_ordre_conduite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_mrt */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_mrt");

         stat = asn1PE_MsgAutomateMRT (ctxt_p, pvalue->u.msg_automate_mrt);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         stat = asn1PE_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         stat = asn1PE_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_creation */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.msg_object_creation");

         stat = asn1PE_MsgObjectCreation (ctxt_p, pvalue->u.msg_object_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_destruction */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.msg_object_destruction");

         stat = asn1PE_MsgObjectDestruction (ctxt_p, pvalue->u.msg_object_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_update */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.msg_object_update");

         stat = asn1PE_MsgObjectUpdate (ctxt_p, pvalue->u.msg_object_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_creation */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_creation");

         stat = asn1PE_MsgObjectKnowledgeCreation (ctxt_p, pvalue->u.msg_object_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_update */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_update");

         stat = asn1PE_MsgObjectKnowledgeUpdate (ctxt_p, pvalue->u.msg_object_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_destruction */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_destruction");

         stat = asn1PE_MsgObjectKnowledgeDestruction (ctxt_p, pvalue->u.msg_object_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_automate */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.msg_change_automate");

         stat = asn1PE_MsgChangeAutomate (ctxt_p, pvalue->u.msg_change_automate);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_creation */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_creation");

         stat = asn1PE_MsgLogSanteTraitementHumainCreation (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_update */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_update");

         stat = asn1PE_MsgLogSanteTraitementHumainUpdate (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_destruction */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_destruction");

         stat = asn1PE_MsgLogSanteTraitementHumainDestruction (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_etat */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_etat");

         stat = asn1PE_MsgLogSanteEtat (ctxt_p, pvalue->u.msg_log_sante_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_creation */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_creation");

         stat = asn1PE_MsgLogMaintenanceTraitementEquipementCreation (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_update */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_update");

         stat = asn1PE_MsgLogMaintenanceTraitementEquipementUpdate (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_destruction */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_destruction");

         stat = asn1PE_MsgLogMaintenanceTraitementEquipementDestruction (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_etat */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_etat");

         stat = asn1PE_MsgLogMaintenanceEtat (ctxt_p, pvalue->u.msg_log_maintenance_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_creation */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_creation");

         stat = asn1PE_MsgLogRavitaillementTraitementCreation (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_update */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_update");

         stat = asn1PE_MsgLogRavitaillementTraitementUpdate (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_destruction */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_destruction");

         stat = asn1PE_MsgLogRavitaillementTraitementDestruction (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_etat */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_etat");

         stat = asn1PE_MsgLogRavitaillementEtat (ctxt_p, pvalue->u.msg_log_ravitaillement_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_quotas */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_quotas");

         stat = asn1PE_MsgLogRavitaillementQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_creation */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.msg_population_creation");

         stat = asn1PE_MsgPopulationCreation (ctxt_p, pvalue->u.msg_population_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_update */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.msg_population_update");

         stat = asn1PE_MsgPopulationUpdate (ctxt_p, pvalue->u.msg_population_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_creation */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_creation");

         stat = asn1PE_MsgPopulationConcentrationCreation (ctxt_p, pvalue->u.msg_population_concentration_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_destruction */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_destruction");

         stat = asn1PE_MsgPopulationConcentrationDestruction (ctxt_p, pvalue->u.msg_population_concentration_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_update */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_update");

         stat = asn1PE_MsgPopulationConcentrationUpdate (ctxt_p, pvalue->u.msg_population_concentration_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_creation */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_creation");

         stat = asn1PE_MsgPopulationFluxCreation (ctxt_p, pvalue->u.msg_population_flux_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_destruction */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_destruction");

         stat = asn1PE_MsgPopulationFluxDestruction (ctxt_p, pvalue->u.msg_population_flux_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_update */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_update");

         stat = asn1PE_MsgPopulationFluxUpdate (ctxt_p, pvalue->u.msg_population_flux_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_creation */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_creation");

         stat = asn1PE_MsgPopulationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_update */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_update");

         stat = asn1PE_MsgPopulationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_destruction */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_destruction");

         stat = asn1PE_MsgPopulationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_creation */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_creation");

         stat = asn1PE_MsgPopulationConcentrationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_concentration_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_destruction */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_destruction");

         stat = asn1PE_MsgPopulationConcentrationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_concentration_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_update */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_update");

         stat = asn1PE_MsgPopulationConcentrationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_concentration_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_creation */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_creation");

         stat = asn1PE_MsgPopulationFluxKnowledgeCreation (ctxt_p, pvalue->u.msg_population_flux_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_destruction */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_destruction");

         stat = asn1PE_MsgPopulationFluxKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_flux_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_update */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_update");

         stat = asn1PE_MsgPopulationFluxKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_flux_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsSimMos: end\n");
   return (stat);
}

int ASN1C_MsgsSimMos::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimMos (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimMos (ASN1CTXT* ctxt_p, ASN1T_MsgsSimMos* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsSimMos: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 81);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ctrl_info */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_info");

         pvalue->u.msg_ctrl_info = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlInfo);
         if (pvalue->u.msg_ctrl_info == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlInfo (ctxt_p, pvalue->u.msg_ctrl_info);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_begin_tick */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_begin_tick");

         stat = asn1PD_MsgCtrlBeginTick (ctxt_p, &pvalue->u.msg_ctrl_begin_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_end_tick */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_end_tick");

         pvalue->u.msg_ctrl_end_tick = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlEndTick);
         if (pvalue->u.msg_ctrl_end_tick == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlEndTick (ctxt_p, pvalue->u.msg_ctrl_end_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_stop_ack */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop_ack");

         stat = asn1PD_MsgCtrlStopAck (ctxt_p, &pvalue->u.msg_ctrl_stop_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause_ack");

         stat = asn1PD_MsgCtrlPauseAck (ctxt_p, &pvalue->u.msg_ctrl_pause_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume_ack");

         stat = asn1PD_MsgCtrlResumeAck (ctxt_p, &pvalue->u.msg_ctrl_resume_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor_ack");

         pvalue->u.msg_ctrl_change_time_factor_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlChangeTimeFactorAck);
         if (pvalue->u.msg_ctrl_change_time_factor_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_ctrl_change_time_factor_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale_ack");

         stat = asn1PD_MsgCtrlMeteoGlobaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale_ack");

         stat = asn1PD_MsgCtrlMeteoLocaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_begin */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_begin");

         stat = asn1PD_MsgCtrlCheckPointSaveBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_end */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_end");

         stat = asn1PD_MsgCtrlCheckPointSaveEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_load_begin */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_load_begin");

         stat = asn1PD_MsgCtrlCheckPointLoadBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_load_end */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_load_end");

         stat = asn1PD_MsgCtrlCheckPointLoadEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency_ack */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency_ack");

         stat = asn1PD_MsgCtrlCheckPointSetFrequencyAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now_ack */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now_ack");

         stat = asn1PD_MsgCtrlCheckPointSaveNowAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_begin */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_begin");

         stat = asn1PD_MsgCtrlSendCurrentStateBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_end */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_end");

         stat = asn1PD_MsgCtrlSendCurrentStateEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_creation */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation");

         pvalue->u.msg_limit_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreation);
         if (pvalue->u.msg_limit_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction");

         stat = asn1PD_MsgLimitDestruction (ctxt_p, &pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation");

         pvalue->u.msg_lima_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreation);
         if (pvalue->u.msg_lima_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction");

         stat = asn1PD_MsgLimaDestruction (ctxt_p, &pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_creation */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_creation");

         pvalue->u.msg_automate_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateCreation);
         if (pvalue->u.msg_automate_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateCreation (ctxt_p, pvalue->u.msg_automate_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_creation */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_creation");

         pvalue->u.msg_pion_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionCreation);
         if (pvalue->u.msg_pion_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionCreation (ctxt_p, pvalue->u.msg_pion_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         pvalue->u.msg_change_diplomatie = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomatie);
         if (pvalue->u.msg_change_diplomatie == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_creation */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_creation");

         pvalue->u.msg_unit_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeCreation);
         if (pvalue->u.msg_unit_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitKnowledgeCreation (ctxt_p, pvalue->u.msg_unit_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_update */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_update");

         pvalue->u.msg_unit_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeUpdate);
         if (pvalue->u.msg_unit_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitKnowledgeUpdate (ctxt_p, pvalue->u.msg_unit_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_destruction */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_destruction");

         pvalue->u.msg_unit_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeDestruction);
         if (pvalue->u.msg_unit_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitKnowledgeDestruction (ctxt_p, pvalue->u.msg_unit_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_attributes */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_attributes");

         pvalue->u.msg_unit_attributes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitAttributes);
         if (pvalue->u.msg_unit_attributes == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitAttributes (ctxt_p, pvalue->u.msg_unit_attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_dotations */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_dotations");

         pvalue->u.msg_unit_dotations = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitDotations);
         if (pvalue->u.msg_unit_dotations == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitDotations (ctxt_p, pvalue->u.msg_unit_dotations);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_pathfind */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_pathfind");

         pvalue->u.msg_unit_pathfind = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitPathFind);
         if (pvalue->u.msg_unit_pathfind == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitPathFind (ctxt_p, pvalue->u.msg_unit_pathfind);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_pion_fire */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.msg_start_pion_fire");

         pvalue->u.msg_start_pion_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartPionFire);
         if (pvalue->u.msg_start_pion_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStartPionFire (ctxt_p, pvalue->u.msg_start_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_pion_fire */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_pion_fire");

         pvalue->u.msg_stop_pion_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStopPionFire);
         if (pvalue->u.msg_stop_pion_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStopPionFire (ctxt_p, pvalue->u.msg_stop_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_population_fire */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.msg_start_population_fire");

         pvalue->u.msg_start_population_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartPopulationFire);
         if (pvalue->u.msg_start_population_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStartPopulationFire (ctxt_p, pvalue->u.msg_start_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_population_fire */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_population_fire");

         pvalue->u.msg_stop_population_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStopPopulationFire);
         if (pvalue->u.msg_stop_population_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStopPopulationFire (ctxt_p, pvalue->u.msg_stop_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_explosion */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.msg_explosion");

         pvalue->u.msg_explosion = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgExplosion);
         if (pvalue->u.msg_explosion == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgExplosion (ctxt_p, pvalue->u.msg_explosion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_fire_effect */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.msg_start_fire_effect");

         pvalue->u.msg_start_fire_effect = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartFireEffect);
         if (pvalue->u.msg_start_fire_effect == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStartFireEffect (ctxt_p, pvalue->u.msg_start_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_fire_effect */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_fire_effect");

         stat = asn1PD_MsgStopFireEffect (ctxt_p, &pvalue->u.msg_stop_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_cr */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.msg_cr");

         pvalue->u.msg_cr = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCR);
         if (pvalue->u.msg_cr == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCR (ctxt_p, pvalue->u.msg_cr);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_order_management */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.msg_order_management");

         pvalue->u.msg_order_management = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgOrderManagement);
         if (pvalue->u.msg_order_management == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgOrderManagement (ctxt_p, pvalue->u.msg_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_attente_ordre_conduite */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.msg_attente_ordre_conduite");

         pvalue->u.msg_attente_ordre_conduite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAttenteOrdreConduite);
         if (pvalue->u.msg_attente_ordre_conduite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAttenteOrdreConduite (ctxt_p, pvalue->u.msg_attente_ordre_conduite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_annule_attente_ordre_conduite */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.msg_annule_attente_ordre_conduite");

         pvalue->u.msg_annule_attente_ordre_conduite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAnnuleAttenteOrdreConduite);
         if (pvalue->u.msg_annule_attente_ordre_conduite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAnnuleAttenteOrdreConduite (ctxt_p, pvalue->u.msg_annule_attente_ordre_conduite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_mrt */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_mrt");

         pvalue->u.msg_automate_mrt = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateMRT);
         if (pvalue->u.msg_automate_mrt == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateMRT (ctxt_p, pvalue->u.msg_automate_mrt);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         pvalue->u.msg_pion_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrder);
         if (pvalue->u.msg_pion_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         pvalue->u.msg_automate_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrder);
         if (pvalue->u.msg_automate_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_creation */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.msg_object_creation");

         pvalue->u.msg_object_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectCreation);
         if (pvalue->u.msg_object_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectCreation (ctxt_p, pvalue->u.msg_object_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_destruction */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.msg_object_destruction");

         stat = asn1PD_MsgObjectDestruction (ctxt_p, &pvalue->u.msg_object_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_update */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.msg_object_update");

         pvalue->u.msg_object_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectUpdate);
         if (pvalue->u.msg_object_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectUpdate (ctxt_p, pvalue->u.msg_object_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_creation */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_creation");

         pvalue->u.msg_object_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeCreation);
         if (pvalue->u.msg_object_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectKnowledgeCreation (ctxt_p, pvalue->u.msg_object_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_update */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_update");

         pvalue->u.msg_object_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeUpdate);
         if (pvalue->u.msg_object_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectKnowledgeUpdate (ctxt_p, pvalue->u.msg_object_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_destruction */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_destruction");

         pvalue->u.msg_object_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeDestruction);
         if (pvalue->u.msg_object_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectKnowledgeDestruction (ctxt_p, pvalue->u.msg_object_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_automate */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.msg_change_automate");

         pvalue->u.msg_change_automate = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeAutomate);
         if (pvalue->u.msg_change_automate == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeAutomate (ctxt_p, pvalue->u.msg_change_automate);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_creation */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_creation");

         pvalue->u.msg_log_sante_traitement_humain_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteTraitementHumainCreation);
         if (pvalue->u.msg_log_sante_traitement_humain_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteTraitementHumainCreation (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_update */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_update");

         pvalue->u.msg_log_sante_traitement_humain_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteTraitementHumainUpdate);
         if (pvalue->u.msg_log_sante_traitement_humain_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteTraitementHumainUpdate (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_destruction */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_destruction");

         pvalue->u.msg_log_sante_traitement_humain_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteTraitementHumainDestruction);
         if (pvalue->u.msg_log_sante_traitement_humain_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteTraitementHumainDestruction (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_etat */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_etat");

         pvalue->u.msg_log_sante_etat = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteEtat);
         if (pvalue->u.msg_log_sante_etat == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteEtat (ctxt_p, pvalue->u.msg_log_sante_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_creation */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_creation");

         pvalue->u.msg_log_maintenance_traitement_equipement_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceTraitementEquipementCreation);
         if (pvalue->u.msg_log_maintenance_traitement_equipement_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceTraitementEquipementCreation (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_update */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_update");

         pvalue->u.msg_log_maintenance_traitement_equipement_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceTraitementEquipementUpdate);
         if (pvalue->u.msg_log_maintenance_traitement_equipement_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceTraitementEquipementUpdate (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_destruction */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_destruction");

         pvalue->u.msg_log_maintenance_traitement_equipement_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceTraitementEquipementDestruction);
         if (pvalue->u.msg_log_maintenance_traitement_equipement_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceTraitementEquipementDestruction (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_etat */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_etat");

         pvalue->u.msg_log_maintenance_etat = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceEtat);
         if (pvalue->u.msg_log_maintenance_etat == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceEtat (ctxt_p, pvalue->u.msg_log_maintenance_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_creation */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_creation");

         pvalue->u.msg_log_ravitaillement_traitement_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementTraitementCreation);
         if (pvalue->u.msg_log_ravitaillement_traitement_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementTraitementCreation (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_update */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_update");

         pvalue->u.msg_log_ravitaillement_traitement_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementTraitementUpdate);
         if (pvalue->u.msg_log_ravitaillement_traitement_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementTraitementUpdate (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_destruction */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_destruction");

         pvalue->u.msg_log_ravitaillement_traitement_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementTraitementDestruction);
         if (pvalue->u.msg_log_ravitaillement_traitement_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementTraitementDestruction (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_etat */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_etat");

         pvalue->u.msg_log_ravitaillement_etat = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementEtat);
         if (pvalue->u.msg_log_ravitaillement_etat == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementEtat (ctxt_p, pvalue->u.msg_log_ravitaillement_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_quotas */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_quotas");

         pvalue->u.msg_log_ravitaillement_quotas = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementQuotas);
         if (pvalue->u.msg_log_ravitaillement_quotas == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_creation */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.msg_population_creation");

         pvalue->u.msg_population_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationCreation);
         if (pvalue->u.msg_population_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationCreation (ctxt_p, pvalue->u.msg_population_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_update */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.msg_population_update");

         pvalue->u.msg_population_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationUpdate);
         if (pvalue->u.msg_population_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationUpdate (ctxt_p, pvalue->u.msg_population_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_creation */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_creation");

         pvalue->u.msg_population_concentration_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationCreation);
         if (pvalue->u.msg_population_concentration_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationCreation (ctxt_p, pvalue->u.msg_population_concentration_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_destruction */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_destruction");

         pvalue->u.msg_population_concentration_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationDestruction);
         if (pvalue->u.msg_population_concentration_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationDestruction (ctxt_p, pvalue->u.msg_population_concentration_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_update */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_update");

         pvalue->u.msg_population_concentration_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationUpdate);
         if (pvalue->u.msg_population_concentration_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationUpdate (ctxt_p, pvalue->u.msg_population_concentration_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_creation */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_creation");

         pvalue->u.msg_population_flux_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxCreation);
         if (pvalue->u.msg_population_flux_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxCreation (ctxt_p, pvalue->u.msg_population_flux_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_destruction */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_destruction");

         pvalue->u.msg_population_flux_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxDestruction);
         if (pvalue->u.msg_population_flux_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxDestruction (ctxt_p, pvalue->u.msg_population_flux_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_update */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_update");

         pvalue->u.msg_population_flux_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxUpdate);
         if (pvalue->u.msg_population_flux_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxUpdate (ctxt_p, pvalue->u.msg_population_flux_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_creation */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_creation");

         pvalue->u.msg_population_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeCreation);
         if (pvalue->u.msg_population_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_update */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_update");

         pvalue->u.msg_population_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeUpdate);
         if (pvalue->u.msg_population_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_destruction */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_destruction");

         pvalue->u.msg_population_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeDestruction);
         if (pvalue->u.msg_population_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_creation */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_creation");

         pvalue->u.msg_population_concentration_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeCreation);
         if (pvalue->u.msg_population_concentration_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_concentration_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_destruction */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_destruction");

         pvalue->u.msg_population_concentration_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeDestruction);
         if (pvalue->u.msg_population_concentration_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_concentration_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_update */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_update");

         pvalue->u.msg_population_concentration_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeUpdate);
         if (pvalue->u.msg_population_concentration_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_concentration_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_creation */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_creation");

         pvalue->u.msg_population_flux_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxKnowledgeCreation);
         if (pvalue->u.msg_population_flux_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxKnowledgeCreation (ctxt_p, pvalue->u.msg_population_flux_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_destruction */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_destruction");

         pvalue->u.msg_population_flux_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxKnowledgeDestruction);
         if (pvalue->u.msg_population_flux_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_flux_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_update */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_update");

         pvalue->u.msg_population_flux_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxKnowledgeUpdate);
         if (pvalue->u.msg_population_flux_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_flux_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsSimMos: end\n");

   return (stat);
}

int ASN1C_MsgsSimMos::Decode ()
{
   return asn1PD_MsgsSimMos (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsSimMosWithContext                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimMosWithContext::ASN1C_MsgsSimMosWithContext (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimMosWithContext& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimMosWithContext (ASN1CTXT* ctxt_p, ASN1T_MsgsSimMosWithContext* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsSimMosWithContext: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 20);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_limit_creation_ack */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation_ack");

         stat = asn1PE_MsgLimitCreationAck (ctxt_p, pvalue->u.msg_limit_creation_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction_ack */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction_ack");

         stat = asn1PE_MsgLimitDestructionAck (ctxt_p, pvalue->u.msg_limit_destruction_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update_ack */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update_ack");

         stat = asn1PE_MsgLimitUpdateAck (ctxt_p, pvalue->u.msg_limit_update_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation_ack");

         stat = asn1PE_MsgLimaCreationAck (ctxt_p, pvalue->u.msg_lima_creation_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction_ack");

         stat = asn1PE_MsgLimaDestructionAck (ctxt_p, pvalue->u.msg_lima_destruction_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update_ack");

         stat = asn1PE_MsgLimaUpdateAck (ctxt_p, pvalue->u.msg_lima_update_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order_ack");

         stat = asn1PE_MsgPionOrderAck (ctxt_p, pvalue->u.msg_pion_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_order_conduite_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_order_conduite_ack");

         stat = asn1PE_MsgOrderConduiteAck (ctxt_p, pvalue->u.msg_order_conduite_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order_ack */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order_ack");

         stat = asn1PE_MsgAutomateOrderAck (ctxt_p, pvalue->u.msg_automate_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order_ack */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order_ack");

         stat = asn1PE_MsgPopulationOrderAck (ctxt_p, pvalue->u.msg_population_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode_ack */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode_ack");

         stat = asn1PE_MsgSetAutomateModeAck (ctxt_p, pvalue->u.msg_set_automate_mode_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action_ack */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action_ack");

         stat = asn1PE_MsgUnitMagicActionAck (ctxt_p, pvalue->u.msg_unit_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action_ack */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action_ack");

         stat = asn1PE_MsgObjectMagicActionAck (ctxt_p, pvalue->u.msg_object_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action_ack */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action_ack");

         stat = asn1PE_MsgPopulationMagicActionAck (ctxt_p, pvalue->u.msg_population_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie_ack */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie_ack");

         stat = asn1PE_MsgChangeDiplomatieAck (ctxt_p, pvalue->u.msg_change_diplomatie_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_groupe_connaissance_ack */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_change_groupe_connaissance_ack");

         stat = asn1PE_MsgChangeGroupeConnaissanceAck (ctxt_p, pvalue->u.msg_change_groupe_connaissance_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_liens_logistiques_ack */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_change_liens_logistiques_ack");

         stat = asn1PE_MsgChangeLiensLogistiquesAck (ctxt_p, pvalue->u.msg_change_liens_logistiques_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_automate_ack */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_change_automate_ack");

         stat = asn1PE_MsgChangeAutomateAck (ctxt_p, pvalue->u.msg_change_automate_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux_ack */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux_ack");

         stat = asn1PE_MsgLogRavitaillementPousserFluxAck (ctxt_p, pvalue->u.msg_log_ravitaillement_pousser_flux_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas_ack */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas_ack");

         stat = asn1PE_MsgLogRavitaillementChangeQuotasAck (ctxt_p, pvalue->u.msg_log_ravitaillement_change_quotas_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsSimMosWithContext: end\n");
   return (stat);
}

int ASN1C_MsgsSimMosWithContext::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimMosWithContext (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimMosWithContext (ASN1CTXT* ctxt_p, ASN1T_MsgsSimMosWithContext* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsSimMosWithContext: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 20);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_limit_creation_ack */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation_ack");

         pvalue->u.msg_limit_creation_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreationAck);
         if (pvalue->u.msg_limit_creation_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitCreationAck (ctxt_p, pvalue->u.msg_limit_creation_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction_ack */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction_ack");

         pvalue->u.msg_limit_destruction_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitDestructionAck);
         if (pvalue->u.msg_limit_destruction_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitDestructionAck (ctxt_p, pvalue->u.msg_limit_destruction_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update_ack */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update_ack");

         pvalue->u.msg_limit_update_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitUpdateAck);
         if (pvalue->u.msg_limit_update_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitUpdateAck (ctxt_p, pvalue->u.msg_limit_update_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation_ack */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation_ack");

         pvalue->u.msg_lima_creation_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreationAck);
         if (pvalue->u.msg_lima_creation_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaCreationAck (ctxt_p, pvalue->u.msg_lima_creation_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction_ack");

         pvalue->u.msg_lima_destruction_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaDestructionAck);
         if (pvalue->u.msg_lima_destruction_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaDestructionAck (ctxt_p, pvalue->u.msg_lima_destruction_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update_ack");

         pvalue->u.msg_lima_update_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaUpdateAck);
         if (pvalue->u.msg_lima_update_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaUpdateAck (ctxt_p, pvalue->u.msg_lima_update_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order_ack");

         pvalue->u.msg_pion_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrderAck);
         if (pvalue->u.msg_pion_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrderAck (ctxt_p, pvalue->u.msg_pion_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_order_conduite_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_order_conduite_ack");

         pvalue->u.msg_order_conduite_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgOrderConduiteAck);
         if (pvalue->u.msg_order_conduite_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgOrderConduiteAck (ctxt_p, pvalue->u.msg_order_conduite_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order_ack");

         pvalue->u.msg_automate_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrderAck);
         if (pvalue->u.msg_automate_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrderAck (ctxt_p, pvalue->u.msg_automate_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order_ack */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order_ack");

         pvalue->u.msg_population_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrderAck);
         if (pvalue->u.msg_population_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationOrderAck (ctxt_p, pvalue->u.msg_population_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode_ack */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode_ack");

         pvalue->u.msg_set_automate_mode_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSetAutomateModeAck);
         if (pvalue->u.msg_set_automate_mode_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSetAutomateModeAck (ctxt_p, pvalue->u.msg_set_automate_mode_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action_ack */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action_ack");

         pvalue->u.msg_unit_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitMagicActionAck);
         if (pvalue->u.msg_unit_magic_action_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitMagicActionAck (ctxt_p, pvalue->u.msg_unit_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action_ack */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action_ack");

         pvalue->u.msg_object_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectMagicActionAck);
         if (pvalue->u.msg_object_magic_action_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectMagicActionAck (ctxt_p, pvalue->u.msg_object_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action_ack */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action_ack");

         pvalue->u.msg_population_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationMagicActionAck);
         if (pvalue->u.msg_population_magic_action_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationMagicActionAck (ctxt_p, pvalue->u.msg_population_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie_ack */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie_ack");

         pvalue->u.msg_change_diplomatie_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomatieAck);
         if (pvalue->u.msg_change_diplomatie_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeDiplomatieAck (ctxt_p, pvalue->u.msg_change_diplomatie_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_groupe_connaissance_ack */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_change_groupe_connaissance_ack");

         pvalue->u.msg_change_groupe_connaissance_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeGroupeConnaissanceAck);
         if (pvalue->u.msg_change_groupe_connaissance_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeGroupeConnaissanceAck (ctxt_p, pvalue->u.msg_change_groupe_connaissance_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_liens_logistiques_ack */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_change_liens_logistiques_ack");

         pvalue->u.msg_change_liens_logistiques_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeLiensLogistiquesAck);
         if (pvalue->u.msg_change_liens_logistiques_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeLiensLogistiquesAck (ctxt_p, pvalue->u.msg_change_liens_logistiques_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_automate_ack */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_change_automate_ack");

         pvalue->u.msg_change_automate_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeAutomateAck);
         if (pvalue->u.msg_change_automate_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeAutomateAck (ctxt_p, pvalue->u.msg_change_automate_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux_ack */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux_ack");

         stat = asn1PD_MsgLogRavitaillementPousserFluxAck (ctxt_p, &pvalue->u.msg_log_ravitaillement_pousser_flux_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas_ack */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas_ack");

         stat = asn1PD_MsgLogRavitaillementChangeQuotasAck (ctxt_p, &pvalue->u.msg_log_ravitaillement_change_quotas_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsSimMosWithContext: end\n");

   return (stat);
}

int ASN1C_MsgsSimMosWithContext::Decode ()
{
   return asn1PD_MsgsSimMosWithContext (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMosSim                                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMosSim::ASN1C_MsgsMosSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMosSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMosSim (ASN1CTXT* ctxt_p, ASN1T_MsgsMosSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMosSim: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ctrl_client_announcement */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_client_announcement");

         stat = asn1PE_MsgCtrlClientAnnouncement (ctxt_p, pvalue->u.msg_ctrl_client_announcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_stop */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop");

         stat = asn1PE_MsgCtrlStop (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause");

         stat = asn1PE_MsgCtrlPause (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume");

         stat = asn1PE_MsgCtrlResume (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor");

         stat = asn1PE_MsgCtrlChangeTimeFactor (ctxt_p, pvalue->u.msg_ctrl_change_time_factor);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale");

         stat = asn1PE_MsgCtrlMeteoGlobale (ctxt_p, pvalue->u.msg_ctrl_meteo_globale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale");

         stat = asn1PE_MsgCtrlMeteoLocale (ctxt_p, pvalue->u.msg_ctrl_meteo_locale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now");

         stat = asn1PE_MsgCtrlCheckPointSaveNow (ctxt_p, pvalue->u.msg_ctrl_checkpoint_save_now);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency");

         stat = asn1PE_MsgCtrlCheckPointSetFrequency (ctxt_p, pvalue->u.msg_ctrl_checkpoint_set_frequency);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsMosSim: end\n");
   return (stat);
}

int ASN1C_MsgsMosSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMosSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMosSim (ASN1CTXT* ctxt_p, ASN1T_MsgsMosSim* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsMosSim: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ctrl_client_announcement */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_client_announcement");

         stat = asn1PD_MsgCtrlClientAnnouncement (ctxt_p, &pvalue->u.msg_ctrl_client_announcement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_stop */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop");

         stat = asn1PD_MsgCtrlStop (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause");

         stat = asn1PD_MsgCtrlPause (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume");

         stat = asn1PD_MsgCtrlResume (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor");

         stat = asn1PD_MsgCtrlChangeTimeFactor (ctxt_p, &pvalue->u.msg_ctrl_change_time_factor);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale");

         pvalue->u.msg_ctrl_meteo_globale = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlMeteoGlobale);
         if (pvalue->u.msg_ctrl_meteo_globale == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlMeteoGlobale (ctxt_p, pvalue->u.msg_ctrl_meteo_globale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale");

         pvalue->u.msg_ctrl_meteo_locale = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlMeteoLocale);
         if (pvalue->u.msg_ctrl_meteo_locale == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlMeteoLocale (ctxt_p, pvalue->u.msg_ctrl_meteo_locale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now");

         pvalue->u.msg_ctrl_checkpoint_save_now = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlCheckPointSaveNow);
         if (pvalue->u.msg_ctrl_checkpoint_save_now == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlCheckPointSaveNow (ctxt_p, pvalue->u.msg_ctrl_checkpoint_save_now);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency");

         stat = asn1PD_MsgCtrlCheckPointSetFrequency (ctxt_p, &pvalue->u.msg_ctrl_checkpoint_set_frequency);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsMosSim: end\n");

   return (stat);
}

int ASN1C_MsgsMosSim::Decode ()
{
   return asn1PD_MsgsMosSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMosSimWithContext                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMosSimWithContext::ASN1C_MsgsMosSimWithContext (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMosSimWithContext& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMosSimWithContext (ASN1CTXT* ctxt_p, ASN1T_MsgsMosSimWithContext* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMosSimWithContext: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 20);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_limit_creation */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation");

         stat = asn1PE_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction");

         stat = asn1PE_MsgLimitDestruction (ctxt_p, pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update");

         stat = asn1PE_MsgLimitUpdate (ctxt_p, pvalue->u.msg_limit_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation");

         stat = asn1PE_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction");

         stat = asn1PE_MsgLimaDestruction (ctxt_p, pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update");

         stat = asn1PE_MsgLimaUpdate (ctxt_p, pvalue->u.msg_lima_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         stat = asn1PE_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_order_conduite */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_order_conduite");

         stat = asn1PE_MsgOrderConduite (ctxt_p, pvalue->u.msg_order_conduite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         stat = asn1PE_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order");

         stat = asn1PE_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode");

         stat = asn1PE_MsgSetAutomateMode (ctxt_p, pvalue->u.msg_set_automate_mode);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action");

         stat = asn1PE_MsgUnitMagicAction (ctxt_p, pvalue->u.msg_unit_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action");

         stat = asn1PE_MsgObjectMagicAction (ctxt_p, pvalue->u.msg_object_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action");

         stat = asn1PE_MsgPopulationMagicAction (ctxt_p, pvalue->u.msg_population_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         stat = asn1PE_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_groupe_connaissance */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_change_groupe_connaissance");

         stat = asn1PE_MsgChangeGroupeConnaissance (ctxt_p, pvalue->u.msg_change_groupe_connaissance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_liens_logistiques */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_change_liens_logistiques");

         stat = asn1PE_MsgChangeLiensLogistiques (ctxt_p, pvalue->u.msg_change_liens_logistiques);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_automate */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_change_automate");

         stat = asn1PE_MsgChangeAutomate (ctxt_p, pvalue->u.msg_change_automate);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux");

         stat = asn1PE_MsgLogRavitaillementPousserFlux (ctxt_p, pvalue->u.msg_log_ravitaillement_pousser_flux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas");

         stat = asn1PE_MsgLogRavitaillementChangeQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_change_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsMosSimWithContext: end\n");
   return (stat);
}

int ASN1C_MsgsMosSimWithContext::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMosSimWithContext (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMosSimWithContext (ASN1CTXT* ctxt_p, ASN1T_MsgsMosSimWithContext* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsMosSimWithContext: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 20);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_limit_creation */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation");

         pvalue->u.msg_limit_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreation);
         if (pvalue->u.msg_limit_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction");

         stat = asn1PD_MsgLimitDestruction (ctxt_p, &pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update");

         pvalue->u.msg_limit_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitUpdate);
         if (pvalue->u.msg_limit_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitUpdate (ctxt_p, pvalue->u.msg_limit_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation");

         pvalue->u.msg_lima_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreation);
         if (pvalue->u.msg_lima_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction");

         stat = asn1PD_MsgLimaDestruction (ctxt_p, &pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update");

         pvalue->u.msg_lima_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaUpdate);
         if (pvalue->u.msg_lima_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaUpdate (ctxt_p, pvalue->u.msg_lima_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         pvalue->u.msg_pion_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrder);
         if (pvalue->u.msg_pion_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_order_conduite */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_order_conduite");

         pvalue->u.msg_order_conduite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgOrderConduite);
         if (pvalue->u.msg_order_conduite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgOrderConduite (ctxt_p, pvalue->u.msg_order_conduite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         pvalue->u.msg_automate_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrder);
         if (pvalue->u.msg_automate_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order");

         pvalue->u.msg_population_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrder);
         if (pvalue->u.msg_population_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode");

         pvalue->u.msg_set_automate_mode = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSetAutomateMode);
         if (pvalue->u.msg_set_automate_mode == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSetAutomateMode (ctxt_p, pvalue->u.msg_set_automate_mode);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action");

         pvalue->u.msg_unit_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitMagicAction);
         if (pvalue->u.msg_unit_magic_action == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitMagicAction (ctxt_p, pvalue->u.msg_unit_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action");

         pvalue->u.msg_object_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectMagicAction);
         if (pvalue->u.msg_object_magic_action == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectMagicAction (ctxt_p, pvalue->u.msg_object_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action");

         pvalue->u.msg_population_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationMagicAction);
         if (pvalue->u.msg_population_magic_action == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationMagicAction (ctxt_p, pvalue->u.msg_population_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         pvalue->u.msg_change_diplomatie = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomatie);
         if (pvalue->u.msg_change_diplomatie == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_groupe_connaissance */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_change_groupe_connaissance");

         pvalue->u.msg_change_groupe_connaissance = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeGroupeConnaissance);
         if (pvalue->u.msg_change_groupe_connaissance == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeGroupeConnaissance (ctxt_p, pvalue->u.msg_change_groupe_connaissance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_liens_logistiques */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_change_liens_logistiques");

         pvalue->u.msg_change_liens_logistiques = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeLiensLogistiques);
         if (pvalue->u.msg_change_liens_logistiques == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeLiensLogistiques (ctxt_p, pvalue->u.msg_change_liens_logistiques);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_automate */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_change_automate");

         pvalue->u.msg_change_automate = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeAutomate);
         if (pvalue->u.msg_change_automate == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeAutomate (ctxt_p, pvalue->u.msg_change_automate);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux");

         pvalue->u.msg_log_ravitaillement_pousser_flux = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementPousserFlux);
         if (pvalue->u.msg_log_ravitaillement_pousser_flux == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementPousserFlux (ctxt_p, pvalue->u.msg_log_ravitaillement_pousser_flux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas");

         pvalue->u.msg_log_ravitaillement_change_quotas = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementChangeQuotas);
         if (pvalue->u.msg_log_ravitaillement_change_quotas == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementChangeQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_change_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsMosSimWithContext: end\n");

   return (stat);
}

int ASN1C_MsgsMosSimWithContext::Decode ()
{
   return asn1PD_MsgsMosSimWithContext (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMosLauncher                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMosLauncher::ASN1C_MsgsMosLauncher (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMosLauncher& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMosLauncher (ASN1CTXT* ctxt_p, ASN1T_MsgsMosLauncher* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMosLauncher: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_request_list_mission */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_request_list_mission");

         stat = asn1PE_MsgMosLau_RequestListMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_launch_sim */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_launch_sim");

         stat = asn1PE_MsgMosLau_LaunchSim (ctxt_p, pvalue->u.msg_launch_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_request_list_sim */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_request_list_sim");

         stat = asn1PE_MsgMosLau_RequestListSim (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_request_list_checkpoint */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_request_list_checkpoint");

         stat = asn1PE_MsgMosLau_RequestListCheckpoint (ctxt_p, pvalue->u.msg_request_list_checkpoint);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_launch_sim_from_checkpoint */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_launch_sim_from_checkpoint");

         stat = asn1PE_MsgMosLau_LaunchSimFromCheckpoint (ctxt_p, pvalue->u.msg_launch_sim_from_checkpoint);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_sim */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_sim");

         stat = asn1PE_MsgMosLau_StopSim (ctxt_p, pvalue->u.msg_stop_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsMosLauncher: end\n");
   return (stat);
}

int ASN1C_MsgsMosLauncher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMosLauncher (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMosLauncher (ASN1CTXT* ctxt_p, ASN1T_MsgsMosLauncher* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsMosLauncher: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_request_list_mission */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_request_list_mission");

         stat = asn1PD_MsgMosLau_RequestListMission (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_launch_sim */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_launch_sim");

         pvalue->u.msg_launch_sim = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgMosLau_LaunchSim);
         if (pvalue->u.msg_launch_sim == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgMosLau_LaunchSim (ctxt_p, pvalue->u.msg_launch_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_request_list_sim */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_request_list_sim");

         stat = asn1PD_MsgMosLau_RequestListSim (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_request_list_checkpoint */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_request_list_checkpoint");

         stat = asn1PD_MsgMosLau_RequestListCheckpoint (ctxt_p, &pvalue->u.msg_request_list_checkpoint);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_launch_sim_from_checkpoint */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_launch_sim_from_checkpoint");

         pvalue->u.msg_launch_sim_from_checkpoint = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgMosLau_LaunchSimFromCheckpoint);
         if (pvalue->u.msg_launch_sim_from_checkpoint == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgMosLau_LaunchSimFromCheckpoint (ctxt_p, pvalue->u.msg_launch_sim_from_checkpoint);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_sim */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_sim");

         stat = asn1PD_MsgMosLau_StopSim (ctxt_p, &pvalue->u.msg_stop_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsMosLauncher: end\n");

   return (stat);
}

int ASN1C_MsgsMosLauncher::Decode ()
{
   return asn1PD_MsgsMosLauncher (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsLauncherMos                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsLauncherMos::ASN1C_MsgsLauncherMos (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsLauncherMos& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsLauncherMos (ASN1CTXT* ctxt_p, ASN1T_MsgsLauncherMos* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsLauncherMos: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_list_mission */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_list_mission");

         stat = asn1PE_MsgLauMos_ListMission (ctxt_p, pvalue->u.msg_list_mission);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_sim_launched */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_sim_launched");

         stat = asn1PE_MsgLauMos_SimLaunched (ctxt_p, pvalue->u.msg_sim_launched);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_list_sim */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_list_sim");

         stat = asn1PE_MsgLauMos_ListSim (ctxt_p, pvalue->u.msg_list_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_sim_failure */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_sim_failure");

         stat = asn1PE_MsgLauMos_SimFailure (ctxt_p, pvalue->u.msg_sim_failure);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_list_checkpoint */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_list_checkpoint");

         stat = asn1PE_MsgLauMos_ListCheckpoint (ctxt_p, pvalue->u.msg_list_checkpoint);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_exec_success */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_exec_success");

         stat = asn1PE_MsgLauMos_ExecSuccess (ctxt_p, pvalue->u.msg_exec_success);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsLauncherMos: end\n");
   return (stat);
}

int ASN1C_MsgsLauncherMos::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsLauncherMos (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsLauncherMos (ASN1CTXT* ctxt_p, ASN1T_MsgsLauncherMos* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsLauncherMos: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_list_mission */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_list_mission");

         pvalue->u.msg_list_mission = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLauMos_ListMission);
         if (pvalue->u.msg_list_mission == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLauMos_ListMission (ctxt_p, pvalue->u.msg_list_mission);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_sim_launched */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_sim_launched");

         pvalue->u.msg_sim_launched = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLauMos_SimLaunched);
         if (pvalue->u.msg_sim_launched == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLauMos_SimLaunched (ctxt_p, pvalue->u.msg_sim_launched);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_list_sim */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_list_sim");

         pvalue->u.msg_list_sim = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLauMos_ListSim);
         if (pvalue->u.msg_list_sim == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLauMos_ListSim (ctxt_p, pvalue->u.msg_list_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_sim_failure */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_sim_failure");

         stat = asn1PD_MsgLauMos_SimFailure (ctxt_p, &pvalue->u.msg_sim_failure);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_list_checkpoint */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_list_checkpoint");

         pvalue->u.msg_list_checkpoint = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLauMos_ListCheckpoint);
         if (pvalue->u.msg_list_checkpoint == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLauMos_ListCheckpoint (ctxt_p, pvalue->u.msg_list_checkpoint);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_exec_success */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_exec_success");

         pvalue->u.msg_exec_success = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLauMos_ExecSuccess);
         if (pvalue->u.msg_exec_success == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLauMos_ExecSuccess (ctxt_p, pvalue->u.msg_exec_success);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsLauncherMos: end\n");

   return (stat);
}

int ASN1C_MsgsLauncherMos::Decode ()
{
   return asn1PD_MsgsLauncherMos (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsLauncherSim                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsLauncherSim::ASN1C_MsgsLauncherSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsLauncherSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsLauncherSim (ASN1CTXT* ctxt_p, ASN1T_MsgsLauncherSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsLauncherSim: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ping */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ping");

         stat = asn1PE_MsgLauSim_Ping (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_sim */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_sim");

         stat = asn1PE_MsgLauSim_StopSim (ctxt_p, pvalue->u.msg_stop_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsLauncherSim: end\n");
   return (stat);
}

int ASN1C_MsgsLauncherSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsLauncherSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsLauncherSim (ASN1CTXT* ctxt_p, ASN1T_MsgsLauncherSim* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsLauncherSim: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ping */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ping");

         stat = asn1PD_MsgLauSim_Ping (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_sim */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_sim");

         stat = asn1PD_MsgLauSim_StopSim (ctxt_p, &pvalue->u.msg_stop_sim);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsLauncherSim: end\n");

   return (stat);
}

int ASN1C_MsgsLauncherSim::Decode ()
{
   return asn1PD_MsgsLauncherSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsSimLauncher                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimLauncher::ASN1C_MsgsSimLauncher (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimLauncher& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimLauncher (ASN1CTXT* ctxt_p, ASN1T_MsgsSimLauncher* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsSimLauncher: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_sim_launched */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_sim_launched");

         stat = asn1PE_MsgSimLau_SimLaunched (ctxt_p, pvalue->u.msg_sim_launched);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pong */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_pong");

         stat = asn1PE_MsgSimLau_Pong (ctxt_p, pvalue->u.msg_pong);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_exec_success */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_exec_success");

         stat = asn1PE_MsgSimLau_ExecSuccess (ctxt_p, pvalue->u.msg_exec_success);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PE_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsSimLauncher: end\n");
   return (stat);
}

int ASN1C_MsgsSimLauncher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimLauncher (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimLauncher (ASN1CTXT* ctxt_p, ASN1T_MsgsSimLauncher* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsSimLauncher: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_sim_launched */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_sim_launched");

         pvalue->u.msg_sim_launched = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSimLau_SimLaunched);
         if (pvalue->u.msg_sim_launched == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSimLau_SimLaunched (ctxt_p, pvalue->u.msg_sim_launched);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pong */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_pong");

         stat = asn1PD_MsgSimLau_Pong (ctxt_p, &pvalue->u.msg_pong);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_exec_success */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_exec_success");

         pvalue->u.msg_exec_success = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSimLau_ExecSuccess);
         if (pvalue->u.msg_exec_success == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSimLau_ExecSuccess (ctxt_p, pvalue->u.msg_exec_success);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* nb_choice */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.nb_choice");

         stat = asn1PD_NbChoice (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsSimLauncher: end\n");

   return (stat);
}

int ASN1C_MsgsSimLauncher::Decode ()
{
   return asn1PD_MsgsSimLauncher (mpContext->GetPtr(), &msgData);
}


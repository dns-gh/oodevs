/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_ABC.h"

void asn1Print_Mission_Automate_ABC_ArmerPointDeControle (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_ArmerPointDeControle* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_de_controle", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_de_controle);

}

void ASN1C_Mission_Automate_ABC_ArmerPointDeControle::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_ArmerPointDeControle (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_OrganiserAccueilColonneRefugies* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_installation", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_installation);

}

void ASN1C_Mission_Automate_ABC_OrganiserAccueilColonneRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_ProtegerPC (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_ProtegerPC* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pc", name);
   asn1Print_Automate (namebuf, &pvalue->pc);

}

void ASN1C_Mission_Automate_ABC_ProtegerPC::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_ProtegerPC (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_ABC_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Appuyer (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Attaquer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Attaquer* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_Attaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Attaquer (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_ContreAttaquer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_ContreAttaquer* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_ContreAttaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_ContreAttaquer (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Controler (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Controler* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_controler", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_controler);

}

void ASN1C_Mission_Automate_ABC_Controler::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Controler (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Couvrir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Couvrir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Polygon (namebuf, &pvalue->position_installation);

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_ABC_Couvrir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Couvrir (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_DonnerCoupArret (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_DonnerCoupArret* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_regroupement);

}

void ASN1C_Mission_Automate_ABC_DonnerCoupArret::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_DonnerCoupArret (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Eclairer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Eclairer* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_Eclairer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Eclairer (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_EffectuerRaid (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_EffectuerRaid* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_EffectuerRaid::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_EffectuerRaid (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Interdire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Interdire* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_Interdire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Interdire (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Jalonner (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Jalonner* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_Jalonner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Jalonner (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_PrendrePreciserContact (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_PrendrePreciserContact* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_PrendrePreciserContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_PrendrePreciserContact (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Reconnaitre (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Reconnaitre* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_Reconnaitre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Reconnaitre (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_ReconnaitrePoint (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_ReconnaitrePoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_a_reconnaitre", name);
   asn1Print_Polygon (namebuf, &pvalue->point_a_reconnaitre);

}

void ASN1C_Mission_Automate_ABC_ReconnaitrePoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_ReconnaitrePoint (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Reduire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Reduire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_resistance", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_resistance);

}

void ASN1C_Mission_Automate_ABC_Reduire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Reduire (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_ReleverEnDepassant (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_ReleverEnDepassant* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_ABC_ReleverEnDepassant::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_ReleverEnDepassant (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Semparer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Semparer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objectif", name);
   asn1Print_Polygon (namebuf, &pvalue->objectif);

}

void ASN1C_Mission_Automate_ABC_Semparer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Semparer (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Tenir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Tenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Polygon (namebuf, &pvalue->position_installation);

}

void ASN1C_Mission_Automate_ABC_Tenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Tenir (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Soutenir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Soutenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_ABC_Soutenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Soutenir (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_installation", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_installation);

}

void ASN1C_Mission_Automate_ABC_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_FlancGarder (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_FlancGarder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_ABC_FlancGarder::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_FlancGarder (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_renseigner", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_renseigner);

}

void ASN1C_Mission_Automate_ABC_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Fixer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Fixer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ennemis", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->ennemis);

}

void ASN1C_Mission_Automate_ABC_Fixer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Fixer (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_Freiner (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_Freiner* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_Freiner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_Freiner (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_SurveillerItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_SurveillerItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Automate_ABC_SurveillerItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_SurveillerItineraire (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_RenseignerSurUnAxe (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_RenseignerSurUnAxe* pvalue)
{
}

void ASN1C_Mission_Automate_ABC_RenseignerSurUnAxe::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_RenseignerSurUnAxe (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_RecueillirUnite (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_RecueillirUnite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_regroupement);

}

void ASN1C_Mission_Automate_ABC_RecueillirUnite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_RecueillirUnite (name, &msgData);
}

void asn1Print_Mission_Automate_ABC_EscorterUnConvoi (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ABC_EscorterUnConvoi* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.convoi_a_escorter", name);
   asn1Print_Agent (namebuf, &pvalue->convoi_a_escorter);

}

void ASN1C_Mission_Automate_ABC_EscorterUnConvoi::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ABC_EscorterUnConvoi (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_ALAT.h"

void asn1Print_Mission_Automate_ALAT_Heliporter (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Heliporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_heliporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_heliporter);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.attendre_unites", name);
   rtPrintBoolean (namebuf, pvalue->attendre_unites);

   sprintf (namebuf, "%s.avec_materiel", name);
   rtPrintBoolean (namebuf, pvalue->avec_materiel);

}

void ASN1C_Mission_Automate_ALAT_Heliporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Heliporter (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Jalonner (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Jalonner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Jalonner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Jalonner (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Helitransporter (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Helitransporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_helitransporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_helitransporter);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.avec_materiel", name);
   rtPrintBoolean (namebuf, pvalue->avec_materiel);

}

void ASN1C_Mission_Automate_ALAT_Helitransporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Helitransporter (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_ExtrairePersonnel (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_ExtrairePersonnel* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_helitransporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_helitransporter);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.avec_materiel", name);
   rtPrintBoolean (namebuf, pvalue->avec_materiel);

}

void ASN1C_Mission_Automate_ALAT_ExtrairePersonnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_ExtrairePersonnel (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_appuyer", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_appuyer);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.point_dislocation", name);
   asn1Print_Point (namebuf, &pvalue->point_dislocation);

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Appuyer (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Couvrir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Couvrir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_appuyer", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_appuyer);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Couvrir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Couvrir (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.point_logistique", name);
   asn1Print_Point (namebuf, &pvalue->point_logistique);

}

void ASN1C_Mission_Automate_ALAT_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Reconnaitre (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Reconnaitre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pointRegroupement", name);
   asn1Print_Point (namebuf, &pvalue->pointRegroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Reconnaitre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Reconnaitre (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Freiner (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Freiner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Freiner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Freiner (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Escorter (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Escorter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_escorter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_escorter);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Escorter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Escorter (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_Attaquer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_Attaquer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_Attaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_Attaquer (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_RecueillirFormationAeromobile (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_RecueillirFormationAeromobile* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_RecueillirFormationAeromobile::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_RecueillirFormationAeromobile (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_AttaquerFormationAeromobile (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_AttaquerFormationAeromobile* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_attaquer", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->unites_a_attaquer);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_AttaquerFormationAeromobile::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_AttaquerFormationAeromobile (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_DonnerCoupArret (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_DonnerCoupArret* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Automate_ALAT_DonnerCoupArret::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_DonnerCoupArret (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.point_dislocation", name);
   asn1Print_Point (namebuf, &pvalue->point_dislocation);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.neutraliser", name);
   rtPrintBoolean (namebuf, pvalue->neutraliser);

}

void ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_DetruireNeutraliserDansZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_DetruireNeutraliserDansZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.point_dislocation", name);
   asn1Print_Point (namebuf, &pvalue->point_dislocation);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.neutraliser", name);
   rtPrintBoolean (namebuf, pvalue->neutraliser);

}

void ASN1C_Mission_Automate_ALAT_DetruireNeutraliserDansZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_DetruireNeutraliserDansZone (name, &msgData);
}

void asn1Print_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_secourir", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_secourir);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

}

void ASN1C_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_ASA.h"

void asn1Print_EnumModeDeploiement (ASN1ConstCharPtr name, ASN1T_EnumModeDeploiement* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("en_carre\n"); break;
      case 1: printf ("en_triangle\n"); break;
      case 2: printf ("nasse_trois_sections\n"); break;
      case 3: printf ("nasse_quatre_sections\n"); break;
      case 4: printf ("double_rideau\n"); break;
      case 5: printf ("simple_rideau\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumModeDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumModeDeploiement (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_DefendreZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_DefendreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.positions_sections", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_sections);

}

void ASN1C_Mission_Automate_ASA_DefendreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_DefendreZone (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_DefendreSite (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_DefendreSite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.positions_sections", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_sections);

}

void ASN1C_Mission_Automate_ASA_DefendreSite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_DefendreSite (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.positions_sections", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_sections);

}

void ASN1C_Mission_Automate_ASA_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_DefendreItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_DefendreItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Automate_ASA_DefendreItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_DefendreItineraire (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_MISTRAL_DefendreZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_MISTRAL_DefendreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiement (namebuf, &pvalue->mode_deploiement);

   sprintf (namebuf, "%s.angle", name);
   asn1Print_Angle (namebuf, &pvalue->angle);

}

void ASN1C_Mission_Automate_ASA_MISTRAL_DefendreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_MISTRAL_DefendreZone (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_MISTRAL_DefendreSite (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_MISTRAL_DefendreSite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiement (namebuf, &pvalue->mode_deploiement);

   sprintf (namebuf, "%s.angle", name);
   asn1Print_Angle (namebuf, &pvalue->angle);

}

void ASN1C_Mission_Automate_ASA_MISTRAL_DefendreSite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_MISTRAL_DefendreSite (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_MISTRAL_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_MISTRAL_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiement (namebuf, &pvalue->mode_deploiement);

   sprintf (namebuf, "%s.angle", name);
   asn1Print_Angle (namebuf, &pvalue->angle);

}

void ASN1C_Mission_Automate_ASA_MISTRAL_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_MISTRAL_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_HAWK_DefendreZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_HAWK_DefendreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.positions_sections", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_sections);

}

void ASN1C_Mission_Automate_ASA_HAWK_DefendreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_HAWK_DefendreZone (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_HAWK_DefendreSite (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_HAWK_DefendreSite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.positions_sections", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_sections);

}

void ASN1C_Mission_Automate_ASA_HAWK_DefendreSite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_HAWK_DefendreSite (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_HAWK_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_HAWK_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.positions_sections", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_sections);

}

void ASN1C_Mission_Automate_ASA_HAWK_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_HAWK_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_ASA_DefendreUnites (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASA_DefendreUnites* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites);

}

void ASN1C_Mission_Automate_ASA_DefendreUnites::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASA_DefendreUnites (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_ASS.h"

void asn1Print_Mission_Automate_ASS_SeDeployer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASS_SeDeployer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_deploiement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_deploiement);

}

void ASN1C_Mission_Automate_ASS_SeDeployer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASS_SeDeployer (name, &msgData);
}

void asn1Print_Mission_Automate_ASS_ReconnaitreZonesDeploiement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASS_ReconnaitreZonesDeploiement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.positions_a_reconnaitre", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_a_reconnaitre);

}

void ASN1C_Mission_Automate_ASS_ReconnaitreZonesDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASS_ReconnaitreZonesDeploiement (name, &msgData);
}

void asn1Print_Mission_Automate_ASS_AcquerirObjectifs (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ASS_AcquerirObjectifs* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zones_a_observer", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones_a_observer);

   sprintf (namebuf, "%s.positions_deploiement", name);
   asn1Print_ListPoint (namebuf, &pvalue->positions_deploiement);

   sprintf (namebuf, "%s.categories", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->categories);

}

void ASN1C_Mission_Automate_ASS_AcquerirObjectifs::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ASS_AcquerirObjectifs (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_GEN.h"

void asn1Print_EnumMissionGenPriorite (ASN1ConstCharPtr name, ASN1T_EnumMissionGenPriorite* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("prioritaire\n"); break;
      case 1: printf ("normal\n"); break;
      case 2: printf ("peu_prioritaire\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumMissionGenPriorite::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumMissionGenPriorite (name, &msgData);
}

void asn1Print_MissionGenObject (ASN1ConstCharPtr name, ASN1T_MissionGenObject* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_obstacle", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->type_obstacle);

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Localisation (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.urgence", name);
   asn1Print_EnumMissionGenUrgence (namebuf, &pvalue->urgence);

   sprintf (namebuf, "%s.preliminaire", name);
   asn1Print_EnumMissionGenSousTypeObstacle (namebuf, &pvalue->preliminaire);

   sprintf (namebuf, "%s.priorite", name);
   asn1Print_EnumMissionGenPriorite (namebuf, &pvalue->priorite);

}

void ASN1C_MissionGenObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_MissionGenObject (name, &msgData);
}

void asn1Print_ListMissionGenObject (ASN1ConstCharPtr name, ASN1T_ListMissionGenObject* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_MissionGenObject (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListMissionGenObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListMissionGenObject (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_SeDeployer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_SeDeployer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_deploiement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_deploiement);

}

void ASN1C_Mission_Automate_GEN_SeDeployer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_SeDeployer (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_FaireFranchir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_FaireFranchir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.sites_de_franchissement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->sites_de_franchissement);

   sprintf (namebuf, "%s.zone_regroupement", name);
   asn1Print_Localisation (namebuf, &pvalue->zone_regroupement);

}

void ASN1C_Mission_Automate_GEN_FaireFranchir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_FaireFranchir (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RealiserSystemeObstacles (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RealiserSystemeObstacles* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacles", name);
   asn1Print_ListMissionGenObject (namebuf, &pvalue->obstacles);

}

void ASN1C_Mission_Automate_GEN_RealiserSystemeObstacles::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RealiserSystemeObstacles (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_FranchirDeViveForce (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_FranchirDeViveForce* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacles_a_franchir", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->obstacles_a_franchir);

}

void ASN1C_Mission_Automate_GEN_FranchirDeViveForce::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_FranchirDeViveForce (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RetablirItineraires (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RetablirItineraires* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraires", name);
   asn1Print_ListItineraire (namebuf, &pvalue->itineraires);

}

void ASN1C_Mission_Automate_GEN_RetablirItineraires::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RetablirItineraires (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_AmenagerAireStationnement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_AmenagerAireStationnement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.travaux", name);
   asn1Print_ListMissionGenObject (namebuf, &pvalue->travaux);

}

void ASN1C_Mission_Automate_GEN_AmenagerAireStationnement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_AmenagerAireStationnement (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_AmenagerTerrainPoserSommaire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.terrain", name);
   asn1Print_MissionGenObject (namebuf, &pvalue->terrain);

}

void ASN1C_Mission_Automate_GEN_AmenagerTerrainPoserSommaire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RealiserZonePoser (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RealiserZonePoser* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_MissionGenObject (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_GEN_RealiserZonePoser::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RealiserZonePoser (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_ReconnaitreZoneDeploiement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_ReconnaitreZoneDeploiement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_GEN_ReconnaitreZoneDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_ReconnaitreZoneDeploiement (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RealiserCampPrisonniers (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RealiserCampPrisonniers* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.camp", name);
   asn1Print_Polygon (namebuf, &pvalue->camp);

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

}

void ASN1C_Mission_Automate_GEN_RealiserCampPrisonniers::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RealiserCampPrisonniers (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RealiserCampRefugies (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RealiserCampRefugies* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.camp", name);
   asn1Print_Polygon (namebuf, &pvalue->camp);

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

}

void ASN1C_Mission_Automate_GEN_RealiserCampRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RealiserCampRefugies (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.plates_formes", name);
   asn1Print_ListMissionGenObject (namebuf, &pvalue->plates_formes);

}

void ASN1C_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.travaux", name);
   asn1Print_ListMissionGenObject (namebuf, &pvalue->travaux);

}

void ASN1C_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_AppuyerDebarquementTroupes (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_AppuyerDebarquementTroupes* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zones_debarquement", name);
   asn1Print_ListMissionGenObject (namebuf, &pvalue->zones_debarquement);

}

void ASN1C_Mission_Automate_GEN_AppuyerDebarquementTroupes::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_AppuyerDebarquementTroupes (name, &msgData);
}

void asn1Print_Mission_Automate_GEN_OuvrirAxesProgression (ASN1ConstCharPtr name, ASN1T_Mission_Automate_GEN_OuvrirAxesProgression* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.axes", name);
   asn1Print_ListItineraire (namebuf, &pvalue->axes);

}

void ASN1C_Mission_Automate_GEN_OuvrirAxesProgression::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_GEN_OuvrirAxesProgression (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_INF.h"

void asn1Print_Mission_Automate_INF_AttaquerSouplesse (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_AttaquerSouplesse* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objectifs", name);
   asn1Print_ListPoint (namebuf, &pvalue->objectifs);

}

void ASN1C_Mission_Automate_INF_AttaquerSouplesse::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_AttaquerSouplesse (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_INF_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Appuyer (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Controler (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Controler* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Automate_INF_Controler::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Controler (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Couvrir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Couvrir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

   sprintf (namebuf, "%s.objectifs", name);
   asn1Print_ListPoint (namebuf, &pvalue->objectifs);

}

void ASN1C_Mission_Automate_INF_Couvrir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Couvrir (name, &msgData);
}

void asn1Print_Mission_Automate_INF_DonnerCoupArret (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_DonnerCoupArret* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_regroupement);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Automate_INF_DonnerCoupArret::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_DonnerCoupArret (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Eclairer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Eclairer* pvalue)
{
}

void ASN1C_Mission_Automate_INF_Eclairer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Eclairer (name, &msgData);
}

void asn1Print_Mission_Automate_INF_FlancGarder (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_FlancGarder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_INF_FlancGarder::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_FlancGarder (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Freiner (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Freiner* pvalue)
{
}

void ASN1C_Mission_Automate_INF_Freiner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Freiner (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Harceler (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Harceler* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_surveillance", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_surveillance);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->point_regroupement);

}

void ASN1C_Mission_Automate_INF_Harceler::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Harceler (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Interdire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Interdire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.points_a_interdire", name);
   asn1Print_ListPoint (namebuf, &pvalue->points_a_interdire);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Automate_INF_Interdire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Interdire (name, &msgData);
}

void asn1Print_Mission_Automate_INF_MenerDefenseUsure (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_MenerDefenseUsure* pvalue)
{
}

void ASN1C_Mission_Automate_INF_MenerDefenseUsure::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_MenerDefenseUsure (name, &msgData);
}

void asn1Print_Mission_Automate_INF_PrendrePreciserMaintenirContact (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_PrendrePreciserMaintenirContact* pvalue)
{
}

void ASN1C_Mission_Automate_INF_PrendrePreciserMaintenirContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_PrendrePreciserMaintenirContact (name, &msgData);
}

void asn1Print_Mission_Automate_INF_ReconnaissanceOffensive (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_ReconnaissanceOffensive* pvalue)
{
}

void ASN1C_Mission_Automate_INF_ReconnaissanceOffensive::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_ReconnaissanceOffensive (name, &msgData);
}

void asn1Print_Mission_Automate_INF_RecueillirUnite (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_RecueillirUnite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_deploiement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_deploiement);

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

   sprintf (namebuf, "%s.pias", name);
   asn1Print_ListPoint (namebuf, &pvalue->pias);

}

void ASN1C_Mission_Automate_INF_RecueillirUnite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_RecueillirUnite (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Reduire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Reduire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.points_resistance", name);
   asn1Print_ListPoint (namebuf, &pvalue->points_resistance);

}

void ASN1C_Mission_Automate_INF_Reduire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Reduire (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Relever (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Relever* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_INF_Relever::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Relever (name, &msgData);
}

void asn1Print_Mission_Automate_INF_RompreContact (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_RompreContact* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_regroupement);

}

void ASN1C_Mission_Automate_INF_RompreContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_RompreContact (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.zone_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_regroupement);

}

void ASN1C_Mission_Automate_INF_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Semparer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Semparer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objectif", name);
   asn1Print_Polygon (namebuf, &pvalue->objectif);

}

void ASN1C_Mission_Automate_INF_Semparer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Semparer (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Fixer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Fixer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ennemis", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->ennemis);

}

void ASN1C_Mission_Automate_INF_Fixer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Fixer (name, &msgData);
}

void asn1Print_Mission_Automate_INF_AttaquerEnTerrainDifficile (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_AttaquerEnTerrainDifficile* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objectifs", name);
   asn1Print_ListPoint (namebuf, &pvalue->objectifs);

}

void ASN1C_Mission_Automate_INF_AttaquerEnTerrainDifficile::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_AttaquerEnTerrainDifficile (name, &msgData);
}

void asn1Print_Mission_Automate_INF_BarrerDirection (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_BarrerDirection* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position", name);
   asn1Print_Polygon (namebuf, &pvalue->position);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Automate_INF_BarrerDirection::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_BarrerDirection (name, &msgData);
}

void asn1Print_Mission_Automate_INF_DefendreFerme (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_DefendreFerme* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position", name);
   asn1Print_Polygon (namebuf, &pvalue->position);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Automate_INF_DefendreFerme::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_DefendreFerme (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Tenir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Tenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position", name);
   asn1Print_Polygon (namebuf, &pvalue->position);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Automate_INF_Tenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Tenir (name, &msgData);
}

void asn1Print_Mission_Automate_INF_AppuyerUnFreinage (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_AppuyerUnFreinage* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_INF_AppuyerUnFreinage::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_AppuyerUnFreinage (name, &msgData);
}

void asn1Print_Mission_Automate_INF_AppuyerUneAttaque (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_AppuyerUneAttaque* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_INF_AppuyerUneAttaque::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_AppuyerUneAttaque (name, &msgData);
}

void asn1Print_Mission_Automate_INF_Soutenir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_INF_Soutenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie);

}

void ASN1C_Mission_Automate_INF_Soutenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_INF_Soutenir (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_LOG.h"

void asn1Print_Mission_Automate_LOG_SeDeployer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_SeDeployer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Automate_LOG_SeDeployer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_SeDeployer (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_AppuyerMouvement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_AppuyerMouvement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_appuyer", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_appuyer);

}

void ASN1C_Mission_Automate_LOG_AppuyerMouvement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_AppuyerMouvement (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_ReconnaitreItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_ReconnaitreItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire_log", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire_log);

}

void ASN1C_Mission_Automate_LOG_ReconnaitreItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_ReconnaitreItineraire (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_Surveiller (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_TransporterFormationBlindee (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_TransporterFormationBlindee* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_transporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_transporter);

   sprintf (namebuf, "%s.point_rendez_vous", name);
   asn1Print_Point (namebuf, &pvalue->point_rendez_vous);

   sprintf (namebuf, "%s.point_destination", name);
   asn1Print_Point (namebuf, &pvalue->point_destination);

}

void ASN1C_Mission_Automate_LOG_TransporterFormationBlindee::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_TransporterFormationBlindee (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_AppuyerMouvementDansZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_AppuyerMouvementDansZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_AppuyerMouvementDansZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_AppuyerMouvementDansZone (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_AppuyerFranchissementDansZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_AppuyerFranchissementDansZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_AppuyerFranchissementDansZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_AppuyerFranchissementDansZone (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_BloquerZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_BloquerZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_BloquerZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_BloquerZone (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_ReconnaitreZoneContaminee (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_ReconnaitreZoneContaminee* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_ReconnaitreZoneContaminee::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_ReconnaitreZoneContaminee (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement (name, &msgData);
}

void asn1Print_Mission_Automate_LOG_ArmerPIAs (ASN1ConstCharPtr name, ASN1T_Mission_Automate_LOG_ArmerPIAs* pvalue)
{
}

void ASN1C_Mission_Automate_LOG_ArmerPIAs::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_LOG_ArmerPIAs (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_Misc.h"

void asn1Print_Mission_Automate_Test_MoveTo (ASN1ConstCharPtr name, ASN1T_Mission_Automate_Test_MoveTo* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Automate_Test_MoveTo::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_Test_MoveTo (name, &msgData);
}

void asn1Print_Mission_Automate_Decrocher (ASN1ConstCharPtr name, ASN1T_Mission_Automate_Decrocher* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->point_regroupement);

}

void ASN1C_Mission_Automate_Decrocher::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_Decrocher (name, &msgData);
}

void asn1Print_Mission_Automate_ReleverSurPlace (ASN1ConstCharPtr name, ASN1T_Mission_Automate_ReleverSurPlace* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.compagnie_a_relever", name);
   asn1Print_Automate (namebuf, &pvalue->compagnie_a_relever);

   sprintf (namebuf, "%s.zone_installation", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_installation);

}

void ASN1C_Mission_Automate_ReleverSurPlace::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_ReleverSurPlace (name, &msgData);
}

void asn1Print_Mission_Automate_FaireMouvement (ASN1ConstCharPtr name, ASN1T_Mission_Automate_FaireMouvement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Automate_FaireMouvement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_FaireMouvement (name, &msgData);
}

void asn1Print_Mission_Automate_SeFaireDecontaminer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_SeFaireDecontaminer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_arrivee", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_arrivee);

   sprintf (namebuf, "%s.site_decontamination", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_decontamination);

}

void ASN1C_Mission_Automate_SeFaireDecontaminer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_SeFaireDecontaminer (name, &msgData);
}

void asn1Print_Mission_Automate_Franchir (ASN1ConstCharPtr name, ASN1T_Mission_Automate_Franchir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pont_flottant", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->pont_flottant);

   sprintf (namebuf, "%s.zone_arrivee", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_arrivee);

}

void ASN1C_Mission_Automate_Franchir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_Franchir (name, &msgData);
}

void asn1Print_Mission_Automate_Stationner (ASN1ConstCharPtr name, ASN1T_Mission_Automate_Stationner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_attente", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_attente);

}

void ASN1C_Mission_Automate_Stationner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_Stationner (name, &msgData);
}

void asn1Print_Mission_Automate_SeFaireTransporter (ASN1ConstCharPtr name, ASN1T_Mission_Automate_SeFaireTransporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_embarquement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_embarquement);

}

void ASN1C_Mission_Automate_SeFaireTransporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_SeFaireTransporter (name, &msgData);
}

void asn1Print_Mission_Automate_SeRecompleter (ASN1ConstCharPtr name, ASN1T_Mission_Automate_SeRecompleter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_ravitaillement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_ravitaillement);

}

void ASN1C_Mission_Automate_SeRecompleter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_SeRecompleter (name, &msgData);
}

void asn1Print_Mission_Automate_SeRendre (ASN1ConstCharPtr name, ASN1T_Mission_Automate_SeRendre* pvalue)
{
}

void ASN1C_Mission_Automate_SeRendre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_SeRendre (name, &msgData);
}

void asn1Print_Mission_Automate_FaireMouvementVersCampRefugies (ASN1ConstCharPtr name, ASN1T_Mission_Automate_FaireMouvementVersCampRefugies* pvalue)
{
}

void ASN1C_Mission_Automate_FaireMouvementVersCampRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_FaireMouvementVersCampRefugies (name, &msgData);
}

void asn1Print_Mission_Automate_Generique (ASN1ConstCharPtr name, ASN1T_Mission_Automate_Generique* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zones", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones);

   sprintf (namebuf, "%s.points", name);
   asn1Print_ListPoint (namebuf, &pvalue->points);

   sprintf (namebuf, "%s.itineraires", name);
   asn1Print_ListItineraire (namebuf, &pvalue->itineraires);

   sprintf (namebuf, "%s.unites", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites);

   sprintf (namebuf, "%s.automates", name);
   asn1Print_ListAutomate (namebuf, &pvalue->automates);

   sprintf (namebuf, "%s.connaissances_agents", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->connaissances_agents);

   sprintf (namebuf, "%s.connaissances_objets", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->connaissances_objets);

}

void ASN1C_Mission_Automate_Generique::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_Generique (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_NBC.h"

void asn1Print_Mission_Automate_NBC_ReconnaitreUnAxe (ASN1ConstCharPtr name, ASN1T_Mission_Automate_NBC_ReconnaitreUnAxe* pvalue)
{
}

void ASN1C_Mission_Automate_NBC_ReconnaitreUnAxe::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_NBC_ReconnaitreUnAxe (name, &msgData);
}

void asn1Print_Mission_Automate_NBC_ReconnaitreUneZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_NBC_ReconnaitreUneZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_NBC_ReconnaitreUneZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_NBC_ReconnaitreUneZone (name, &msgData);
}

void asn1Print_Mission_Automate_NBC_ArmerUnSiteDeDecontamination (ASN1ConstCharPtr name, ASN1T_Mission_Automate_NBC_ArmerUnSiteDeDecontamination* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site", name);
   asn1Print_Polygon (namebuf, &pvalue->site);

}

void ASN1C_Mission_Automate_NBC_ArmerUnSiteDeDecontamination::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_NBC_ArmerUnSiteDeDecontamination (name, &msgData);
}

void asn1Print_Mission_Automate_NBC_DecontaminerUneZone (ASN1ConstCharPtr name, ASN1T_Mission_Automate_NBC_DecontaminerUneZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_NBC_DecontaminerUneZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_NBC_DecontaminerUneZone (name, &msgData);
}

void asn1Print_Mission_Automate_NBC_ReconnaitreDesSitesROTA (ASN1ConstCharPtr name, ASN1T_Mission_Automate_NBC_ReconnaitreDesSitesROTA* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.sites_ROTA", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->sites_ROTA);

}

void ASN1C_Mission_Automate_NBC_ReconnaitreDesSitesROTA::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_NBC_ReconnaitreDesSitesROTA (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_RENS.h"

void asn1Print_Mission_Automate_RENS_ROHUM_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROHUM_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_observer", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_observer);

}

void ASN1C_Mission_Automate_RENS_ROHUM_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROHUM_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_ROHUM_OrienterGuider (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROHUM_OrienterGuider* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ami", name);
   asn1Print_Automate (namebuf, &pvalue->ami);

}

void ASN1C_Mission_Automate_RENS_ROHUM_OrienterGuider::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROHUM_OrienterGuider (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_ROHUM_SExfiltrer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROHUM_SExfiltrer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_de_regroupement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_de_regroupement);

}

void ASN1C_Mission_Automate_RENS_ROHUM_SExfiltrer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROHUM_SExfiltrer (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_ROIM_CL289_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROIM_CL289_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ficelle_de_vole", name);
   asn1Print_Itineraire (namebuf, &pvalue->ficelle_de_vole);

   sprintf (namebuf, "%s.zones_de_recherche", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones_de_recherche);

}

void ASN1C_Mission_Automate_RENS_ROIM_CL289_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROIM_CL289_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ficelle_de_vole", name);
   asn1Print_Itineraire (namebuf, &pvalue->ficelle_de_vole);

}

void ASN1C_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_ROEM_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROEM_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

}

void ASN1C_Mission_Automate_RENS_ROEM_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROEM_Appuyer (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_ROEM_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_ROEM_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_RENS_ROEM_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_ROEM_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Automate_RENS_RADINT_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Automate_RENS_RADINT_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Automate_RENS_RADINT_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_RENS_RADINT_RenseignerSur (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateMission_TRANS.h"

void asn1Print_Mission_Automate_TRANS_Commander (ASN1ConstCharPtr name, ASN1T_Mission_Automate_TRANS_Commander* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_deploiement", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_deploiement);

}

void ASN1C_Mission_Automate_TRANS_Commander::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate_TRANS_Commander (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioAutomateOrder.h"

void asn1Print_Mission_Automate (ASN1ConstCharPtr name, ASN1T_Mission_Automate* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.mission_automate_alat_effectuer_recherche_et_sauvetage", name);
         asn1Print_Mission_Automate_ALAT_EffectuerRechercheEtSauvetage (namebuf, pvalue->u.mission_automate_alat_effectuer_recherche_et_sauvetage);
         break;

      case 2:
         sprintf (namebuf, "%s.u.mission_automate_alat_extraire_personnel", name);
         asn1Print_Mission_Automate_ALAT_ExtrairePersonnel (namebuf, pvalue->u.mission_automate_alat_extraire_personnel);
         break;

      case 3:
         sprintf (namebuf, "%s.u.mission_automate_alat_detruire_neutraliser_dans_profondeur", name);
         asn1Print_Mission_Automate_ALAT_DetruireNeutraliserDansProfondeur (namebuf, pvalue->u.mission_automate_alat_detruire_neutraliser_dans_profondeur);
         break;

      case 4:
         sprintf (namebuf, "%s.u.mission_automate_alat_detruire_neutraliser_dans_zone", name);
         asn1Print_Mission_Automate_ALAT_DetruireNeutraliserDansZone (namebuf, pvalue->u.mission_automate_alat_detruire_neutraliser_dans_zone);
         break;

      case 5:
         sprintf (namebuf, "%s.u.mission_automate_alat_donner_coup_arret", name);
         asn1Print_Mission_Automate_ALAT_DonnerCoupArret (namebuf, pvalue->u.mission_automate_alat_donner_coup_arret);
         break;

      case 6:
         sprintf (namebuf, "%s.u.mission_automate_alat_attaquer_formation_aeromobile", name);
         asn1Print_Mission_Automate_ALAT_AttaquerFormationAeromobile (namebuf, pvalue->u.mission_automate_alat_attaquer_formation_aeromobile);
         break;

      case 7:
         sprintf (namebuf, "%s.u.mission_automate_alat_recueillir_formation_aeromobile", name);
         asn1Print_Mission_Automate_ALAT_RecueillirFormationAeromobile (namebuf, pvalue->u.mission_automate_alat_recueillir_formation_aeromobile);
         break;

      case 8:
         sprintf (namebuf, "%s.u.mission_automate_alat_heliporter", name);
         asn1Print_Mission_Automate_ALAT_Heliporter (namebuf, pvalue->u.mission_automate_alat_heliporter);
         break;

      case 9:
         sprintf (namebuf, "%s.u.mission_automate_alat_jalonner", name);
         asn1Print_Mission_Automate_ALAT_Jalonner (namebuf, pvalue->u.mission_automate_alat_jalonner);
         break;

      case 10:
         sprintf (namebuf, "%s.u.mission_automate_alat_helitransporter", name);
         asn1Print_Mission_Automate_ALAT_Helitransporter (namebuf, pvalue->u.mission_automate_alat_helitransporter);
         break;

      case 11:
         sprintf (namebuf, "%s.u.mission_automate_alat_appuyer", name);
         asn1Print_Mission_Automate_ALAT_Appuyer (namebuf, pvalue->u.mission_automate_alat_appuyer);
         break;

      case 12:
         sprintf (namebuf, "%s.u.mission_automate_alat_couvrir", name);
         asn1Print_Mission_Automate_ALAT_Couvrir (namebuf, pvalue->u.mission_automate_alat_couvrir);
         break;

      case 13:
         sprintf (namebuf, "%s.u.mission_automate_alat_surveiller", name);
         asn1Print_Mission_Automate_ALAT_Surveiller (namebuf, pvalue->u.mission_automate_alat_surveiller);
         break;

      case 14:
         sprintf (namebuf, "%s.u.mission_automate_alat_reconnaitre", name);
         asn1Print_Mission_Automate_ALAT_Reconnaitre (namebuf, pvalue->u.mission_automate_alat_reconnaitre);
         break;

      case 15:
         sprintf (namebuf, "%s.u.mission_automate_alat_freiner", name);
         asn1Print_Mission_Automate_ALAT_Freiner (namebuf, pvalue->u.mission_automate_alat_freiner);
         break;

      case 16:
         sprintf (namebuf, "%s.u.mission_automate_alat_escorter", name);
         asn1Print_Mission_Automate_ALAT_Escorter (namebuf, pvalue->u.mission_automate_alat_escorter);
         break;

      case 17:
         sprintf (namebuf, "%s.u.mission_automate_alat_attaquer", name);
         asn1Print_Mission_Automate_ALAT_Attaquer (namebuf, pvalue->u.mission_automate_alat_attaquer);
         break;

      case 18:
         sprintf (namebuf, "%s.u.mission_automate_asa_defendre_site", name);
         asn1Print_Mission_Automate_ASA_DefendreSite (namebuf, pvalue->u.mission_automate_asa_defendre_site);
         break;

      case 19:
         sprintf (namebuf, "%s.u.mission_automate_asa_defendre_zone", name);
         asn1Print_Mission_Automate_ASA_DefendreZone (namebuf, pvalue->u.mission_automate_asa_defendre_zone);
         break;

      case 20:
         sprintf (namebuf, "%s.u.mission_automate_asa_defendre_unites", name);
         asn1Print_Mission_Automate_ASA_DefendreUnites (namebuf, pvalue->u.mission_automate_asa_defendre_unites);
         break;

      case 21:
         sprintf (namebuf, "%s.u.mission_automate_asa_surveiller", name);
         asn1Print_Mission_Automate_ASA_Surveiller (namebuf, pvalue->u.mission_automate_asa_surveiller);
         break;

      case 22:
         sprintf (namebuf, "%s.u.mission_automate_asa_defendre_itineraire", name);
         asn1Print_Mission_Automate_ASA_DefendreItineraire (namebuf, pvalue->u.mission_automate_asa_defendre_itineraire);
         break;

      case 23:
         sprintf (namebuf, "%s.u.mission_automate_asa_mistral_defendre_zone", name);
         asn1Print_Mission_Automate_ASA_MISTRAL_DefendreZone (namebuf, pvalue->u.mission_automate_asa_mistral_defendre_zone);
         break;

      case 24:
         sprintf (namebuf, "%s.u.mission_automate_asa_mistral_defendre_site", name);
         asn1Print_Mission_Automate_ASA_MISTRAL_DefendreSite (namebuf, pvalue->u.mission_automate_asa_mistral_defendre_site);
         break;

      case 25:
         sprintf (namebuf, "%s.u.mission_automate_asa_mistral_surveiller", name);
         asn1Print_Mission_Automate_ASA_MISTRAL_Surveiller (namebuf, pvalue->u.mission_automate_asa_mistral_surveiller);
         break;

      case 26:
         sprintf (namebuf, "%s.u.mission_automate_asa_hawk_defendre_zone", name);
         asn1Print_Mission_Automate_ASA_HAWK_DefendreZone (namebuf, pvalue->u.mission_automate_asa_hawk_defendre_zone);
         break;

      case 27:
         sprintf (namebuf, "%s.u.mission_automate_asa_hawk_defendre_site", name);
         asn1Print_Mission_Automate_ASA_HAWK_DefendreSite (namebuf, pvalue->u.mission_automate_asa_hawk_defendre_site);
         break;

      case 28:
         sprintf (namebuf, "%s.u.mission_automate_asa_hawk_surveiller", name);
         asn1Print_Mission_Automate_ASA_HAWK_Surveiller (namebuf, pvalue->u.mission_automate_asa_hawk_surveiller);
         break;

      case 29:
         sprintf (namebuf, "%s.u.mission_automate_ass_se_deployer", name);
         asn1Print_Mission_Automate_ASS_SeDeployer (namebuf, pvalue->u.mission_automate_ass_se_deployer);
         break;

      case 30:
         sprintf (namebuf, "%s.u.mission_automate_ass_reconnaitre_zones_deploiement", name);
         asn1Print_Mission_Automate_ASS_ReconnaitreZonesDeploiement (namebuf, pvalue->u.mission_automate_ass_reconnaitre_zones_deploiement);
         break;

      case 31:
         sprintf (namebuf, "%s.u.mission_automate_ass_acquerir_objectifs", name);
         asn1Print_Mission_Automate_ASS_AcquerirObjectifs (namebuf, pvalue->u.mission_automate_ass_acquerir_objectifs);
         break;

      case 32:
         sprintf (namebuf, "%s.u.mission_automate_abc_appuyer", name);
         asn1Print_Mission_Automate_ABC_Appuyer (namebuf, pvalue->u.mission_automate_abc_appuyer);
         break;

      case 33:
         sprintf (namebuf, "%s.u.mission_automate_abc_attaquer", name);
         asn1Print_Mission_Automate_ABC_Attaquer (namebuf, pvalue->u.mission_automate_abc_attaquer);
         break;

      case 34:
         sprintf (namebuf, "%s.u.mission_automate_abc_contre_attaquer", name);
         asn1Print_Mission_Automate_ABC_ContreAttaquer (namebuf, pvalue->u.mission_automate_abc_contre_attaquer);
         break;

      case 35:
         sprintf (namebuf, "%s.u.mission_automate_abc_controler", name);
         asn1Print_Mission_Automate_ABC_Controler (namebuf, pvalue->u.mission_automate_abc_controler);
         break;

      case 36:
         sprintf (namebuf, "%s.u.mission_automate_abc_couvrir", name);
         asn1Print_Mission_Automate_ABC_Couvrir (namebuf, pvalue->u.mission_automate_abc_couvrir);
         break;

      case 37:
         sprintf (namebuf, "%s.u.mission_automate_abc_donner_coup_arret", name);
         asn1Print_Mission_Automate_ABC_DonnerCoupArret (namebuf, pvalue->u.mission_automate_abc_donner_coup_arret);
         break;

      case 38:
         sprintf (namebuf, "%s.u.mission_automate_abc_eclairer", name);
         asn1Print_Mission_Automate_ABC_Eclairer (namebuf, pvalue->u.mission_automate_abc_eclairer);
         break;

      case 39:
         sprintf (namebuf, "%s.u.mission_automate_abc_effectuer_raid", name);
         asn1Print_Mission_Automate_ABC_EffectuerRaid (namebuf, pvalue->u.mission_automate_abc_effectuer_raid);
         break;

      case 40:
         sprintf (namebuf, "%s.u.mission_automate_abc_interdire", name);
         asn1Print_Mission_Automate_ABC_Interdire (namebuf, pvalue->u.mission_automate_abc_interdire);
         break;

      case 41:
         sprintf (namebuf, "%s.u.mission_automate_abc_jalonner", name);
         asn1Print_Mission_Automate_ABC_Jalonner (namebuf, pvalue->u.mission_automate_abc_jalonner);
         break;

      case 42:
         sprintf (namebuf, "%s.u.mission_automate_abc_prendre_preciser_contact", name);
         asn1Print_Mission_Automate_ABC_PrendrePreciserContact (namebuf, pvalue->u.mission_automate_abc_prendre_preciser_contact);
         break;

      case 43:
         sprintf (namebuf, "%s.u.mission_automate_abc_reconnaitre", name);
         asn1Print_Mission_Automate_ABC_Reconnaitre (namebuf, pvalue->u.mission_automate_abc_reconnaitre);
         break;

      case 44:
         sprintf (namebuf, "%s.u.mission_automate_abc_reconnaitre_point", name);
         asn1Print_Mission_Automate_ABC_ReconnaitrePoint (namebuf, pvalue->u.mission_automate_abc_reconnaitre_point);
         break;

      case 45:
         sprintf (namebuf, "%s.u.mission_automate_abc_reduire", name);
         asn1Print_Mission_Automate_ABC_Reduire (namebuf, pvalue->u.mission_automate_abc_reduire);
         break;

      case 46:
         sprintf (namebuf, "%s.u.mission_automate_abc_relever_en_depassant", name);
         asn1Print_Mission_Automate_ABC_ReleverEnDepassant (namebuf, pvalue->u.mission_automate_abc_relever_en_depassant);
         break;

      case 47:
         sprintf (namebuf, "%s.u.mission_automate_abc_semparer", name);
         asn1Print_Mission_Automate_ABC_Semparer (namebuf, pvalue->u.mission_automate_abc_semparer);
         break;

      case 48:
         sprintf (namebuf, "%s.u.mission_automate_abc_tenir", name);
         asn1Print_Mission_Automate_ABC_Tenir (namebuf, pvalue->u.mission_automate_abc_tenir);
         break;

      case 49:
         sprintf (namebuf, "%s.u.mission_automate_abc_soutenir", name);
         asn1Print_Mission_Automate_ABC_Soutenir (namebuf, pvalue->u.mission_automate_abc_soutenir);
         break;

      case 50:
         sprintf (namebuf, "%s.u.mission_automate_abc_surveiller", name);
         asn1Print_Mission_Automate_ABC_Surveiller (namebuf, pvalue->u.mission_automate_abc_surveiller);
         break;

      case 51:
         sprintf (namebuf, "%s.u.mission_automate_abc_flanc_garder", name);
         asn1Print_Mission_Automate_ABC_FlancGarder (namebuf, pvalue->u.mission_automate_abc_flanc_garder);
         break;

      case 52:
         sprintf (namebuf, "%s.u.mission_automate_abc_renseigner_sur", name);
         asn1Print_Mission_Automate_ABC_RenseignerSur (namebuf, pvalue->u.mission_automate_abc_renseigner_sur);
         break;

      case 53:
         sprintf (namebuf, "%s.u.mission_automate_abc_fixer", name);
         asn1Print_Mission_Automate_ABC_Fixer (namebuf, pvalue->u.mission_automate_abc_fixer);
         break;

      case 54:
         sprintf (namebuf, "%s.u.mission_automate_abc_freiner", name);
         asn1Print_Mission_Automate_ABC_Freiner (namebuf, pvalue->u.mission_automate_abc_freiner);
         break;

      case 55:
         sprintf (namebuf, "%s.u.mission_automate_abc_surveiller_itineraire", name);
         asn1Print_Mission_Automate_ABC_SurveillerItineraire (namebuf, pvalue->u.mission_automate_abc_surveiller_itineraire);
         break;

      case 56:
         sprintf (namebuf, "%s.u.mission_automate_abc_renseigner_sur_un_axe", name);
         asn1Print_Mission_Automate_ABC_RenseignerSurUnAxe (namebuf, pvalue->u.mission_automate_abc_renseigner_sur_un_axe);
         break;

      case 57:
         sprintf (namebuf, "%s.u.mission_automate_abc_recueillir_unite", name);
         asn1Print_Mission_Automate_ABC_RecueillirUnite (namebuf, pvalue->u.mission_automate_abc_recueillir_unite);
         break;

      case 58:
         sprintf (namebuf, "%s.u.mission_automate_abc_escorter_un_convoi", name);
         asn1Print_Mission_Automate_ABC_EscorterUnConvoi (namebuf, pvalue->u.mission_automate_abc_escorter_un_convoi);
         break;

      case 59:
         sprintf (namebuf, "%s.u.mission_automate_abc_armer_point_de_controle", name);
         asn1Print_Mission_Automate_ABC_ArmerPointDeControle (namebuf, pvalue->u.mission_automate_abc_armer_point_de_controle);
         break;

      case 60:
         sprintf (namebuf, "%s.u.mission_automate_abc_organiser_accueil_colonne_refugies", name);
         asn1Print_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (namebuf, pvalue->u.mission_automate_abc_organiser_accueil_colonne_refugies);
         break;

      case 61:
         sprintf (namebuf, "%s.u.mission_automate_abc_proteger_pc", name);
         asn1Print_Mission_Automate_ABC_ProtegerPC (namebuf, pvalue->u.mission_automate_abc_proteger_pc);
         break;

      case 62:
         sprintf (namebuf, "%s.u.mission_automate_gen_se_deployer", name);
         asn1Print_Mission_Automate_GEN_SeDeployer (namebuf, pvalue->u.mission_automate_gen_se_deployer);
         break;

      case 63:
         sprintf (namebuf, "%s.u.mission_automate_gen_faire_franchir", name);
         asn1Print_Mission_Automate_GEN_FaireFranchir (namebuf, pvalue->u.mission_automate_gen_faire_franchir);
         break;

      case 64:
         sprintf (namebuf, "%s.u.mission_automate_gen_realiser_systeme_obstacles", name);
         asn1Print_Mission_Automate_GEN_RealiserSystemeObstacles (namebuf, pvalue->u.mission_automate_gen_realiser_systeme_obstacles);
         break;

      case 65:
         sprintf (namebuf, "%s.u.mission_automate_gen_franchir_de_vive_force", name);
         asn1Print_Mission_Automate_GEN_FranchirDeViveForce (namebuf, pvalue->u.mission_automate_gen_franchir_de_vive_force);
         break;

      case 66:
         sprintf (namebuf, "%s.u.mission_automate_gen_retablir_itineraires", name);
         asn1Print_Mission_Automate_GEN_RetablirItineraires (namebuf, pvalue->u.mission_automate_gen_retablir_itineraires);
         break;

      case 67:
         sprintf (namebuf, "%s.u.mission_automate_gen_amenager_aire_stationnement", name);
         asn1Print_Mission_Automate_GEN_AmenagerAireStationnement (namebuf, pvalue->u.mission_automate_gen_amenager_aire_stationnement);
         break;

      case 68:
         sprintf (namebuf, "%s.u.mission_automate_gen_amenager_terrain_poser_sommaire", name);
         asn1Print_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (namebuf, pvalue->u.mission_automate_gen_amenager_terrain_poser_sommaire);
         break;

      case 69:
         sprintf (namebuf, "%s.u.mission_automate_gen_realiser_zone_poser", name);
         asn1Print_Mission_Automate_GEN_RealiserZonePoser (namebuf, pvalue->u.mission_automate_gen_realiser_zone_poser);
         break;

      case 70:
         sprintf (namebuf, "%s.u.mission_automate_gen_reconnaitre_zone_deploiement", name);
         asn1Print_Mission_Automate_GEN_ReconnaitreZoneDeploiement (namebuf, pvalue->u.mission_automate_gen_reconnaitre_zone_deploiement);
         break;

      case 71:
         sprintf (namebuf, "%s.u.mission_automate_gen_realiser_camp_prisonniers", name);
         asn1Print_Mission_Automate_GEN_RealiserCampPrisonniers (namebuf, pvalue->u.mission_automate_gen_realiser_camp_prisonniers);
         break;

      case 72:
         sprintf (namebuf, "%s.u.mission_automate_gen_realiser_camp_refugies", name);
         asn1Print_Mission_Automate_GEN_RealiserCampRefugies (namebuf, pvalue->u.mission_automate_gen_realiser_camp_refugies);
         break;

      case 73:
         sprintf (namebuf, "%s.u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial", name);
         asn1Print_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (namebuf, pvalue->u.mission_automate_gen_realiser_plates_formes_sommaires_de_deploiement_initial);
         break;

      case 74:
         sprintf (namebuf, "%s.u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population", name);
         asn1Print_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (namebuf, pvalue->u.mission_automate_gen_realiser_travaux_sommaires_au_profit_population);
         break;

      case 75:
         sprintf (namebuf, "%s.u.mission_automate_gen_appuyer_debarquement_troupes", name);
         asn1Print_Mission_Automate_GEN_AppuyerDebarquementTroupes (namebuf, pvalue->u.mission_automate_gen_appuyer_debarquement_troupes);
         break;

      case 76:
         sprintf (namebuf, "%s.u.mission_automate_gen_ouvrir_axes_progression", name);
         asn1Print_Mission_Automate_GEN_OuvrirAxesProgression (namebuf, pvalue->u.mission_automate_gen_ouvrir_axes_progression);
         break;

      case 77:
         sprintf (namebuf, "%s.u.mission_automate_inf_attaquer_souplesse", name);
         asn1Print_Mission_Automate_INF_AttaquerSouplesse (namebuf, pvalue->u.mission_automate_inf_attaquer_souplesse);
         break;

      case 78:
         sprintf (namebuf, "%s.u.mission_automate_inf_appuyer", name);
         asn1Print_Mission_Automate_INF_Appuyer (namebuf, pvalue->u.mission_automate_inf_appuyer);
         break;

      case 79:
         sprintf (namebuf, "%s.u.mission_automate_inf_controler", name);
         asn1Print_Mission_Automate_INF_Controler (namebuf, pvalue->u.mission_automate_inf_controler);
         break;

      case 80:
         sprintf (namebuf, "%s.u.mission_automate_inf_couvrir", name);
         asn1Print_Mission_Automate_INF_Couvrir (namebuf, pvalue->u.mission_automate_inf_couvrir);
         break;

      case 81:
         sprintf (namebuf, "%s.u.mission_automate_inf_donner_coup_arret", name);
         asn1Print_Mission_Automate_INF_DonnerCoupArret (namebuf, pvalue->u.mission_automate_inf_donner_coup_arret);
         break;

      case 82:
         sprintf (namebuf, "%s.u.mission_automate_inf_eclairer", name);
         asn1Print_Mission_Automate_INF_Eclairer (namebuf, pvalue->u.mission_automate_inf_eclairer);
         break;

      case 83:
         sprintf (namebuf, "%s.u.mission_automate_inf_flanc_garder", name);
         asn1Print_Mission_Automate_INF_FlancGarder (namebuf, pvalue->u.mission_automate_inf_flanc_garder);
         break;

      case 84:
         sprintf (namebuf, "%s.u.mission_automate_inf_freiner", name);
         asn1Print_Mission_Automate_INF_Freiner (namebuf, pvalue->u.mission_automate_inf_freiner);
         break;

      case 85:
         sprintf (namebuf, "%s.u.mission_automate_inf_harceler", name);
         asn1Print_Mission_Automate_INF_Harceler (namebuf, pvalue->u.mission_automate_inf_harceler);
         break;

      case 86:
         sprintf (namebuf, "%s.u.mission_automate_inf_interdire", name);
         asn1Print_Mission_Automate_INF_Interdire (namebuf, pvalue->u.mission_automate_inf_interdire);
         break;

      case 87:
         sprintf (namebuf, "%s.u.mission_automate_inf_mener_defense_usure", name);
         asn1Print_Mission_Automate_INF_MenerDefenseUsure (namebuf, pvalue->u.mission_automate_inf_mener_defense_usure);
         break;

      case 88:
         sprintf (namebuf, "%s.u.mission_automate_inf_prendre_preciser_maintenir_contact", name);
         asn1Print_Mission_Automate_INF_PrendrePreciserMaintenirContact (namebuf, pvalue->u.mission_automate_inf_prendre_preciser_maintenir_contact);
         break;

      case 89:
         sprintf (namebuf, "%s.u.mission_automate_inf_reconnaissance_offensive", name);
         asn1Print_Mission_Automate_INF_ReconnaissanceOffensive (namebuf, pvalue->u.mission_automate_inf_reconnaissance_offensive);
         break;

      case 90:
         sprintf (namebuf, "%s.u.mission_automate_inf_recueillir_unite", name);
         asn1Print_Mission_Automate_INF_RecueillirUnite (namebuf, pvalue->u.mission_automate_inf_recueillir_unite);
         break;

      case 91:
         sprintf (namebuf, "%s.u.mission_automate_inf_reduire", name);
         asn1Print_Mission_Automate_INF_Reduire (namebuf, pvalue->u.mission_automate_inf_reduire);
         break;

      case 92:
         sprintf (namebuf, "%s.u.mission_automate_inf_relever", name);
         asn1Print_Mission_Automate_INF_Relever (namebuf, pvalue->u.mission_automate_inf_relever);
         break;

      case 93:
         sprintf (namebuf, "%s.u.mission_automate_inf_rompre_contact", name);
         asn1Print_Mission_Automate_INF_RompreContact (namebuf, pvalue->u.mission_automate_inf_rompre_contact);
         break;

      case 94:
         sprintf (namebuf, "%s.u.mission_automate_inf_surveiller", name);
         asn1Print_Mission_Automate_INF_Surveiller (namebuf, pvalue->u.mission_automate_inf_surveiller);
         break;

      case 95:
         sprintf (namebuf, "%s.u.mission_automate_inf_semparer", name);
         asn1Print_Mission_Automate_INF_Semparer (namebuf, pvalue->u.mission_automate_inf_semparer);
         break;

      case 96:
         sprintf (namebuf, "%s.u.mission_automate_inf_fixer", name);
         asn1Print_Mission_Automate_INF_Fixer (namebuf, pvalue->u.mission_automate_inf_fixer);
         break;

      case 97:
         sprintf (namebuf, "%s.u.mission_automate_inf_attaquer_en_terrain_difficile", name);
         asn1Print_Mission_Automate_INF_AttaquerEnTerrainDifficile (namebuf, pvalue->u.mission_automate_inf_attaquer_en_terrain_difficile);
         break;

      case 98:
         sprintf (namebuf, "%s.u.mission_automate_inf_barrer_direction", name);
         asn1Print_Mission_Automate_INF_BarrerDirection (namebuf, pvalue->u.mission_automate_inf_barrer_direction);
         break;

      case 99:
         sprintf (namebuf, "%s.u.mission_automate_inf_defendre_ferme", name);
         asn1Print_Mission_Automate_INF_DefendreFerme (namebuf, pvalue->u.mission_automate_inf_defendre_ferme);
         break;

      case 100:
         sprintf (namebuf, "%s.u.mission_automate_inf_tenir", name);
         asn1Print_Mission_Automate_INF_Tenir (namebuf, pvalue->u.mission_automate_inf_tenir);
         break;

      case 101:
         sprintf (namebuf, "%s.u.mission_automate_inf_appuyer_un_freinage", name);
         asn1Print_Mission_Automate_INF_AppuyerUnFreinage (namebuf, pvalue->u.mission_automate_inf_appuyer_un_freinage);
         break;

      case 102:
         sprintf (namebuf, "%s.u.mission_automate_inf_appuyer_une_attaque", name);
         asn1Print_Mission_Automate_INF_AppuyerUneAttaque (namebuf, pvalue->u.mission_automate_inf_appuyer_une_attaque);
         break;

      case 103:
         sprintf (namebuf, "%s.u.mission_automate_inf_soutenir", name);
         asn1Print_Mission_Automate_INF_Soutenir (namebuf, pvalue->u.mission_automate_inf_soutenir);
         break;

      case 104:
         sprintf (namebuf, "%s.u.mission_automate_log_se_deployer", name);
         asn1Print_Mission_Automate_LOG_SeDeployer (namebuf, pvalue->u.mission_automate_log_se_deployer);
         break;

      case 105:
         sprintf (namebuf, "%s.u.mission_automate_log_appuyer_mouvement", name);
         asn1Print_Mission_Automate_LOG_AppuyerMouvement (namebuf, pvalue->u.mission_automate_log_appuyer_mouvement);
         break;

      case 106:
         sprintf (namebuf, "%s.u.mission_automate_log_reconnaitre_itineraire", name);
         asn1Print_Mission_Automate_LOG_ReconnaitreItineraire (namebuf, pvalue->u.mission_automate_log_reconnaitre_itineraire);
         break;

      case 107:
         sprintf (namebuf, "%s.u.mission_automate_log_transporter_formation_blindee", name);
         asn1Print_Mission_Automate_LOG_TransporterFormationBlindee (namebuf, pvalue->u.mission_automate_log_transporter_formation_blindee);
         break;

      case 108:
         sprintf (namebuf, "%s.u.mission_automate_log_appuyer_mouvement_dans_zone", name);
         asn1Print_Mission_Automate_LOG_AppuyerMouvementDansZone (namebuf, pvalue->u.mission_automate_log_appuyer_mouvement_dans_zone);
         break;

      case 109:
         sprintf (namebuf, "%s.u.mission_automate_log_mettre_en_oeuvre_zone_stationnement", name);
         asn1Print_Mission_Automate_LOG_MettreEnOeuvreZoneStationnement (namebuf, pvalue->u.mission_automate_log_mettre_en_oeuvre_zone_stationnement);
         break;

      case 110:
         sprintf (namebuf, "%s.u.mission_automate_log_appuyer_franchissement_dans_zone", name);
         asn1Print_Mission_Automate_LOG_AppuyerFranchissementDansZone (namebuf, pvalue->u.mission_automate_log_appuyer_franchissement_dans_zone);
         break;

      case 111:
         sprintf (namebuf, "%s.u.mission_automate_log_bloquer_zone", name);
         asn1Print_Mission_Automate_LOG_BloquerZone (namebuf, pvalue->u.mission_automate_log_bloquer_zone);
         break;

      case 112:
         sprintf (namebuf, "%s.u.mission_automate_log_reconnaitre_zone_contaminee", name);
         asn1Print_Mission_Automate_LOG_ReconnaitreZoneContaminee (namebuf, pvalue->u.mission_automate_log_reconnaitre_zone_contaminee);
         break;

      case 113:
         sprintf (namebuf, "%s.u.mission_automate_log_reconnaitre_zone_de_deploiement", name);
         asn1Print_Mission_Automate_LOG_ReconnaitreZoneDeDeploiement (namebuf, pvalue->u.mission_automate_log_reconnaitre_zone_de_deploiement);
         break;

      case 114:
         sprintf (namebuf, "%s.u.mission_automate_log_surveiller", name);
         asn1Print_Mission_Automate_LOG_Surveiller (namebuf, pvalue->u.mission_automate_log_surveiller);
         break;

      case 115:
         sprintf (namebuf, "%s.u.mission_automate_log_armer_pias", name);
         asn1Print_Mission_Automate_LOG_ArmerPIAs (namebuf, pvalue->u.mission_automate_log_armer_pias);
         break;

      case 116:
         sprintf (namebuf, "%s.u.mission_automate_test_move_to", name);
         asn1Print_Mission_Automate_Test_MoveTo (namebuf, pvalue->u.mission_automate_test_move_to);
         break;

      case 117:
         sprintf (namebuf, "%s.u.mission_automate_decrocher", name);
         asn1Print_Mission_Automate_Decrocher (namebuf, pvalue->u.mission_automate_decrocher);
         break;

      case 118:
         sprintf (namebuf, "%s.u.mission_automate_relever_sur_place", name);
         asn1Print_Mission_Automate_ReleverSurPlace (namebuf, pvalue->u.mission_automate_relever_sur_place);
         break;

      case 119:
         sprintf (namebuf, "%s.u.mission_automate_faire_mouvement", name);
         asn1Print_Mission_Automate_FaireMouvement (namebuf, pvalue->u.mission_automate_faire_mouvement);
         break;

      case 120:
         sprintf (namebuf, "%s.u.mission_automate_se_faire_decontaminer", name);
         asn1Print_Mission_Automate_SeFaireDecontaminer (namebuf, pvalue->u.mission_automate_se_faire_decontaminer);
         break;

      case 121:
         sprintf (namebuf, "%s.u.mission_automate_franchir", name);
         asn1Print_Mission_Automate_Franchir (namebuf, pvalue->u.mission_automate_franchir);
         break;

      case 122:
         sprintf (namebuf, "%s.u.mission_automate_stationner", name);
         asn1Print_Mission_Automate_Stationner (namebuf, pvalue->u.mission_automate_stationner);
         break;

      case 123:
         sprintf (namebuf, "%s.u.mission_automate_se_faire_transporter", name);
         asn1Print_Mission_Automate_SeFaireTransporter (namebuf, pvalue->u.mission_automate_se_faire_transporter);
         break;

      case 124:
         sprintf (namebuf, "%s.u.mission_automate_se_recompleter", name);
         asn1Print_Mission_Automate_SeRecompleter (namebuf, pvalue->u.mission_automate_se_recompleter);
         break;

      case 125:
         sprintf (namebuf, "%s.u.mission_automate_se_rendre", name);
         asn1Print_Mission_Automate_SeRendre (namebuf, pvalue->u.mission_automate_se_rendre);
         break;

      case 126:
         sprintf (namebuf, "%s.u.mission_automate_faire_mouvement_vers_camp_refugies", name);
         asn1Print_Mission_Automate_FaireMouvementVersCampRefugies (namebuf, pvalue->u.mission_automate_faire_mouvement_vers_camp_refugies);
         break;

      case 127:
         sprintf (namebuf, "%s.u.mission_automate_generique", name);
         asn1Print_Mission_Automate_Generique (namebuf, pvalue->u.mission_automate_generique);
         break;

      case 128:
         sprintf (namebuf, "%s.u.mission_automate_nbc_reconnaitre_un_axe", name);
         asn1Print_Mission_Automate_NBC_ReconnaitreUnAxe (namebuf, pvalue->u.mission_automate_nbc_reconnaitre_un_axe);
         break;

      case 129:
         sprintf (namebuf, "%s.u.mission_automate_nbc_reconnaitre_une_zone", name);
         asn1Print_Mission_Automate_NBC_ReconnaitreUneZone (namebuf, pvalue->u.mission_automate_nbc_reconnaitre_une_zone);
         break;

      case 130:
         sprintf (namebuf, "%s.u.mission_automate_nbc_armer_un_site_de_decontamination", name);
         asn1Print_Mission_Automate_NBC_ArmerUnSiteDeDecontamination (namebuf, pvalue->u.mission_automate_nbc_armer_un_site_de_decontamination);
         break;

      case 131:
         sprintf (namebuf, "%s.u.mission_automate_nbc_decontaminer_une_zone", name);
         asn1Print_Mission_Automate_NBC_DecontaminerUneZone (namebuf, pvalue->u.mission_automate_nbc_decontaminer_une_zone);
         break;

      case 132:
         sprintf (namebuf, "%s.u.mission_automate_nbc_reconnaitre_des_sites_rota", name);
         asn1Print_Mission_Automate_NBC_ReconnaitreDesSitesROTA (namebuf, pvalue->u.mission_automate_nbc_reconnaitre_des_sites_rota);
         break;

      case 133:
         sprintf (namebuf, "%s.u.mission_automate_rens_rohum_renseigner_sur", name);
         asn1Print_Mission_Automate_RENS_ROHUM_RenseignerSur (namebuf, pvalue->u.mission_automate_rens_rohum_renseigner_sur);
         break;

      case 134:
         sprintf (namebuf, "%s.u.mission_automate_rens_rohum_orienter_guider", name);
         asn1Print_Mission_Automate_RENS_ROHUM_OrienterGuider (namebuf, pvalue->u.mission_automate_rens_rohum_orienter_guider);
         break;

      case 135:
         sprintf (namebuf, "%s.u.mission_automate_rens_rohum_sexfiltrer", name);
         asn1Print_Mission_Automate_RENS_ROHUM_SExfiltrer (namebuf, pvalue->u.mission_automate_rens_rohum_sexfiltrer);
         break;

      case 136:
         sprintf (namebuf, "%s.u.mission_automate_rens_roim_cl289_renseigner_sur", name);
         asn1Print_Mission_Automate_RENS_ROIM_CL289_RenseignerSur (namebuf, pvalue->u.mission_automate_rens_roim_cl289_renseigner_sur);
         break;

      case 137:
         sprintf (namebuf, "%s.u.mission_automate_rens_roim_sdti_renseigner_sur", name);
         asn1Print_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur (namebuf, pvalue->u.mission_automate_rens_roim_sdti_renseigner_sur);
         break;

      case 138:
         sprintf (namebuf, "%s.u.mission_automate_rens_roem_appuyer", name);
         asn1Print_Mission_Automate_RENS_ROEM_Appuyer (namebuf, pvalue->u.mission_automate_rens_roem_appuyer);
         break;

      case 139:
         sprintf (namebuf, "%s.u.mission_automate_rens_roem_renseignersur", name);
         asn1Print_Mission_Automate_RENS_ROEM_RenseignerSur (namebuf, pvalue->u.mission_automate_rens_roem_renseignersur);
         break;

      case 140:
         sprintf (namebuf, "%s.u.mission_automate_rens_radint_renseignersur", name);
         asn1Print_Mission_Automate_RENS_RADINT_RenseignerSur (namebuf, pvalue->u.mission_automate_rens_radint_renseignersur);
         break;

      case 141:
         sprintf (namebuf, "%s.u.mission_automate_trans_commander", name);
         asn1Print_Mission_Automate_TRANS_Commander (namebuf, pvalue->u.mission_automate_trans_commander);
         break;

      default:;
   }
}

void ASN1C_Mission_Automate::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Automate (name, &msgData);
}

void asn1Print_EnumAutomateOrderFormation (ASN1ConstCharPtr name, ASN1T_EnumAutomateOrderFormation* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("un_echelon\n"); break;
      case 1: printf ("deux_echelons\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumAutomateOrderFormation::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumAutomateOrderFormation (name, &msgData);
}

void asn1Print_MsgAutomateOrder (ASN1ConstCharPtr name, ASN1T_MsgAutomateOrder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.oid_limite_gauche", name);
   asn1Print_OID (namebuf, &pvalue->oid_limite_gauche);

   sprintf (namebuf, "%s.oid_limite_droite", name);
   asn1Print_OID (namebuf, &pvalue->oid_limite_droite);

   sprintf (namebuf, "%s.oid_limas", name);
   asn1Print_ListOID (namebuf, &pvalue->oid_limas);

   sprintf (namebuf, "%s.direction_dangereuse", name);
   asn1Print_Direction (namebuf, &pvalue->direction_dangereuse);

   sprintf (namebuf, "%s.formation", name);
   asn1Print_EnumAutomateOrderFormation (namebuf, &pvalue->formation);

   sprintf (namebuf, "%s.mission", name);
   asn1Print_Mission_Automate (namebuf, &pvalue->mission);

}

void ASN1C_MsgAutomateOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateOrder (name, &msgData);
}

void asn1Print_MsgAutomateOrderAck (ASN1ConstCharPtr name, ASN1T_MsgAutomateOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgAutomateOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateOrderAck (name, &msgData);
}

void asn1Print__SeqOfMsgPionOrder (ASN1ConstCharPtr name, ASN1T__SeqOfMsgPionOrder* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_MsgPionOrder (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfMsgPionOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfMsgPionOrder (name, &msgData);
}

void asn1Print_MsgAutomateMRT (ASN1ConstCharPtr name, ASN1T_MsgAutomateMRT* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.automate_id", name);
   asn1Print_Agent (namebuf, &pvalue->automate_id);

   sprintf (namebuf, "%s.missions", name);
   asn1Print__SeqOfMsgPionOrder (namebuf, &pvalue->missions);

}

void ASN1C_MsgAutomateMRT::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateMRT (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioBase.h"

void asn1Print_EnumTypeLocalisation (ASN1ConstCharPtr name, ASN1T_EnumTypeLocalisation* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("circle\n"); break;
      case 1: printf ("ellipse\n"); break;
      case 2: printf ("line\n"); break;
      case 3: printf ("polygon\n"); break;
      case 4: printf ("point\n"); break;
      case 5: printf ("sector\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTypeLocalisation::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTypeLocalisation (name, &msgData);
}

void asn1Print_CoordUTM (ASN1ConstCharPtr name, ASN1T_CoordUTM* pvalue)
{
   rtPrintOctStr (name, pvalue->numocts, pvalue->data, ".");
}

void ASN1C_CoordUTM::Print (ASN1ConstCharPtr name)

{
   asn1Print_CoordUTM (name, &msgData);
}

void asn1Print__SeqOfCoordUTM (ASN1ConstCharPtr name, ASN1T__SeqOfCoordUTM* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_CoordUTM (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfCoordUTM::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfCoordUTM (name, &msgData);
}

void asn1Print_Localisation (ASN1ConstCharPtr name, ASN1T_Localisation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumTypeLocalisation (namebuf, &pvalue->type);

   sprintf (namebuf, "%s.vecteur_point", name);
   asn1Print__SeqOfCoordUTM (namebuf, &pvalue->vecteur_point);

}

void ASN1C_Localisation::Print (ASN1ConstCharPtr name)

{
   asn1Print_Localisation (name, &msgData);
}

void asn1Print_Polygon (ASN1ConstCharPtr name, ASN1T_Polygon* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Polygon::Print (ASN1ConstCharPtr name)

{
   asn1Print_Polygon (name, &msgData);
}

void asn1Print_OID (ASN1ConstCharPtr name, ASN1T_OID* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_OID::Print (ASN1ConstCharPtr name)

{
   asn1Print_OID (name, &msgData);
}

void asn1Print_Automate (ASN1ConstCharPtr name, ASN1T_Automate* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_Automate::Print (ASN1ConstCharPtr name)

{
   asn1Print_Automate (name, &msgData);
}

void asn1Print_Itineraire (ASN1ConstCharPtr name, ASN1T_Itineraire* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Itineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Itineraire (name, &msgData);
}

void asn1Print_Agent (ASN1ConstCharPtr name, ASN1T_Agent* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_Agent::Print (ASN1ConstCharPtr name)

{
   asn1Print_Agent (name, &msgData);
}

void asn1Print_ListAgent (ASN1ConstCharPtr name, ASN1T_ListAgent* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Agent (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListAgent::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListAgent (name, &msgData);
}

void asn1Print_Point (ASN1ConstCharPtr name, ASN1T_Point* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Point::Print (ASN1ConstCharPtr name)

{
   asn1Print_Point (name, &msgData);
}

void asn1Print_NatureAtlas (ASN1ConstCharPtr name, ASN1T_NatureAtlas* pvalue)
{
   rtPrintBitStr (name, pvalue->numbits, pvalue->data, ".");
}

void ASN1C_NatureAtlas::Print (ASN1ConstCharPtr name)

{
   asn1Print_NatureAtlas (name, &msgData);
}

void asn1Print_KnowledgeObject (ASN1ConstCharPtr name, ASN1T_KnowledgeObject* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_KnowledgeObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_KnowledgeObject (name, &msgData);
}

void asn1Print_ListKnowledgeObject (ASN1ConstCharPtr name, ASN1T_ListKnowledgeObject* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_KnowledgeObject (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListKnowledgeObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListKnowledgeObject (name, &msgData);
}

void asn1Print_ListPoint (ASN1ConstCharPtr name, ASN1T_ListPoint* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Point (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListPoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListPoint (name, &msgData);
}

void asn1Print_Angle (ASN1ConstCharPtr name, ASN1T_Angle* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_Angle::Print (ASN1ConstCharPtr name)

{
   asn1Print_Angle (name, &msgData);
}

void asn1Print_ListItineraire (ASN1ConstCharPtr name, ASN1T_ListItineraire* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Itineraire (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListItineraire (name, &msgData);
}

void asn1Print_ListPolygon (ASN1ConstCharPtr name, ASN1T_ListPolygon* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Polygon (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListPolygon::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListPolygon (name, &msgData);
}

void asn1Print_ListOID (ASN1ConstCharPtr name, ASN1T_ListOID* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_OID (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListOID::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListOID (name, &msgData);
}

void asn1Print_KnowledgeAgent (ASN1ConstCharPtr name, ASN1T_KnowledgeAgent* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_KnowledgeAgent::Print (ASN1ConstCharPtr name)

{
   asn1Print_KnowledgeAgent (name, &msgData);
}

void asn1Print_ListKnowledgeAgent (ASN1ConstCharPtr name, ASN1T_ListKnowledgeAgent* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_KnowledgeAgent (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListKnowledgeAgent::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListKnowledgeAgent (name, &msgData);
}

void asn1Print_Line (ASN1ConstCharPtr name, ASN1T_Line* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Line::Print (ASN1ConstCharPtr name)

{
   asn1Print_Line (name, &msgData);
}

void asn1Print_EnumGDH_Qualificatif (ASN1ConstCharPtr name, ASN1T_EnumGDH_Qualificatif* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("at\n"); break;
      case 1: printf ("after\n"); break;
      case 2: printf ("as_of\n"); break;
      case 3: printf ("before\n"); break;
      case 4: printf ("cleared\n"); break;
      case 5: printf ("due\n"); break;
      case 6: printf ("end\n"); break;
      case 7: printf ("off\n"); break;
      case 8: printf ("on\n"); break;
      case 9: printf ("since\n"); break;
      case 10: printf ("start\n"); break;
      case 11: printf ("until\n"); break;
      case 12: printf ("wef\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumGDH_Qualificatif::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumGDH_Qualificatif (name, &msgData);
}

void asn1Print_GDH (ASN1ConstCharPtr name, ASN1T_GDH* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.datation", name);
   rtPrintUnsigned (namebuf, pvalue->datation);

   sprintf (namebuf, "%s.qualificatif", name);
   asn1Print_EnumGDH_Qualificatif (namebuf, &pvalue->qualificatif);

}

void ASN1C_GDH::Print (ASN1ConstCharPtr name)

{
   asn1Print_GDH (name, &msgData);
}

void asn1Print_Direction (ASN1ConstCharPtr name, ASN1T_Direction* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_Direction::Print (ASN1ConstCharPtr name)

{
   asn1Print_Direction (name, &msgData);
}

void asn1Print_EnumUnitIdentificationLevel (ASN1ConstCharPtr name, ASN1T_EnumUnitIdentificationLevel* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("identifiee\n"); break;
      case 1: printf ("reconnue\n"); break;
      case 2: printf ("detectee\n"); break;
      case 3: printf ("signale\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitIdentificationLevel::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitIdentificationLevel (name, &msgData);
}

void asn1Print_Segment (ASN1ConstCharPtr name, ASN1T_Segment* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Segment::Print (ASN1ConstCharPtr name)

{
   asn1Print_Segment (name, &msgData);
}

void asn1Print_Circle (ASN1ConstCharPtr name, ASN1T_Circle* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Circle::Print (ASN1ConstCharPtr name)

{
   asn1Print_Circle (name, &msgData);
}

void asn1Print_Ellipse (ASN1ConstCharPtr name, ASN1T_Ellipse* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Ellipse::Print (ASN1ConstCharPtr name)

{
   asn1Print_Ellipse (name, &msgData);
}

void asn1Print_Sector (ASN1ConstCharPtr name, ASN1T_Sector* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_Sector::Print (ASN1ConstCharPtr name)

{
   asn1Print_Sector (name, &msgData);
}

void asn1Print_ListLocalisation (ASN1ConstCharPtr name, ASN1T_ListLocalisation* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Localisation (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListLocalisation::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListLocalisation (name, &msgData);
}

void asn1Print_TirIndirect (ASN1ConstCharPtr name, ASN1T_TirIndirect* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TirIndirect::Print (ASN1ConstCharPtr name)

{
   asn1Print_TirIndirect (name, &msgData);
}

void asn1Print_TirDirect (ASN1ConstCharPtr name, ASN1T_TirDirect* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TirDirect::Print (ASN1ConstCharPtr name)

{
   asn1Print_TirDirect (name, &msgData);
}

void asn1Print_Population (ASN1ConstCharPtr name, ASN1T_Population* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_Population::Print (ASN1ConstCharPtr name)

{
   asn1Print_Population (name, &msgData);
}

void asn1Print_ListAutomate (ASN1ConstCharPtr name, ASN1T_ListAutomate* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Automate (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListAutomate::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListAutomate (name, &msgData);
}

void asn1Print_TypeEquipement (ASN1ConstCharPtr name, ASN1T_TypeEquipement* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TypeEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print_TypeEquipement (name, &msgData);
}

void asn1Print_TypeDotation (ASN1ConstCharPtr name, ASN1T_TypeDotation* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TypeDotation::Print (ASN1ConstCharPtr name)

{
   asn1Print_TypeDotation (name, &msgData);
}

void asn1Print_TypePanne (ASN1ConstCharPtr name, ASN1T_TypePanne* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TypePanne::Print (ASN1ConstCharPtr name)

{
   asn1Print_TypePanne (name, &msgData);
}

void asn1Print_TypePion (ASN1ConstCharPtr name, ASN1T_TypePion* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TypePion::Print (ASN1ConstCharPtr name)

{
   asn1Print_TypePion (name, &msgData);
}

void asn1Print_TypeAutomate (ASN1ConstCharPtr name, ASN1T_TypeAutomate* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TypeAutomate::Print (ASN1ConstCharPtr name)

{
   asn1Print_TypeAutomate (name, &msgData);
}

void asn1Print_TypePopulation (ASN1ConstCharPtr name, ASN1T_TypePopulation* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_TypePopulation::Print (ASN1ConstCharPtr name)

{
   asn1Print_TypePopulation (name, &msgData);
}

void asn1Print_Pourcentage (ASN1ConstCharPtr name, ASN1T_Pourcentage* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_Pourcentage::Print (ASN1ConstCharPtr name)

{
   asn1Print_Pourcentage (name, &msgData);
}

void asn1Print_PourcentageLibre (ASN1ConstCharPtr name, ASN1T_PourcentageLibre* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_PourcentageLibre::Print (ASN1ConstCharPtr name)

{
   asn1Print_PourcentageLibre (name, &msgData);
}

void asn1Print_Hauteur (ASN1ConstCharPtr name, ASN1T_Hauteur* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_Hauteur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Hauteur (name, &msgData);
}

void asn1Print_Altitude (ASN1ConstCharPtr name, ASN1T_Altitude* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_Altitude::Print (ASN1ConstCharPtr name)

{
   asn1Print_Altitude (name, &msgData);
}

void asn1Print_Vitesse (ASN1ConstCharPtr name, ASN1T_Vitesse* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_Vitesse::Print (ASN1ConstCharPtr name)

{
   asn1Print_Vitesse (name, &msgData);
}

void asn1Print_EnumFamilleDotation (ASN1ConstCharPtr name, ASN1T_EnumFamilleDotation* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("munition\n"); break;
      case 1: printf ("carburant\n"); break;
      case 2: printf ("explosif\n"); break;
      case 3: printf ("mine\n"); break;
      case 4: printf ("barbele\n"); break;
      case 5: printf ("piece\n"); break;
      case 6: printf ("ration\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumFamilleDotation::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumFamilleDotation (name, &msgData);
}

void asn1Print_EnumFamilleMunition (ASN1ConstCharPtr name, ASN1T_EnumFamilleMunition* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("obus\n"); break;
      case 1: printf ("missile_air\n"); break;
      case 2: printf ("missile_sol\n"); break;
      case 3: printf ("mitraille\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumFamilleMunition::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumFamilleMunition (name, &msgData);
}

void asn1Print_EnumUnitNatureWeapon (ASN1ConstCharPtr name, ASN1T_EnumUnitNatureWeapon* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("antichar\n"); break;
      case 2: printf ("administration\n"); break;
      case 3: printf ("defense_aerienne\n"); break;
      case 4: printf ("centre_soutien_operations_aeriennes\n"); break;
      case 5: printf ("blinde\n"); break;
      case 6: printf ("aviation\n"); break;
      case 7: printf ("cavalerie\n"); break;
      case 8: printf ("genie\n"); break;
      case 9: printf ("deminage\n"); break;
      case 10: printf ("soutien_artillerie\n"); break;
      case 11: printf ("artillerie\n"); break;
      case 12: printf ("infanterie\n"); break;
      case 13: printf ("guerre_information\n"); break;
      case 14: printf ("forces_securite_interne\n"); break;
      case 15: printf ("execution_loi\n"); break;
      case 16: printf ("soutien_atterrissage\n"); break;
      case 17: printf ("logistique\n"); break;
      case 18: printf ("reparation\n"); break;
      case 19: printf ("manoeuvre\n"); break;
      case 20: printf ("medical\n"); break;
      case 21: printf ("renseignement_militaire\n"); break;
      case 22: printf ("missile\n"); break;
      case 23: printf ("nbc\n"); break;
      case 24: printf ("inconnue\n"); break;
      case 25: printf ("non_specifiee\n"); break;
      case 26: printf ("reconnaissance\n"); break;
      case 27: printf ("transmissions\n"); break;
      case 28: printf ("ravitaillement\n"); break;
      case 29: printf ("tactical_air_control_party\n"); break;
      case 30: printf ("transport\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitNatureWeapon::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitNatureWeapon (name, &msgData);
}

void asn1Print_EnumUnitNatureSpecialization (ASN1ConstCharPtr name, ASN1T_EnumUnitNatureSpecialization* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("aerien\n"); break;
      case 2: printf ("attaque_aerienne\n"); break;
      case 3: printf ("aeroporte\n"); break;
      case 4: printf ("blinde\n"); break;
      case 5: printf ("compose\n"); break;
      case 6: printf ("construction\n"); break;
      case 7: printf ("dentiste\n"); break;
      case 8: printf ("guerre_electronique\n"); break;
      case 9: printf ("finance\n"); break;
      case 10: printf ("voilure_fixe\n"); break;
      case 11: printf ("terrestre\n"); break;
      case 12: printf ("helicoptere\n"); break;
      case 13: printf ("jag\n"); break;
      case 14: printf ("mecanise\n"); break;
      case 15: printf ("police_militaire\n"); break;
      case 16: printf ("motorise\n"); break;
      case 17: printf ("naval\n"); break;
      case 18: printf ("service_du_personnel\n"); break;
      case 19: printf ("courrier\n"); break;
      case 20: printf ("psychologique\n"); break;
      case 21: printf ("chemin_de_fer\n"); break;
      case 22: printf ("religieux\n"); break;
      case 23: printf ("riverine\n"); break;
      case 24: printf ("security_police\n"); break;
      case 25: printf ("patrouille_cotiere\n"); break;
      case 26: printf ("chirurgie\n"); break;
      case 27: printf ("veterinaire\n"); break;
      case 28: printf ("decollage_atterissage_vertical_court\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitNatureSpecialization::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitNatureSpecialization (name, &msgData);
}

void asn1Print_EnumUnitNatureQualifier (ASN1ConstCharPtr name, ASN1T_EnumUnitNatureQualifier* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("lourd\n"); break;
      case 2: printf ("leger\n"); break;
      case 3: printf ("moyen\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitNatureQualifier::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitNatureQualifier (name, &msgData);
}

void asn1Print_EnumUnitNatureCategory (ASN1ConstCharPtr name, ASN1T_EnumUnitNatureCategory* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("combat\n"); break;
      case 2: printf ("soutien_logistique\n"); break;
      case 3: printf ("combat_support\n"); break;
      case 4: printf ("inconnu\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitNatureCategory::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitNatureCategory (name, &msgData);
}

void asn1Print_EnumUnitNatureMobility (ASN1ConstCharPtr name, ASN1T_EnumUnitNatureMobility* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("aeroporte\n"); break;
      case 2: printf ("aerien_compose\n"); break;
      case 3: printf ("aerien_voilure_fixe\n"); break;
      case 4: printf ("aerien_plus_leger_que_air\n"); break;
      case 5: printf ("aerien_ailes_rotatives\n"); break;
      case 6: printf ("aerien_amphibie\n"); break;
      case 7: printf ("animal_monte\n"); break;
      case 8: printf ("demonte\n"); break;
      case 9: printf ("terrestre_chemin_de_fer\n"); break;
      case 10: printf ("terrestre_auto_propulse\n"); break;
      case 11: printf ("terrestre_chenille\n"); break;
      case 12: printf ("terrestre_remorque\n"); break;
      case 13: printf ("terrestre_roues\n"); break;
      case 14: printf ("maritime_sous_marin\n"); break;
      case 15: printf ("maritime_surface\n"); break;
      case 16: printf ("inconnu\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitNatureMobility::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitNatureMobility (name, &msgData);
}

void asn1Print_EnumUnitCapaciteMission (ASN1ConstCharPtr name, ASN1T_EnumUnitCapaciteMission* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("civilian_law_enforcement\n"); break;
      case 1: printf ("command_operations\n"); break;
      case 2: printf ("couverture_aerienne\n"); break;
      case 3: printf ("joint_intelligence\n"); break;
      case 4: printf ("morale_welfare_recreation\n"); break;
      case 5: printf ("reglage_electronique\n"); break;
      case 6: printf ("remplacement\n"); break;
      case 7: printf ("service_mortuaire\n"); break;
      case 8: printf ("signals_intelligence\n"); break;
      case 9: printf ("theatre_missile_defence\n"); break;
      case 10: printf ("utilitaire\n"); break;
      case 11: printf ("aeroporte\n"); break;
      case 12: printf ("affaires_publiques\n"); break;
      case 13: printf ("affaires_publiques_communication\n"); break;
      case 14: printf ("affaires_publiques_joint_information\n"); break;
      case 15: printf ("alpin\n"); break;
      case 16: printf ("amphibie\n"); break;
      case 17: printf ("arctique\n"); break;
      case 18: printf ("artillerie_reconnaissance\n"); break;
      case 19: printf ("attaque\n"); break;
      case 20: printf ("attaque_aerienne\n"); break;
      case 21: printf ("c2\n"); break;
      case 22: printf ("chemin_de_fer\n"); break;
      case 23: printf ("ciblage\n"); break;
      case 24: printf ("contre_espionnage\n"); break;
      case 25: printf ("eclairage\n"); break;
      case 26: printf ("entretien\n"); break;
      case 27: printf ("entretien_materiel\n"); break;
      case 28: printf ("entretien_missile\n"); break;
      case 29: printf ("entretien_opto_electronique\n"); break;
      case 30: printf ("espionnage\n"); break;
      case 31: printf ("espionnage_militaire_aerial_exploitation\n"); break;
      case 32: printf ("espionnage_militaire_operation\n"); break;
      case 33: printf ("espionnage_militaire_tactical_exploitation\n"); break;
      case 34: printf ("evacuation_sanitaire\n"); break;
      case 35: printf ("finance\n"); break;
      case 36: printf ("genie_combat\n"); break;
      case 37: printf ("genie_construction\n"); break;
      case 38: printf ("genie_construction_navale\n"); break;
      case 39: printf ("guerre_electronique\n"); break;
      case 40: printf ("guerre_electronique_interception\n"); break;
      case 41: printf ("guerre_electronique_brouillage\n"); break;
      case 42: printf ("guerre_electronique_detection\n"); break;
      case 43: printf ("interrogation\n"); break;
      case 44: printf ("main_d_oeuvre\n"); break;
      case 45: printf ("maintien_de_la_paix\n"); break;
      case 46: printf ("marine\n"); break;
      case 47: printf ("mine_de_contre_mesure\n"); break;
      case 48: printf ("nbc_biologique\n"); break;
      case 49: printf ("nbc_chimique\n"); break;
      case 50: printf ("nbc_chimique_fumee\n"); break;
      case 51: printf ("nbc_decontamination\n"); break;
      case 52: printf ("nbc_decontamination_chimique\n"); break;
      case 53: printf ("nbc_nucleaire\n"); break;
      case 54: printf ("non_renseigne\n"); break;
      case 55: printf ("observation\n"); break;
      case 56: printf ("observation_capteur\n"); break;
      case 57: printf ("observation_longue_portee\n"); break;
      case 58: printf ("observation_meteo\n"); break;
      case 59: printf ("observation_module_terrestre\n"); break;
      case 60: printf ("purification_de_l_eau\n"); break;
      case 61: printf ("ravitaillement_class_i\n"); break;
      case 62: printf ("ravitaillement_class_ii\n"); break;
      case 63: printf ("ravitaillement_class_iii_aviation\n"); break;
      case 64: printf ("ravitaillement_class_iii\n"); break;
      case 65: printf ("ravitaillement_class_iv\n"); break;
      case 66: printf ("ravitaillement_class_v\n"); break;
      case 67: printf ("ravitaillement_eau\n"); break;
      case 68: printf ("ravitaillement_blanchisserie_bain\n"); break;
      case 69: printf ("recherche_et_sauvetage\n"); break;
      case 70: printf ("reconnaissance\n"); break;
      case 71: printf ("reconnaissance_aerienne_tactique\n"); break;
      case 72: printf ("recuperation\n"); break;
      case 73: printf ("service_du_personnel\n"); break;
      case 74: printf ("service_juridique\n"); break;
      case 75: printf ("support_aerien_rapproche\n"); break;
      case 76: printf ("transmissions_forward_communications\n"); break;
      case 77: printf ("transmissions_node_centre\n"); break;
      case 78: printf ("transmissions_node_large_extension\n"); break;
      case 79: printf ("transmissions_node_small_extension\n"); break;
      case 80: printf ("transmissions_radio_relay\n"); break;
      case 81: printf ("transmissions_radio_tactical_satellite\n"); break;
      case 82: printf ("transmissions_radio_teletype\n"); break;
      case 83: printf ("transmissions_support\n"); break;
      case 84: printf ("transmissions_radio\n"); break;
      case 85: printf ("transport_allocation_des_mouvements\n"); break;
      case 86: printf ("transport_apod_apoe\n"); break;
      case 87: printf ("transport_spod_spoe\n"); break;
      case 88: printf ("transport_missile\n"); break;
      case 89: printf ("verrouillage_de_cible\n"); break;
      case 90: printf ("verrouillage_de_cible_flash\n"); break;
      case 91: printf ("verrouillage_de_cible_radar\n"); break;
      case 92: printf ("verrouillage_de_cible_sonore\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitCapaciteMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitCapaciteMission (name, &msgData);
}

void asn1Print_EnumNatureLevel (ASN1ConstCharPtr name, ASN1T_EnumNatureLevel* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("o\n"); break;
      case 2: printf ("oo\n"); break;
      case 3: printf ("ooo\n"); break;
      case 4: printf ("i\n"); break;
      case 5: printf ("ii\n"); break;
      case 6: printf ("iii\n"); break;
      case 7: printf ("x\n"); break;
      case 8: printf ("xx\n"); break;
      case 9: printf ("xxx\n"); break;
      case 10: printf ("xxxx\n"); break;
      case 11: printf ("xxxxx\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumNatureLevel::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumNatureLevel (name, &msgData);
}

void asn1Print_EnumHumanWound (ASN1ConstCharPtr name, ASN1T_EnumHumanWound* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("non_blesse\n"); break;
      case 1: printf ("mort\n"); break;
      case 2: printf ("blesse_urgence_1\n"); break;
      case 3: printf ("blesse_urgence_2\n"); break;
      case 4: printf ("blesse_urgence_3\n"); break;
      case 5: printf ("blesse_urgence_extreme\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumHumanWound::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumHumanWound (name, &msgData);
}

void asn1Print_EnumHumanRank (ASN1ConstCharPtr name, ASN1T_EnumHumanRank* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("officier\n"); break;
      case 1: printf ("sous_officer\n"); break;
      case 2: printf ("mdr\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumHumanRank::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumHumanRank (name, &msgData);
}

void asn1Print_EnumTempsBordee (ASN1ConstCharPtr name, ASN1T_EnumTempsBordee* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("temps_8_heures\n"); break;
      case 1: printf ("temps_12_heures\n"); break;
      case 2: printf ("temps_16_heures\n"); break;
      case 3: printf ("temps_20_heures\n"); break;
      case 4: printf ("temps_24_heures\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTempsBordee::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTempsBordee (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioCR.h"

void asn1Print_CR_RAS (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RAS::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RAS (name);
}

void asn1Print_CR_EnPosteFaceAObstacle (ASN1ConstCharPtr name, ASN1T_CR_EnPosteFaceAObstacle* pvalue)
{
   asn1Print_KnowledgeObject (name, pvalue);
}

void ASN1C_CR_EnPosteFaceAObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnPosteFaceAObstacle (name, &msgData);
}

void asn1Print_CR_EnContournementObstacle (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnContournementObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnContournementObstacle (name);
}

void asn1Print_CR_MissionImpossible (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_MissionImpossible::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_MissionImpossible (name);
}

void asn1Print_CR_ProgressionSurAxe (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ProgressionSurAxe::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ProgressionSurAxe (name);
}

void asn1Print_CR_ProgressionVersPosition (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ProgressionVersPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ProgressionVersPosition (name);
}

void asn1Print_CR_ArriveSurPosition (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ArriveSurPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ArriveSurPosition (name);
}

void asn1Print_CR_ReconnaissancePoint (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ReconnaissancePoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ReconnaissancePoint (name);
}

void asn1Print_CR_EnPosteFaceADirectionDangereuse (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnPosteFaceADirectionDangereuse::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnPosteFaceADirectionDangereuse (name);
}

void asn1Print_CR_EnJalonnement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnJalonnement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnJalonnement (name);
}

void asn1Print_CR_PreparationMission (ASN1ConstCharPtr name, ASN1T_CR_PreparationMission* pvalue)
{
   char namebuf[512];

   printf ("%s.m.delaiPresent = %d\n", name, (int)pvalue->m.delaiPresent);
   if (pvalue->m.delaiPresent) {
      sprintf (namebuf, "%s.delai", name);
      rtPrintInteger (namebuf, pvalue->delai);
   }

}

void ASN1C_CR_PreparationMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PreparationMission (name, &msgData);
}

void asn1Print_CR_DebutMission (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutMission (name);
}

void asn1Print_CR_FinMission (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinMission (name);
}

void asn1Print_CR_DispositifInstalle (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DispositifInstalle::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DispositifInstalle (name);
}

void asn1Print_CR_EnPosition (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnPosition (name);
}

void asn1Print_CR_ObjectifAtteint (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ObjectifAtteint::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ObjectifAtteint (name);
}

void asn1Print_CR_Debouche (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_Debouche::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Debouche (name);
}

void asn1Print_CR_RejointUnite (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RejointUnite::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RejointUnite (name);
}

void asn1Print_CR_EscorteUnite (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EscorteUnite::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EscorteUnite (name);
}

void asn1Print_CR_EnFreinage (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnFreinage::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnFreinage (name);
}

void asn1Print_CR_Assaut (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_Assaut::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Assaut (name);
}

void asn1Print_CR_EnCouverture (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnCouverture::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnCouverture (name);
}

void asn1Print_CR_EnEclairage (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnEclairage::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnEclairage (name);
}

void asn1Print_CR_EnManoeuvreRavitaillement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnManoeuvreRavitaillement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnManoeuvreRavitaillement (name);
}

void asn1Print_CR_SurPIA (ASN1ConstCharPtr name, ASN1T_CR_SurPIA* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_SurPIA::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SurPIA (name, &msgData);
}

void asn1Print_CR_PassageSurPIA (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PassageSurPIA::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PassageSurPIA (name);
}

void asn1Print_CR_UniteRecueillie (ASN1ConstCharPtr name, ASN1T_CR_UniteRecueillie* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_UniteRecueillie::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteRecueillie (name, &msgData);
}

void asn1Print_CR_EnCoursDeFranchissement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnCoursDeFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnCoursDeFranchissement (name);
}

void asn1Print_CR_AttenteOrdrePoursuivre (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AttenteOrdrePoursuivre::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AttenteOrdrePoursuivre (name);
}

void asn1Print_CR_AttenteOrdreDeboucher (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AttenteOrdreDeboucher::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AttenteOrdreDeboucher (name);
}

void asn1Print_CR_DebutControleZone (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutControleZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutControleZone (name);
}

void asn1Print_CR_FinControleZone (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinControleZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinControleZone (name);
}

void asn1Print_CR_DebutSurveillance (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutSurveillance::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutSurveillance (name);
}

void asn1Print_CR_FinSurveillance (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinSurveillance::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinSurveillance (name);
}

void asn1Print_CR_EnInfiltration (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnInfiltration::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnInfiltration (name);
}

void asn1Print_CR_EnExfiltration (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnExfiltration::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnExfiltration (name);
}

void asn1Print_CR_AttenteConditionFavorablePourInfiltration (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AttenteConditionFavorablePourInfiltration::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AttenteConditionFavorablePourInfiltration (name);
}

void asn1Print_CR_DroneLance (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DroneLance::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DroneLance (name);
}

void asn1Print_CR_DroneEnExploitation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DroneEnExploitation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DroneEnExploitation (name);
}

void asn1Print_CR_DroneExploite (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DroneExploite::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DroneExploite (name);
}

void asn1Print_CR_DroneDisponible (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DroneDisponible::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DroneDisponible (name);
}

void asn1Print_CR_DebutMiseEnOeuvreDrone (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutMiseEnOeuvreDrone::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutMiseEnOeuvreDrone (name);
}

void asn1Print_CR_FinMiseEnOeuvreDrone (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinMiseEnOeuvreDrone::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinMiseEnOeuvreDrone (name);
}

void asn1Print_CR_ActivationBrouillage (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ActivationBrouillage::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ActivationBrouillage (name);
}

void asn1Print_CR_DesactivationBrouillage (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DesactivationBrouillage::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DesactivationBrouillage (name);
}

void asn1Print_CR_ActivationSystemeEcoute (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ActivationSystemeEcoute::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ActivationSystemeEcoute (name);
}

void asn1Print_CR_DesactivationSystemeEcoute (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DesactivationSystemeEcoute::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DesactivationSystemeEcoute (name);
}

void asn1Print_CR_ActivationSystemeEcouteRadar (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ActivationSystemeEcouteRadar::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ActivationSystemeEcouteRadar (name);
}

void asn1Print_CR_DesactivationSystemeEcouteRadar (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DesactivationSystemeEcouteRadar::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DesactivationSystemeEcouteRadar (name);
}

void asn1Print_CR_DebutLiaison (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutLiaison::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutLiaison (name);
}

void asn1Print_CR_FinLiaison (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinLiaison::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinLiaison (name);
}

void asn1Print_CR_EtablissementLiaisonImpossible (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EtablissementLiaisonImpossible::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EtablissementLiaisonImpossible (name);
}

void asn1Print_CR_UniteTropDistante (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_UniteTropDistante::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteTropDistante (name);
}

void asn1Print_CR_EnregistrementDonnes (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnregistrementDonnes::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnregistrementDonnes (name);
}

void asn1Print_CR_ExploitationDonnees (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ExploitationDonnees::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ExploitationDonnees (name);
}

void asn1Print_CR_ExtractionDonnes (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ExtractionDonnes::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ExtractionDonnes (name);
}

void asn1Print_CR_Fixe (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_Fixe::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Fixe (name);
}

void asn1Print_CR_EnEsquive (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnEsquive::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnEsquive (name);
}

void asn1Print_CR_PriseContact (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PriseContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PriseContact (name);
}

void asn1Print_CR_RuptureContact (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RuptureContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RuptureContact (name);
}

void asn1Print_CR_PrecisionContact (ASN1ConstCharPtr name, ASN1T_CR_PrecisionContact* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_PrecisionContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PrecisionContact (name, &msgData);
}

void asn1Print_CR_EnnemiDetruit (ASN1ConstCharPtr name, ASN1T_CR_EnnemiDetruit* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_EnnemiDetruit::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnnemiDetruit (name, &msgData);
}

void asn1Print_CR_PrisAPartieParTirDirect (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PrisAPartieParTirDirect::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PrisAPartieParTirDirect (name);
}

void asn1Print_CR_PrisSousTirArtillerie (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PrisSousTirArtillerie::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PrisSousTirArtillerie (name);
}

void asn1Print_CR_PointTenuParEni (ASN1ConstCharPtr name, ASN1T_CR_PointTenuParEni* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_PointTenuParEni::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PointTenuParEni (name, &msgData);
}

void asn1Print_CR_ProgressionVersEni (ASN1ConstCharPtr name, ASN1T_CR_ProgressionVersEni* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_ProgressionVersEni::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ProgressionVersEni (name, &msgData);
}

void asn1Print_CR_Decroche (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_Decroche::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Decroche (name);
}

void asn1Print_CR_EniSurObjectif (ASN1ConstCharPtr name, ASN1T_CR_EniSurObjectif* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_EniSurObjectif::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EniSurObjectif (name, &msgData);
}

void asn1Print_CR_Riposte (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_Riposte::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Riposte (name);
}

void asn1Print_CR_Releve (ASN1ConstCharPtr name, ASN1T_CR_Releve* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_Releve::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Releve (name, &msgData);
}

void asn1Print_CR_SuitUnite (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_SuitUnite::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SuitUnite (name);
}

void asn1Print_CR_PasseEnAppui (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PasseEnAppui::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PasseEnAppui (name);
}

void asn1Print_CR_EnAppui (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnAppui::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnAppui (name);
}

void asn1Print_CR_NonOperationnel (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_NonOperationnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_NonOperationnel (name);
}

void asn1Print_CR_Operationnel (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_Operationnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Operationnel (name);
}

void asn1Print_CR_AmbianceVitesse (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AmbianceVitesse::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AmbianceVitesse (name);
}

void asn1Print_CR_AmbianceSurete (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AmbianceSurete::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AmbianceSurete (name);
}

void asn1Print_CR_SurLima (ASN1ConstCharPtr name, ASN1T_CR_SurLima* pvalue)
{
   asn1Print_EnumTypeLima (name, pvalue);
}

void ASN1C_CR_SurLima::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SurLima (name, &msgData);
}

void asn1Print_CR_DebutAmenagementBerges (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutAmenagementBerges::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutAmenagementBerges (name);
}

void asn1Print_CR_FinAmenagementBerges (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinAmenagementBerges::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinAmenagementBerges (name);
}

void asn1Print_CR_ObstacleEnAttenteActivation (ASN1ConstCharPtr name, ASN1T_CR_ObstacleEnAttenteActivation* pvalue)
{
   asn1Print_KnowledgeObject (name, pvalue);
}

void ASN1C_CR_ObstacleEnAttenteActivation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ObstacleEnAttenteActivation (name, &msgData);
}

void asn1Print_CR_DebutTravaux (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutTravaux::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutTravaux (name);
}

void asn1Print_CR_FinTravaux (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinTravaux::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinTravaux (name);
}

void asn1Print_CR_ObstacleDegage (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ObstacleDegage::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ObstacleDegage (name);
}

void asn1Print_CR_OrganisationChantier (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_OrganisationChantier::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_OrganisationChantier (name);
}

void asn1Print_CR_DesorganisationChantier (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DesorganisationChantier::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DesorganisationChantier (name);
}

void asn1Print_CR_ReconnaissancePositionObstacle (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ReconnaissancePositionObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ReconnaissancePositionObstacle (name);
}

void asn1Print_CR_ContournementRealise (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ContournementRealise::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ContournementRealise (name);
}

void asn1Print_CR_AttenteRenforcement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AttenteRenforcement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AttenteRenforcement (name);
}

void asn1Print_CR_DebutExploitationSiteFranchissement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutExploitationSiteFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutExploitationSiteFranchissement (name);
}

void asn1Print_CR_FinExploitationSiteFranchissement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinExploitationSiteFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinExploitationSiteFranchissement (name);
}

void asn1Print_CR_ReussiteRenforcement (ASN1ConstCharPtr name, ASN1T_CR_ReussiteRenforcement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion_renforcant", name);
   asn1Print_Agent (namebuf, &pvalue->pion_renforcant);

   sprintf (namebuf, "%s.automate_renforce", name);
   asn1Print_Agent (namebuf, &pvalue->automate_renforce);

}

void ASN1C_CR_ReussiteRenforcement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ReussiteRenforcement (name, &msgData);
}

void asn1Print_CR_EchecRenforcement (ASN1ConstCharPtr name, ASN1T_CR_EchecRenforcement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion_renforcant", name);
   asn1Print_Agent (namebuf, &pvalue->pion_renforcant);

   sprintf (namebuf, "%s.automate_renforce", name);
   asn1Print_Agent (namebuf, &pvalue->automate_renforce);

}

void ASN1C_CR_EchecRenforcement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EchecRenforcement (name, &msgData);
}

void asn1Print_CR_SectionDeployee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_SectionDeployee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SectionDeployee (name);
}

void asn1Print_CR_ANouveauDisponibleApresReparation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ANouveauDisponibleApresReparation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ANouveauDisponibleApresReparation (name);
}

void asn1Print_CR_MaterielRepareSurPlace (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_MaterielRepareSurPlace::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_MaterielRepareSurPlace (name);
}

void asn1Print_CR_MaterielRetourDeMaintenance (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_MaterielRetourDeMaintenance::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_MaterielRetourDeMaintenance (name);
}

void asn1Print_CR_DemandeRavitaillement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DemandeRavitaillement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DemandeRavitaillement (name);
}

void asn1Print_CR_DemandeEvacuationSanitaire (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DemandeEvacuationSanitaire::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DemandeEvacuationSanitaire (name);
}

void asn1Print_CR_DemandeEvacuationMateriel (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DemandeEvacuationMateriel::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DemandeEvacuationMateriel (name);
}

void asn1Print_CR_AllocationConsentieBientotEpuisee (ASN1ConstCharPtr name, ASN1T_CR_AllocationConsentieBientotEpuisee* pvalue)
{
   asn1Print_TypeDotation (name, pvalue);
}

void ASN1C_CR_AllocationConsentieBientotEpuisee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AllocationConsentieBientotEpuisee (name, &msgData);
}

void asn1Print_CR_RavitaillementDotationsEffectue (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RavitaillementDotationsEffectue::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RavitaillementDotationsEffectue (name);
}

void asn1Print_CR_RavitaillementStockEffectue (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RavitaillementStockEffectue::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RavitaillementStockEffectue (name);
}

void asn1Print_CR_HumainRetourDeSante (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_HumainRetourDeSante::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_HumainRetourDeSante (name);
}

void asn1Print_CR_EnCoursRavitaillement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnCoursRavitaillement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnCoursRavitaillement (name);
}

void asn1Print_CR_RavitaillementTermine (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RavitaillementTermine::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RavitaillementTermine (name);
}

void asn1Print_CR_HelicoptereEnObservation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_HelicoptereEnObservation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_HelicoptereEnObservation (name);
}

void asn1Print_CR_PerteInfoGuidage (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PerteInfoGuidage::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PerteInfoGuidage (name);
}

void asn1Print_CR_TransportUnitePasPrete (ASN1ConstCharPtr name, ASN1T_CR_TransportUnitePasPrete* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TransportUnitePasPrete::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TransportUnitePasPrete (name, &msgData);
}

void asn1Print_CR_TransportUnitePrete (ASN1ConstCharPtr name, ASN1T_CR_TransportUnitePrete* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TransportUnitePrete::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TransportUnitePrete (name, &msgData);
}

void asn1Print_CR_TransportEnCours (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TransportEnCours::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TransportEnCours (name);
}

void asn1Print_CR_TransportEmbarquement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TransportEmbarquement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TransportEmbarquement (name);
}

void asn1Print_CR_TransportDebarquement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TransportDebarquement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TransportDebarquement (name);
}

void asn1Print_CR_VehiculeLaisseSurPosition (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_VehiculeLaisseSurPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_VehiculeLaisseSurPosition (name);
}

void asn1Print_CR_RejointPositionEmbarquement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RejointPositionEmbarquement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RejointPositionEmbarquement (name);
}

void asn1Print_CR_EnAttenteTransporteurs (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_EnAttenteTransporteurs::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_EnAttenteTransporteurs (name);
}

void asn1Print_CR_ContamineNBC (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ContamineNBC::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ContamineNBC (name);
}

void asn1Print_CR_DecontamineNBC (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DecontamineNBC::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DecontamineNBC (name);
}

void asn1Print_CR_TenueProtectionNBCMise (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TenueProtectionNBCMise::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TenueProtectionNBCMise (name);
}

void asn1Print_CR_TenueProtectionNBCEnlevee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TenueProtectionNBCEnlevee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TenueProtectionNBCEnlevee (name);
}

void asn1Print_CR_AlerteNBCNiveau4 (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_AlerteNBCNiveau4::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_AlerteNBCNiveau4 (name);
}

void asn1Print_CR_FinAlerteNBCNiveau4 (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinAlerteNBCNiveau4::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinAlerteNBCNiveau4 (name);
}

void asn1Print_CR_SiteDecontaminationAnime (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_SiteDecontaminationAnime::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SiteDecontaminationAnime (name);
}

void asn1Print_CR_SiteDecontaminationDesactive (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_SiteDecontaminationDesactive::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SiteDecontaminationDesactive (name);
}

void asn1Print_CR_DemandeDecontamination (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DemandeDecontamination::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DemandeDecontamination (name);
}

void asn1Print_CR_ZoneReconnue (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ZoneReconnue::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ZoneReconnue (name);
}

void asn1Print_CR_ZoneDecontaminee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ZoneDecontaminee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ZoneDecontaminee (name);
}

void asn1Print_CR_SiteROTAReconnu (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_SiteROTAReconnu::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SiteROTAReconnu (name);
}

void asn1Print_CR_IncidentNBCTermine (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_IncidentNBCTermine::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_IncidentNBCTermine (name);
}

void asn1Print_CR_UniteDecontaminee (ASN1ConstCharPtr name, ASN1T_CR_UniteDecontaminee* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_UniteDecontaminee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteDecontaminee (name, &msgData);
}

void asn1Print_CR_SiteSature (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_SiteSature::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_SiteSature (name);
}

void asn1Print_CR_DebutMesure (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutMesure::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutMesure (name);
}

void asn1Print_CR_FinMesure (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinMesure::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinMesure (name);
}

void asn1Print_CR_ReconnaissanceTerminee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ReconnaissanceTerminee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ReconnaissanceTerminee (name);
}

void asn1Print_CR_ReconnaissanceInitialeTerminee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ReconnaissanceInitialeTerminee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ReconnaissanceInitialeTerminee (name);
}

void asn1Print_CR_RejointPlotRavitaillement (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RejointPlotRavitaillement::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RejointPlotRavitaillement (name);
}

void asn1Print_CR_PremierCoupParti (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PremierCoupParti::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PremierCoupParti (name);
}

void asn1Print_CR_TirExecute (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirExecute::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirExecute (name);
}

void asn1Print_CR_TirHorsDePortee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirHorsDePortee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirHorsDePortee (name);
}

void asn1Print_CR_TirAnnule (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirAnnule::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirAnnule (name);
}

void asn1Print_CR_ChangementDePosition (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ChangementDePosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ChangementDePosition (name);
}

void asn1Print_CR_DebutInstallation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutInstallation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutInstallation (name);
}

void asn1Print_CR_FinInstallation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinInstallation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinInstallation (name);
}

void asn1Print_CR_PretPourConduiteTir (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PretPourConduiteTir::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PretPourConduiteTir (name);
}

void asn1Print_CR_ReceptionOrdreDeFeu (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ReceptionOrdreDeFeu::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ReceptionOrdreDeFeu (name);
}

void asn1Print_CR_PretAuTir (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PretAuTir::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PretAuTir (name);
}

void asn1Print_CR_ObservationTirIndirect (ASN1ConstCharPtr name, ASN1T_CR_ObservationTirIndirect* pvalue)
{
   asn1Print_TirIndirect (name, pvalue);
}

void ASN1C_CR_ObservationTirIndirect::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ObservationTirIndirect (name, &msgData);
}

void asn1Print_CR_ZoneImplantationOccupee (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_ZoneImplantationOccupee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ZoneImplantationOccupee (name);
}

void asn1Print_CR_InstallationSurZoneImplantation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_InstallationSurZoneImplantation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_InstallationSurZoneImplantation (name);
}

void asn1Print_CR_PresencePopulation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PresencePopulation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PresencePopulation (name);
}

void asn1Print_CR_OrientationPopulationVersCampRefugies (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_OrientationPopulationVersCampRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_OrientationPopulationVersCampRefugies (name);
}

void asn1Print_CR_PasDeCampRefugiesDisponible (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PasDeCampRefugiesDisponible::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PasDeCampRefugiesDisponible (name);
}

void asn1Print_CR_PresenceEnnemiRendu (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PresenceEnnemiRendu::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PresenceEnnemiRendu (name);
}

void asn1Print_CR_OrientationEnnemiRenduVersCampPrisonniers (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_OrientationEnnemiRenduVersCampPrisonniers::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_OrientationEnnemiRenduVersCampPrisonniers (name);
}

void asn1Print_CR_PasDeCampPrisonniersDisponible (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PasDeCampPrisonniersDisponible::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PasDeCampPrisonniersDisponible (name);
}

void asn1Print_CR_Trace (ASN1ConstCharPtr name, ASN1T_CR_Trace* pvalue)
{
   rtPrintCharStr (name, *pvalue);
}

void ASN1C_CR_Trace::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_Trace (name, &msgData);
}

void asn1Print_CR_TraceID (ASN1ConstCharPtr name, ASN1T_CR_TraceID* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_CR_TraceID::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TraceID (name, &msgData);
}

void asn1Print_CR_TirDansZoneInterdite (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirDansZoneInterdite::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirDansZoneInterdite (name);
}

void asn1Print_CR_TirSurCampAmi (ASN1ConstCharPtr name, ASN1T_CR_TirSurCampAmi* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TirSurCampAmi::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirSurCampAmi (name, &msgData);
}

void asn1Print_CR_TireParCampAmi (ASN1ConstCharPtr name, ASN1T_CR_TireParCampAmi* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TireParCampAmi::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TireParCampAmi (name, &msgData);
}

void asn1Print_CR_TirSurCampNeutre (ASN1ConstCharPtr name, ASN1T_CR_TirSurCampNeutre* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TirSurCampNeutre::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirSurCampNeutre (name, &msgData);
}

void asn1Print_CR_TireParCampNeutre (ASN1ConstCharPtr name, ASN1T_CR_TireParCampNeutre* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TireParCampNeutre::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TireParCampNeutre (name, &msgData);
}

void asn1Print_CR_TirSurCivil (ASN1ConstCharPtr name, ASN1T_CR_TirSurCivil* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TirSurCivil::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirSurCivil (name, &msgData);
}

void asn1Print_CR_TireParCivil (ASN1ConstCharPtr name, ASN1T_CR_TireParCivil* pvalue)
{
   asn1Print_Agent (name, pvalue);
}

void ASN1C_CR_TireParCivil::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TireParCivil (name, &msgData);
}

void asn1Print_CR_DestructionPC (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DestructionPC::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DestructionPC (name);
}

void asn1Print_CR_DecesBlesse (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DecesBlesse::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DecesBlesse (name);
}

void asn1Print_CR_DecesBlessePendantTransport (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DecesBlessePendantTransport::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DecesBlessePendantTransport (name);
}

void asn1Print_CR_DecesBlessePendantHospitalisation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DecesBlessePendantHospitalisation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DecesBlessePendantHospitalisation (name);
}

void asn1Print_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_MissionImpossibleUnitesSubordonneesNonOperationnelles (name);
}

void asn1Print_CR_MissionImpossibleLimaInvalide (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_MissionImpossibleLimaInvalide::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_MissionImpossibleLimaInvalide (name);
}

void asn1Print_CR_MissionImpossibleZoneHorsFuseau (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_MissionImpossibleZoneHorsFuseau::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_MissionImpossibleZoneHorsFuseau (name);
}

void asn1Print_CR_RapportDeForceDefavorable (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_RapportDeForceDefavorable::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_RapportDeForceDefavorable (name);
}

void asn1Print_CR_TerrainDifficile (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TerrainDifficile::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TerrainDifficile (name);
}

void asn1Print_CR_PlusDeCarburant (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_PlusDeCarburant::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_PlusDeCarburant (name);
}

void asn1Print_CR_DispositifDisperse (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DispositifDisperse::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DispositifDisperse (name);
}

void asn1Print_CR_DebutNeutralisation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutNeutralisation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutNeutralisation (name);
}

void asn1Print_CR_FinNeutralisation (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinNeutralisation::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinNeutralisation (name);
}

void asn1Print_CR_DebutSilenceRadio (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutSilenceRadio::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutSilenceRadio (name);
}

void asn1Print_CR_FinSilenceRadio (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinSilenceRadio::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinSilenceRadio (name);
}

void asn1Print_CR_DebutSilenceRadar (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_DebutSilenceRadar::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_DebutSilenceRadar (name);
}

void asn1Print_CR_FinSilenceRadar (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_FinSilenceRadar::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_FinSilenceRadar (name);
}

void asn1Print_CR_TirRestreint (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirRestreint::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirRestreint (name);
}

void asn1Print_CR_TirInterdit (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirInterdit::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirInterdit (name);
}

void asn1Print_CR_TirLibre (ASN1ConstCharPtr name)
{
}

void ASN1C_CR_TirLibre::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_TirLibre (name);
}

void asn1Print_CR_UniteDetectee (ASN1ConstCharPtr name, ASN1T_CR_UniteDetectee* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_UniteDetectee::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteDetectee (name, &msgData);
}

void asn1Print_CR_UniteAmieReconnue (ASN1ConstCharPtr name, ASN1T_CR_UniteAmieReconnue* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_UniteAmieReconnue::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteAmieReconnue (name, &msgData);
}

void asn1Print_CR_UniteEnnemieReconnue (ASN1ConstCharPtr name, ASN1T_CR_UniteEnnemieReconnue* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_UniteEnnemieReconnue::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteEnnemieReconnue (name, &msgData);
}

void asn1Print_CR_UniteNeutreReconnue (ASN1ConstCharPtr name, ASN1T_CR_UniteNeutreReconnue* pvalue)
{
   asn1Print_KnowledgeAgent (name, pvalue);
}

void ASN1C_CR_UniteNeutreReconnue::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_UniteNeutreReconnue (name, &msgData);
}

void asn1Print_CR_ObjetDetecte (ASN1ConstCharPtr name, ASN1T_CR_ObjetDetecte* pvalue)
{
   asn1Print_KnowledgeObject (name, pvalue);
}

void ASN1C_CR_ObjetDetecte::Print (ASN1ConstCharPtr name)

{
   asn1Print_CR_ObjetDetecte (name, &msgData);
}

void asn1Print_EnumTypeCR (ASN1ConstCharPtr name, ASN1T_EnumTypeCR* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("message\n"); break;
      case 1: printf ("operationel\n"); break;
      case 2: printf ("evenement_exceptionnel\n"); break;
      case 3: printf ("warning\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTypeCR::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTypeCR (name, &msgData);
}

void asn1Print_MsgCR_cr (ASN1ConstCharPtr name, ASN1T_MsgCR_cr* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.cr_ras", name);
         break;

      case 2:
         sprintf (namebuf, "%s.u.cr_en_poste_face_a_obstacle", name);
         asn1Print_CR_EnPosteFaceAObstacle (namebuf, &pvalue->u.cr_en_poste_face_a_obstacle);
         break;

      case 3:
         sprintf (namebuf, "%s.u.cr_en_contournement_obstacle", name);
         break;

      case 4:
         sprintf (namebuf, "%s.u.cr_mission_impossible", name);
         break;

      case 5:
         sprintf (namebuf, "%s.u.cr_progression_sur_axe", name);
         break;

      case 6:
         sprintf (namebuf, "%s.u.cr_progression_vers_position", name);
         break;

      case 7:
         sprintf (namebuf, "%s.u.cr_arrive_sur_position", name);
         break;

      case 8:
         sprintf (namebuf, "%s.u.cr_reconnaissance_point", name);
         break;

      case 9:
         sprintf (namebuf, "%s.u.cr_en_poste_face_a_direction_dangereuse", name);
         break;

      case 10:
         sprintf (namebuf, "%s.u.cr_en_jalonnement", name);
         break;

      case 11:
         sprintf (namebuf, "%s.u.cr_preparation_mission", name);
         asn1Print_CR_PreparationMission (namebuf, pvalue->u.cr_preparation_mission);
         break;

      case 12:
         sprintf (namebuf, "%s.u.cr_debut_mission", name);
         break;

      case 13:
         sprintf (namebuf, "%s.u.cr_fin_mission", name);
         break;

      case 14:
         sprintf (namebuf, "%s.u.cr_dispositif_installe", name);
         break;

      case 15:
         sprintf (namebuf, "%s.u.cr_en_position", name);
         break;

      case 16:
         sprintf (namebuf, "%s.u.cr_objectif_atteint", name);
         break;

      case 17:
         sprintf (namebuf, "%s.u.cr_debouche", name);
         break;

      case 18:
         sprintf (namebuf, "%s.u.cr_rejoint_unite", name);
         break;

      case 19:
         sprintf (namebuf, "%s.u.cr_escorte_unite", name);
         break;

      case 20:
         sprintf (namebuf, "%s.u.cr_en_freinage", name);
         break;

      case 21:
         sprintf (namebuf, "%s.u.cr_assaut", name);
         break;

      case 22:
         sprintf (namebuf, "%s.u.cr_en_couverture", name);
         break;

      case 23:
         sprintf (namebuf, "%s.u.cr_en_eclairage", name);
         break;

      case 24:
         sprintf (namebuf, "%s.u.cr_en_manoeuvre_ravitaillement", name);
         break;

      case 25:
         sprintf (namebuf, "%s.u.cr_sur_pia", name);
         asn1Print_CR_SurPIA (namebuf, &pvalue->u.cr_sur_pia);
         break;

      case 26:
         sprintf (namebuf, "%s.u.cr_passage_sur_pia", name);
         break;

      case 27:
         sprintf (namebuf, "%s.u.cr_unite_recueillie", name);
         asn1Print_CR_UniteRecueillie (namebuf, &pvalue->u.cr_unite_recueillie);
         break;

      case 28:
         sprintf (namebuf, "%s.u.cr_en_cours_de_franchissement", name);
         break;

      case 29:
         sprintf (namebuf, "%s.u.cr_attente_ordre_poursuivre", name);
         break;

      case 30:
         sprintf (namebuf, "%s.u.cr_attente_ordre_deboucher", name);
         break;

      case 31:
         sprintf (namebuf, "%s.u.cr_fixe", name);
         break;

      case 32:
         sprintf (namebuf, "%s.u.cr_en_esquive", name);
         break;

      case 33:
         sprintf (namebuf, "%s.u.cr_prise_contact", name);
         break;

      case 34:
         sprintf (namebuf, "%s.u.cr_rupture_contact", name);
         break;

      case 35:
         sprintf (namebuf, "%s.u.cr_precision_contact", name);
         asn1Print_CR_PrecisionContact (namebuf, &pvalue->u.cr_precision_contact);
         break;

      case 36:
         sprintf (namebuf, "%s.u.cr_ennemi_detruit", name);
         asn1Print_CR_EnnemiDetruit (namebuf, &pvalue->u.cr_ennemi_detruit);
         break;

      case 37:
         sprintf (namebuf, "%s.u.cr_pris_a_partie_par_tir_direct", name);
         break;

      case 38:
         sprintf (namebuf, "%s.u.cr_pris_sous_tir_artillerie", name);
         break;

      case 39:
         sprintf (namebuf, "%s.u.cr_point_tenu_par_eni", name);
         asn1Print_CR_PointTenuParEni (namebuf, &pvalue->u.cr_point_tenu_par_eni);
         break;

      case 40:
         sprintf (namebuf, "%s.u.cr_progression_vers_eni", name);
         asn1Print_CR_ProgressionVersEni (namebuf, &pvalue->u.cr_progression_vers_eni);
         break;

      case 41:
         sprintf (namebuf, "%s.u.cr_decroche", name);
         break;

      case 42:
         sprintf (namebuf, "%s.u.cr_eni_sur_objectif", name);
         asn1Print_CR_EniSurObjectif (namebuf, &pvalue->u.cr_eni_sur_objectif);
         break;

      case 43:
         sprintf (namebuf, "%s.u.cr_riposte", name);
         break;

      case 44:
         sprintf (namebuf, "%s.u.cr_debut_controle_zone", name);
         break;

      case 45:
         sprintf (namebuf, "%s.u.cr_fin_controle_zone", name);
         break;

      case 46:
         sprintf (namebuf, "%s.u.cr_debut_surveillance", name);
         break;

      case 47:
         sprintf (namebuf, "%s.u.cr_fin_surveillance", name);
         break;

      case 48:
         sprintf (namebuf, "%s.u.cr_en_infiltration", name);
         break;

      case 49:
         sprintf (namebuf, "%s.u.cr_en_exfiltration", name);
         break;

      case 50:
         sprintf (namebuf, "%s.u.cr_attente_condition_favorable_pour_infiltration", name);
         break;

      case 51:
         sprintf (namebuf, "%s.u.cr_drone_lance", name);
         break;

      case 52:
         sprintf (namebuf, "%s.u.cr_drone_en_exploitation", name);
         break;

      case 53:
         sprintf (namebuf, "%s.u.cr_drone_exploite", name);
         break;

      case 54:
         sprintf (namebuf, "%s.u.cr_drone_disponible", name);
         break;

      case 55:
         sprintf (namebuf, "%s.u.cr_debut_mise_en_oeuvre_drone", name);
         break;

      case 56:
         sprintf (namebuf, "%s.u.cr_fin_mise_en_oeuvre_drone", name);
         break;

      case 57:
         sprintf (namebuf, "%s.u.cr_activation_brouillage", name);
         break;

      case 58:
         sprintf (namebuf, "%s.u.cr_desactivation_brouillage", name);
         break;

      case 59:
         sprintf (namebuf, "%s.u.cr_activation_systeme_ecoute", name);
         break;

      case 60:
         sprintf (namebuf, "%s.u.cr_desactivation_systeme_ecoute", name);
         break;

      case 61:
         sprintf (namebuf, "%s.u.cr_activation_systeme_ecoute_radar", name);
         break;

      case 62:
         sprintf (namebuf, "%s.u.cr_desactivation_systeme_ecoute_radar", name);
         break;

      case 63:
         sprintf (namebuf, "%s.u.cr_debut_liaison", name);
         break;

      case 64:
         sprintf (namebuf, "%s.u.cr_fin_liaison", name);
         break;

      case 65:
         sprintf (namebuf, "%s.u.cr_etablissement_liaison_impossible", name);
         break;

      case 66:
         sprintf (namebuf, "%s.u.cr_unite_trop_distante", name);
         break;

      case 67:
         sprintf (namebuf, "%s.u.cr_enregistrement_donnes", name);
         break;

      case 68:
         sprintf (namebuf, "%s.u.cr_exploitation_donnees", name);
         break;

      case 69:
         sprintf (namebuf, "%s.u.cr_extraction_donnes", name);
         break;

      case 70:
         sprintf (namebuf, "%s.u.cr_releve", name);
         asn1Print_CR_Releve (namebuf, &pvalue->u.cr_releve);
         break;

      case 71:
         sprintf (namebuf, "%s.u.cr_suit_unite", name);
         break;

      case 72:
         sprintf (namebuf, "%s.u.cr_passe_en_appui", name);
         break;

      case 73:
         sprintf (namebuf, "%s.u.cr_en_appui", name);
         break;

      case 74:
         sprintf (namebuf, "%s.u.cr_non_operationnelle", name);
         break;

      case 75:
         sprintf (namebuf, "%s.u.cr_operationnelle", name);
         break;

      case 76:
         sprintf (namebuf, "%s.u.cr_ambiance_vitesse", name);
         break;

      case 77:
         sprintf (namebuf, "%s.u.cr_ambiance_surete", name);
         break;

      case 78:
         sprintf (namebuf, "%s.u.cr_sur_lima", name);
         asn1Print_CR_SurLima (namebuf, &pvalue->u.cr_sur_lima);
         break;

      case 79:
         sprintf (namebuf, "%s.u.cr_debut_travaux", name);
         break;

      case 80:
         sprintf (namebuf, "%s.u.cr_fin_travaux", name);
         break;

      case 81:
         sprintf (namebuf, "%s.u.cr_obstacle_degage", name);
         break;

      case 82:
         sprintf (namebuf, "%s.u.cr_organisation_chantier", name);
         break;

      case 83:
         sprintf (namebuf, "%s.u.cr_desorganisation_chantier", name);
         break;

      case 84:
         sprintf (namebuf, "%s.u.cr_reconnaissance_position_obstacle", name);
         break;

      case 85:
         sprintf (namebuf, "%s.u.cr_contournement_realise", name);
         break;

      case 86:
         sprintf (namebuf, "%s.u.cr_attente_renforcement", name);
         break;

      case 87:
         sprintf (namebuf, "%s.u.cr_debut_exploitation_site_franchissement", name);
         break;

      case 88:
         sprintf (namebuf, "%s.u.cr_fin_exploitation_site_franchissement", name);
         break;

      case 89:
         sprintf (namebuf, "%s.u.cr_reussite_renforcement", name);
         asn1Print_CR_ReussiteRenforcement (namebuf, pvalue->u.cr_reussite_renforcement);
         break;

      case 90:
         sprintf (namebuf, "%s.u.cr_echec_renforcement", name);
         asn1Print_CR_EchecRenforcement (namebuf, pvalue->u.cr_echec_renforcement);
         break;

      case 91:
         sprintf (namebuf, "%s.u.cr_obstacle_en_attente_activation", name);
         asn1Print_CR_ObstacleEnAttenteActivation (namebuf, &pvalue->u.cr_obstacle_en_attente_activation);
         break;

      case 92:
         sprintf (namebuf, "%s.u.cr_debut_amenagement_berges", name);
         break;

      case 93:
         sprintf (namebuf, "%s.u.cr_fin_amenagement_berges", name);
         break;

      case 94:
         sprintf (namebuf, "%s.u.cr_section_deployee", name);
         break;

      case 95:
         sprintf (namebuf, "%s.u.cr_a_nouveau_disponible_apres_reparation", name);
         break;

      case 96:
         sprintf (namebuf, "%s.u.cr_materiel_retour_de_maintenance", name);
         break;

      case 97:
         sprintf (namebuf, "%s.u.cr_materiel_repare_sur_place", name);
         break;

      case 98:
         sprintf (namebuf, "%s.u.cr_demande_ravitaillement", name);
         break;

      case 99:
         sprintf (namebuf, "%s.u.cr_demande_evacuation_sanitaire", name);
         break;

      case 100:
         sprintf (namebuf, "%s.u.cr_demande_evacuation_materiel", name);
         break;

      case 101:
         sprintf (namebuf, "%s.u.cr_allocation_consentie_bientot_epuisee", name);
         asn1Print_CR_AllocationConsentieBientotEpuisee (namebuf, &pvalue->u.cr_allocation_consentie_bientot_epuisee);
         break;

      case 102:
         sprintf (namebuf, "%s.u.cr_ravitaillement_dotations_effectue", name);
         break;

      case 103:
         sprintf (namebuf, "%s.u.cr_ravitaillement_stock_effectue", name);
         break;

      case 104:
         sprintf (namebuf, "%s.u.cr_humain_retour_de_sante", name);
         break;

      case 105:
         sprintf (namebuf, "%s.u.cr_en_cours_ravitaillement", name);
         break;

      case 106:
         sprintf (namebuf, "%s.u.cr_ravitaillement_termine", name);
         break;

      case 107:
         sprintf (namebuf, "%s.u.cr_helicoptere_en_observation", name);
         break;

      case 108:
         sprintf (namebuf, "%s.u.cr_perte_info_guidage", name);
         break;

      case 109:
         sprintf (namebuf, "%s.u.cr_transport_unite_pas_prete", name);
         asn1Print_CR_TransportUnitePasPrete (namebuf, &pvalue->u.cr_transport_unite_pas_prete);
         break;

      case 110:
         sprintf (namebuf, "%s.u.cr_transport_unite_prete", name);
         asn1Print_CR_TransportUnitePrete (namebuf, &pvalue->u.cr_transport_unite_prete);
         break;

      case 111:
         sprintf (namebuf, "%s.u.cr_transport_en_cours", name);
         break;

      case 112:
         sprintf (namebuf, "%s.u.cr_transport_embarquement", name);
         break;

      case 113:
         sprintf (namebuf, "%s.u.cr_transport_debarquement", name);
         break;

      case 114:
         sprintf (namebuf, "%s.u.cr_vehicule_laisse_sur_position", name);
         break;

      case 115:
         sprintf (namebuf, "%s.u.cr_rejoint_position_embarquement", name);
         break;

      case 116:
         sprintf (namebuf, "%s.u.cr_en_attente_transporteurs", name);
         break;

      case 117:
         sprintf (namebuf, "%s.u.cr_contamine_nbc", name);
         break;

      case 118:
         sprintf (namebuf, "%s.u.cr_decontamine_nbc", name);
         break;

      case 119:
         sprintf (namebuf, "%s.u.cr_tenue_protection_nbc_mise", name);
         break;

      case 120:
         sprintf (namebuf, "%s.u.cr_tenue_protection_nbc_enlevee", name);
         break;

      case 121:
         sprintf (namebuf, "%s.u.cr_alerte_nbc_niveau_4", name);
         break;

      case 122:
         sprintf (namebuf, "%s.u.cr_fin_alerte_nbc_niveau_4", name);
         break;

      case 123:
         sprintf (namebuf, "%s.u.cr_site_decontamination_anime", name);
         break;

      case 124:
         sprintf (namebuf, "%s.u.cr_site_decontamination_desactive", name);
         break;

      case 125:
         sprintf (namebuf, "%s.u.cr_demande_decontamination", name);
         break;

      case 126:
         sprintf (namebuf, "%s.u.cr_zone_reconnue", name);
         break;

      case 127:
         sprintf (namebuf, "%s.u.cr_zone_decontaminee", name);
         break;

      case 128:
         sprintf (namebuf, "%s.u.cr_site_rota_reconnu", name);
         break;

      case 129:
         sprintf (namebuf, "%s.u.cr_incident_nbc_termine", name);
         break;

      case 130:
         sprintf (namebuf, "%s.u.cr_unite_decontaminee", name);
         asn1Print_CR_UniteDecontaminee (namebuf, &pvalue->u.cr_unite_decontaminee);
         break;

      case 131:
         sprintf (namebuf, "%s.u.cr_site_sature", name);
         break;

      case 132:
         sprintf (namebuf, "%s.u.cr_debut_mesure", name);
         break;

      case 133:
         sprintf (namebuf, "%s.u.cr_fin_mesure", name);
         break;

      case 134:
         sprintf (namebuf, "%s.u.cr_reconnaissance_terminee", name);
         break;

      case 135:
         sprintf (namebuf, "%s.u.cr_reconnaissance_initiale_terminee", name);
         break;

      case 136:
         sprintf (namebuf, "%s.u.cr_rejoint_plot_ravitaillement", name);
         break;

      case 137:
         sprintf (namebuf, "%s.u.cr_premier_coup_parti", name);
         break;

      case 138:
         sprintf (namebuf, "%s.u.cr_tir_execute", name);
         break;

      case 139:
         sprintf (namebuf, "%s.u.cr_tir_hors_de_portee", name);
         break;

      case 140:
         sprintf (namebuf, "%s.u.cr_tir_annule", name);
         break;

      case 141:
         sprintf (namebuf, "%s.u.cr_changement_de_position", name);
         break;

      case 142:
         sprintf (namebuf, "%s.u.cr_debut_installation", name);
         break;

      case 143:
         sprintf (namebuf, "%s.u.cr_fin_installation", name);
         break;

      case 144:
         sprintf (namebuf, "%s.u.cr_pret_pour_conduite_tir", name);
         break;

      case 145:
         sprintf (namebuf, "%s.u.cr_observation_tir_indirect", name);
         asn1Print_CR_ObservationTirIndirect (namebuf, &pvalue->u.cr_observation_tir_indirect);
         break;

      case 146:
         sprintf (namebuf, "%s.u.cr_zone_implantation_occupee", name);
         break;

      case 147:
         sprintf (namebuf, "%s.u.cr_installation_sur_zone_implantation", name);
         break;

      case 148:
         sprintf (namebuf, "%s.u.cr_reception_ordre_de_feu", name);
         break;

      case 149:
         sprintf (namebuf, "%s.u.cr_pret_au_tir", name);
         break;

      case 150:
         sprintf (namebuf, "%s.u.cr_presence_population", name);
         break;

      case 151:
         sprintf (namebuf, "%s.u.cr_orientation_population_vers_camp_refugies", name);
         break;

      case 152:
         sprintf (namebuf, "%s.u.cr_pas_de_camp_refugies_disponible", name);
         break;

      case 153:
         sprintf (namebuf, "%s.u.cr_presence_ennemi_rendu", name);
         break;

      case 154:
         sprintf (namebuf, "%s.u.cr_orientation_ennemi_rendu_vers_camp_prisonniers", name);
         break;

      case 155:
         sprintf (namebuf, "%s.u.cr_pas_de_camp_prisonniers_disponible", name);
         break;

      case 156:
         sprintf (namebuf, "%s.u.cr_tir_dans_zone_interdite", name);
         break;

      case 157:
         sprintf (namebuf, "%s.u.cr_tir_sur_camp_ami", name);
         asn1Print_CR_TirSurCampAmi (namebuf, &pvalue->u.cr_tir_sur_camp_ami);
         break;

      case 158:
         sprintf (namebuf, "%s.u.cr_tire_par_camp_ami", name);
         asn1Print_CR_TireParCampAmi (namebuf, &pvalue->u.cr_tire_par_camp_ami);
         break;

      case 159:
         sprintf (namebuf, "%s.u.cr_tir_sur_camp_neutre", name);
         asn1Print_CR_TirSurCampNeutre (namebuf, &pvalue->u.cr_tir_sur_camp_neutre);
         break;

      case 160:
         sprintf (namebuf, "%s.u.cr_tire_par_camp_neutre", name);
         asn1Print_CR_TireParCampNeutre (namebuf, &pvalue->u.cr_tire_par_camp_neutre);
         break;

      case 161:
         sprintf (namebuf, "%s.u.cr_tir_sur_civil", name);
         asn1Print_CR_TirSurCivil (namebuf, &pvalue->u.cr_tir_sur_civil);
         break;

      case 162:
         sprintf (namebuf, "%s.u.cr_tire_par_civil", name);
         asn1Print_CR_TireParCivil (namebuf, &pvalue->u.cr_tire_par_civil);
         break;

      case 163:
         sprintf (namebuf, "%s.u.cr_destruction_pc", name);
         break;

      case 164:
         sprintf (namebuf, "%s.u.cr_deces_blesse", name);
         break;

      case 165:
         sprintf (namebuf, "%s.u.cr_deces_blesse_pendant_transport", name);
         break;

      case 166:
         sprintf (namebuf, "%s.u.cr_deces_blesse_pendant_hospitalisation", name);
         break;

      case 167:
         sprintf (namebuf, "%s.u.cr_mission_impossible_unites_subordonnees_non_operationnelles", name);
         break;

      case 168:
         sprintf (namebuf, "%s.u.cr_mission_impossible_lima_invalide", name);
         break;

      case 169:
         sprintf (namebuf, "%s.u.cr_mission_impossible_zone_hors_fuseau", name);
         break;

      case 170:
         sprintf (namebuf, "%s.u.cr_rapport_de_force_defavorable", name);
         break;

      case 171:
         sprintf (namebuf, "%s.u.cr_terrain_difficile", name);
         break;

      case 172:
         sprintf (namebuf, "%s.u.cr_plus_de_carburant", name);
         break;

      case 173:
         sprintf (namebuf, "%s.u.cr_dispositif_disperse", name);
         break;

      case 174:
         sprintf (namebuf, "%s.u.cr_debut_neutralisation", name);
         break;

      case 175:
         sprintf (namebuf, "%s.u.cr_fin_neutralisation", name);
         break;

      case 176:
         sprintf (namebuf, "%s.u.cr_debut_silence_radio", name);
         break;

      case 177:
         sprintf (namebuf, "%s.u.cr_fin_silence_radio", name);
         break;

      case 178:
         sprintf (namebuf, "%s.u.cr_debut_silence_radar", name);
         break;

      case 179:
         sprintf (namebuf, "%s.u.cr_fin_silence_radar", name);
         break;

      case 180:
         sprintf (namebuf, "%s.u.cr_tir_restreint", name);
         break;

      case 181:
         sprintf (namebuf, "%s.u.cr_tir_interdit", name);
         break;

      case 182:
         sprintf (namebuf, "%s.u.cr_tir_libre", name);
         break;

      case 183:
         sprintf (namebuf, "%s.u.cr_unite_detectee", name);
         asn1Print_CR_UniteDetectee (namebuf, &pvalue->u.cr_unite_detectee);
         break;

      case 184:
         sprintf (namebuf, "%s.u.cr_unite_amie_reconnue", name);
         asn1Print_CR_UniteAmieReconnue (namebuf, &pvalue->u.cr_unite_amie_reconnue);
         break;

      case 185:
         sprintf (namebuf, "%s.u.cr_unite_ennemie_reconnue", name);
         asn1Print_CR_UniteEnnemieReconnue (namebuf, &pvalue->u.cr_unite_ennemie_reconnue);
         break;

      case 186:
         sprintf (namebuf, "%s.u.cr_unite_neutre_reconnue", name);
         asn1Print_CR_UniteNeutreReconnue (namebuf, &pvalue->u.cr_unite_neutre_reconnue);
         break;

      case 187:
         sprintf (namebuf, "%s.u.cr_objet_detecte", name);
         asn1Print_CR_ObjetDetecte (namebuf, &pvalue->u.cr_objet_detecte);
         break;

      case 188:
         sprintf (namebuf, "%s.u.cr_trace", name);
         asn1Print_CR_Trace (namebuf, &pvalue->u.cr_trace);
         break;

      case 189:
         sprintf (namebuf, "%s.u.cr_trace_id", name);
         asn1Print_CR_TraceID (namebuf, &pvalue->u.cr_trace_id);
         break;

      default:;
   }
}

void ASN1C_MsgCR_cr::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCR_cr (name, &msgData);
}

void asn1Print_MsgCR (ASN1ConstCharPtr name, ASN1T_MsgCR* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_OID (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.type_cr", name);
   asn1Print_EnumTypeCR (namebuf, &pvalue->type_cr);

   sprintf (namebuf, "%s.cr", name);
   asn1Print_MsgCR_cr (namebuf, &pvalue->cr);

}

void ASN1C_MsgCR::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCR (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioControl.h"

void asn1Print_EnumCtrlErrorCode (ASN1ConstCharPtr name, ASN1T_EnumCtrlErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_already_started\n"); break;
      case 2: printf ("error_not_started\n"); break;
      case 3: printf ("error_not_paused\n"); break;
      case 4: printf ("error_already_paused\n"); break;
      case 5: printf ("error_invalid_time_factor\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumCtrlErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumCtrlErrorCode (name, &msgData);
}

void asn1Print_MsgCtrlStop (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlStop::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlStop (name);
}

void asn1Print_MsgCtrlStopAck (ASN1ConstCharPtr name, ASN1T_MsgCtrlStopAck* pvalue)
{
   asn1Print_EnumCtrlErrorCode (name, pvalue);
}

void ASN1C_MsgCtrlStopAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlStopAck (name, &msgData);
}

void asn1Print_MsgCtrlPause (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlPause::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlPause (name);
}

void asn1Print_MsgCtrlPauseAck (ASN1ConstCharPtr name, ASN1T_MsgCtrlPauseAck* pvalue)
{
   asn1Print_EnumCtrlErrorCode (name, pvalue);
}

void ASN1C_MsgCtrlPauseAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlPauseAck (name, &msgData);
}

void asn1Print_MsgCtrlResume (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlResume::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlResume (name);
}

void asn1Print_MsgCtrlResumeAck (ASN1ConstCharPtr name, ASN1T_MsgCtrlResumeAck* pvalue)
{
   asn1Print_EnumCtrlErrorCode (name, pvalue);
}

void ASN1C_MsgCtrlResumeAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlResumeAck (name, &msgData);
}

void asn1Print_MsgCtrlChangeTimeFactor (ASN1ConstCharPtr name, ASN1T_MsgCtrlChangeTimeFactor* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_MsgCtrlChangeTimeFactor::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlChangeTimeFactor (name, &msgData);
}

void asn1Print_MsgCtrlChangeTimeFactorAck (ASN1ConstCharPtr name, ASN1T_MsgCtrlChangeTimeFactorAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.time_factor", name);
   rtPrintInteger (namebuf, pvalue->time_factor);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumCtrlErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgCtrlChangeTimeFactorAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlChangeTimeFactorAck (name, &msgData);
}

void asn1Print_MsgCtrlBeginTick (ASN1ConstCharPtr name, ASN1T_MsgCtrlBeginTick* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_MsgCtrlBeginTick::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlBeginTick (name, &msgData);
}

void asn1Print_MsgCtrlEndTick (ASN1ConstCharPtr name, ASN1T_MsgCtrlEndTick* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.current_tick", name);
   rtPrintUnsigned (namebuf, pvalue->current_tick);

   sprintf (namebuf, "%s.tick_duration", name);
   rtPrintInteger (namebuf, pvalue->tick_duration);

   sprintf (namebuf, "%s.nb_pathfinds_longs", name);
   rtPrintInteger (namebuf, pvalue->nb_pathfinds_longs);

   sprintf (namebuf, "%s.nb_pathfinds_courts", name);
   rtPrintInteger (namebuf, pvalue->nb_pathfinds_courts);

}

void ASN1C_MsgCtrlEndTick::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlEndTick (name, &msgData);
}

void asn1Print_MsgCtrlClientAnnouncement (ASN1ConstCharPtr name, ASN1T_MsgCtrlClientAnnouncement* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("mos\n"); break;
      case 1: printf ("mos_light\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_MsgCtrlClientAnnouncement::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlClientAnnouncement (name, &msgData);
}

void asn1Print_EnumEtatSim (ASN1ConstCharPtr name, ASN1T_EnumEtatSim* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("running\n"); break;
      case 1: printf ("paused\n"); break;
      case 2: printf ("stopped\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumEtatSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumEtatSim (name, &msgData);
}

void asn1Print_MsgCtrlInfo (ASN1ConstCharPtr name, ASN1T_MsgCtrlInfo* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.current_tick", name);
   rtPrintUnsigned (namebuf, pvalue->current_tick);

   sprintf (namebuf, "%s.tick_duration", name);
   rtPrintInteger (namebuf, pvalue->tick_duration);

   sprintf (namebuf, "%s.time_factor", name);
   rtPrintInteger (namebuf, pvalue->time_factor);

   sprintf (namebuf, "%s.id_exercice", name);
   rtPrintInteger (namebuf, pvalue->id_exercice);

   sprintf (namebuf, "%s.checkpoint_frequence", name);
   rtPrintInteger (namebuf, pvalue->checkpoint_frequence);

   sprintf (namebuf, "%s.etat", name);
   asn1Print_EnumEtatSim (namebuf, &pvalue->etat);

}

void ASN1C_MsgCtrlInfo::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlInfo (name, &msgData);
}

void asn1Print_MsgCtrlCheckPointSaveBegin (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlCheckPointSaveBegin::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointSaveBegin (name);
}

void asn1Print_MsgCtrlCheckPointSaveEnd (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlCheckPointSaveEnd::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointSaveEnd (name);
}

void asn1Print_MsgCtrlCheckPointLoadBegin (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlCheckPointLoadBegin::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointLoadBegin (name);
}

void asn1Print_MsgCtrlCheckPointLoadEnd (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlCheckPointLoadEnd::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointLoadEnd (name);
}

void asn1Print_MsgCtrlCheckPointSetFrequency (ASN1ConstCharPtr name, ASN1T_MsgCtrlCheckPointSetFrequency* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_MsgCtrlCheckPointSetFrequency::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointSetFrequency (name, &msgData);
}

void asn1Print_MsgCtrlCheckPointSetFrequencyAck (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlCheckPointSetFrequencyAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointSetFrequencyAck (name);
}

void asn1Print_MsgCtrlCheckPointSaveNow (ASN1ConstCharPtr name, ASN1T_MsgCtrlCheckPointSaveNow* pvalue)
{
   char namebuf[512];

   printf ("%s.m.nomPresent = %d\n", name, (int)pvalue->m.nomPresent);
   if (pvalue->m.nomPresent) {
      sprintf (namebuf, "%s.nom", name);
      rtPrintCharStr (namebuf, pvalue->nom);
   }

}

void ASN1C_MsgCtrlCheckPointSaveNow::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointSaveNow (name, &msgData);
}

void asn1Print_MsgCtrlCheckPointSaveNowAck (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlCheckPointSaveNowAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlCheckPointSaveNowAck (name);
}

void asn1Print_MsgCtrlSendCurrentStateBegin (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlSendCurrentStateBegin::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlSendCurrentStateBegin (name);
}

void asn1Print_MsgCtrlSendCurrentStateEnd (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlSendCurrentStateEnd::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlSendCurrentStateEnd (name);
}

void asn1Print_EnumPrecipitationType (ASN1ConstCharPtr name, ASN1T_EnumPrecipitationType* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("pas_de_precipitation\n"); break;
      case 1: printf ("tempete_sable\n"); break;
      case 2: printf ("brouillard\n"); break;
      case 3: printf ("crachin\n"); break;
      case 4: printf ("pluie\n"); break;
      case 5: printf ("neige\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumPrecipitationType::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumPrecipitationType (name, &msgData);
}

void asn1Print_MeteoAttributs (ASN1ConstCharPtr name, ASN1T_MeteoAttributs* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.temperature", name);
   rtPrintInteger (namebuf, pvalue->temperature);

   sprintf (namebuf, "%s.vitesse_vent", name);
   asn1Print_Vitesse (namebuf, &pvalue->vitesse_vent);

   sprintf (namebuf, "%s.direction_vent", name);
   asn1Print_Direction (namebuf, &pvalue->direction_vent);

   sprintf (namebuf, "%s.plancher_couverture_nuageuse", name);
   asn1Print_Altitude (namebuf, &pvalue->plancher_couverture_nuageuse);

   sprintf (namebuf, "%s.plafond_couverture_nuageuse", name);
   asn1Print_Altitude (namebuf, &pvalue->plafond_couverture_nuageuse);

   sprintf (namebuf, "%s.densite_moyenne_couverture_nuageuse", name);
   asn1Print_Pourcentage (namebuf, &pvalue->densite_moyenne_couverture_nuageuse);

   sprintf (namebuf, "%s.precipitation", name);
   asn1Print_EnumPrecipitationType (namebuf, &pvalue->precipitation);

}

void ASN1C_MeteoAttributs::Print (ASN1ConstCharPtr name)

{
   asn1Print_MeteoAttributs (name, &msgData);
}

void asn1Print_MsgCtrlMeteoGlobale (ASN1ConstCharPtr name, ASN1T_MsgCtrlMeteoGlobale* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.attributs", name);
   asn1Print_MeteoAttributs (namebuf, &pvalue->attributs);

}

void ASN1C_MsgCtrlMeteoGlobale::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlMeteoGlobale (name, &msgData);
}

void asn1Print_MsgCtrlMeteoLocale_meteo (ASN1ConstCharPtr name, ASN1T_MsgCtrlMeteoLocale_meteo* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.attributs", name);
         asn1Print_MeteoAttributs (namebuf, pvalue->u.attributs);
         break;

      case 2:
         sprintf (namebuf, "%s.u.globale", name);
         break;

      default:;
   }
}

void ASN1C_MsgCtrlMeteoLocale_meteo::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlMeteoLocale_meteo (name, &msgData);
}

void asn1Print_MsgCtrlMeteoLocale (ASN1ConstCharPtr name, ASN1T_MsgCtrlMeteoLocale* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.rect_point_haut_gauche", name);
   asn1Print_CoordUTM (namebuf, &pvalue->rect_point_haut_gauche);

   sprintf (namebuf, "%s.rect_point_bas_droite", name);
   asn1Print_CoordUTM (namebuf, &pvalue->rect_point_bas_droite);

   sprintf (namebuf, "%s.meteo", name);
   asn1Print_MsgCtrlMeteoLocale_meteo (namebuf, &pvalue->meteo);

}

void ASN1C_MsgCtrlMeteoLocale::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlMeteoLocale (name, &msgData);
}

void asn1Print_MsgCtrlMeteoGlobaleAck (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlMeteoGlobaleAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlMeteoGlobaleAck (name);
}

void asn1Print_MsgCtrlMeteoLocaleAck (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgCtrlMeteoLocaleAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCtrlMeteoLocaleAck (name);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioFire.h"

void asn1Print_FireResultHuman (ASN1ConstCharPtr name, ASN1T_FireResultHuman* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.rang", name);
   asn1Print_EnumHumanRank (namebuf, &pvalue->rang);

   sprintf (namebuf, "%s.nb_non_blesses", name);
   rtPrintInteger (namebuf, pvalue->nb_non_blesses);

   sprintf (namebuf, "%s.nb_morts", name);
   rtPrintInteger (namebuf, pvalue->nb_morts);

   sprintf (namebuf, "%s.nb_blesses_urgence_1", name);
   rtPrintInteger (namebuf, pvalue->nb_blesses_urgence_1);

   sprintf (namebuf, "%s.nb_blesses_urgence_2", name);
   rtPrintInteger (namebuf, pvalue->nb_blesses_urgence_2);

   sprintf (namebuf, "%s.nb_blesses_urgence_3", name);
   rtPrintInteger (namebuf, pvalue->nb_blesses_urgence_3);

   sprintf (namebuf, "%s.nb_blesses_urgence_extreme", name);
   rtPrintInteger (namebuf, pvalue->nb_blesses_urgence_extreme);

}

void ASN1C_FireResultHuman::Print (ASN1ConstCharPtr name)

{
   asn1Print_FireResultHuman (name, &msgData);
}

void asn1Print_FireResultEquipement (ASN1ConstCharPtr name, ASN1T_FireResultEquipement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.nb_disponibles", name);
   rtPrintInteger (namebuf, pvalue->nb_disponibles);

   sprintf (namebuf, "%s.nb_indisponibles", name);
   rtPrintInteger (namebuf, pvalue->nb_indisponibles);

   sprintf (namebuf, "%s.nb_reparables", name);
   rtPrintInteger (namebuf, pvalue->nb_reparables);

}

void ASN1C_FireResultEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print_FireResultEquipement (name, &msgData);
}

void asn1Print__SeqOfFireResultHuman (ASN1ConstCharPtr name, ASN1T__SeqOfFireResultHuman* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_FireResultHuman (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfFireResultHuman::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfFireResultHuman (name, &msgData);
}

void asn1Print__SeqOfFireResultEquipement (ASN1ConstCharPtr name, ASN1T__SeqOfFireResultEquipement* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_FireResultEquipement (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfFireResultEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfFireResultEquipement (name, &msgData);
}

void asn1Print_FireResult (ASN1ConstCharPtr name, ASN1T_FireResult* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_cible", name);
   asn1Print_Agent (namebuf, &pvalue->oid_cible);

   sprintf (namebuf, "%s.resultats_humains", name);
   asn1Print__SeqOfFireResultHuman (namebuf, &pvalue->resultats_humains);

   sprintf (namebuf, "%s.resultats_equipements", name);
   asn1Print__SeqOfFireResultEquipement (namebuf, &pvalue->resultats_equipements);

}

void ASN1C_FireResult::Print (ASN1ConstCharPtr name)

{
   asn1Print_FireResult (name, &msgData);
}

void asn1Print_MsgStartDirectFire (ASN1ConstCharPtr name, ASN1T_MsgStartDirectFire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_tir", name);
   asn1Print_TirDirect (namebuf, &pvalue->oid_tir);

   sprintf (namebuf, "%s.oid_src", name);
   asn1Print_Agent (namebuf, &pvalue->oid_src);

   sprintf (namebuf, "%s.oid_dst", name);
   asn1Print_Agent (namebuf, &pvalue->oid_dst);

}

void ASN1C_MsgStartDirectFire::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgStartDirectFire (name, &msgData);
}

void asn1Print_MsgStopDirectFire (ASN1ConstCharPtr name, ASN1T_MsgStopDirectFire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_tir", name);
   asn1Print_TirDirect (namebuf, &pvalue->oid_tir);

   sprintf (namebuf, "%s.resultat", name);
   asn1Print_FireResult (namebuf, &pvalue->resultat);

}

void ASN1C_MsgStopDirectFire::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgStopDirectFire (name, &msgData);
}

void asn1Print_MsgStartIndirectFire (ASN1ConstCharPtr name, ASN1T_MsgStartIndirectFire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_tir", name);
   asn1Print_TirIndirect (namebuf, &pvalue->oid_tir);

   sprintf (namebuf, "%s.oid_src", name);
   asn1Print_Agent (namebuf, &pvalue->oid_src);

   sprintf (namebuf, "%s.position", name);
   asn1Print_CoordUTM (namebuf, &pvalue->position);

   sprintf (namebuf, "%s.munition", name);
   asn1Print_TypeDotation (namebuf, &pvalue->munition);

}

void ASN1C_MsgStartIndirectFire::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgStartIndirectFire (name, &msgData);
}

void asn1Print__SeqOfFireResult (ASN1ConstCharPtr name, ASN1T__SeqOfFireResult* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_FireResult (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfFireResult::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfFireResult (name, &msgData);
}

void asn1Print_MsgStopIndirectFire (ASN1ConstCharPtr name, ASN1T_MsgStopIndirectFire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_tir", name);
   asn1Print_TirIndirect (namebuf, &pvalue->oid_tir);

   sprintf (namebuf, "%s.resultats", name);
   asn1Print__SeqOfFireResult (namebuf, &pvalue->resultats);

}

void ASN1C_MsgStopIndirectFire::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgStopIndirectFire (name, &msgData);
}

void asn1Print_MsgExplosion (ASN1ConstCharPtr name, ASN1T_MsgExplosion* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_objet", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet);

   sprintf (namebuf, "%s.resultats", name);
   asn1Print__SeqOfFireResult (namebuf, &pvalue->resultats);

}

void ASN1C_MsgExplosion::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExplosion (name, &msgData);
}

void asn1Print_EnumFireEffectType (ASN1ConstCharPtr name, ASN1T_EnumFireEffectType* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("fumigene\n"); break;
      case 1: printf ("eclairant\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumFireEffectType::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumFireEffectType (name, &msgData);
}

void asn1Print_MsgStartFireEffect (ASN1ConstCharPtr name, ASN1T_MsgStartFireEffect* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_effet", name);
   asn1Print_OID (namebuf, &pvalue->oid_effet);

   sprintf (namebuf, "%s.localisation", name);
   asn1Print_Localisation (namebuf, &pvalue->localisation);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumFireEffectType (namebuf, &pvalue->type);

}

void ASN1C_MsgStartFireEffect::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgStartFireEffect (name, &msgData);
}

void asn1Print_MsgStopFireEffect (ASN1ConstCharPtr name, ASN1T_MsgStopFireEffect* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_MsgStopFireEffect::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgStopFireEffect (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioHierarchie.h"

void asn1Print_EnumDiplomatie (ASN1ConstCharPtr name, ASN1T_EnumDiplomatie* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("inconnu\n"); break;
      case 1: printf ("ami\n"); break;
      case 2: printf ("ennemi\n"); break;
      case 3: printf ("neutre\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumDiplomatie::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumDiplomatie (name, &msgData);
}

void asn1Print_MsgChangeDiplomatie (ASN1ConstCharPtr name, ASN1T_MsgChangeDiplomatie* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_camp1", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp1);

   sprintf (namebuf, "%s.oid_camp2", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp2);

   sprintf (namebuf, "%s.diplomatie", name);
   asn1Print_EnumDiplomatie (namebuf, &pvalue->diplomatie);

}

void ASN1C_MsgChangeDiplomatie::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeDiplomatie (name, &msgData);
}

void asn1Print_EnumChangeDiplomatieErrorCode (ASN1ConstCharPtr name, ASN1T_EnumChangeDiplomatieErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_camp\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumChangeDiplomatieErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumChangeDiplomatieErrorCode (name, &msgData);
}

void asn1Print_MsgChangeDiplomatieAck (ASN1ConstCharPtr name, ASN1T_MsgChangeDiplomatieAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_camp1", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp1);

   sprintf (namebuf, "%s.oid_camp2", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp2);

   sprintf (namebuf, "%s.diplomatie", name);
   asn1Print_EnumDiplomatie (namebuf, &pvalue->diplomatie);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumChangeDiplomatieErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgChangeDiplomatieAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeDiplomatieAck (name, &msgData);
}

void asn1Print_MsgChangeGroupeConnaissance (ASN1ConstCharPtr name, ASN1T_MsgChangeGroupeConnaissance* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.oid_camp", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp);

   sprintf (namebuf, "%s.oid_groupe_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_connaissance);

}

void ASN1C_MsgChangeGroupeConnaissance::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeGroupeConnaissance (name, &msgData);
}

void asn1Print_EnumChangeGroupeConnaissanceErrorCode (ASN1ConstCharPtr name, ASN1T_EnumChangeGroupeConnaissanceErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_automate\n"); break;
      case 2: printf ("error_invalid_camp\n"); break;
      case 3: printf ("error_invalid_groupe_connaissance\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumChangeGroupeConnaissanceErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumChangeGroupeConnaissanceErrorCode (name, &msgData);
}

void asn1Print_MsgChangeGroupeConnaissanceAck (ASN1ConstCharPtr name, ASN1T_MsgChangeGroupeConnaissanceAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.oid_camp", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp);

   sprintf (namebuf, "%s.oid_groupe_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_connaissance);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumChangeGroupeConnaissanceErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgChangeGroupeConnaissanceAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeGroupeConnaissanceAck (name, &msgData);
}

void asn1Print_MsgChangeLiensLogistiques (ASN1ConstCharPtr name, ASN1T_MsgChangeLiensLogistiques* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_tc2Present = %d\n", name, (int)pvalue->m.oid_tc2Present);
   printf ("%s.m.oid_maintenancePresent = %d\n", name, (int)pvalue->m.oid_maintenancePresent);
   printf ("%s.m.oid_santePresent = %d\n", name, (int)pvalue->m.oid_santePresent);
   printf ("%s.m.oid_ravitaillementPresent = %d\n", name, (int)pvalue->m.oid_ravitaillementPresent);
   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   if (pvalue->m.oid_tc2Present) {
      sprintf (namebuf, "%s.oid_tc2", name);
      asn1Print_Automate (namebuf, &pvalue->oid_tc2);
   }

   if (pvalue->m.oid_maintenancePresent) {
      sprintf (namebuf, "%s.oid_maintenance", name);
      asn1Print_Automate (namebuf, &pvalue->oid_maintenance);
   }

   if (pvalue->m.oid_santePresent) {
      sprintf (namebuf, "%s.oid_sante", name);
      asn1Print_Automate (namebuf, &pvalue->oid_sante);
   }

   if (pvalue->m.oid_ravitaillementPresent) {
      sprintf (namebuf, "%s.oid_ravitaillement", name);
      asn1Print_Automate (namebuf, &pvalue->oid_ravitaillement);
   }

}

void ASN1C_MsgChangeLiensLogistiques::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeLiensLogistiques (name, &msgData);
}

void asn1Print_EnumChangeLiensLogistiquesErrorCode (ASN1ConstCharPtr name, ASN1T_EnumChangeLiensLogistiquesErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_automate\n"); break;
      case 2: printf ("error_invalid_automate_tc2\n"); break;
      case 3: printf ("error_invalid_automate_maintenance\n"); break;
      case 4: printf ("error_invalid_automate_sante\n"); break;
      case 5: printf ("error_invalid_automate_ravitaillement\n"); break;
      case 6: printf ("error_unit_surrendered\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumChangeLiensLogistiquesErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumChangeLiensLogistiquesErrorCode (name, &msgData);
}

void asn1Print_MsgChangeLiensLogistiquesAck (ASN1ConstCharPtr name, ASN1T_MsgChangeLiensLogistiquesAck* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_tc2Present = %d\n", name, (int)pvalue->m.oid_tc2Present);
   printf ("%s.m.oid_maintenancePresent = %d\n", name, (int)pvalue->m.oid_maintenancePresent);
   printf ("%s.m.oid_santePresent = %d\n", name, (int)pvalue->m.oid_santePresent);
   printf ("%s.m.oid_ravitaillementPresent = %d\n", name, (int)pvalue->m.oid_ravitaillementPresent);
   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   if (pvalue->m.oid_tc2Present) {
      sprintf (namebuf, "%s.oid_tc2", name);
      asn1Print_Automate (namebuf, &pvalue->oid_tc2);
   }

   if (pvalue->m.oid_maintenancePresent) {
      sprintf (namebuf, "%s.oid_maintenance", name);
      asn1Print_Automate (namebuf, &pvalue->oid_maintenance);
   }

   if (pvalue->m.oid_santePresent) {
      sprintf (namebuf, "%s.oid_sante", name);
      asn1Print_Automate (namebuf, &pvalue->oid_sante);
   }

   if (pvalue->m.oid_ravitaillementPresent) {
      sprintf (namebuf, "%s.oid_ravitaillement", name);
      asn1Print_Automate (namebuf, &pvalue->oid_ravitaillement);
   }

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumChangeLiensLogistiquesErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgChangeLiensLogistiquesAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeLiensLogistiquesAck (name, &msgData);
}

void asn1Print_MsgChangeAutomate (ASN1ConstCharPtr name, ASN1T_MsgChangeAutomate* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

}

void ASN1C_MsgChangeAutomate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeAutomate (name, &msgData);
}

void asn1Print_EnumChangeAutomateErrorCode (ASN1ConstCharPtr name, ASN1T_EnumChangeAutomateErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_pion\n"); break;
      case 2: printf ("error_invalid_automate\n"); break;
      case 3: printf ("error_camps_incompatibles\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumChangeAutomateErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumChangeAutomateErrorCode (name, &msgData);
}

void asn1Print_MsgChangeAutomateAck (ASN1ConstCharPtr name, ASN1T_MsgChangeAutomateAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumChangeAutomateErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgChangeAutomateAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeAutomateAck (name, &msgData);
}

void asn1Print_MsgAutomateCreation (ASN1ConstCharPtr name, ASN1T_MsgAutomateCreation* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_tc2Present = %d\n", name, (int)pvalue->m.oid_tc2Present);
   printf ("%s.m.oid_maintenancePresent = %d\n", name, (int)pvalue->m.oid_maintenancePresent);
   printf ("%s.m.oid_santePresent = %d\n", name, (int)pvalue->m.oid_santePresent);
   printf ("%s.m.oid_ravitaillementPresent = %d\n", name, (int)pvalue->m.oid_ravitaillementPresent);
   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.type_automate", name);
   asn1Print_TypeAutomate (namebuf, &pvalue->type_automate);

   sprintf (namebuf, "%s.nom", name);
   rtPrintCharStr (namebuf, pvalue->nom);

   sprintf (namebuf, "%s.oid_camp", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp);

   sprintf (namebuf, "%s.oid_groupe_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_connaissance);

   if (pvalue->m.oid_tc2Present) {
      sprintf (namebuf, "%s.oid_tc2", name);
      asn1Print_Automate (namebuf, &pvalue->oid_tc2);
   }

   if (pvalue->m.oid_maintenancePresent) {
      sprintf (namebuf, "%s.oid_maintenance", name);
      asn1Print_Automate (namebuf, &pvalue->oid_maintenance);
   }

   if (pvalue->m.oid_santePresent) {
      sprintf (namebuf, "%s.oid_sante", name);
      asn1Print_Automate (namebuf, &pvalue->oid_sante);
   }

   if (pvalue->m.oid_ravitaillementPresent) {
      sprintf (namebuf, "%s.oid_ravitaillement", name);
      asn1Print_Automate (namebuf, &pvalue->oid_ravitaillement);
   }

}

void ASN1C_MsgAutomateCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateCreation (name, &msgData);
}

void asn1Print_MsgPionCreation (ASN1ConstCharPtr name, ASN1T_MsgPionCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.type_pion", name);
   asn1Print_TypePion (namebuf, &pvalue->type_pion);

   sprintf (namebuf, "%s.nom", name);
   rtPrintCharStr (namebuf, pvalue->nom);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

}

void ASN1C_MsgPionCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPionCreation (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioLauncher.h"

void asn1Print_StringLibelle (ASN1ConstCharPtr name, ASN1T_StringLibelle* pvalue)
{
   rtPrintCharStr (name, *pvalue);
}

void ASN1C_StringLibelle::Print (ASN1ConstCharPtr name)

{
   asn1Print_StringLibelle (name, &msgData);
}

void asn1Print_ID_EX (ASN1ConstCharPtr name, ASN1T_ID_EX* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_ID_EX::Print (ASN1ConstCharPtr name)

{
   asn1Print_ID_EX (name, &msgData);
}

void asn1Print_NumPort (ASN1ConstCharPtr name, ASN1T_NumPort* pvalue)
{
   rtPrintInteger (name, *pvalue);
}

void ASN1C_NumPort::Print (ASN1ConstCharPtr name)

{
   asn1Print_NumPort (name, &msgData);
}

void asn1Print_DinMagicNumber (ASN1ConstCharPtr name, ASN1T_DinMagicNumber* pvalue)
{
   rtPrintUnsigned (name, *pvalue);
}

void ASN1C_DinMagicNumber::Print (ASN1ConstCharPtr name)

{
   asn1Print_DinMagicNumber (name, &msgData);
}

void asn1Print_IdAndLibelle (ASN1ConstCharPtr name, ASN1T_IdAndLibelle* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.nID", name);
   asn1Print_OID (namebuf, &pvalue->nID);

   sprintf (namebuf, "%s.libelle", name);
   asn1Print_StringLibelle (namebuf, &pvalue->libelle);

   sprintf (namebuf, "%s.uuid_odb", name);
   rtPrintCharStr (namebuf, pvalue->uuid_odb);

}

void ASN1C_IdAndLibelle::Print (ASN1ConstCharPtr name)

{
   asn1Print_IdAndLibelle (name, &msgData);
}

void asn1Print_ListIdAndLibelle (ASN1ConstCharPtr name, ASN1T_ListIdAndLibelle* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_IdAndLibelle (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListIdAndLibelle::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListIdAndLibelle (name, &msgData);
}

void asn1Print_CheckPointInfo (ASN1ConstCharPtr name, ASN1T_CheckPointInfo* pvalue)
{
   char namebuf[512];

   printf ("%s.m.nom_checkpointPresent = %d\n", name, (int)pvalue->m.nom_checkpointPresent);
   sprintf (namebuf, "%s.nID", name);
   asn1Print_OID (namebuf, &pvalue->nID);

   sprintf (namebuf, "%s.libelle_scenario", name);
   asn1Print_StringLibelle (namebuf, &pvalue->libelle_scenario);

   sprintf (namebuf, "%s.libelle_checkpoint", name);
   asn1Print_StringLibelle (namebuf, &pvalue->libelle_checkpoint);

   if (pvalue->m.nom_checkpointPresent) {
      sprintf (namebuf, "%s.nom_checkpoint", name);
      rtPrintCharStr (namebuf, pvalue->nom_checkpoint);
   }

}

void ASN1C_CheckPointInfo::Print (ASN1ConstCharPtr name)

{
   asn1Print_CheckPointInfo (name, &msgData);
}

void asn1Print_ListCheckPointInfo (ASN1ConstCharPtr name, ASN1T_ListCheckPointInfo* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_CheckPointInfo (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListCheckPointInfo::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListCheckPointInfo (name, &msgData);
}

void asn1Print_EnumCtrlErrorCodeLauncher (ASN1ConstCharPtr name, ASN1T_EnumCtrlErrorCodeLauncher* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_already_started\n"); break;
      case 2: printf ("error_not_started\n"); break;
      case 3: printf ("error_not_paused\n"); break;
      case 4: printf ("error_already_paused\n"); break;
      case 5: printf ("error_invalid_time_factor\n"); break;
      case 6: printf ("error_invalid_scenario_identifier\n"); break;
      case 7: printf ("error_error_scenario_init\n"); break;
      case 8: printf ("error_invalid_data_path\n"); break;
      case 9: printf ("error_invalid_data\n"); break;
      case 10: printf ("error_invalid_checkpoint_identifier\n"); break;
      case 11: printf ("error_error_checkpoint_init\n"); break;
      case 12: printf ("error_sim_killed_by_remote\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumCtrlErrorCodeLauncher::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumCtrlErrorCodeLauncher (name, &msgData);
}

void asn1Print_LaunchInformation (ASN1ConstCharPtr name, ASN1T_LaunchInformation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumCtrlErrorCodeLauncher (namebuf, &pvalue->error_code);

   sprintf (namebuf, "%s.num_port", name);
   asn1Print_NumPort (namebuf, &pvalue->num_port);

   sprintf (namebuf, "%s.din_magic_number", name);
   asn1Print_DinMagicNumber (namebuf, &pvalue->din_magic_number);

}

void ASN1C_LaunchInformation::Print (ASN1ConstCharPtr name)

{
   asn1Print_LaunchInformation (name, &msgData);
}

void asn1Print_IdExAndLaunchInformation (ASN1ConstCharPtr name, ASN1T_IdExAndLaunchInformation* pvalue)
{
   char namebuf[512];

   printf ("%s.m.launch_informationPresent = %d\n", name, (int)pvalue->m.launch_informationPresent);
   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   if (pvalue->m.launch_informationPresent) {
      sprintf (namebuf, "%s.launch_information", name);
      asn1Print_LaunchInformation (namebuf, &pvalue->launch_information);
   }

}

void ASN1C_IdExAndLaunchInformation::Print (ASN1ConstCharPtr name)

{
   asn1Print_IdExAndLaunchInformation (name, &msgData);
}

void asn1Print_ListIdExAndLaunchInformation (ASN1ConstCharPtr name, ASN1T_ListIdExAndLaunchInformation* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_IdExAndLaunchInformation (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListIdExAndLaunchInformation::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListIdExAndLaunchInformation (name, &msgData);
}

void asn1Print_MsgMosLau_RequestListMission (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgMosLau_RequestListMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgMosLau_RequestListMission (name);
}

void asn1Print_MsgLauMos_ListMission (ASN1ConstCharPtr name, ASN1T_MsgLauMos_ListMission* pvalue)
{
   asn1Print_ListIdAndLibelle (name, pvalue);
}

void ASN1C_MsgLauMos_ListMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauMos_ListMission (name, &msgData);
}

void asn1Print_MsgMosLau_LaunchSim (ASN1ConstCharPtr name, ASN1T_MsgMosLau_LaunchSim* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.id_scenario", name);
   asn1Print_OID (namebuf, &pvalue->id_scenario);

   sprintf (namebuf, "%s.sim_commandline", name);
   rtPrintCharStr (namebuf, pvalue->sim_commandline);

}

void ASN1C_MsgMosLau_LaunchSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgMosLau_LaunchSim (name, &msgData);
}

void asn1Print_MsgSimLau_SimLaunched (ASN1ConstCharPtr name, ASN1T_MsgSimLau_SimLaunched* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.launch_information", name);
   asn1Print_LaunchInformation (namebuf, &pvalue->launch_information);

}

void ASN1C_MsgSimLau_SimLaunched::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSimLau_SimLaunched (name, &msgData);
}

void asn1Print_MsgLauMos_SimLaunched (ASN1ConstCharPtr name, ASN1T_MsgLauMos_SimLaunched* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.launch_information", name);
   asn1Print_LaunchInformation (namebuf, &pvalue->launch_information);

}

void ASN1C_MsgLauMos_SimLaunched::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauMos_SimLaunched (name, &msgData);
}

void asn1Print_MsgLauSim_Ping (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgLauSim_Ping::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauSim_Ping (name);
}

void asn1Print_MsgSimLau_Pong (ASN1ConstCharPtr name, ASN1T_MsgSimLau_Pong* pvalue)
{
   asn1Print_ID_EX (name, pvalue);
}

void ASN1C_MsgSimLau_Pong::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSimLau_Pong (name, &msgData);
}

void asn1Print_MsgMosLau_RequestListSim (ASN1ConstCharPtr name)
{
}

void ASN1C_MsgMosLau_RequestListSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgMosLau_RequestListSim (name);
}

void asn1Print_MsgLauMos_ListSim (ASN1ConstCharPtr name, ASN1T_MsgLauMos_ListSim* pvalue)
{
   asn1Print_ListIdExAndLaunchInformation (name, pvalue);
}

void ASN1C_MsgLauMos_ListSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauMos_ListSim (name, &msgData);
}

void asn1Print_MsgLauMos_SimFailure (ASN1ConstCharPtr name, ASN1T_MsgLauMos_SimFailure* pvalue)
{
   asn1Print_ID_EX (name, pvalue);
}

void ASN1C_MsgLauMos_SimFailure::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauMos_SimFailure (name, &msgData);
}

void asn1Print_MsgMosLau_RequestListCheckpoint (ASN1ConstCharPtr name, ASN1T_MsgMosLau_RequestListCheckpoint* pvalue)
{
   asn1Print_ID_EX (name, pvalue);
}

void ASN1C_MsgMosLau_RequestListCheckpoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgMosLau_RequestListCheckpoint (name, &msgData);
}

void asn1Print_MsgLauMos_ListCheckpoint (ASN1ConstCharPtr name, ASN1T_MsgLauMos_ListCheckpoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.list_checkpoint", name);
   asn1Print_ListCheckPointInfo (namebuf, &pvalue->list_checkpoint);

}

void ASN1C_MsgLauMos_ListCheckpoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauMos_ListCheckpoint (name, &msgData);
}

void asn1Print_MsgMosLau_LaunchSimFromCheckpoint (ASN1ConstCharPtr name, ASN1T_MsgMosLau_LaunchSimFromCheckpoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.id_checkpoint", name);
   asn1Print_OID (namebuf, &pvalue->id_checkpoint);

   sprintf (namebuf, "%s.sim_commandline", name);
   rtPrintCharStr (namebuf, pvalue->sim_commandline);

}

void ASN1C_MsgMosLau_LaunchSimFromCheckpoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgMosLau_LaunchSimFromCheckpoint (name, &msgData);
}

void asn1Print_MsgMosLau_StopSim (ASN1ConstCharPtr name, ASN1T_MsgMosLau_StopSim* pvalue)
{
   asn1Print_ID_EX (name, pvalue);
}

void ASN1C_MsgMosLau_StopSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgMosLau_StopSim (name, &msgData);
}

void asn1Print_MsgLauSim_StopSim (ASN1ConstCharPtr name, ASN1T_MsgLauSim_StopSim* pvalue)
{
   asn1Print_ID_EX (name, pvalue);
}

void ASN1C_MsgLauSim_StopSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauSim_StopSim (name, &msgData);
}

void asn1Print_MsgSimLau_ExecSuccess (ASN1ConstCharPtr name, ASN1T_MsgSimLau_ExecSuccess* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.finished_state", name);
   rtPrintBoolean (namebuf, pvalue->finished_state);

}

void ASN1C_MsgSimLau_ExecSuccess::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSimLau_ExecSuccess (name, &msgData);
}

void asn1Print_MsgLauMos_ExecSuccess (ASN1ConstCharPtr name, ASN1T_MsgLauMos_ExecSuccess* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.id_exercice", name);
   asn1Print_ID_EX (namebuf, &pvalue->id_exercice);

   sprintf (namebuf, "%s.finished_state", name);
   rtPrintBoolean (namebuf, pvalue->finished_state);

}

void ASN1C_MsgLauMos_ExecSuccess::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLauMos_ExecSuccess (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioLimaLimite.h"

void asn1Print_EnumTypeLima (ASN1ConstCharPtr name, ASN1T_EnumTypeLima* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("ligne_debouche\n"); break;
      case 1: printf ("ligne_changement_attitude\n"); break;
      case 2: printf ("ligne_coordination\n"); break;
      case 3: printf ("ligne_interdire\n"); break;
      case 4: printf ("ligne_objectif\n"); break;
      case 5: printf ("ligne_coup_arret\n"); break;
      case 6: printf ("ligne_recueil\n"); break;
      case 7: printf ("ligne_debut_mission\n"); break;
      case 8: printf ("ligne_fin_mission\n"); break;
      case 9: printf ("ligne_identification_accueil\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTypeLima::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTypeLima (name, &msgData);
}

void asn1Print_MsgLimitCreation (ASN1ConstCharPtr name, ASN1T_MsgLimitCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.level", name);
   asn1Print_EnumNatureLevel (namebuf, &pvalue->level);

   sprintf (namebuf, "%s.geometrie", name);
   asn1Print_Line (namebuf, &pvalue->geometrie);

}

void ASN1C_MsgLimitCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimitCreation (name, &msgData);
}

void asn1Print_MsgLimitDestruction (ASN1ConstCharPtr name, ASN1T_MsgLimitDestruction* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_MsgLimitDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimitDestruction (name, &msgData);
}

void asn1Print_MsgLimitUpdate (ASN1ConstCharPtr name, ASN1T_MsgLimitUpdate* pvalue)
{
   asn1Print_MsgLimitCreation (name, pvalue);
}

void ASN1C_MsgLimitUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimitUpdate (name, &msgData);
}

void asn1Print_EnumInfoContextErrorCode (ASN1ConstCharPtr name, ASN1T_EnumInfoContextErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_id\n"); break;
      case 2: printf ("error_invalid_geometry\n"); break;
      case 3: printf ("error_invalid_lima_function\n"); break;
      case 4: printf ("error_invalid_limit_or_lima_used\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumInfoContextErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumInfoContextErrorCode (name, &msgData);
}

void asn1Print_MsgLimitCreationAck (ASN1ConstCharPtr name, ASN1T_MsgLimitCreationAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumInfoContextErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgLimitCreationAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimitCreationAck (name, &msgData);
}

void asn1Print_MsgLimitDestructionAck (ASN1ConstCharPtr name, ASN1T_MsgLimitDestructionAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumInfoContextErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgLimitDestructionAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimitDestructionAck (name, &msgData);
}

void asn1Print_MsgLimitUpdateAck (ASN1ConstCharPtr name, ASN1T_MsgLimitUpdateAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumInfoContextErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgLimitUpdateAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimitUpdateAck (name, &msgData);
}

void asn1Print_MsgLimaCreation (ASN1ConstCharPtr name, ASN1T_MsgLimaCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.fonction", name);
   asn1Print_EnumTypeLima (namebuf, &pvalue->fonction);

   sprintf (namebuf, "%s.geometrie", name);
   asn1Print_Line (namebuf, &pvalue->geometrie);

}

void ASN1C_MsgLimaCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimaCreation (name, &msgData);
}

void asn1Print_MsgLimaDestruction (ASN1ConstCharPtr name, ASN1T_MsgLimaDestruction* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_MsgLimaDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimaDestruction (name, &msgData);
}

void asn1Print_MsgLimaUpdate (ASN1ConstCharPtr name, ASN1T_MsgLimaUpdate* pvalue)
{
   asn1Print_MsgLimaCreation (name, pvalue);
}

void ASN1C_MsgLimaUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimaUpdate (name, &msgData);
}

void asn1Print_MsgLimaCreationAck (ASN1ConstCharPtr name, ASN1T_MsgLimaCreationAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumInfoContextErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgLimaCreationAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimaCreationAck (name, &msgData);
}

void asn1Print_MsgLimaDestructionAck (ASN1ConstCharPtr name, ASN1T_MsgLimaDestructionAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumInfoContextErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgLimaDestructionAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimaDestructionAck (name, &msgData);
}

void asn1Print_MsgLimaUpdateAck (ASN1ConstCharPtr name, ASN1T_MsgLimaUpdateAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumInfoContextErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgLimaUpdateAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLimaUpdateAck (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioLogMaintenance.h"

void asn1Print_MsgLogMaintenanceTraitementEquipementCreation (ASN1ConstCharPtr name, ASN1T_MsgLogMaintenanceTraitementEquipementCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.type_panne", name);
   asn1Print_TypePanne (namebuf, &pvalue->type_panne);

}

void ASN1C_MsgLogMaintenanceTraitementEquipementCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogMaintenanceTraitementEquipementCreation (name, &msgData);
}

void asn1Print_EnumLogMaintenanceTraitementEtat (ASN1ConstCharPtr name, ASN1T_EnumLogMaintenanceTraitementEtat* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("deplacement_vers_chaine\n"); break;
      case 1: printf ("attente_disponibilite_remorqueur\n"); break;
      case 2: printf ("remorqueur_deplacement_aller\n"); break;
      case 3: printf ("remorqueur_chargement\n"); break;
      case 4: printf ("remorqueur_deplacement_retour\n"); break;
      case 5: printf ("remorqueur_dechargement\n"); break;
      case 6: printf ("diagnostique\n"); break;
      case 7: printf ("attente_prise_en_charge_par_niveau_superieur\n"); break;
      case 8: printf ("attente_disponibilite_pieces\n"); break;
      case 9: printf ("attente_disponibilite_reparateur\n"); break;
      case 10: printf ("reparation\n"); break;
      case 11: printf ("attente_retour_pion\n"); break;
      case 12: printf ("retour_pion\n"); break;
      case 13: printf ("termine\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumLogMaintenanceTraitementEtat::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumLogMaintenanceTraitementEtat (name, &msgData);
}

void asn1Print_MsgLogMaintenanceTraitementEquipementUpdate (ASN1ConstCharPtr name, ASN1T_MsgLogMaintenanceTraitementEquipementUpdate* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.oid_pion_log_traitant", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion_log_traitant);

   sprintf (namebuf, "%s.etat", name);
   asn1Print_EnumLogMaintenanceTraitementEtat (namebuf, &pvalue->etat);

}

void ASN1C_MsgLogMaintenanceTraitementEquipementUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogMaintenanceTraitementEquipementUpdate (name, &msgData);
}

void asn1Print_MsgLogMaintenanceTraitementEquipementDestruction (ASN1ConstCharPtr name, ASN1T_MsgLogMaintenanceTraitementEquipementDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

}

void ASN1C_MsgLogMaintenanceTraitementEquipementDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogMaintenanceTraitementEquipementDestruction (name, &msgData);
}

void asn1Print_MaintenanceDisponibiliteMoyens (ASN1ConstCharPtr name, ASN1T_MaintenanceDisponibiliteMoyens* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.pourcentage_disponibilite", name);
   asn1Print_Pourcentage (namebuf, &pvalue->pourcentage_disponibilite);

}

void ASN1C_MaintenanceDisponibiliteMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print_MaintenanceDisponibiliteMoyens (name, &msgData);
}

void asn1Print_MaintenancePriorites (ASN1ConstCharPtr name, ASN1T_MaintenancePriorites* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_TypeEquipement (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_MaintenancePriorites::Print (ASN1ConstCharPtr name)

{
   asn1Print_MaintenancePriorites (name, &msgData);
}

void asn1Print__SeqOfMaintenanceDisponibiliteMoyens (ASN1ConstCharPtr name, ASN1T__SeqOfMaintenanceDisponibiliteMoyens* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_MaintenanceDisponibiliteMoyens (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfMaintenanceDisponibiliteMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfMaintenanceDisponibiliteMoyens (name, &msgData);
}

void asn1Print_MsgLogMaintenanceEtat (ASN1ConstCharPtr name, ASN1T_MsgLogMaintenanceEtat* pvalue)
{
   char namebuf[512];

   printf ("%s.m.chaine_activeePresent = %d\n", name, (int)pvalue->m.chaine_activeePresent);
   printf ("%s.m.temps_de_bordeePresent = %d\n", name, (int)pvalue->m.temps_de_bordeePresent);
   printf ("%s.m.prioritesPresent = %d\n", name, (int)pvalue->m.prioritesPresent);
   printf ("%s.m.priorites_tactiquesPresent = %d\n", name, (int)pvalue->m.priorites_tactiquesPresent);
   printf ("%s.m.disponibilites_remorqueursPresent = %d\n", name, (int)pvalue->m.disponibilites_remorqueursPresent);
   printf ("%s.m.disponibilites_reparateursPresent = %d\n", name, (int)pvalue->m.disponibilites_reparateursPresent);
   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   if (pvalue->m.chaine_activeePresent) {
      sprintf (namebuf, "%s.chaine_activee", name);
      rtPrintBoolean (namebuf, pvalue->chaine_activee);
   }

   if (pvalue->m.temps_de_bordeePresent) {
      sprintf (namebuf, "%s.temps_de_bordee", name);
      asn1Print_EnumTempsBordee (namebuf, &pvalue->temps_de_bordee);
   }

   if (pvalue->m.prioritesPresent) {
      sprintf (namebuf, "%s.priorites", name);
      asn1Print_MaintenancePriorites (namebuf, &pvalue->priorites);
   }

   if (pvalue->m.priorites_tactiquesPresent) {
      sprintf (namebuf, "%s.priorites_tactiques", name);
      asn1Print_ListAutomate (namebuf, &pvalue->priorites_tactiques);
   }

   if (pvalue->m.disponibilites_remorqueursPresent) {
      sprintf (namebuf, "%s.disponibilites_remorqueurs", name);
      asn1Print__SeqOfMaintenanceDisponibiliteMoyens (namebuf, &pvalue->disponibilites_remorqueurs);
   }

   if (pvalue->m.disponibilites_reparateursPresent) {
      sprintf (namebuf, "%s.disponibilites_reparateurs", name);
      asn1Print__SeqOfMaintenanceDisponibiliteMoyens (namebuf, &pvalue->disponibilites_reparateurs);
   }

}

void ASN1C_MsgLogMaintenanceEtat::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogMaintenanceEtat (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioLogRavitaillement.h"

void asn1Print_DemandeDotation (ASN1ConstCharPtr name, ASN1T_DemandeDotation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ressource_id", name);
   asn1Print_TypeDotation (namebuf, &pvalue->ressource_id);

   sprintf (namebuf, "%s.quantite_demandee", name);
   rtPrintUnsigned (namebuf, pvalue->quantite_demandee);

   sprintf (namebuf, "%s.quantite_accordee", name);
   rtPrintUnsigned (namebuf, pvalue->quantite_accordee);

   sprintf (namebuf, "%s.quantite_en_transit", name);
   rtPrintUnsigned (namebuf, pvalue->quantite_en_transit);

}

void ASN1C_DemandeDotation::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeDotation (name, &msgData);
}

void asn1Print__SeqOfDemandeDotation (ASN1ConstCharPtr name, ASN1T__SeqOfDemandeDotation* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_DemandeDotation (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfDemandeDotation::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfDemandeDotation (name, &msgData);
}

void asn1Print_MsgLogRavitaillementTraitementCreation (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementTraitementCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.dotations", name);
   asn1Print__SeqOfDemandeDotation (namebuf, &pvalue->dotations);

}

void ASN1C_MsgLogRavitaillementTraitementCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementTraitementCreation (name, &msgData);
}

void asn1Print_EnumLogRavitaillementTraitementEtat (ASN1ConstCharPtr name, ASN1T_EnumLogRavitaillementTraitementEtat* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("convoi_consitution\n"); break;
      case 1: printf ("convoi_chargement\n"); break;
      case 2: printf ("convoi_deplacement_aller\n"); break;
      case 3: printf ("convoi_dechargement\n"); break;
      case 4: printf ("convoi_deplacement_retour\n"); break;
      case 5: printf ("termine\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumLogRavitaillementTraitementEtat::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumLogRavitaillementTraitementEtat (name, &msgData);
}

void asn1Print_MsgLogRavitaillementTraitementUpdate (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementTraitementUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_pion_log_traitantPresent = %d\n", name, (int)pvalue->m.oid_pion_log_traitantPresent);
   printf ("%s.m.oid_pion_convoiPresent = %d\n", name, (int)pvalue->m.oid_pion_convoiPresent);
   printf ("%s.m.etatPresent = %d\n", name, (int)pvalue->m.etatPresent);
   printf ("%s.m.dotationsPresent = %d\n", name, (int)pvalue->m.dotationsPresent);
   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   if (pvalue->m.oid_pion_log_traitantPresent) {
      sprintf (namebuf, "%s.oid_pion_log_traitant", name);
      asn1Print_Agent (namebuf, &pvalue->oid_pion_log_traitant);
   }

   if (pvalue->m.oid_pion_convoiPresent) {
      sprintf (namebuf, "%s.oid_pion_convoi", name);
      asn1Print_Agent (namebuf, &pvalue->oid_pion_convoi);
   }

   if (pvalue->m.etatPresent) {
      sprintf (namebuf, "%s.etat", name);
      asn1Print_EnumLogRavitaillementTraitementEtat (namebuf, &pvalue->etat);
   }

   if (pvalue->m.dotationsPresent) {
      sprintf (namebuf, "%s.dotations", name);
      asn1Print__SeqOfDemandeDotation (namebuf, &pvalue->dotations);
   }

}

void ASN1C_MsgLogRavitaillementTraitementUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementTraitementUpdate (name, &msgData);
}

void asn1Print_MsgLogRavitaillementTraitementDestruction (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementTraitementDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

}

void ASN1C_MsgLogRavitaillementTraitementDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementTraitementDestruction (name, &msgData);
}

void asn1Print_RavitaillementDisponibiliteMoyens (ASN1ConstCharPtr name, ASN1T_RavitaillementDisponibiliteMoyens* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.pourcentage_disponibilite", name);
   asn1Print_Pourcentage (namebuf, &pvalue->pourcentage_disponibilite);

}

void ASN1C_RavitaillementDisponibiliteMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print_RavitaillementDisponibiliteMoyens (name, &msgData);
}

void asn1Print_DotationStock (ASN1ConstCharPtr name, ASN1T_DotationStock* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ressource_id", name);
   asn1Print_TypeDotation (namebuf, &pvalue->ressource_id);

   sprintf (namebuf, "%s.quantite_disponible", name);
   rtPrintUnsigned (namebuf, pvalue->quantite_disponible);

}

void ASN1C_DotationStock::Print (ASN1ConstCharPtr name)

{
   asn1Print_DotationStock (name, &msgData);
}

void asn1Print__SeqOfDotationStock (ASN1ConstCharPtr name, ASN1T__SeqOfDotationStock* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_DotationStock (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfDotationStock::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfDotationStock (name, &msgData);
}

void asn1Print__SeqOfRavitaillementDisponibiliteMoyens (ASN1ConstCharPtr name, ASN1T__SeqOfRavitaillementDisponibiliteMoyens* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_RavitaillementDisponibiliteMoyens (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfRavitaillementDisponibiliteMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfRavitaillementDisponibiliteMoyens (name, &msgData);
}

void asn1Print_MsgLogRavitaillementEtat (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementEtat* pvalue)
{
   char namebuf[512];

   printf ("%s.m.chaine_activeePresent = %d\n", name, (int)pvalue->m.chaine_activeePresent);
   printf ("%s.m.stocksPresent = %d\n", name, (int)pvalue->m.stocksPresent);
   printf ("%s.m.disponibilites_chefs_convoisPresent = %d\n", name, (int)pvalue->m.disponibilites_chefs_convoisPresent);
   printf ("%s.m.disponibilites_transporteurs_convoisPresent = %d\n", name, (int)pvalue->m.disponibilites_transporteurs_convoisPresent);
   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   if (pvalue->m.chaine_activeePresent) {
      sprintf (namebuf, "%s.chaine_activee", name);
      rtPrintBoolean (namebuf, pvalue->chaine_activee);
   }

   if (pvalue->m.stocksPresent) {
      sprintf (namebuf, "%s.stocks", name);
      asn1Print__SeqOfDotationStock (namebuf, &pvalue->stocks);
   }

   if (pvalue->m.disponibilites_chefs_convoisPresent) {
      sprintf (namebuf, "%s.disponibilites_chefs_convois", name);
      asn1Print__SeqOfRavitaillementDisponibiliteMoyens (namebuf, &pvalue->disponibilites_chefs_convois);
   }

   if (pvalue->m.disponibilites_transporteurs_convoisPresent) {
      sprintf (namebuf, "%s.disponibilites_transporteurs_convois", name);
      asn1Print__SeqOfRavitaillementDisponibiliteMoyens (namebuf, &pvalue->disponibilites_transporteurs_convois);
   }

}

void ASN1C_MsgLogRavitaillementEtat::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementEtat (name, &msgData);
}

void asn1Print_DotationQuota (ASN1ConstCharPtr name, ASN1T_DotationQuota* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ressource_id", name);
   asn1Print_TypeDotation (namebuf, &pvalue->ressource_id);

   sprintf (namebuf, "%s.quota_disponible", name);
   rtPrintUnsigned (namebuf, pvalue->quota_disponible);

}

void ASN1C_DotationQuota::Print (ASN1ConstCharPtr name)

{
   asn1Print_DotationQuota (name, &msgData);
}

void asn1Print__SeqOfDotationQuota (ASN1ConstCharPtr name, ASN1T__SeqOfDotationQuota* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_DotationQuota (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfDotationQuota::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfDotationQuota (name, &msgData);
}

void asn1Print_MsgLogRavitaillementChangeQuotas (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementChangeQuotas* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_donneur", name);
   asn1Print_Automate (namebuf, &pvalue->oid_donneur);

   sprintf (namebuf, "%s.oid_receveur", name);
   asn1Print_Automate (namebuf, &pvalue->oid_receveur);

   sprintf (namebuf, "%s.quotas", name);
   asn1Print__SeqOfDotationQuota (namebuf, &pvalue->quotas);

}

void ASN1C_MsgLogRavitaillementChangeQuotas::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementChangeQuotas (name, &msgData);
}

void asn1Print_MsgLogRavitaillementChangeQuotasAck (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementChangeQuotasAck* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_donneur\n"); break;
      case 2: printf ("error_invalid_receveur\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_MsgLogRavitaillementChangeQuotasAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementChangeQuotasAck (name, &msgData);
}

void asn1Print_MsgLogRavitaillementPousserFlux (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementPousserFlux* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_donneur", name);
   asn1Print_Automate (namebuf, &pvalue->oid_donneur);

   sprintf (namebuf, "%s.oid_receveur", name);
   asn1Print_Automate (namebuf, &pvalue->oid_receveur);

   sprintf (namebuf, "%s.stocks", name);
   asn1Print__SeqOfDotationStock (namebuf, &pvalue->stocks);

}

void ASN1C_MsgLogRavitaillementPousserFlux::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementPousserFlux (name, &msgData);
}

void asn1Print_MsgLogRavitaillementPousserFluxAck (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementPousserFluxAck* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_donneur\n"); break;
      case 2: printf ("error_invalid_receveur\n"); break;
      case 3: printf ("error_ravitaillement_en_cours\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_MsgLogRavitaillementPousserFluxAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementPousserFluxAck (name, &msgData);
}

void asn1Print_MsgLogRavitaillementQuotas (ASN1ConstCharPtr name, ASN1T_MsgLogRavitaillementQuotas* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.quotas", name);
   asn1Print__SeqOfDotationQuota (namebuf, &pvalue->quotas);

}

void ASN1C_MsgLogRavitaillementQuotas::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogRavitaillementQuotas (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioLogSante.h"

void asn1Print_EnumLogSanteTraitementEtat (ASN1ConstCharPtr name, ASN1T_EnumLogSanteTraitementEtat* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("attente_disponibilite_ambulance_releve\n"); break;
      case 1: printf ("ambulance_releve_deplacement_aller\n"); break;
      case 2: printf ("ambulance_releve_chargement\n"); break;
      case 3: printf ("attente_chargement_complet_ambulance_releve\n"); break;
      case 4: printf ("ambulance_releve_deplacement_retour\n"); break;
      case 5: printf ("ambulance_releve_dechargement\n"); break;
      case 6: printf ("attente_disponibilite_medecin_pour_diagnostique\n"); break;
      case 7: printf ("diagnostique\n"); break;
      case 8: printf ("recherche_secteur_tri\n"); break;
      case 9: printf ("attente_disponibilite_medecin_pour_tri\n"); break;
      case 10: printf ("tri\n"); break;
      case 11: printf ("recherche_secteur_soin\n"); break;
      case 12: printf ("attente_disponibilite_medecin_pour_soin\n"); break;
      case 13: printf ("soin\n"); break;
      case 14: printf ("attente_disponibilite_ambulance_ramassage\n"); break;
      case 15: printf ("ambulance_ramassage_chargement\n"); break;
      case 16: printf ("attente_chargement_complet_ambulance_ramassage\n"); break;
      case 17: printf ("ambulance_ramassage_deplacement_aller\n"); break;
      case 18: printf ("ambulance_ramassage_dechargement\n"); break;
      case 19: printf ("termine\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumLogSanteTraitementEtat::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumLogSanteTraitementEtat (name, &msgData);
}

void asn1Print_MsgLogSanteTraitementHumainCreation (ASN1ConstCharPtr name, ASN1T_MsgLogSanteTraitementHumainCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.rang", name);
   asn1Print_EnumHumanRank (namebuf, &pvalue->rang);

   sprintf (namebuf, "%s.blessure", name);
   asn1Print_EnumHumanWound (namebuf, &pvalue->blessure);

   sprintf (namebuf, "%s.blesse_mental", name);
   rtPrintBoolean (namebuf, pvalue->blesse_mental);

   sprintf (namebuf, "%s.contamine_nbc", name);
   rtPrintBoolean (namebuf, pvalue->contamine_nbc);

}

void ASN1C_MsgLogSanteTraitementHumainCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogSanteTraitementHumainCreation (name, &msgData);
}

void asn1Print_MsgLogSanteTraitementHumainUpdate (ASN1ConstCharPtr name, ASN1T_MsgLogSanteTraitementHumainUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_pion_log_traitantPresent = %d\n", name, (int)pvalue->m.oid_pion_log_traitantPresent);
   printf ("%s.m.blessurePresent = %d\n", name, (int)pvalue->m.blessurePresent);
   printf ("%s.m.blesse_mentalPresent = %d\n", name, (int)pvalue->m.blesse_mentalPresent);
   printf ("%s.m.contamine_nbcPresent = %d\n", name, (int)pvalue->m.contamine_nbcPresent);
   printf ("%s.m.etatPresent = %d\n", name, (int)pvalue->m.etatPresent);
   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   if (pvalue->m.oid_pion_log_traitantPresent) {
      sprintf (namebuf, "%s.oid_pion_log_traitant", name);
      asn1Print_Agent (namebuf, &pvalue->oid_pion_log_traitant);
   }

   if (pvalue->m.blessurePresent) {
      sprintf (namebuf, "%s.blessure", name);
      asn1Print_EnumHumanWound (namebuf, &pvalue->blessure);
   }

   if (pvalue->m.blesse_mentalPresent) {
      sprintf (namebuf, "%s.blesse_mental", name);
      rtPrintBoolean (namebuf, pvalue->blesse_mental);
   }

   if (pvalue->m.contamine_nbcPresent) {
      sprintf (namebuf, "%s.contamine_nbc", name);
      rtPrintBoolean (namebuf, pvalue->contamine_nbc);
   }

   if (pvalue->m.etatPresent) {
      sprintf (namebuf, "%s.etat", name);
      asn1Print_EnumLogSanteTraitementEtat (namebuf, &pvalue->etat);
   }

}

void ASN1C_MsgLogSanteTraitementHumainUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogSanteTraitementHumainUpdate (name, &msgData);
}

void asn1Print_MsgLogSanteTraitementHumainDestruction (ASN1ConstCharPtr name, ASN1T_MsgLogSanteTraitementHumainDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_consigne", name);
   asn1Print_OID (namebuf, &pvalue->oid_consigne);

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

}

void ASN1C_MsgLogSanteTraitementHumainDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogSanteTraitementHumainDestruction (name, &msgData);
}

void asn1Print_SanteDisponibiliteMoyens (ASN1ConstCharPtr name, ASN1T_SanteDisponibiliteMoyens* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.pourcentage_disponibilite", name);
   asn1Print_Pourcentage (namebuf, &pvalue->pourcentage_disponibilite);

}

void ASN1C_SanteDisponibiliteMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print_SanteDisponibiliteMoyens (name, &msgData);
}

void asn1Print_SantePriorites (ASN1ConstCharPtr name, ASN1T_SantePriorites* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_EnumHumanWound (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_SantePriorites::Print (ASN1ConstCharPtr name)

{
   asn1Print_SantePriorites (name, &msgData);
}

void asn1Print__SeqOfSanteDisponibiliteMoyens (ASN1ConstCharPtr name, ASN1T__SeqOfSanteDisponibiliteMoyens* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_SanteDisponibiliteMoyens (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfSanteDisponibiliteMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfSanteDisponibiliteMoyens (name, &msgData);
}

void asn1Print_MsgLogSanteEtat (ASN1ConstCharPtr name, ASN1T_MsgLogSanteEtat* pvalue)
{
   char namebuf[512];

   printf ("%s.m.chaine_activeePresent = %d\n", name, (int)pvalue->m.chaine_activeePresent);
   printf ("%s.m.temps_de_bordeePresent = %d\n", name, (int)pvalue->m.temps_de_bordeePresent);
   printf ("%s.m.prioritesPresent = %d\n", name, (int)pvalue->m.prioritesPresent);
   printf ("%s.m.priorites_tactiquesPresent = %d\n", name, (int)pvalue->m.priorites_tactiquesPresent);
   printf ("%s.m.disponibilites_ambulances_relevePresent = %d\n", name, (int)pvalue->m.disponibilites_ambulances_relevePresent);
   printf ("%s.m.disponibilites_ambulances_ramassagePresent = %d\n", name, (int)pvalue->m.disponibilites_ambulances_ramassagePresent);
   printf ("%s.m.disponibilites_medecinsPresent = %d\n", name, (int)pvalue->m.disponibilites_medecinsPresent);
   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   if (pvalue->m.chaine_activeePresent) {
      sprintf (namebuf, "%s.chaine_activee", name);
      rtPrintBoolean (namebuf, pvalue->chaine_activee);
   }

   if (pvalue->m.temps_de_bordeePresent) {
      sprintf (namebuf, "%s.temps_de_bordee", name);
      asn1Print_EnumTempsBordee (namebuf, &pvalue->temps_de_bordee);
   }

   if (pvalue->m.prioritesPresent) {
      sprintf (namebuf, "%s.priorites", name);
      asn1Print_SantePriorites (namebuf, &pvalue->priorites);
   }

   if (pvalue->m.priorites_tactiquesPresent) {
      sprintf (namebuf, "%s.priorites_tactiques", name);
      asn1Print_ListAutomate (namebuf, &pvalue->priorites_tactiques);
   }

   if (pvalue->m.disponibilites_ambulances_relevePresent) {
      sprintf (namebuf, "%s.disponibilites_ambulances_releve", name);
      asn1Print__SeqOfSanteDisponibiliteMoyens (namebuf, &pvalue->disponibilites_ambulances_releve);
   }

   if (pvalue->m.disponibilites_ambulances_ramassagePresent) {
      sprintf (namebuf, "%s.disponibilites_ambulances_ramassage", name);
      asn1Print__SeqOfSanteDisponibiliteMoyens (namebuf, &pvalue->disponibilites_ambulances_ramassage);
   }

   if (pvalue->m.disponibilites_medecinsPresent) {
      sprintf (namebuf, "%s.disponibilites_medecins", name);
      asn1Print__SeqOfSanteDisponibiliteMoyens (namebuf, &pvalue->disponibilites_medecins);
   }

}

void ASN1C_MsgLogSanteEtat::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgLogSanteEtat (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioMessages.h"

void asn1Print_NbChoice (ASN1ConstCharPtr name)
{
}

void ASN1C_NbChoice::Print (ASN1ConstCharPtr name)

{
   asn1Print_NbChoice (name);
}

void asn1Print_MsgsSimMos (ASN1ConstCharPtr name, ASN1T_MsgsSimMos* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_ctrl_info", name);
         asn1Print_MsgCtrlInfo (namebuf, pvalue->u.msg_ctrl_info);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_ctrl_begin_tick", name);
         asn1Print_MsgCtrlBeginTick (namebuf, &pvalue->u.msg_ctrl_begin_tick);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_ctrl_end_tick", name);
         asn1Print_MsgCtrlEndTick (namebuf, pvalue->u.msg_ctrl_end_tick);
         break;

      case 4:
         sprintf (namebuf, "%s.u.msg_ctrl_stop_ack", name);
         asn1Print_MsgCtrlStopAck (namebuf, &pvalue->u.msg_ctrl_stop_ack);
         break;

      case 5:
         sprintf (namebuf, "%s.u.msg_ctrl_pause_ack", name);
         asn1Print_MsgCtrlPauseAck (namebuf, &pvalue->u.msg_ctrl_pause_ack);
         break;

      case 6:
         sprintf (namebuf, "%s.u.msg_ctrl_resume_ack", name);
         asn1Print_MsgCtrlResumeAck (namebuf, &pvalue->u.msg_ctrl_resume_ack);
         break;

      case 7:
         sprintf (namebuf, "%s.u.msg_ctrl_change_time_factor_ack", name);
         asn1Print_MsgCtrlChangeTimeFactorAck (namebuf, pvalue->u.msg_ctrl_change_time_factor_ack);
         break;

      case 8:
         sprintf (namebuf, "%s.u.msg_ctrl_meteo_globale_ack", name);
         break;

      case 9:
         sprintf (namebuf, "%s.u.msg_ctrl_meteo_locale_ack", name);
         break;

      case 10:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_save_begin", name);
         break;

      case 11:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_save_end", name);
         break;

      case 12:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_load_begin", name);
         break;

      case 13:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_load_end", name);
         break;

      case 14:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_set_frequency_ack", name);
         break;

      case 15:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_save_now_ack", name);
         break;

      case 16:
         sprintf (namebuf, "%s.u.msg_ctrl_send_current_state_begin", name);
         break;

      case 17:
         sprintf (namebuf, "%s.u.msg_ctrl_send_current_state_end", name);
         break;

      case 18:
         sprintf (namebuf, "%s.u.msg_limit_creation", name);
         asn1Print_MsgLimitCreation (namebuf, pvalue->u.msg_limit_creation);
         break;

      case 19:
         sprintf (namebuf, "%s.u.msg_limit_destruction", name);
         asn1Print_MsgLimitDestruction (namebuf, &pvalue->u.msg_limit_destruction);
         break;

      case 20:
         sprintf (namebuf, "%s.u.msg_lima_creation", name);
         asn1Print_MsgLimaCreation (namebuf, pvalue->u.msg_lima_creation);
         break;

      case 21:
         sprintf (namebuf, "%s.u.msg_lima_destruction", name);
         asn1Print_MsgLimaDestruction (namebuf, &pvalue->u.msg_lima_destruction);
         break;

      case 22:
         sprintf (namebuf, "%s.u.msg_automate_creation", name);
         asn1Print_MsgAutomateCreation (namebuf, pvalue->u.msg_automate_creation);
         break;

      case 23:
         sprintf (namebuf, "%s.u.msg_pion_creation", name);
         asn1Print_MsgPionCreation (namebuf, pvalue->u.msg_pion_creation);
         break;

      case 24:
         sprintf (namebuf, "%s.u.msg_change_diplomatie", name);
         asn1Print_MsgChangeDiplomatie (namebuf, pvalue->u.msg_change_diplomatie);
         break;

      case 25:
         sprintf (namebuf, "%s.u.msg_unit_knowledge_creation", name);
         asn1Print_MsgUnitKnowledgeCreation (namebuf, pvalue->u.msg_unit_knowledge_creation);
         break;

      case 26:
         sprintf (namebuf, "%s.u.msg_unit_knowledge_update", name);
         asn1Print_MsgUnitKnowledgeUpdate (namebuf, pvalue->u.msg_unit_knowledge_update);
         break;

      case 27:
         sprintf (namebuf, "%s.u.msg_unit_knowledge_destruction", name);
         asn1Print_MsgUnitKnowledgeDestruction (namebuf, pvalue->u.msg_unit_knowledge_destruction);
         break;

      case 28:
         sprintf (namebuf, "%s.u.msg_unit_attributes", name);
         asn1Print_MsgUnitAttributes (namebuf, pvalue->u.msg_unit_attributes);
         break;

      case 29:
         sprintf (namebuf, "%s.u.msg_unit_dotations", name);
         asn1Print_MsgUnitDotations (namebuf, pvalue->u.msg_unit_dotations);
         break;

      case 30:
         sprintf (namebuf, "%s.u.msg_unit_pathfind", name);
         asn1Print_MsgUnitPathFind (namebuf, pvalue->u.msg_unit_pathfind);
         break;

      case 31:
         sprintf (namebuf, "%s.u.msg_start_direct_fire", name);
         asn1Print_MsgStartDirectFire (namebuf, pvalue->u.msg_start_direct_fire);
         break;

      case 32:
         sprintf (namebuf, "%s.u.msg_stop_direct_fire", name);
         asn1Print_MsgStopDirectFire (namebuf, pvalue->u.msg_stop_direct_fire);
         break;

      case 33:
         sprintf (namebuf, "%s.u.msg_start_indirect_fire", name);
         asn1Print_MsgStartIndirectFire (namebuf, pvalue->u.msg_start_indirect_fire);
         break;

      case 34:
         sprintf (namebuf, "%s.u.msg_stop_indirect_fire", name);
         asn1Print_MsgStopIndirectFire (namebuf, pvalue->u.msg_stop_indirect_fire);
         break;

      case 35:
         sprintf (namebuf, "%s.u.msg_explosion", name);
         asn1Print_MsgExplosion (namebuf, pvalue->u.msg_explosion);
         break;

      case 36:
         sprintf (namebuf, "%s.u.msg_start_fire_effect", name);
         asn1Print_MsgStartFireEffect (namebuf, pvalue->u.msg_start_fire_effect);
         break;

      case 37:
         sprintf (namebuf, "%s.u.msg_stop_fire_effect", name);
         asn1Print_MsgStopFireEffect (namebuf, &pvalue->u.msg_stop_fire_effect);
         break;

      case 38:
         sprintf (namebuf, "%s.u.msg_cr", name);
         asn1Print_MsgCR (namebuf, pvalue->u.msg_cr);
         break;

      case 39:
         sprintf (namebuf, "%s.u.msg_order_management", name);
         asn1Print_MsgOrderManagement (namebuf, pvalue->u.msg_order_management);
         break;

      case 40:
         sprintf (namebuf, "%s.u.msg_attente_ordre_conduite", name);
         asn1Print_MsgAttenteOrdreConduite (namebuf, pvalue->u.msg_attente_ordre_conduite);
         break;

      case 41:
         sprintf (namebuf, "%s.u.msg_annule_attente_ordre_conduite", name);
         asn1Print_MsgAnnuleAttenteOrdreConduite (namebuf, pvalue->u.msg_annule_attente_ordre_conduite);
         break;

      case 42:
         sprintf (namebuf, "%s.u.msg_automate_mrt", name);
         asn1Print_MsgAutomateMRT (namebuf, pvalue->u.msg_automate_mrt);
         break;

      case 43:
         sprintf (namebuf, "%s.u.msg_pion_order", name);
         asn1Print_MsgPionOrder (namebuf, pvalue->u.msg_pion_order);
         break;

      case 44:
         sprintf (namebuf, "%s.u.msg_automate_order", name);
         asn1Print_MsgAutomateOrder (namebuf, pvalue->u.msg_automate_order);
         break;

      case 45:
         sprintf (namebuf, "%s.u.msg_object_creation", name);
         asn1Print_MsgObjectCreation (namebuf, pvalue->u.msg_object_creation);
         break;

      case 46:
         sprintf (namebuf, "%s.u.msg_object_destruction", name);
         asn1Print_MsgObjectDestruction (namebuf, &pvalue->u.msg_object_destruction);
         break;

      case 47:
         sprintf (namebuf, "%s.u.msg_object_update", name);
         asn1Print_MsgObjectUpdate (namebuf, pvalue->u.msg_object_update);
         break;

      case 48:
         sprintf (namebuf, "%s.u.msg_object_knowledge_creation", name);
         asn1Print_MsgObjectKnowledgeCreation (namebuf, pvalue->u.msg_object_knowledge_creation);
         break;

      case 49:
         sprintf (namebuf, "%s.u.msg_object_knowledge_update", name);
         asn1Print_MsgObjectKnowledgeUpdate (namebuf, pvalue->u.msg_object_knowledge_update);
         break;

      case 50:
         sprintf (namebuf, "%s.u.msg_object_knowledge_destruction", name);
         asn1Print_MsgObjectKnowledgeDestruction (namebuf, pvalue->u.msg_object_knowledge_destruction);
         break;

      case 51:
         sprintf (namebuf, "%s.u.msg_change_automate", name);
         asn1Print_MsgChangeAutomate (namebuf, pvalue->u.msg_change_automate);
         break;

      case 52:
         sprintf (namebuf, "%s.u.msg_log_sante_traitement_humain_creation", name);
         asn1Print_MsgLogSanteTraitementHumainCreation (namebuf, pvalue->u.msg_log_sante_traitement_humain_creation);
         break;

      case 53:
         sprintf (namebuf, "%s.u.msg_log_sante_traitement_humain_update", name);
         asn1Print_MsgLogSanteTraitementHumainUpdate (namebuf, pvalue->u.msg_log_sante_traitement_humain_update);
         break;

      case 54:
         sprintf (namebuf, "%s.u.msg_log_sante_traitement_humain_destruction", name);
         asn1Print_MsgLogSanteTraitementHumainDestruction (namebuf, pvalue->u.msg_log_sante_traitement_humain_destruction);
         break;

      case 55:
         sprintf (namebuf, "%s.u.msg_log_sante_etat", name);
         asn1Print_MsgLogSanteEtat (namebuf, pvalue->u.msg_log_sante_etat);
         break;

      case 56:
         sprintf (namebuf, "%s.u.msg_log_maintenance_traitement_equipement_creation", name);
         asn1Print_MsgLogMaintenanceTraitementEquipementCreation (namebuf, pvalue->u.msg_log_maintenance_traitement_equipement_creation);
         break;

      case 57:
         sprintf (namebuf, "%s.u.msg_log_maintenance_traitement_equipement_update", name);
         asn1Print_MsgLogMaintenanceTraitementEquipementUpdate (namebuf, pvalue->u.msg_log_maintenance_traitement_equipement_update);
         break;

      case 58:
         sprintf (namebuf, "%s.u.msg_log_maintenance_traitement_equipement_destruction", name);
         asn1Print_MsgLogMaintenanceTraitementEquipementDestruction (namebuf, pvalue->u.msg_log_maintenance_traitement_equipement_destruction);
         break;

      case 59:
         sprintf (namebuf, "%s.u.msg_log_maintenance_etat", name);
         asn1Print_MsgLogMaintenanceEtat (namebuf, pvalue->u.msg_log_maintenance_etat);
         break;

      case 60:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_traitement_creation", name);
         asn1Print_MsgLogRavitaillementTraitementCreation (namebuf, pvalue->u.msg_log_ravitaillement_traitement_creation);
         break;

      case 61:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_traitement_update", name);
         asn1Print_MsgLogRavitaillementTraitementUpdate (namebuf, pvalue->u.msg_log_ravitaillement_traitement_update);
         break;

      case 62:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_traitement_destruction", name);
         asn1Print_MsgLogRavitaillementTraitementDestruction (namebuf, pvalue->u.msg_log_ravitaillement_traitement_destruction);
         break;

      case 63:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_etat", name);
         asn1Print_MsgLogRavitaillementEtat (namebuf, pvalue->u.msg_log_ravitaillement_etat);
         break;

      case 64:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_quotas", name);
         asn1Print_MsgLogRavitaillementQuotas (namebuf, pvalue->u.msg_log_ravitaillement_quotas);
         break;

      case 65:
         sprintf (namebuf, "%s.u.msg_population_creation", name);
         asn1Print_MsgPopulationCreation (namebuf, pvalue->u.msg_population_creation);
         break;

      case 66:
         sprintf (namebuf, "%s.u.msg_population_update", name);
         asn1Print_MsgPopulationUpdate (namebuf, pvalue->u.msg_population_update);
         break;

      case 67:
         sprintf (namebuf, "%s.u.msg_population_concentration_creation", name);
         asn1Print_MsgPopulationConcentrationCreation (namebuf, pvalue->u.msg_population_concentration_creation);
         break;

      case 68:
         sprintf (namebuf, "%s.u.msg_population_concentration_destruction", name);
         asn1Print_MsgPopulationConcentrationDestruction (namebuf, pvalue->u.msg_population_concentration_destruction);
         break;

      case 69:
         sprintf (namebuf, "%s.u.msg_population_concentration_update", name);
         asn1Print_MsgPopulationConcentrationUpdate (namebuf, pvalue->u.msg_population_concentration_update);
         break;

      case 70:
         sprintf (namebuf, "%s.u.msg_population_flux_creation", name);
         asn1Print_MsgPopulationFluxCreation (namebuf, pvalue->u.msg_population_flux_creation);
         break;

      case 71:
         sprintf (namebuf, "%s.u.msg_population_flux_destruction", name);
         asn1Print_MsgPopulationFluxDestruction (namebuf, pvalue->u.msg_population_flux_destruction);
         break;

      case 72:
         sprintf (namebuf, "%s.u.msg_population_flux_update", name);
         asn1Print_MsgPopulationFluxUpdate (namebuf, pvalue->u.msg_population_flux_update);
         break;

      case 73:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsSimMos::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsSimMos (name, &msgData);
}

void asn1Print_MsgsSimMosWithContext (ASN1ConstCharPtr name, ASN1T_MsgsSimMosWithContext* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_limit_creation_ack", name);
         asn1Print_MsgLimitCreationAck (namebuf, pvalue->u.msg_limit_creation_ack);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_limit_destruction_ack", name);
         asn1Print_MsgLimitDestructionAck (namebuf, pvalue->u.msg_limit_destruction_ack);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_limit_update_ack", name);
         asn1Print_MsgLimitUpdateAck (namebuf, pvalue->u.msg_limit_update_ack);
         break;

      case 4:
         sprintf (namebuf, "%s.u.msg_lima_creation_ack", name);
         asn1Print_MsgLimaCreationAck (namebuf, pvalue->u.msg_lima_creation_ack);
         break;

      case 5:
         sprintf (namebuf, "%s.u.msg_lima_destruction_ack", name);
         asn1Print_MsgLimaDestructionAck (namebuf, pvalue->u.msg_lima_destruction_ack);
         break;

      case 6:
         sprintf (namebuf, "%s.u.msg_lima_update_ack", name);
         asn1Print_MsgLimaUpdateAck (namebuf, pvalue->u.msg_lima_update_ack);
         break;

      case 7:
         sprintf (namebuf, "%s.u.msg_pion_order_ack", name);
         asn1Print_MsgPionOrderAck (namebuf, pvalue->u.msg_pion_order_ack);
         break;

      case 8:
         sprintf (namebuf, "%s.u.msg_order_conduite_ack", name);
         asn1Print_MsgOrderConduiteAck (namebuf, pvalue->u.msg_order_conduite_ack);
         break;

      case 9:
         sprintf (namebuf, "%s.u.msg_automate_order_ack", name);
         asn1Print_MsgAutomateOrderAck (namebuf, pvalue->u.msg_automate_order_ack);
         break;

      case 10:
         sprintf (namebuf, "%s.u.msg_population_order_ack", name);
         asn1Print_MsgPopulationOrderAck (namebuf, pvalue->u.msg_population_order_ack);
         break;

      case 11:
         sprintf (namebuf, "%s.u.msg_set_automate_mode_ack", name);
         asn1Print_MsgSetAutomateModeAck (namebuf, pvalue->u.msg_set_automate_mode_ack);
         break;

      case 12:
         sprintf (namebuf, "%s.u.msg_unit_magic_action_ack", name);
         asn1Print_MsgUnitMagicActionAck (namebuf, pvalue->u.msg_unit_magic_action_ack);
         break;

      case 13:
         sprintf (namebuf, "%s.u.msg_object_magic_action_ack", name);
         asn1Print_MsgObjectMagicActionAck (namebuf, pvalue->u.msg_object_magic_action_ack);
         break;

      case 14:
         sprintf (namebuf, "%s.u.msg_change_diplomatie_ack", name);
         asn1Print_MsgChangeDiplomatieAck (namebuf, pvalue->u.msg_change_diplomatie_ack);
         break;

      case 15:
         sprintf (namebuf, "%s.u.msg_change_groupe_connaissance_ack", name);
         asn1Print_MsgChangeGroupeConnaissanceAck (namebuf, pvalue->u.msg_change_groupe_connaissance_ack);
         break;

      case 16:
         sprintf (namebuf, "%s.u.msg_change_liens_logistiques_ack", name);
         asn1Print_MsgChangeLiensLogistiquesAck (namebuf, pvalue->u.msg_change_liens_logistiques_ack);
         break;

      case 17:
         sprintf (namebuf, "%s.u.msg_change_automate_ack", name);
         asn1Print_MsgChangeAutomateAck (namebuf, pvalue->u.msg_change_automate_ack);
         break;

      case 18:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_pousser_flux_ack", name);
         asn1Print_MsgLogRavitaillementPousserFluxAck (namebuf, &pvalue->u.msg_log_ravitaillement_pousser_flux_ack);
         break;

      case 19:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_change_quotas_ack", name);
         asn1Print_MsgLogRavitaillementChangeQuotasAck (namebuf, &pvalue->u.msg_log_ravitaillement_change_quotas_ack);
         break;

      case 20:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsSimMosWithContext::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsSimMosWithContext (name, &msgData);
}

void asn1Print_MsgsMosSim (ASN1ConstCharPtr name, ASN1T_MsgsMosSim* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_ctrl_client_announcement", name);
         asn1Print_MsgCtrlClientAnnouncement (namebuf, &pvalue->u.msg_ctrl_client_announcement);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_ctrl_stop", name);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_ctrl_pause", name);
         break;

      case 4:
         sprintf (namebuf, "%s.u.msg_ctrl_resume", name);
         break;

      case 5:
         sprintf (namebuf, "%s.u.msg_ctrl_change_time_factor", name);
         asn1Print_MsgCtrlChangeTimeFactor (namebuf, &pvalue->u.msg_ctrl_change_time_factor);
         break;

      case 6:
         sprintf (namebuf, "%s.u.msg_ctrl_meteo_globale", name);
         asn1Print_MsgCtrlMeteoGlobale (namebuf, pvalue->u.msg_ctrl_meteo_globale);
         break;

      case 7:
         sprintf (namebuf, "%s.u.msg_ctrl_meteo_locale", name);
         asn1Print_MsgCtrlMeteoLocale (namebuf, pvalue->u.msg_ctrl_meteo_locale);
         break;

      case 8:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_save_now", name);
         asn1Print_MsgCtrlCheckPointSaveNow (namebuf, pvalue->u.msg_ctrl_checkpoint_save_now);
         break;

      case 9:
         sprintf (namebuf, "%s.u.msg_ctrl_checkpoint_set_frequency", name);
         asn1Print_MsgCtrlCheckPointSetFrequency (namebuf, &pvalue->u.msg_ctrl_checkpoint_set_frequency);
         break;

      case 10:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsMosSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsMosSim (name, &msgData);
}

void asn1Print_MsgsMosSimWithContext (ASN1ConstCharPtr name, ASN1T_MsgsMosSimWithContext* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_limit_creation", name);
         asn1Print_MsgLimitCreation (namebuf, pvalue->u.msg_limit_creation);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_limit_destruction", name);
         asn1Print_MsgLimitDestruction (namebuf, &pvalue->u.msg_limit_destruction);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_limit_update", name);
         asn1Print_MsgLimitUpdate (namebuf, pvalue->u.msg_limit_update);
         break;

      case 4:
         sprintf (namebuf, "%s.u.msg_lima_creation", name);
         asn1Print_MsgLimaCreation (namebuf, pvalue->u.msg_lima_creation);
         break;

      case 5:
         sprintf (namebuf, "%s.u.msg_lima_destruction", name);
         asn1Print_MsgLimaDestruction (namebuf, &pvalue->u.msg_lima_destruction);
         break;

      case 6:
         sprintf (namebuf, "%s.u.msg_lima_update", name);
         asn1Print_MsgLimaUpdate (namebuf, pvalue->u.msg_lima_update);
         break;

      case 7:
         sprintf (namebuf, "%s.u.msg_pion_order", name);
         asn1Print_MsgPionOrder (namebuf, pvalue->u.msg_pion_order);
         break;

      case 8:
         sprintf (namebuf, "%s.u.msg_order_conduite", name);
         asn1Print_MsgOrderConduite (namebuf, pvalue->u.msg_order_conduite);
         break;

      case 9:
         sprintf (namebuf, "%s.u.msg_automate_order", name);
         asn1Print_MsgAutomateOrder (namebuf, pvalue->u.msg_automate_order);
         break;

      case 10:
         sprintf (namebuf, "%s.u.msg_population_order", name);
         asn1Print_MsgPopulationOrder (namebuf, pvalue->u.msg_population_order);
         break;

      case 11:
         sprintf (namebuf, "%s.u.msg_set_automate_mode", name);
         asn1Print_MsgSetAutomateMode (namebuf, pvalue->u.msg_set_automate_mode);
         break;

      case 12:
         sprintf (namebuf, "%s.u.msg_unit_magic_action", name);
         asn1Print_MsgUnitMagicAction (namebuf, pvalue->u.msg_unit_magic_action);
         break;

      case 13:
         sprintf (namebuf, "%s.u.msg_object_magic_action", name);
         asn1Print_MsgObjectMagicAction (namebuf, pvalue->u.msg_object_magic_action);
         break;

      case 14:
         sprintf (namebuf, "%s.u.msg_change_diplomatie", name);
         asn1Print_MsgChangeDiplomatie (namebuf, pvalue->u.msg_change_diplomatie);
         break;

      case 15:
         sprintf (namebuf, "%s.u.msg_change_groupe_connaissance", name);
         asn1Print_MsgChangeGroupeConnaissance (namebuf, pvalue->u.msg_change_groupe_connaissance);
         break;

      case 16:
         sprintf (namebuf, "%s.u.msg_change_liens_logistiques", name);
         asn1Print_MsgChangeLiensLogistiques (namebuf, pvalue->u.msg_change_liens_logistiques);
         break;

      case 17:
         sprintf (namebuf, "%s.u.msg_change_automate", name);
         asn1Print_MsgChangeAutomate (namebuf, pvalue->u.msg_change_automate);
         break;

      case 18:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_pousser_flux", name);
         asn1Print_MsgLogRavitaillementPousserFlux (namebuf, pvalue->u.msg_log_ravitaillement_pousser_flux);
         break;

      case 19:
         sprintf (namebuf, "%s.u.msg_log_ravitaillement_change_quotas", name);
         asn1Print_MsgLogRavitaillementChangeQuotas (namebuf, pvalue->u.msg_log_ravitaillement_change_quotas);
         break;

      case 20:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsMosSimWithContext::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsMosSimWithContext (name, &msgData);
}

void asn1Print_MsgsMosLauncher (ASN1ConstCharPtr name, ASN1T_MsgsMosLauncher* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_request_list_mission", name);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_launch_sim", name);
         asn1Print_MsgMosLau_LaunchSim (namebuf, pvalue->u.msg_launch_sim);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_request_list_sim", name);
         break;

      case 4:
         sprintf (namebuf, "%s.u.msg_request_list_checkpoint", name);
         asn1Print_MsgMosLau_RequestListCheckpoint (namebuf, &pvalue->u.msg_request_list_checkpoint);
         break;

      case 5:
         sprintf (namebuf, "%s.u.msg_launch_sim_from_checkpoint", name);
         asn1Print_MsgMosLau_LaunchSimFromCheckpoint (namebuf, pvalue->u.msg_launch_sim_from_checkpoint);
         break;

      case 6:
         sprintf (namebuf, "%s.u.msg_stop_sim", name);
         asn1Print_MsgMosLau_StopSim (namebuf, &pvalue->u.msg_stop_sim);
         break;

      case 7:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsMosLauncher::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsMosLauncher (name, &msgData);
}

void asn1Print_MsgsLauncherMos (ASN1ConstCharPtr name, ASN1T_MsgsLauncherMos* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_list_mission", name);
         asn1Print_MsgLauMos_ListMission (namebuf, pvalue->u.msg_list_mission);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_sim_launched", name);
         asn1Print_MsgLauMos_SimLaunched (namebuf, pvalue->u.msg_sim_launched);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_list_sim", name);
         asn1Print_MsgLauMos_ListSim (namebuf, pvalue->u.msg_list_sim);
         break;

      case 4:
         sprintf (namebuf, "%s.u.msg_sim_failure", name);
         asn1Print_MsgLauMos_SimFailure (namebuf, &pvalue->u.msg_sim_failure);
         break;

      case 5:
         sprintf (namebuf, "%s.u.msg_list_checkpoint", name);
         asn1Print_MsgLauMos_ListCheckpoint (namebuf, pvalue->u.msg_list_checkpoint);
         break;

      case 6:
         sprintf (namebuf, "%s.u.msg_exec_success", name);
         asn1Print_MsgLauMos_ExecSuccess (namebuf, pvalue->u.msg_exec_success);
         break;

      case 7:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsLauncherMos::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsLauncherMos (name, &msgData);
}

void asn1Print_MsgsLauncherSim (ASN1ConstCharPtr name, ASN1T_MsgsLauncherSim* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_ping", name);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_stop_sim", name);
         asn1Print_MsgLauSim_StopSim (namebuf, &pvalue->u.msg_stop_sim);
         break;

      case 3:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsLauncherSim::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsLauncherSim (name, &msgData);
}

void asn1Print_MsgsSimLauncher (ASN1ConstCharPtr name, ASN1T_MsgsSimLauncher* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.msg_sim_launched", name);
         asn1Print_MsgSimLau_SimLaunched (namebuf, pvalue->u.msg_sim_launched);
         break;

      case 2:
         sprintf (namebuf, "%s.u.msg_pong", name);
         asn1Print_MsgSimLau_Pong (namebuf, &pvalue->u.msg_pong);
         break;

      case 3:
         sprintf (namebuf, "%s.u.msg_exec_success", name);
         asn1Print_MsgSimLau_ExecSuccess (namebuf, pvalue->u.msg_exec_success);
         break;

      case 4:
         sprintf (namebuf, "%s.u.nb_choice", name);
         break;

      default:;
   }
}

void ASN1C_MsgsSimLauncher::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgsSimLauncher (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioObject.h"

void asn1Print_EnumMissionGenUrgence (ASN1ConstCharPtr name, ASN1T_EnumMissionGenUrgence* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("serie_minimum\n"); break;
      case 1: printf ("serie_complementaire\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumMissionGenUrgence::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumMissionGenUrgence (name, &msgData);
}

void asn1Print_EnumMissionGenSousTypeObstacle (ASN1ConstCharPtr name, ASN1T_EnumMissionGenSousTypeObstacle* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("preliminaire\n"); break;
      case 1: printf ("de_manoeuvre\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumMissionGenSousTypeObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumMissionGenSousTypeObstacle (name, &msgData);
}

void asn1Print_EnumObjectType (ASN1ConstCharPtr name, ASN1T_EnumObjectType* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("bouchon_mines\n"); break;
      case 1: printf ("zone_minee_lineaire\n"); break;
      case 2: printf ("zone_minee_par_dispersion\n"); break;
      case 3: printf ("fosse_anti_char\n"); break;
      case 4: printf ("abattis\n"); break;
      case 5: printf ("barricade\n"); break;
      case 6: printf ("eboulement\n"); break;
      case 7: printf ("destruction_route\n"); break;
      case 8: printf ("destruction_pont\n"); break;
      case 9: printf ("pont_flottant_continu\n"); break;
      case 10: printf ("poste_tir\n"); break;
      case 11: printf ("zone_protegee\n"); break;
      case 12: printf ("zone_implantation_canon\n"); break;
      case 13: printf ("zone_implantation_cobra\n"); break;
      case 14: printf ("zone_implantation_lrm\n"); break;
      case 15: printf ("site_franchissement\n"); break;
      case 16: printf ("nuage_nbc\n"); break;
      case 17: printf ("plot_ravitaillement\n"); break;
      case 18: printf ("site_decontamination\n"); break;
      case 19: printf ("zone_brouillage_brod\n"); break;
      case 20: printf ("rota\n"); break;
      case 21: printf ("zone_nbc\n"); break;
      case 22: printf ("zone_brouillage_bromure\n"); break;
      case 23: printf ("aire_poser\n"); break;
      case 24: printf ("piste\n"); break;
      case 25: printf ("plateforme\n"); break;
      case 26: printf ("zone_mobilite_amelioree\n"); break;
      case 27: printf ("zone_poser_helicoptere\n"); break;
      case 28: printf ("aire_logistique\n"); break;
      case 29: printf ("itineraire_logistique\n"); break;
      case 30: printf ("camp_prisonniers\n"); break;
      case 31: printf ("camp_refugies\n"); break;
      case 32: printf ("poste_controle\n"); break;
      case 33: printf ("terrain_largage\n"); break;
      case 34: printf ("zone_interdite_mouvement\n"); break;
      case 35: printf ("zone_interdite_tir\n"); break;
      case 36: printf ("zone_implantation_mortier\n"); break;
      case 37: printf ("pont_flottant_discontinu\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumObjectType::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumObjectType (name, &msgData);
}

void asn1Print_AttrObjectSiteFranchissement (ASN1ConstCharPtr name, ASN1T_AttrObjectSiteFranchissement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.largeur", name);
   rtPrintInteger (namebuf, pvalue->largeur);

   sprintf (namebuf, "%s.profondeur", name);
   rtPrintInteger (namebuf, pvalue->profondeur);

   sprintf (namebuf, "%s.vitesse_courant", name);
   rtPrintInteger (namebuf, pvalue->vitesse_courant);

   sprintf (namebuf, "%s.berges_a_amenager", name);
   rtPrintBoolean (namebuf, pvalue->berges_a_amenager);

}

void ASN1C_AttrObjectSiteFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectSiteFranchissement (name, &msgData);
}

void asn1Print_AttrObjectNuageNBC (ASN1ConstCharPtr name, ASN1T_AttrObjectNuageNBC* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.agent_nbc", name);
   asn1Print_OID (namebuf, &pvalue->agent_nbc);

}

void ASN1C_AttrObjectNuageNBC::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectNuageNBC (name, &msgData);
}

void asn1Print__SeqOfOID (ASN1ConstCharPtr name, ASN1T__SeqOfOID* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_OID (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfOID::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfOID (name, &msgData);
}

void asn1Print_AttrObjectROTA (ASN1ConstCharPtr name, ASN1T_AttrObjectROTA* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.niveau_danger", name);
   rtPrintInteger (namebuf, pvalue->niveau_danger);

   sprintf (namebuf, "%s.agents_nbc", name);
   asn1Print__SeqOfOID (namebuf, &pvalue->agents_nbc);

}

void ASN1C_AttrObjectROTA::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectROTA (name, &msgData);
}

void asn1Print_AttrObjectZoneNBC (ASN1ConstCharPtr name, ASN1T_AttrObjectZoneNBC* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.agent_nbc", name);
   asn1Print_OID (namebuf, &pvalue->agent_nbc);

}

void ASN1C_AttrObjectZoneNBC::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectZoneNBC (name, &msgData);
}

void asn1Print_AttrObjectItineraireLogistique (ASN1ConstCharPtr name, ASN1T_AttrObjectItineraireLogistique* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire_equipe", name);
   rtPrintBoolean (namebuf, pvalue->itineraire_equipe);

   sprintf (namebuf, "%s.poids_max_supporte", name);
   rtPrintInteger (namebuf, pvalue->poids_max_supporte);

   sprintf (namebuf, "%s.largeur", name);
   rtPrintInteger (namebuf, pvalue->largeur);

   sprintf (namebuf, "%s.longueur", name);
   rtPrintInteger (namebuf, pvalue->longueur);

   sprintf (namebuf, "%s.debit", name);
   rtPrintInteger (namebuf, pvalue->debit);

}

void ASN1C_AttrObjectItineraireLogistique::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectItineraireLogistique (name, &msgData);
}

void asn1Print_AttrObjectCampPrisonniers (ASN1ConstCharPtr name, ASN1T_AttrObjectCampPrisonniers* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

}

void ASN1C_AttrObjectCampPrisonniers::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectCampPrisonniers (name, &msgData);
}

void asn1Print_AttrObjectCampRefugies (ASN1ConstCharPtr name, ASN1T_AttrObjectCampRefugies* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

}

void ASN1C_AttrObjectCampRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectCampRefugies (name, &msgData);
}

void asn1Print_AttrObjectSpecific (ASN1ConstCharPtr name, ASN1T_AttrObjectSpecific* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.site_franchissement", name);
         asn1Print_AttrObjectSiteFranchissement (namebuf, pvalue->u.site_franchissement);
         break;

      case 2:
         sprintf (namebuf, "%s.u.nuage_nbc", name);
         asn1Print_AttrObjectNuageNBC (namebuf, pvalue->u.nuage_nbc);
         break;

      case 3:
         sprintf (namebuf, "%s.u.rota", name);
         asn1Print_AttrObjectROTA (namebuf, pvalue->u.rota);
         break;

      case 4:
         sprintf (namebuf, "%s.u.zone_nbc", name);
         asn1Print_AttrObjectZoneNBC (namebuf, pvalue->u.zone_nbc);
         break;

      case 5:
         sprintf (namebuf, "%s.u.itineraire_logistique", name);
         asn1Print_AttrObjectItineraireLogistique (namebuf, pvalue->u.itineraire_logistique);
         break;

      case 6:
         sprintf (namebuf, "%s.u.camp_prisonniers", name);
         asn1Print_AttrObjectCampPrisonniers (namebuf, pvalue->u.camp_prisonniers);
         break;

      case 7:
         sprintf (namebuf, "%s.u.camp_refugies", name);
         asn1Print_AttrObjectCampRefugies (namebuf, pvalue->u.camp_refugies);
         break;

      default:;
   }
}

void ASN1C_AttrObjectSpecific::Print (ASN1ConstCharPtr name)

{
   asn1Print_AttrObjectSpecific (name, &msgData);
}

void asn1Print_MsgObjectCreation (ASN1ConstCharPtr name, ASN1T_MsgObjectCreation* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_objet_planifiePresent = %d\n", name, (int)pvalue->m.oid_objet_planifiePresent);
   printf ("%s.m.attributs_specifiquesPresent = %d\n", name, (int)pvalue->m.attributs_specifiquesPresent);
   printf ("%s.m.type_dotation_constructionPresent = %d\n", name, (int)pvalue->m.type_dotation_constructionPresent);
   printf ("%s.m.type_dotation_valorisationPresent = %d\n", name, (int)pvalue->m.type_dotation_valorisationPresent);
   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->type);

   sprintf (namebuf, "%s.localisation", name);
   asn1Print_Localisation (namebuf, &pvalue->localisation);

   sprintf (namebuf, "%s.camp", name);
   asn1Print_OID (namebuf, &pvalue->camp);

   if (pvalue->m.oid_objet_planifiePresent) {
      sprintf (namebuf, "%s.oid_objet_planifie", name);
      asn1Print_OID (namebuf, &pvalue->oid_objet_planifie);
   }

   if (pvalue->m.attributs_specifiquesPresent) {
      sprintf (namebuf, "%s.attributs_specifiques", name);
      asn1Print_AttrObjectSpecific (namebuf, &pvalue->attributs_specifiques);
   }

   if (pvalue->m.type_dotation_constructionPresent) {
      sprintf (namebuf, "%s.type_dotation_construction", name);
      asn1Print_TypeDotation (namebuf, &pvalue->type_dotation_construction);
   }

   if (pvalue->m.type_dotation_valorisationPresent) {
      sprintf (namebuf, "%s.type_dotation_valorisation", name);
      asn1Print_TypeDotation (namebuf, &pvalue->type_dotation_valorisation);
   }

}

void ASN1C_MsgObjectCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectCreation (name, &msgData);
}

void asn1Print_MsgObjectDestruction (ASN1ConstCharPtr name, ASN1T_MsgObjectDestruction* pvalue)
{
   asn1Print_OID (name, pvalue);
}

void ASN1C_MsgObjectDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectDestruction (name, &msgData);
}

void asn1Print_MsgObjectUpdate (ASN1ConstCharPtr name, ASN1T_MsgObjectUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.pourcentage_constructionPresent = %d\n", name, (int)pvalue->m.pourcentage_constructionPresent);
   printf ("%s.m.pourcentage_valorisationPresent = %d\n", name, (int)pvalue->m.pourcentage_valorisationPresent);
   printf ("%s.m.pourcentage_creation_contournementPresent = %d\n", name, (int)pvalue->m.pourcentage_creation_contournementPresent);
   printf ("%s.m.nb_dotation_constructionPresent = %d\n", name, (int)pvalue->m.nb_dotation_constructionPresent);
   printf ("%s.m.nb_dotation_valorisationPresent = %d\n", name, (int)pvalue->m.nb_dotation_valorisationPresent);
   printf ("%s.m.localisationPresent = %d\n", name, (int)pvalue->m.localisationPresent);
   printf ("%s.m.attributs_specifiquesPresent = %d\n", name, (int)pvalue->m.attributs_specifiquesPresent);
   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   if (pvalue->m.pourcentage_constructionPresent) {
      sprintf (namebuf, "%s.pourcentage_construction", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_construction);
   }

   if (pvalue->m.pourcentage_valorisationPresent) {
      sprintf (namebuf, "%s.pourcentage_valorisation", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_valorisation);
   }

   if (pvalue->m.pourcentage_creation_contournementPresent) {
      sprintf (namebuf, "%s.pourcentage_creation_contournement", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_creation_contournement);
   }

   sprintf (namebuf, "%s.en_preparation", name);
   rtPrintBoolean (namebuf, pvalue->en_preparation);

   if (pvalue->m.nb_dotation_constructionPresent) {
      sprintf (namebuf, "%s.nb_dotation_construction", name);
      rtPrintInteger (namebuf, pvalue->nb_dotation_construction);
   }

   if (pvalue->m.nb_dotation_valorisationPresent) {
      sprintf (namebuf, "%s.nb_dotation_valorisation", name);
      rtPrintInteger (namebuf, pvalue->nb_dotation_valorisation);
   }

   if (pvalue->m.localisationPresent) {
      sprintf (namebuf, "%s.localisation", name);
      asn1Print_Localisation (namebuf, &pvalue->localisation);
   }

   if (pvalue->m.attributs_specifiquesPresent) {
      sprintf (namebuf, "%s.attributs_specifiques", name);
      asn1Print_AttrObjectSpecific (namebuf, &pvalue->attributs_specifiques);
   }

}

void ASN1C_MsgObjectUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectUpdate (name, &msgData);
}

void asn1Print_EnumObjectErrorCode (ASN1ConstCharPtr name, ASN1T_EnumObjectErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_object\n"); break;
      case 2: printf ("error_invalid_id\n"); break;
      case 3: printf ("error_invalid_camp\n"); break;
      case 4: printf ("error_invalid_localisation\n"); break;
      case 5: printf ("error_missing_specific_attributes\n"); break;
      case 6: printf ("error_invalid_specific_attributes\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumObjectErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumObjectErrorCode (name, &msgData);
}

void asn1Print_MsgObjectMagicActionAck (ASN1ConstCharPtr name, ASN1T_MsgObjectMagicActionAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumObjectErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgObjectMagicActionAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectMagicActionAck (name, &msgData);
}

void asn1Print_MagicActionCreateObject (ASN1ConstCharPtr name, ASN1T_MagicActionCreateObject* pvalue)
{
   char namebuf[512];

   printf ("%s.m.attributs_specifiquesPresent = %d\n", name, (int)pvalue->m.attributs_specifiquesPresent);
   sprintf (namebuf, "%s.camp", name);
   asn1Print_OID (namebuf, &pvalue->camp);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->type);

   sprintf (namebuf, "%s.localisation", name);
   asn1Print_Localisation (namebuf, &pvalue->localisation);

   if (pvalue->m.attributs_specifiquesPresent) {
      sprintf (namebuf, "%s.attributs_specifiques", name);
      asn1Print_AttrObjectSpecific (namebuf, &pvalue->attributs_specifiques);
   }

}

void ASN1C_MagicActionCreateObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionCreateObject (name, &msgData);
}

void asn1Print_MagicActionUpdateObject (ASN1ConstCharPtr name, ASN1T_MagicActionUpdateObject* pvalue)
{
   char namebuf[512];

   printf ("%s.m.pourcentage_constructionPresent = %d\n", name, (int)pvalue->m.pourcentage_constructionPresent);
   printf ("%s.m.pourcentage_valorisationPresent = %d\n", name, (int)pvalue->m.pourcentage_valorisationPresent);
   printf ("%s.m.pourcentage_creation_contournementPresent = %d\n", name, (int)pvalue->m.pourcentage_creation_contournementPresent);
   printf ("%s.m.en_preparationPresent = %d\n", name, (int)pvalue->m.en_preparationPresent);
   if (pvalue->m.pourcentage_constructionPresent) {
      sprintf (namebuf, "%s.pourcentage_construction", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_construction);
   }

   if (pvalue->m.pourcentage_valorisationPresent) {
      sprintf (namebuf, "%s.pourcentage_valorisation", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_valorisation);
   }

   if (pvalue->m.pourcentage_creation_contournementPresent) {
      sprintf (namebuf, "%s.pourcentage_creation_contournement", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_creation_contournement);
   }

   if (pvalue->m.en_preparationPresent) {
      sprintf (namebuf, "%s.en_preparation", name);
      rtPrintBoolean (namebuf, pvalue->en_preparation);
   }

}

void ASN1C_MagicActionUpdateObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionUpdateObject (name, &msgData);
}

void asn1Print_MagicActionDestroyObjet (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionDestroyObjet::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionDestroyObjet (name);
}

void asn1Print_MsgObjectMagicAction_action (ASN1ConstCharPtr name, ASN1T_MsgObjectMagicAction_action* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.create_object", name);
         asn1Print_MagicActionCreateObject (namebuf, pvalue->u.create_object);
         break;

      case 2:
         sprintf (namebuf, "%s.u.update_object", name);
         asn1Print_MagicActionUpdateObject (namebuf, pvalue->u.update_object);
         break;

      case 3:
         sprintf (namebuf, "%s.u.destroy_object", name);
         break;

      default:;
   }
}

void ASN1C_MsgObjectMagicAction_action::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectMagicAction_action (name, &msgData);
}

void asn1Print_MsgObjectMagicAction (ASN1ConstCharPtr name, ASN1T_MsgObjectMagicAction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_objet", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet);

   sprintf (namebuf, "%s.action", name);
   asn1Print_MsgObjectMagicAction_action (namebuf, &pvalue->action);

}

void ASN1C_MsgObjectMagicAction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectMagicAction (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioObjectKnowledge.h"

void asn1Print_MsgObjectKnowledgeUpdate (ASN1ConstCharPtr name, ASN1T_MsgObjectKnowledgeUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_objet_reelPresent = %d\n", name, (int)pvalue->m.oid_objet_reelPresent);
   printf ("%s.m.pertinencePresent = %d\n", name, (int)pvalue->m.pertinencePresent);
   printf ("%s.m.localisationPresent = %d\n", name, (int)pvalue->m.localisationPresent);
   printf ("%s.m.pourcentage_constructionPresent = %d\n", name, (int)pvalue->m.pourcentage_constructionPresent);
   printf ("%s.m.pourcentage_valorisationPresent = %d\n", name, (int)pvalue->m.pourcentage_valorisationPresent);
   printf ("%s.m.pourcentage_contournementPresent = %d\n", name, (int)pvalue->m.pourcentage_contournementPresent);
   printf ("%s.m.en_preparationPresent = %d\n", name, (int)pvalue->m.en_preparationPresent);
   printf ("%s.m.est_percuPresent = %d\n", name, (int)pvalue->m.est_percuPresent);
   printf ("%s.m.attributs_specifiquesPresent = %d\n", name, (int)pvalue->m.attributs_specifiquesPresent);
   printf ("%s.m.perception_par_compagniePresent = %d\n", name, (int)pvalue->m.perception_par_compagniePresent);
   sprintf (namebuf, "%s.oid_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_connaissance);

   sprintf (namebuf, "%s.oid_camp_possesseur", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp_possesseur);

   if (pvalue->m.oid_objet_reelPresent) {
      sprintf (namebuf, "%s.oid_objet_reel", name);
      asn1Print_OID (namebuf, &pvalue->oid_objet_reel);
   }

   if (pvalue->m.pertinencePresent) {
      sprintf (namebuf, "%s.pertinence", name);
      rtPrintInteger (namebuf, pvalue->pertinence);
   }

   if (pvalue->m.localisationPresent) {
      sprintf (namebuf, "%s.localisation", name);
      asn1Print_Localisation (namebuf, &pvalue->localisation);
   }

   if (pvalue->m.pourcentage_constructionPresent) {
      sprintf (namebuf, "%s.pourcentage_construction", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_construction);
   }

   if (pvalue->m.pourcentage_valorisationPresent) {
      sprintf (namebuf, "%s.pourcentage_valorisation", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_valorisation);
   }

   if (pvalue->m.pourcentage_contournementPresent) {
      sprintf (namebuf, "%s.pourcentage_contournement", name);
      rtPrintInteger (namebuf, pvalue->pourcentage_contournement);
   }

   if (pvalue->m.en_preparationPresent) {
      sprintf (namebuf, "%s.en_preparation", name);
      rtPrintBoolean (namebuf, pvalue->en_preparation);
   }

   if (pvalue->m.est_percuPresent) {
      sprintf (namebuf, "%s.est_percu", name);
      rtPrintBoolean (namebuf, pvalue->est_percu);
   }

   if (pvalue->m.attributs_specifiquesPresent) {
      sprintf (namebuf, "%s.attributs_specifiques", name);
      asn1Print_AttrObjectSpecific (namebuf, &pvalue->attributs_specifiques);
   }

   if (pvalue->m.perception_par_compagniePresent) {
      sprintf (namebuf, "%s.perception_par_compagnie", name);
      asn1Print__SeqOfOID (namebuf, &pvalue->perception_par_compagnie);
   }

}

void ASN1C_MsgObjectKnowledgeUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectKnowledgeUpdate (name, &msgData);
}

void asn1Print_MsgObjectKnowledgeDestruction (ASN1ConstCharPtr name, ASN1T_MsgObjectKnowledgeDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_connaissance);

   sprintf (namebuf, "%s.oid_camp_possesseur", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp_possesseur);

}

void ASN1C_MsgObjectKnowledgeDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectKnowledgeDestruction (name, &msgData);
}

void asn1Print_MsgObjectKnowledgeCreation (ASN1ConstCharPtr name, ASN1T_MsgObjectKnowledgeCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_connaissance);

   sprintf (namebuf, "%s.oid_camp_possesseur", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp_possesseur);

   sprintf (namebuf, "%s.oid_objet_reel", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet_reel);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->type);

}

void ASN1C_MsgObjectKnowledgeCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgObjectKnowledgeCreation (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioOrder.h"

void asn1Print_EnumOrderErrorCode (ASN1ConstCharPtr name, ASN1T_EnumOrderErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_unit\n"); break;
      case 2: printf ("error_invalid_limit\n"); break;
      case 3: printf ("error_invalid_lima\n"); break;
      case 4: printf ("error_invalid_mission\n"); break;
      case 5: printf ("error_invalid_mission_parameters\n"); break;
      case 6: printf ("error_unit_cannot_receive_order\n"); break;
      case 7: printf ("error_invalid_order_conduite\n"); break;
      case 8: printf ("error_invalid_order_mission\n"); break;
      case 9: printf ("error_invalid_order_initial\n"); break;
      case 10: printf ("error_invalid_order_conduite_parameters\n"); break;
      case 11: printf ("error_unit_surrendered\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumOrderErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumOrderErrorCode (name, &msgData);
}

void asn1Print_EnumOrderState (ASN1ConstCharPtr name, ASN1T_EnumOrderState* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("started\n"); break;
      case 1: printf ("cancelled\n"); break;
      case 2: printf ("stopped\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumOrderState::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumOrderState (name, &msgData);
}

void asn1Print_MsgOrderManagement (ASN1ConstCharPtr name, ASN1T_MsgOrderManagement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.etat", name);
   asn1Print_EnumOrderState (namebuf, &pvalue->etat);

}

void ASN1C_MsgOrderManagement::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgOrderManagement (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioOrderConduite.h"

void asn1Print_DemandeOrderConduite_AttendreSePoster (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_AttendreSePoster::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_AttendreSePoster (name);
}

void asn1Print_DemandeOrderConduite_Poursuivre (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Poursuivre::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Poursuivre (name);
}

void asn1Print_DemandeOrderConduite_Decrocher (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Decrocher::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Decrocher (name);
}

void asn1Print_DemandeOrderConduite_Deboucher (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Deboucher::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Deboucher (name);
}

void asn1Print_DemandeOrderConduite_Pion_ExecuterTir (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Pion_ExecuterTir::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Pion_ExecuterTir (name);
}

void asn1Print_DemandeOrderConduite_Pion_Contourner (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Pion_Contourner::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Pion_Contourner (name);
}

void asn1Print_DemandeOrderConduite_Pion_ActiverObstacle (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Pion_ActiverObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Pion_ActiverObstacle (name);
}

void asn1Print_MsgAttenteOrdreConduite_ordres_conduite_element (ASN1ConstCharPtr name, ASN1T_MsgAttenteOrdreConduite_ordres_conduite_element* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.demande_order_conduite_attendre_se_poster", name);
         break;

      case 2:
         sprintf (namebuf, "%s.u.demande_order_conduite_poursuivre", name);
         break;

      case 3:
         sprintf (namebuf, "%s.u.demande_order_conduite_decrocher", name);
         break;

      case 4:
         sprintf (namebuf, "%s.u.demande_order_conduite_deboucher", name);
         break;

      case 5:
         sprintf (namebuf, "%s.u.demande_order_conduite_pion_executer_tir", name);
         break;

      case 6:
         sprintf (namebuf, "%s.u.demande_order_conduite_pion_contourner", name);
         break;

      case 7:
         sprintf (namebuf, "%s.u.demande_order_conduite_pion_activer_obstacle", name);
         break;

      default:;
   }
}

void ASN1C_MsgAttenteOrdreConduite_ordres_conduite_element::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAttenteOrdreConduite_ordres_conduite_element (name, &msgData);
}

void asn1Print__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (ASN1ConstCharPtr name, ASN1T__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_MsgAttenteOrdreConduite_ordres_conduite_element (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (name, &msgData);
}

void asn1Print_MsgAttenteOrdreConduite (ASN1ConstCharPtr name, ASN1T_MsgAttenteOrdreConduite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_OID (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.ordres_conduite", name);
   asn1Print__SeqOfMsgAttenteOrdreConduite_ordres_conduite_element (namebuf, &pvalue->ordres_conduite);

}

void ASN1C_MsgAttenteOrdreConduite::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAttenteOrdreConduite (name, &msgData);
}

void asn1Print_MsgAnnuleAttenteOrdreConduite (ASN1ConstCharPtr name, ASN1T_MsgAnnuleAttenteOrdreConduite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_OID (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

}

void ASN1C_MsgAnnuleAttenteOrdreConduite::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAnnuleAttenteOrdreConduite (name, &msgData);
}

void asn1Print_MsgOrderConduiteAck (ASN1ConstCharPtr name, ASN1T_MsgOrderConduiteAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_OID (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgOrderConduiteAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgOrderConduiteAck (name, &msgData);
}

void asn1Print_OrderConduite_MettreTenueNBC (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_MettreTenueNBC::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_MettreTenueNBC (name);
}

void asn1Print_OrderConduite_EnleverTenueNBC (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_EnleverTenueNBC::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_EnleverTenueNBC (name);
}

void asn1Print_OrderConduite_PasserEnSilenceRadio (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_PasserEnSilenceRadio::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_PasserEnSilenceRadio (name);
}

void asn1Print_OrderConduite_ArreterSilenceRadio (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_ArreterSilenceRadio::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ArreterSilenceRadio (name);
}

void asn1Print_OrderConduite_PasserEnSilenceRadar (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_PasserEnSilenceRadar::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_PasserEnSilenceRadar (name);
}

void asn1Print_OrderConduite_ArreterSilenceRadar (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_ArreterSilenceRadar::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ArreterSilenceRadar (name);
}

void asn1Print_OrderConduite_RecupererTransporteurs (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_RecupererTransporteurs::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_RecupererTransporteurs (name);
}

void asn1Print_OrderConduite_AttendreSePoster (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_AttendreSePoster::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_AttendreSePoster (name);
}

void asn1Print_OrderConduite_Poursuivre (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Poursuivre::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Poursuivre (name);
}

void asn1Print_OrderConduite_Interrompre (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Interrompre::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Interrompre (name);
}

void asn1Print_OrderConduite_ChangerReglesEngagement (ASN1ConstCharPtr name, ASN1T_OrderConduite_ChangerReglesEngagement* pvalue)
{
   asn1Print_EnumReglesEngagement (name, pvalue);
}

void ASN1C_OrderConduite_ChangerReglesEngagement::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ChangerReglesEngagement (name, &msgData);
}

void asn1Print_OrderConduite_Deboucher (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Deboucher::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Deboucher (name);
}

void asn1Print_OrderConduite_Decrocher (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Decrocher::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Decrocher (name);
}

void asn1Print_OrderConduite_AcquerirObjectif (ASN1ConstCharPtr name, ASN1T_OrderConduite_AcquerirObjectif* pvalue)
{
   asn1Print_Localisation (name, pvalue);
}

void ASN1C_OrderConduite_AcquerirObjectif::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_AcquerirObjectif (name, &msgData);
}

void asn1Print_OrderConduite_Brouiller (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Brouiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Brouiller (name);
}

void asn1Print_OrderConduite_ChangerPositionDebarquement (ASN1ConstCharPtr name, ASN1T_OrderConduite_ChangerPositionDebarquement* pvalue)
{
   asn1Print_Point (name, pvalue);
}

void ASN1C_OrderConduite_ChangerPositionDebarquement::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ChangerPositionDebarquement (name, &msgData);
}

void asn1Print_OrderConduite_Pion_ChangerDePosition (ASN1ConstCharPtr name, ASN1T_OrderConduite_Pion_ChangerDePosition* pvalue)
{
   asn1Print_Point (name, pvalue);
}

void ASN1C_OrderConduite_Pion_ChangerDePosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_ChangerDePosition (name, &msgData);
}

void asn1Print_OrderConduite_Pion_Contourner (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Pion_Contourner::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_Contourner (name);
}

void asn1Print_OrderConduite_Pion_EnvoyerVehicule (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Pion_EnvoyerVehicule::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_EnvoyerVehicule (name);
}

void asn1Print_OrderConduite_Pion_ActiverObstacle (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Pion_ActiverObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_ActiverObstacle (name);
}

void asn1Print_EnumTypeMunitionTirIndirect (ASN1ConstCharPtr name, ASN1T_EnumTypeMunitionTirIndirect* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("explosif\n"); break;
      case 1: printf ("grenade\n"); break;
      case 2: printf ("aced\n"); break;
      case 3: printf ("fumigene\n"); break;
      case 4: printf ("eclairant\n"); break;
      case 5: printf ("mine\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTypeMunitionTirIndirect::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTypeMunitionTirIndirect (name, &msgData);
}

void asn1Print_OrderConduite_Pion_AppliquerFeux (ASN1ConstCharPtr name, ASN1T_OrderConduite_Pion_AppliquerFeux* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.munitions", name);
   asn1Print_EnumTypeMunitionTirIndirect (namebuf, &pvalue->munitions);

   sprintf (namebuf, "%s.nb_IT", name);
   rtPrintInteger (namebuf, pvalue->nb_IT);

   sprintf (namebuf, "%s.cible", name);
   asn1Print_Point (namebuf, &pvalue->cible);

}

void ASN1C_OrderConduite_Pion_AppliquerFeux::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_AppliquerFeux (name, &msgData);
}

void asn1Print_OrderConduite_Pion_ExecuterTir (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Pion_ExecuterTir::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_ExecuterTir (name);
}

void asn1Print_OrderConduite_Pion_Emettre (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Pion_Emettre::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_Emettre (name);
}

void asn1Print_OrderConduite_Pion_StopperEmission (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderConduite_Pion_StopperEmission::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_StopperEmission (name);
}

void asn1Print_OrderConduite_Pion_RenforcerEnVSRAM (ASN1ConstCharPtr name, ASN1T_OrderConduite_Pion_RenforcerEnVSRAM* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion_a_renforcer", name);
   asn1Print_Agent (namebuf, &pvalue->pion_a_renforcer);

   sprintf (namebuf, "%s.nbr_ambulances", name);
   rtPrintInteger (namebuf, pvalue->nbr_ambulances);

}

void ASN1C_OrderConduite_Pion_RenforcerEnVSRAM::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_RenforcerEnVSRAM (name, &msgData);
}

void asn1Print_OrderConduite_Pion_TransfererVSRAM (ASN1ConstCharPtr name, ASN1T_OrderConduite_Pion_TransfererVSRAM* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion_renforce", name);
   asn1Print_Agent (namebuf, &pvalue->pion_renforce);

   sprintf (namebuf, "%s.pion_a_renforcer", name);
   asn1Print_Agent (namebuf, &pvalue->pion_a_renforcer);

   sprintf (namebuf, "%s.nbr_ambulances", name);
   rtPrintInteger (namebuf, pvalue->nbr_ambulances);

}

void ASN1C_OrderConduite_Pion_TransfererVSRAM::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_TransfererVSRAM (name, &msgData);
}

void asn1Print_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (ASN1ConstCharPtr name, ASN1T_OrderConduite_Pion_ReprendreAuxOrdresVSRAM* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion_renforce", name);
   asn1Print_Agent (namebuf, &pvalue->pion_renforce);

   sprintf (namebuf, "%s.nbr_ambulances", name);
   rtPrintInteger (namebuf, pvalue->nbr_ambulances);

}

void ASN1C_OrderConduite_Pion_ReprendreAuxOrdresVSRAM::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (name, &msgData);
}

void asn1Print_OrderConduite_ModifierTempsBordeeMaintenance (ASN1ConstCharPtr name, ASN1T_OrderConduite_ModifierTempsBordeeMaintenance* pvalue)
{
   asn1Print_EnumTempsBordee (name, pvalue);
}

void ASN1C_OrderConduite_ModifierTempsBordeeMaintenance::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ModifierTempsBordeeMaintenance (name, &msgData);
}

void asn1Print_OrderConduite_ModifierTempsBordeeSante (ASN1ConstCharPtr name, ASN1T_OrderConduite_ModifierTempsBordeeSante* pvalue)
{
   asn1Print_EnumTempsBordee (name, pvalue);
}

void ASN1C_OrderConduite_ModifierTempsBordeeSante::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ModifierTempsBordeeSante (name, &msgData);
}

void asn1Print_OrderConduite_ModifierPrioritesReparations (ASN1ConstCharPtr name, ASN1T_OrderConduite_ModifierPrioritesReparations* pvalue)
{
   asn1Print_MaintenancePriorites (name, pvalue);
}

void ASN1C_OrderConduite_ModifierPrioritesReparations::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ModifierPrioritesReparations (name, &msgData);
}

void asn1Print_OrderConduite_ModifierPrioritesBlesses (ASN1ConstCharPtr name, ASN1T_OrderConduite_ModifierPrioritesBlesses* pvalue)
{
   asn1Print_SantePriorites (name, pvalue);
}

void ASN1C_OrderConduite_ModifierPrioritesBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ModifierPrioritesBlesses (name, &msgData);
}

void asn1Print_OrderConduite_ModifierPrioritesTactiquesReparations (ASN1ConstCharPtr name, ASN1T_OrderConduite_ModifierPrioritesTactiquesReparations* pvalue)
{
   asn1Print_ListAutomate (name, pvalue);
}

void ASN1C_OrderConduite_ModifierPrioritesTactiquesReparations::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ModifierPrioritesTactiquesReparations (name, &msgData);
}

void asn1Print_OrderConduite_ModifierPrioritesTactiquesBlesses (ASN1ConstCharPtr name, ASN1T_OrderConduite_ModifierPrioritesTactiquesBlesses* pvalue)
{
   asn1Print_ListAutomate (name, pvalue);
}

void ASN1C_OrderConduite_ModifierPrioritesTactiquesBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_ModifierPrioritesTactiquesBlesses (name, &msgData);
}

void asn1Print_OrderConduite_Automate_RealiserVariantement (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_RealiserVariantement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement_original", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement_original);

   sprintf (namebuf, "%s.site_franchissement_variante", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement_variante);

}

void ASN1C_OrderConduite_Automate_RealiserVariantement::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_RealiserVariantement (name, &msgData);
}

void asn1Print_OrderConduite_Automate_DesequiperSiteFranchissement (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_DesequiperSiteFranchissement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement);

}

void ASN1C_OrderConduite_Automate_DesequiperSiteFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_DesequiperSiteFranchissement (name, &msgData);
}

void asn1Print_EnumActionReagirFaceAEni (ASN1ConstCharPtr name, ASN1T_EnumActionReagirFaceAEni* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("detruire_moyens\n"); break;
      case 1: printf ("defendre\n"); break;
      case 2: printf ("demonter\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumActionReagirFaceAEni::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumActionReagirFaceAEni (name, &msgData);
}

void asn1Print_OrderConduite_Automate_ReagirFaceAEni (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_ReagirFaceAEni* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement);

   sprintf (namebuf, "%s.action", name);
   asn1Print_EnumActionReagirFaceAEni (namebuf, &pvalue->action);

}

void ASN1C_OrderConduite_Automate_ReagirFaceAEni::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_ReagirFaceAEni (name, &msgData);
}

void asn1Print_OrderConduite_Automate_AffecterPionAObstacle (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_AffecterPionAObstacle* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion", name);
   asn1Print_Agent (namebuf, &pvalue->pion);

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_MissionGenObject (namebuf, &pvalue->obstacle);

}

void ASN1C_OrderConduite_Automate_AffecterPionAObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_AffecterPionAObstacle (name, &msgData);
}

void asn1Print_OrderConduite_Automate_ReconnaitreZoneImplantation (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_ReconnaitreZoneImplantation* pvalue)
{
   asn1Print_Point (name, pvalue);
}

void ASN1C_OrderConduite_Automate_ReconnaitreZoneImplantation::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_ReconnaitreZoneImplantation (name, &msgData);
}

void asn1Print_EnumTC2GererMaterielAvantDeplacement (ASN1ConstCharPtr name, ASN1T_EnumTC2GererMaterielAvantDeplacement* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("deborder_materiels_vers_bld\n"); break;
      case 1: printf ("detruire_materiels_en_reparation\n"); break;
      case 2: printf ("reparer_materiels_sur_place\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTC2GererMaterielAvantDeplacement::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTC2GererMaterielAvantDeplacement (name, &msgData);
}

void asn1Print_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement* pvalue)
{
   asn1Print_EnumTC2GererMaterielAvantDeplacement (name, pvalue);
}

void ASN1C_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (name, &msgData);
}

void asn1Print_OrderConduite_Automate_ActiverObstacle (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_ActiverObstacle* pvalue)
{
   asn1Print_KnowledgeObject (name, pvalue);
}

void ASN1C_OrderConduite_Automate_ActiverObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_ActiverObstacle (name, &msgData);
}

void asn1Print_OrderConduite_Automate_TransfererRenforts (ASN1ConstCharPtr name, ASN1T_OrderConduite_Automate_TransfererRenforts* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pion_a_transferer", name);
   asn1Print_Agent (namebuf, &pvalue->pion_a_transferer);

   sprintf (namebuf, "%s.automate_a_renforcer", name);
   asn1Print_Automate (namebuf, &pvalue->automate_a_renforcer);

}

void ASN1C_OrderConduite_Automate_TransfererRenforts::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderConduite_Automate_TransfererRenforts (name, &msgData);
}

void asn1Print_MsgOrderConduite_order_conduite (ASN1ConstCharPtr name, ASN1T_MsgOrderConduite_order_conduite* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.order_conduite_mettre_tenue_nbc", name);
         break;

      case 2:
         sprintf (namebuf, "%s.u.order_conduite_enlever_tenue_nbc", name);
         break;

      case 3:
         sprintf (namebuf, "%s.u.order_conduite_passer_en_silence_radio", name);
         break;

      case 4:
         sprintf (namebuf, "%s.u.order_conduite_arreter_silence_radio", name);
         break;

      case 5:
         sprintf (namebuf, "%s.u.order_conduite_passer_en_silence_radar", name);
         break;

      case 6:
         sprintf (namebuf, "%s.u.order_conduite_arreter_silence_radar", name);
         break;

      case 7:
         sprintf (namebuf, "%s.u.order_conduite_recuperer_transporteurs", name);
         break;

      case 8:
         sprintf (namebuf, "%s.u.order_conduite_attendre_se_poster", name);
         break;

      case 9:
         sprintf (namebuf, "%s.u.order_conduite_poursuivre", name);
         break;

      case 10:
         sprintf (namebuf, "%s.u.order_conduite_interrompre", name);
         break;

      case 11:
         sprintf (namebuf, "%s.u.order_conduite_changer_regles_engagement", name);
         asn1Print_OrderConduite_ChangerReglesEngagement (namebuf, &pvalue->u.order_conduite_changer_regles_engagement);
         break;

      case 12:
         sprintf (namebuf, "%s.u.order_conduite_deboucher", name);
         break;

      case 13:
         sprintf (namebuf, "%s.u.order_conduite_decrocher", name);
         break;

      case 14:
         sprintf (namebuf, "%s.u.order_conduite_acquerir_objectif", name);
         asn1Print_OrderConduite_AcquerirObjectif (namebuf, pvalue->u.order_conduite_acquerir_objectif);
         break;

      case 15:
         sprintf (namebuf, "%s.u.order_conduite_brouiller", name);
         break;

      case 16:
         sprintf (namebuf, "%s.u.order_conduite_changer_position_debarquement", name);
         asn1Print_OrderConduite_ChangerPositionDebarquement (namebuf, pvalue->u.order_conduite_changer_position_debarquement);
         break;

      case 17:
         sprintf (namebuf, "%s.u.order_conduite_pion_changer_de_position", name);
         asn1Print_OrderConduite_Pion_ChangerDePosition (namebuf, pvalue->u.order_conduite_pion_changer_de_position);
         break;

      case 18:
         sprintf (namebuf, "%s.u.order_conduite_pion_contourner", name);
         break;

      case 19:
         sprintf (namebuf, "%s.u.order_conduite_pion_envoyer_vehicule", name);
         break;

      case 20:
         sprintf (namebuf, "%s.u.order_conduite_pion_activer_obstacle", name);
         break;

      case 21:
         sprintf (namebuf, "%s.u.order_conduite_pion_appliquer_feux", name);
         asn1Print_OrderConduite_Pion_AppliquerFeux (namebuf, pvalue->u.order_conduite_pion_appliquer_feux);
         break;

      case 22:
         sprintf (namebuf, "%s.u.order_conduite_pion_executer_tir", name);
         break;

      case 23:
         sprintf (namebuf, "%s.u.order_conduite_pion_emettre", name);
         break;

      case 24:
         sprintf (namebuf, "%s.u.order_conduite_pion_stopper_emission", name);
         break;

      case 25:
         sprintf (namebuf, "%s.u.order_conduite_pion_renforcer_en_vs_ram", name);
         asn1Print_OrderConduite_Pion_RenforcerEnVSRAM (namebuf, pvalue->u.order_conduite_pion_renforcer_en_vs_ram);
         break;

      case 26:
         sprintf (namebuf, "%s.u.order_conduite_pion_transferer_vs_ram", name);
         asn1Print_OrderConduite_Pion_TransfererVSRAM (namebuf, pvalue->u.order_conduite_pion_transferer_vs_ram);
         break;

      case 27:
         sprintf (namebuf, "%s.u.order_conduite_pion_reprendre_aux_ordres_vs_ram", name);
         asn1Print_OrderConduite_Pion_ReprendreAuxOrdresVSRAM (namebuf, pvalue->u.order_conduite_pion_reprendre_aux_ordres_vs_ram);
         break;

      case 28:
         sprintf (namebuf, "%s.u.order_conduite_modifier_temps_bordee_maintenance", name);
         asn1Print_OrderConduite_ModifierTempsBordeeMaintenance (namebuf, &pvalue->u.order_conduite_modifier_temps_bordee_maintenance);
         break;

      case 29:
         sprintf (namebuf, "%s.u.order_conduite_modifier_temps_bordee_sante", name);
         asn1Print_OrderConduite_ModifierTempsBordeeSante (namebuf, &pvalue->u.order_conduite_modifier_temps_bordee_sante);
         break;

      case 30:
         sprintf (namebuf, "%s.u.order_conduite_modifier_priorites_reparations", name);
         asn1Print_OrderConduite_ModifierPrioritesReparations (namebuf, pvalue->u.order_conduite_modifier_priorites_reparations);
         break;

      case 31:
         sprintf (namebuf, "%s.u.order_conduite_modifier_priorites_blesses", name);
         asn1Print_OrderConduite_ModifierPrioritesBlesses (namebuf, pvalue->u.order_conduite_modifier_priorites_blesses);
         break;

      case 32:
         sprintf (namebuf, "%s.u.order_conduite_modifier_priorites_tactiques_reparations", name);
         asn1Print_OrderConduite_ModifierPrioritesTactiquesReparations (namebuf, pvalue->u.order_conduite_modifier_priorites_tactiques_reparations);
         break;

      case 33:
         sprintf (namebuf, "%s.u.order_conduite_modifier_priorites_tactiques_blesses", name);
         asn1Print_OrderConduite_ModifierPrioritesTactiquesBlesses (namebuf, pvalue->u.order_conduite_modifier_priorites_tactiques_blesses);
         break;

      case 34:
         sprintf (namebuf, "%s.u.order_conduite_automate_realiser_variantement", name);
         asn1Print_OrderConduite_Automate_RealiserVariantement (namebuf, pvalue->u.order_conduite_automate_realiser_variantement);
         break;

      case 35:
         sprintf (namebuf, "%s.u.order_conduite_automate_desequiper_site_franchissement", name);
         asn1Print_OrderConduite_Automate_DesequiperSiteFranchissement (namebuf, pvalue->u.order_conduite_automate_desequiper_site_franchissement);
         break;

      case 36:
         sprintf (namebuf, "%s.u.order_conduite_automate_reagir_face_a_eni", name);
         asn1Print_OrderConduite_Automate_ReagirFaceAEni (namebuf, pvalue->u.order_conduite_automate_reagir_face_a_eni);
         break;

      case 37:
         sprintf (namebuf, "%s.u.order_conduite_automate_affecter_pion_a_obstacle", name);
         asn1Print_OrderConduite_Automate_AffecterPionAObstacle (namebuf, pvalue->u.order_conduite_automate_affecter_pion_a_obstacle);
         break;

      case 38:
         sprintf (namebuf, "%s.u.order_conduite_automate_reconnaitre_zone_implantation", name);
         asn1Print_OrderConduite_Automate_ReconnaitreZoneImplantation (namebuf, pvalue->u.order_conduite_automate_reconnaitre_zone_implantation);
         break;

      case 39:
         sprintf (namebuf, "%s.u.order_conduite_automate_tc2_gerer_materiel_avant_deplacement", name);
         asn1Print_OrderConduite_Automate_TC2_GererMaterielAvantDeplacement (namebuf, &pvalue->u.order_conduite_automate_tc2_gerer_materiel_avant_deplacement);
         break;

      case 40:
         sprintf (namebuf, "%s.u.order_conduite_automate_activer_obstacle", name);
         asn1Print_OrderConduite_Automate_ActiverObstacle (namebuf, &pvalue->u.order_conduite_automate_activer_obstacle);
         break;

      case 41:
         sprintf (namebuf, "%s.u.order_conduite_automate_transferer_renforts", name);
         asn1Print_OrderConduite_Automate_TransfererRenforts (namebuf, pvalue->u.order_conduite_automate_transferer_renforts);
         break;

      default:;
   }
}

void ASN1C_MsgOrderConduite_order_conduite::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgOrderConduite_order_conduite (name, &msgData);
}

void asn1Print_MsgOrderConduite (ASN1ConstCharPtr name, ASN1T_MsgOrderConduite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_OID (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.order_conduite", name);
   asn1Print_MsgOrderConduite_order_conduite (namebuf, &pvalue->order_conduite);

}

void ASN1C_MsgOrderConduite::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgOrderConduite (name, &msgData);
}

void asn1Print_DemandeOrderConduite_Pion_AppliquerFeux (ASN1ConstCharPtr name)
{
}

void ASN1C_DemandeOrderConduite_Pion_AppliquerFeux::Print (ASN1ConstCharPtr name)

{
   asn1Print_DemandeOrderConduite_Pion_AppliquerFeux (name);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_ABC.h"

void asn1Print_Mission_Pion_ABC_ReconnaitreAxe (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ReconnaitreAxe* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_ABC_ReconnaitreAxe::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ReconnaitreAxe (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Soutenir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Soutenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_soutenir", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_soutenir);

}

void ASN1C_Mission_Pion_ABC_Soutenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Soutenir (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Couvrir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Couvrir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position", name);
   asn1Print_Point (namebuf, &pvalue->position);

   sprintf (namebuf, "%s.unites_a_couvrir", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_couvrir);

}

void ASN1C_Mission_Pion_ABC_Couvrir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Couvrir (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_FlancGarder (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_FlancGarder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

   sprintf (namebuf, "%s.unites_a_couvrir", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_couvrir);

}

void ASN1C_Mission_Pion_ABC_FlancGarder::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_FlancGarder (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Reduire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Reduire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_reduire", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->unite_a_reduire);

}

void ASN1C_Mission_Pion_ABC_Reduire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Reduire (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_appuyer", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_appuyer);

}

void ASN1C_Mission_Pion_ABC_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Appuyer (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Fixer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Fixer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_fixer", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->unite_a_fixer);

}

void ASN1C_Mission_Pion_ABC_Fixer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Fixer (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_a_renseigner", name);
   asn1Print_Point (namebuf, &pvalue->point_a_renseigner);

}

void ASN1C_Mission_Pion_ABC_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_ControlerZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ControlerZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_ABC_ControlerZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ControlerZone (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position", name);
   asn1Print_Point (namebuf, &pvalue->position);

}

void ASN1C_Mission_Pion_ABC_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Surveiller (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Barrer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Barrer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Point (namebuf, &pvalue->position_installation);

}

void ASN1C_Mission_Pion_ABC_Barrer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Barrer (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Attaquer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Attaquer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire_assaut", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire_assaut);

}

void ASN1C_Mission_Pion_ABC_Attaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Attaquer (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_ReconnaitrePoint (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ReconnaitrePoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_a_reconnaitre", name);
   asn1Print_Point (namebuf, &pvalue->point_a_reconnaitre);

}

void ASN1C_Mission_Pion_ABC_ReconnaitrePoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ReconnaitrePoint (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Eclairer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Eclairer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_ABC_Eclairer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Eclairer (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Jalonner (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Jalonner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_ABC_Jalonner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Jalonner (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_ContreAttaquer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ContreAttaquer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire_assaut", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire_assaut);

}

void ASN1C_Mission_Pion_ABC_ContreAttaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ContreAttaquer (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_SemparerZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_SemparerZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_prendre", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_prendre);

}

void ASN1C_Mission_Pion_ABC_SemparerZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_SemparerZone (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_ReleverUnite (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ReleverUnite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_relever", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_relever);

}

void ASN1C_Mission_Pion_ABC_ReleverUnite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ReleverUnite (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_ArmerPIA (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ArmerPIA* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pia", name);
   asn1Print_Point (namebuf, &pvalue->pia);

}

void ASN1C_Mission_Pion_ABC_ArmerPIA::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ArmerPIA (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_OuvrirItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_OuvrirItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_ABC_OuvrirItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_OuvrirItineraire (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_Freiner (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_Freiner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_ABC_Freiner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_Freiner (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_EscorterUnConvoi (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_EscorterUnConvoi* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.convoi_a_escorter", name);
   asn1Print_Agent (namebuf, &pvalue->convoi_a_escorter);

}

void ASN1C_Mission_Pion_ABC_EscorterUnConvoi::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_EscorterUnConvoi (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_ArmerPointDeControle (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_ArmerPointDeControle* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_de_controle", name);
   asn1Print_Point (namebuf, &pvalue->point_de_controle);

}

void ASN1C_Mission_Pion_ABC_ArmerPointDeControle::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_ArmerPointDeControle (name, &msgData);
}

void asn1Print_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ABC_OrganiserAccueilColonneRefugies* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Point (namebuf, &pvalue->position_installation);

}

void ASN1C_Mission_Pion_ABC_OrganiserAccueilColonneRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_ALAT.h"

void asn1Print_EnumMissionALAT_PorteeAction (ASN1ConstCharPtr name, ASN1T_EnumMissionALAT_PorteeAction* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("courte_portee\n"); break;
      case 1: printf ("moyenne_portee\n"); break;
      case 2: printf ("longue_portee\n"); break;
      case 3: printf ("sans_munitions\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumMissionALAT_PorteeAction::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumMissionALAT_PorteeAction (name, &msgData);
}

void asn1Print_EnumMissionALAT_AmbianceMission (ASN1ConstCharPtr name, ASN1T_EnumMissionALAT_AmbianceMission* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("aa\n"); break;
      case 1: printf ("as\n"); break;
      case 2: printf ("polyvalent\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumMissionALAT_AmbianceMission::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumMissionALAT_AmbianceMission (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_EvacuationSanitaire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_EvacuationSanitaire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.zone_extraction", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_extraction);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

}

void ASN1C_Mission_Pion_ALAT_EvacuationSanitaire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_EvacuationSanitaire (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.point_dislocation", name);
   asn1Print_Point (namebuf, &pvalue->point_dislocation);

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Localisation (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_ReconnaitreContourEnnemi (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_ReconnaitreContourEnnemi* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_ReconnaitreContourEnnemi::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_ReconnaitreContourEnnemi (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_DetruireNeutraliserDansZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_DetruireNeutraliserDansZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.point_dislocation", name);
   asn1Print_Point (namebuf, &pvalue->point_dislocation);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

   sprintf (namebuf, "%s.neutraliser", name);
   rtPrintBoolean (namebuf, pvalue->neutraliser);

}

void ASN1C_Mission_Pion_ALAT_DetruireNeutraliserDansZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_DetruireNeutraliserDansZone (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_DetruireAeromobile (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_DetruireAeromobile* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_detruire", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->unite_a_detruire);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_DetruireAeromobile::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_DetruireAeromobile (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Freiner (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Freiner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Freiner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Freiner (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Jalonner (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Jalonner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Jalonner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Jalonner (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Escorter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Escorter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_escorter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_escorter);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Escorter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Escorter (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Heliporter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Heliporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_heliporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_heliporter);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.attendre_unite", name);
   rtPrintBoolean (namebuf, pvalue->attendre_unite);

   sprintf (namebuf, "%s.avec_materiel", name);
   rtPrintBoolean (namebuf, pvalue->avec_materiel);

}

void ASN1C_Mission_Pion_ALAT_Heliporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Heliporter (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.position_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->position_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

}

void ASN1C_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Helitransporter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Helitransporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_helitransporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_helitransporter);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.avec_materiel", name);
   rtPrintBoolean (namebuf, pvalue->avec_materiel);

}

void ASN1C_Mission_Pion_ALAT_Helitransporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Helitransporter (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_secourir", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_secourir);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

}

void ASN1C_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_IMEX (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_IMEX* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_appuyer", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_appuyer);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

}

void ASN1C_Mission_Pion_ALAT_IMEX::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_IMEX (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Eclairer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Eclairer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Eclairer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Eclairer (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Surveiller (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_AppuyerDirectAuContact (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_AppuyerDirectAuContact* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.unites_a_appuyer", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_appuyer);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_AppuyerDirectAuContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_AppuyerDirectAuContact (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Couvrir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Couvrir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.unites_a_couvrir", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_couvrir);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Couvrir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Couvrir (name, &msgData);
}

void asn1Print_Mission_Pion_ALAT_Attaquer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ALAT_Attaquer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.cibles_prioritaires", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->cibles_prioritaires);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.plots_ravitaillement", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->plots_ravitaillement);

   sprintf (namebuf, "%s.ravitaillement_debut_mission", name);
   rtPrintBoolean (namebuf, pvalue->ravitaillement_debut_mission);

   sprintf (namebuf, "%s.portee_action", name);
   asn1Print_EnumMissionALAT_PorteeAction (namebuf, &pvalue->portee_action);

   sprintf (namebuf, "%s.ambiance_mission", name);
   asn1Print_EnumMissionALAT_AmbianceMission (namebuf, &pvalue->ambiance_mission);

}

void ASN1C_Mission_Pion_ALAT_Attaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ALAT_Attaquer (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_ASA.h"

void asn1Print_Mission_Pion_ASA_DefendreSite (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_DefendreSite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site", name);
   asn1Print_Polygon (namebuf, &pvalue->site);

}

void ASN1C_Mission_Pion_ASA_DefendreSite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_DefendreSite (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_DefendreSiteAPartirPosition (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_DefendreSiteAPartirPosition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site", name);
   asn1Print_Polygon (namebuf, &pvalue->site);

   sprintf (namebuf, "%s.point_de_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_deploiement);

}

void ASN1C_Mission_Pion_ASA_DefendreSiteAPartirPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_DefendreSiteAPartirPosition (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_DefendreZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_DefendreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_ASA_DefendreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_DefendreZone (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_DefendreZoneAPartirPosition (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_DefendreZoneAPartirPosition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.point_de_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_deploiement);

}

void ASN1C_Mission_Pion_ASA_DefendreZoneAPartirPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_DefendreZoneAPartirPosition (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_de_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_deploiement);

}

void ASN1C_Mission_Pion_ASA_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_Surveiller (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_DefendreUnites (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_DefendreUnites* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites);

}

void ASN1C_Mission_Pion_ASA_DefendreUnites::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_DefendreUnites (name, &msgData);
}

void asn1Print_EnumModeDeploiementSectionMistral (ASN1ConstCharPtr name, ASN1T_EnumModeDeploiementSectionMistral* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("omnidirectionnel\n"); break;
      case 1: printf ("directionnel\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumModeDeploiementSectionMistral::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumModeDeploiementSectionMistral (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_MISTRAL_DefendreSite (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreSite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site", name);
   asn1Print_Polygon (namebuf, &pvalue->site);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiementSectionMistral (namebuf, &pvalue->mode_deploiement);

}

void ASN1C_Mission_Pion_ASA_MISTRAL_DefendreSite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_MISTRAL_DefendreSite (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site", name);
   asn1Print_Polygon (namebuf, &pvalue->site);

   sprintf (namebuf, "%s.point_de_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_deploiement);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiementSectionMistral (namebuf, &pvalue->mode_deploiement);

}

void ASN1C_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_MISTRAL_DefendreZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiementSectionMistral (namebuf, &pvalue->mode_deploiement);

}

void ASN1C_Mission_Pion_ASA_MISTRAL_DefendreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_MISTRAL_DefendreZone (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

   sprintf (namebuf, "%s.point_de_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_deploiement);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiementSectionMistral (namebuf, &pvalue->mode_deploiement);

}

void ASN1C_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition (name, &msgData);
}

void asn1Print_Mission_Pion_ASA_MISTRAL_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASA_MISTRAL_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_de_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_deploiement);

   sprintf (namebuf, "%s.mode_deploiement", name);
   asn1Print_EnumModeDeploiementSectionMistral (namebuf, &pvalue->mode_deploiement);

}

void ASN1C_Mission_Pion_ASA_MISTRAL_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASA_MISTRAL_Surveiller (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_ASS.h"

void asn1Print_Mission_Pion_ASS_AssurerMiseEnOeuvre (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_AssurerMiseEnOeuvre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_implantation", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->zone_implantation);

   sprintf (namebuf, "%s.presence_contre_batterie", name);
   rtPrintBoolean (namebuf, pvalue->presence_contre_batterie);

}

void ASN1C_Mission_Pion_ASS_AssurerMiseEnOeuvre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_AssurerMiseEnOeuvre (name, &msgData);
}

void asn1Print_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_implantation", name);
   asn1Print_Point (namebuf, &pvalue->position_implantation);

   sprintf (namebuf, "%s.presence_contre_batterie", name);
   rtPrintBoolean (namebuf, pvalue->presence_contre_batterie);

}

void ASN1C_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition (name, &msgData);
}

void asn1Print_Mission_Pion_ASS_ReconnaitreZoneDeploiement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_ReconnaitreZoneDeploiement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_ASS_ReconnaitreZoneDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_ReconnaitreZoneDeploiement (name, &msgData);
}

void asn1Print_Mission_Pion_ASS_AcquerirLanceursEni (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_AcquerirLanceursEni* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zones_a_observer", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones_a_observer);

   sprintf (namebuf, "%s.zone_implantation", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->zone_implantation);

   sprintf (namebuf, "%s.menance_roem", name);
   rtPrintBoolean (namebuf, pvalue->menance_roem);

}

void ASN1C_Mission_Pion_ASS_AcquerirLanceursEni::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_AcquerirLanceursEni (name, &msgData);
}

void asn1Print_Mission_Pion_ASS_EO_AcquerirObjectifs (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_EO_AcquerirObjectifs* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_observer", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_observer);

   sprintf (namebuf, "%s.unite_a_appuyer", name);
   asn1Print_Automate (namebuf, &pvalue->unite_a_appuyer);

   sprintf (namebuf, "%s.categories", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->categories);

}

void ASN1C_Mission_Pion_ASS_EO_AcquerirObjectifs::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_EO_AcquerirObjectifs (name, &msgData);
}

void asn1Print_Mission_Pion_ASS_EOP_AcquerirObjectifs (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_EOP_AcquerirObjectifs* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_observer", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_observer);

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Point (namebuf, &pvalue->position_installation);

   sprintf (namebuf, "%s.position_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->position_debarquement);

}

void ASN1C_Mission_Pion_ASS_EOP_AcquerirObjectifs::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_EOP_AcquerirObjectifs (name, &msgData);
}

void asn1Print_Mission_Pion_ASS_RATAC_AcquerirObjectifs (ASN1ConstCharPtr name, ASN1T_Mission_Pion_ASS_RATAC_AcquerirObjectifs* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_observer", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_observer);

   sprintf (namebuf, "%s.categories", name);
   asn1Print_NatureAtlas (namebuf, &pvalue->categories);

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_ASS_RATAC_AcquerirObjectifs::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_ASS_RATAC_AcquerirObjectifs (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_GEN.h"

void asn1Print_EnumTypeFosseAC (ASN1ConstCharPtr name, ASN1T_EnumTypeFosseAC* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("simple\n"); break;
      case 1: printf ("compose\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTypeFosseAC::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTypeFosseAC (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserFosseAC (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserFosseAC* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Line (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumTypeFosseAC (namebuf, &pvalue->type);

}

void ASN1C_Mission_Pion_GEN_RealiserFosseAC::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserFosseAC (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserAbattisMine (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserAbattisMine* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.urgence", name);
   asn1Print_EnumMissionGenUrgence (namebuf, &pvalue->urgence);

   sprintf (namebuf, "%s.preliminaire", name);
   asn1Print_EnumMissionGenSousTypeObstacle (namebuf, &pvalue->preliminaire);

}

void ASN1C_Mission_Pion_GEN_RealiserAbattisMine::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserAbattisMine (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserPointMine (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserPointMine* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_RealiserPointMine::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserPointMine (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserBarricade (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserBarricade* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.urgence", name);
   asn1Print_EnumMissionGenUrgence (namebuf, &pvalue->urgence);

}

void ASN1C_Mission_Pion_GEN_RealiserBarricade::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserBarricade (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserEboulement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserEboulement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.preliminaire", name);
   asn1Print_EnumMissionGenSousTypeObstacle (namebuf, &pvalue->preliminaire);

}

void ASN1C_Mission_Pion_GEN_RealiserEboulement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserEboulement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserBouchonMine (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserBouchonMine* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.urgence", name);
   asn1Print_EnumMissionGenUrgence (namebuf, &pvalue->urgence);

}

void ASN1C_Mission_Pion_GEN_RealiserBouchonMine::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserBouchonMine (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DetruireRoute (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DetruireRoute* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.preliminaire", name);
   asn1Print_EnumMissionGenSousTypeObstacle (namebuf, &pvalue->preliminaire);

}

void ASN1C_Mission_Pion_GEN_DetruireRoute::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DetruireRoute (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DetruirePont (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DetruirePont* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.preliminaire", name);
   asn1Print_EnumMissionGenSousTypeObstacle (namebuf, &pvalue->preliminaire);

}

void ASN1C_Mission_Pion_GEN_DetruirePont::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DetruirePont (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_SecuriserItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_SecuriserItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_GEN_SecuriserItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_SecuriserItineraire (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DegagerAbattisMine (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DegagerAbattisMine* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_DegagerAbattisMine::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DegagerAbattisMine (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DegagerEboulement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DegagerEboulement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_DegagerEboulement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DegagerEboulement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DegagerRues (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DegagerRues* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_DegagerRues::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DegagerRues (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ComblerEntonnoir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ComblerEntonnoir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_ComblerEntonnoir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ComblerEntonnoir (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ComblerFosseAC (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ComblerFosseAC* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_ComblerFosseAC::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ComblerFosseAC (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_CreerContournement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_CreerContournement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_CreerContournement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_CreerContournement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserZoneMineeLineaire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserZoneMineeLineaire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Polygon (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.densite", name);
   rtPrintReal (namebuf, pvalue->densite);

}

void ASN1C_Mission_Pion_GEN_RealiserZoneMineeLineaire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserZoneMineeLineaire (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_OuvrirTrouee (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_OuvrirTrouee* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_OuvrirTrouee::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_OuvrirTrouee (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_Renforcer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_Renforcer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.lieu_renforcement", name);
   asn1Print_Point (namebuf, &pvalue->lieu_renforcement);

   sprintf (namebuf, "%s.unite", name);
   asn1Print_Agent (namebuf, &pvalue->unite);

}

void ASN1C_Mission_Pion_GEN_Renforcer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_Renforcer (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_FranchirEntonnoir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_FranchirEntonnoir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_FranchirEntonnoir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_FranchirEntonnoir (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_FranchirFosseAC (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_FranchirFosseAC* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_FranchirFosseAC::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_FranchirFosseAC (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserZoneMineeParDispersion (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserZoneMineeParDispersion* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Polygon (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.densite", name);
   rtPrintReal (namebuf, pvalue->densite);

}

void ASN1C_Mission_Pion_GEN_RealiserZoneMineeParDispersion::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserZoneMineeParDispersion (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserPostesTir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserPostesTir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_objet", name);
   asn1Print_Point (namebuf, &pvalue->pos_objet);

   sprintf (namebuf, "%s.oid_objet_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet_planifie);

}

void ASN1C_Mission_Pion_GEN_RealiserPostesTir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserPostesTir (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserTravauxProtection (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserTravauxProtection* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_objet", name);
   asn1Print_Point (namebuf, &pvalue->pos_objet);

   sprintf (namebuf, "%s.oid_objet_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet_planifie);

}

void ASN1C_Mission_Pion_GEN_RealiserTravauxProtection::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserTravauxProtection (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RetablirItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RetablirItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_GEN_RetablirItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RetablirItineraire (name, &msgData);
}

void asn1Print_EnumGenTypePontage (ASN1ConstCharPtr name, ASN1T_EnumGenTypePontage* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("continu\n"); break;
      case 1: printf ("discontinu\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumGenTypePontage::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumGenTypePontage (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_EquiperExploiter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_EquiperExploiter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement);

   sprintf (namebuf, "%s.oid_objet_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet_planifie);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.type_pontage", name);
   asn1Print_EnumGenTypePontage (namebuf, &pvalue->type_pontage);

}

void ASN1C_Mission_Pion_GEN_EquiperExploiter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_EquiperExploiter (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ExecuterVariantement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ExecuterVariantement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement);

   sprintf (namebuf, "%s.oid_objet_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_objet_planifie);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.type_pontage", name);
   asn1Print_EnumGenTypePontage (namebuf, &pvalue->type_pontage);

}

void ASN1C_Mission_Pion_GEN_ExecuterVariantement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ExecuterVariantement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ReconnaitreSiteFranchissement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ReconnaitreSiteFranchissement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement);

}

void ASN1C_Mission_Pion_GEN_ReconnaitreSiteFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ReconnaitreSiteFranchissement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ReconnaitreItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ReconnaitreItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_GEN_ReconnaitreItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ReconnaitreItineraire (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DeminerSiteFranchissement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DeminerSiteFranchissement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_franchissement", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_franchissement);

}

void ASN1C_Mission_Pion_GEN_DeminerSiteFranchissement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DeminerSiteFranchissement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ReconnaitreZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ReconnaitreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Localisation (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_GEN_ReconnaitreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ReconnaitreZone (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_CreerPlateForme (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_CreerPlateForme* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_CreerPlateForme::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_CreerPlateForme (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_CreerPiste (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_CreerPiste* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Line (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_CreerPiste::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_CreerPiste (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_CreerAirePoser (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_CreerAirePoser* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_CreerAirePoser::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_CreerAirePoser (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_NeutraliserEnginsExplosifs (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_NeutraliserEnginsExplosifs* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_NeutraliserEnginsExplosifs::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_NeutraliserEnginsExplosifs (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ActiverObstacle (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ActiverObstacle* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.obstacle", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->obstacle);

}

void ASN1C_Mission_Pion_GEN_ActiverObstacle::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ActiverObstacle (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_AmeliorerMobilite (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_AmeliorerMobilite* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_GEN_AmeliorerMobilite::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_AmeliorerMobilite (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserAireLogistique (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserAireLogistique* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->position_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_RealiserAireLogistique::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserAireLogistique (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_DepolluerZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_DepolluerZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Localisation (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_GEN_DepolluerZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_DepolluerZone (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("aire_poser\n"); break;
      case 1: printf ("terrain_largage\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_AmenagerTerrainPoser (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pos_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->pos_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

   sprintf (namebuf, "%s.type_objet", name);
   asn1Print_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (namebuf, &pvalue->type_objet);

}

void ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_AmenagerTerrainPoser (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserPlateFormeDeploiement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserPlateFormeDeploiement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_obstacle", name);
   asn1Print_Point (namebuf, &pvalue->position_obstacle);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_RealiserPlateFormeDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserPlateFormeDeploiement (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_ReprendreMissionConstruction (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_ReprendreMissionConstruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.travaux", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->travaux);

}

void ASN1C_Mission_Pion_GEN_ReprendreMissionConstruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_ReprendreMissionConstruction (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserZonePoserHelicoptere (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserZonePoserHelicoptere* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_poser", name);
   asn1Print_Point (namebuf, &pvalue->zone_poser);

   sprintf (namebuf, "%s.oid_obstacle_planifie", name);
   asn1Print_OID (namebuf, &pvalue->oid_obstacle_planifie);

}

void ASN1C_Mission_Pion_GEN_RealiserZonePoserHelicoptere::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserZonePoserHelicoptere (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_AppuyerDebarquementTroupesGU* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_appui", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_appui);

}

void ASN1C_Mission_Pion_GEN_AppuyerDebarquementTroupesGU::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserCampPrisonniers (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserCampPrisonniers* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.camp", name);
   asn1Print_Polygon (namebuf, &pvalue->camp);

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

}

void ASN1C_Mission_Pion_GEN_RealiserCampPrisonniers::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserCampPrisonniers (name, &msgData);
}

void asn1Print_Mission_Pion_GEN_RealiserCampRefugies (ASN1ConstCharPtr name, ASN1T_Mission_Pion_GEN_RealiserCampRefugies* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.camp", name);
   asn1Print_Polygon (namebuf, &pvalue->camp);

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

}

void ASN1C_Mission_Pion_GEN_RealiserCampRefugies::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_GEN_RealiserCampRefugies (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_INF.h"

void asn1Print_Mission_Pion_INF_ReconnaitreAxe (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_ReconnaitreAxe* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_INF_ReconnaitreAxe::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_ReconnaitreAxe (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Couvrir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Couvrir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_couverture", name);
   asn1Print_Point (namebuf, &pvalue->point_couverture);

   sprintf (namebuf, "%s.cible", name);
   asn1Print_Agent (namebuf, &pvalue->cible);

}

void ASN1C_Mission_Pion_INF_Couvrir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Couvrir (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Reduire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Reduire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_reduire", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->unite_a_reduire);

}

void ASN1C_Mission_Pion_INF_Reduire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Reduire (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_appuyer", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_appuyer);

}

void ASN1C_Mission_Pion_INF_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Appuyer (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Fixer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Fixer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ennemi", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->ennemi);

}

void ASN1C_Mission_Pion_INF_Fixer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Fixer (name, &msgData);
}

void asn1Print_Mission_Pion_INF_ControlerSecteur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_ControlerSecteur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.secteur", name);
   asn1Print_Polygon (namebuf, &pvalue->secteur);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Pion_INF_ControlerSecteur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_ControlerSecteur (name, &msgData);
}

void asn1Print_Mission_Pion_INF_SurveillerSecteur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_SurveillerSecteur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Point (namebuf, &pvalue->position_installation);

}

void ASN1C_Mission_Pion_INF_SurveillerSecteur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_SurveillerSecteur (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Barrer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Barrer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_a_barrer", name);
   asn1Print_Point (namebuf, &pvalue->position_a_barrer);

}

void ASN1C_Mission_Pion_INF_Barrer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Barrer (name, &msgData);
}

void asn1Print_Mission_Pion_INF_ReconnaitrePoint (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_ReconnaitrePoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

   sprintf (namebuf, "%s.point_a_reconnaitre", name);
   asn1Print_Point (namebuf, &pvalue->point_a_reconnaitre);

}

void ASN1C_Mission_Pion_INF_ReconnaitrePoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_ReconnaitrePoint (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Eclairer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Eclairer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_INF_Eclairer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Eclairer (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Interdire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Interdire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_a_interdire", name);
   asn1Print_Point (namebuf, &pvalue->point_a_interdire);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Pion_INF_Interdire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Interdire (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Semparer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Semparer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objectif", name);
   asn1Print_Point (namebuf, &pvalue->objectif);

}

void ASN1C_Mission_Pion_INF_Semparer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Semparer (name, &msgData);
}

void asn1Print_Mission_Pion_INF_PrendrePreciserContact (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_PrendrePreciserContact* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ennemi", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->ennemi);

}

void ASN1C_Mission_Pion_INF_PrendrePreciserContact::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_PrendrePreciserContact (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Defendre (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Defendre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_a_defendre", name);
   asn1Print_Point (namebuf, &pvalue->point_a_defendre);

   sprintf (namebuf, "%s.preparer_terrain", name);
   rtPrintBoolean (namebuf, pvalue->preparer_terrain);

}

void ASN1C_Mission_Pion_INF_Defendre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Defendre (name, &msgData);
}

void asn1Print_Mission_Pion_INF_DetruireEmbuscade (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_DetruireEmbuscade* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_embuscade", name);
   asn1Print_Point (namebuf, &pvalue->position_embuscade);

   sprintf (namebuf, "%s.position_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->position_regroupement);

   sprintf (namebuf, "%s.ennemi", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->ennemi);

   sprintf (namebuf, "%s.nature_obstacle", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->nature_obstacle);

}

void ASN1C_Mission_Pion_INF_DetruireEmbuscade::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_DetruireEmbuscade (name, &msgData);
}

void asn1Print_Mission_Pion_INF_ContreAttaquer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_ContreAttaquer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ennemi", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->ennemi);

}

void ASN1C_Mission_Pion_INF_ContreAttaquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_ContreAttaquer (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Freiner (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Freiner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_INF_Freiner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Freiner (name, &msgData);
}

void asn1Print_Mission_Pion_INF_FlancGarder (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_FlancGarder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

   sprintf (namebuf, "%s.unite_a_flancgarder", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_flancgarder);

}

void ASN1C_Mission_Pion_INF_FlancGarder::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_FlancGarder (name, &msgData);
}

void asn1Print_Mission_Pion_INF_OrganiserUnCheckPoint (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_OrganiserUnCheckPoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_installation", name);
   asn1Print_Point (namebuf, &pvalue->point_installation);

}

void ASN1C_Mission_Pion_INF_OrganiserUnCheckPoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_OrganiserUnCheckPoint (name, &msgData);
}

void asn1Print_EnumMissionInfNatureObjectif (ASN1ConstCharPtr name, ASN1T_EnumMissionInfNatureObjectif* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("elements_terrain\n"); break;
      case 1: printf ("objets\n"); break;
      case 2: printf ("elements_mobiles\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumMissionInfNatureObjectif::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumMissionInfNatureObjectif (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Harceler (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Harceler* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.secteur", name);
   asn1Print_Polygon (namebuf, &pvalue->secteur);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.nature_objectif", name);
   asn1Print_EnumMissionInfNatureObjectif (namebuf, &pvalue->nature_objectif);

}

void ASN1C_Mission_Pion_INF_Harceler::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Harceler (name, &msgData);
}

void asn1Print_Mission_Pion_INF_DetruireParCoupDeMain (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_DetruireParCoupDeMain* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objectif", name);
   asn1Print_Point (namebuf, &pvalue->objectif);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

   sprintf (namebuf, "%s.heure_destruction", name);
   asn1Print_GDH (namebuf, &pvalue->heure_destruction);

   sprintf (namebuf, "%s.nature_destruction", name);
   asn1Print_EnumMissionInfNatureObjectif (namebuf, &pvalue->nature_destruction);

}

void ASN1C_Mission_Pion_INF_DetruireParCoupDeMain::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_DetruireParCoupDeMain (name, &msgData);
}

void asn1Print_Mission_Pion_INF_EscorterUnConvoi (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_EscorterUnConvoi* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.convoi_a_escorter", name);
   asn1Print_Agent (namebuf, &pvalue->convoi_a_escorter);

}

void ASN1C_Mission_Pion_INF_EscorterUnConvoi::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_EscorterUnConvoi (name, &msgData);
}

void asn1Print_Mission_Pion_INF_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_INF_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Soutenir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Soutenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_soutenir", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_soutenir);

}

void ASN1C_Mission_Pion_INF_Soutenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Soutenir (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Securiser (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Securiser* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_INF_Securiser::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Securiser (name, &msgData);
}

void asn1Print_Mission_Pion_INF_Recueillir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_Recueillir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_installation", name);
   asn1Print_Point (namebuf, &pvalue->position_installation);

   sprintf (namebuf, "%s.pia", name);
   asn1Print_Point (namebuf, &pvalue->pia);

}

void ASN1C_Mission_Pion_INF_Recueillir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_Recueillir (name, &msgData);
}

void asn1Print_Mission_Pion_INF_RepondreAAggression (ASN1ConstCharPtr name, ASN1T_Mission_Pion_INF_RepondreAAggression* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.aggresseur", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->aggresseur);

}

void ASN1C_Mission_Pion_INF_RepondreAAggression::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_INF_RepondreAAggression (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_LOG.h"

void asn1Print_Mission_Pion_LOG_SeDeployer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_SeDeployer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_LOG_SeDeployer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_SeDeployer (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_DistribuerMoyens (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_DistribuerMoyens* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_DistribuerMoyens::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_DistribuerMoyens (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_TrierBlesses (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_TrierBlesses* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_TrierBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_TrierBlesses (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_TraiterBlesses (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_TraiterBlesses* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_TraiterBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_TraiterBlesses (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_TrierEtTraiterBlesses (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_TrierEtTraiterBlesses* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_TrierEtTraiterBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_TrierEtTraiterBlesses (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_SoignerBlesses (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_SoignerBlesses* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_SoignerBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_SoignerBlesses (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_PrendreEnCompteReactionsMentales* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_PrendreEnCompteReactionsMentales::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_DecontaminerBlesses (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_DecontaminerBlesses* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_DecontaminerBlesses::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_DecontaminerBlesses (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_Reparer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_Reparer* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_Reparer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_Reparer (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_Evacuer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_Evacuer* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_Evacuer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_Evacuer (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_Convoyer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_Convoyer* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_Convoyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_Convoyer (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_DistribuerRessources (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_DistribuerRessources* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_DistribuerRessources::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_DistribuerRessources (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_ConstituerConvoi (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_ConstituerConvoi* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_ConstituerConvoi::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_ConstituerConvoi (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_Livrer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_Livrer* pvalue)
{
}

void ASN1C_Mission_Pion_LOG_Livrer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_Livrer (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_PreparerBascule (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_PreparerBascule* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.automate_pour_bascule", name);
   asn1Print_Automate (namebuf, &pvalue->automate_pour_bascule);

}

void ASN1C_Mission_Pion_LOG_PreparerBascule::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_PreparerBascule (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_AppuyerMouvement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_AppuyerMouvement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_appuyer", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_appuyer);

}

void ASN1C_Mission_Pion_LOG_AppuyerMouvement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_AppuyerMouvement (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_ReconnaitreItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_ReconnaitreItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire_log", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire_log);

}

void ASN1C_Mission_Pion_LOG_ReconnaitreItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_ReconnaitreItineraire (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_TransporterUniteChars (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_TransporterUniteChars* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_transporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_transporter);

   sprintf (namebuf, "%s.point_rendez_vous", name);
   asn1Print_Point (namebuf, &pvalue->point_rendez_vous);

   sprintf (namebuf, "%s.point_destination", name);
   asn1Print_Point (namebuf, &pvalue->point_destination);

}

void ASN1C_Mission_Pion_LOG_TransporterUniteChars::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_TransporterUniteChars (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_ReconnaitreZoneContaminee (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_ReconnaitreZoneContaminee* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_LOG_ReconnaitreZoneContaminee::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_ReconnaitreZoneContaminee (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_AppuyerMouvementDansZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_AppuyerMouvementDansZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_LOG_AppuyerMouvementDansZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_AppuyerMouvementDansZone (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pont_flottant", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->pont_flottant);

}

void ASN1C_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_BloquerZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_BloquerZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_LOG_BloquerZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_BloquerZone (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_ArmerPIA (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_ArmerPIA* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point", name);
   asn1Print_Point (namebuf, &pvalue->point);

}

void ASN1C_Mission_Pion_LOG_ArmerPIA::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_ArmerPIA (name, &msgData);
}

void asn1Print_Mission_Pion_LOG_Surveiller (ASN1ConstCharPtr name, ASN1T_Mission_Pion_LOG_Surveiller* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_LOG_Surveiller::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_LOG_Surveiller (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_Misc.h"

void asn1Print_Mission_Pion_Test_Heliporter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_Heliporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.agents", name);
   asn1Print_ListAgent (namebuf, &pvalue->agents);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

}

void ASN1C_Mission_Pion_Test_Heliporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_Heliporter (name, &msgData);
}

void asn1Print_Mission_Pion_Test_MoveTo_type_itineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_MoveTo_type_itineraire* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("movement\n"); break;
      case 1: printf ("recon\n"); break;
      case 2: printf ("infiltration\n"); break;
      case 3: printf ("assault\n"); break;
      case 4: printf ("retreat\n"); break;
      case 5: printf ("backup\n"); break;
      case 6: printf ("mine_clearance\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_Test_MoveTo_type_itineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_MoveTo_type_itineraire (name, &msgData);
}

void asn1Print_Mission_Pion_Test_MoveTo_verrouillage_vision (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_MoveTo_verrouillage_vision* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("rien\n"); break;
      case 1: printf ("point\n"); break;
      case 2: printf ("direction\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_Test_MoveTo_verrouillage_vision::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_MoveTo_verrouillage_vision (name, &msgData);
}

void asn1Print_Mission_Pion_Test_MoveTo (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_MoveTo* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

   sprintf (namebuf, "%s.type_itineraire", name);
   asn1Print_Mission_Pion_Test_MoveTo_type_itineraire (namebuf, &pvalue->type_itineraire);

   sprintf (namebuf, "%s.debarque", name);
   rtPrintBoolean (namebuf, pvalue->debarque);

   sprintf (namebuf, "%s.verrouillage_vision", name);
   asn1Print_Mission_Pion_Test_MoveTo_verrouillage_vision (namebuf, &pvalue->verrouillage_vision);

   sprintf (namebuf, "%s.vision_point", name);
   asn1Print_Point (namebuf, &pvalue->vision_point);

   sprintf (namebuf, "%s.vision_direction", name);
   asn1Print_Direction (namebuf, &pvalue->vision_direction);

}

void ASN1C_Mission_Pion_Test_MoveTo::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_MoveTo (name, &msgData);
}

void asn1Print_Mission_Pion_Test_CreateObject (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_CreateObject* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.forme", name);
   asn1Print_Localisation (namebuf, &pvalue->forme);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->type);

   sprintf (namebuf, "%s.param", name);
   rtPrintInteger (namebuf, pvalue->param);

}

void ASN1C_Mission_Pion_Test_CreateObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_CreateObject (name, &msgData);
}

void asn1Print_Mission_Pion_Test_DestroyObject (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_DestroyObject* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objet", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->objet);

}

void ASN1C_Mission_Pion_Test_DestroyObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_DestroyObject (name, &msgData);
}

void asn1Print_Mission_Pion_Test_CreateBypass (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_CreateBypass* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.objet", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->objet);

}

void ASN1C_Mission_Pion_Test_CreateBypass::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_CreateBypass (name, &msgData);
}

void asn1Print_Mission_Pion_Test_Fire_munitions (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_Fire_munitions* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("mun_obus_explosif\n"); break;
      case 1: printf ("mun_obus_grenade\n"); break;
      case 2: printf ("mun_obus_aced\n"); break;
      case 3: printf ("mun_obus_fumigene\n"); break;
      case 4: printf ("mun_obus_eclairant\n"); break;
      case 5: printf ("mun_obus_mine\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_Test_Fire_munitions::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_Fire_munitions (name, &msgData);
}

void asn1Print_Mission_Pion_Test_Fire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_Fire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point", name);
   asn1Print_Point (namebuf, &pvalue->point);

   sprintf (namebuf, "%s.tir_indirect", name);
   rtPrintBoolean (namebuf, pvalue->tir_indirect);

   sprintf (namebuf, "%s.munitions", name);
   asn1Print_Mission_Pion_Test_Fire_munitions (namebuf, &pvalue->munitions);

   sprintf (namebuf, "%s.nb_obus", name);
   rtPrintInteger (namebuf, pvalue->nb_obus);

   sprintf (namebuf, "%s.targets", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->targets);

}

void ASN1C_Mission_Pion_Test_Fire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_Fire (name, &msgData);
}

void asn1Print_Mission_Pion_Test_ChangePosture_posture (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_ChangePosture_posture* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("mouvement\n"); break;
      case 1: printf ("arret\n"); break;
      case 2: printf ("poste_reflexe\n"); break;
      case 3: printf ("poste\n"); break;
      case 4: printf ("poste_amenage\n"); break;
      case 5: printf ("poste_prepare_genie\n"); break;
      case 6: printf ("automatique\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_Test_ChangePosture_posture::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_ChangePosture_posture (name, &msgData);
}

void asn1Print_Mission_Pion_Test_ChangePosture (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_ChangePosture* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.posture", name);
   asn1Print_Mission_Pion_Test_ChangePosture_posture (namebuf, &pvalue->posture);

}

void ASN1C_Mission_Pion_Test_ChangePosture::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_ChangePosture (name, &msgData);
}

void asn1Print_Mission_Pion_Test_PathFind (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_PathFind* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.nb_pathfind", name);
   rtPrintInteger (namebuf, pvalue->nb_pathfind);

}

void ASN1C_Mission_Pion_Test_PathFind::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_PathFind (name, &msgData);
}

void asn1Print_Mission_Pion_Test_FindPosition_type_objectif (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_FindPosition_type_objectif* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("agent\n"); break;
      case 1: printf ("point\n"); break;
      case 2: printf ("rep_point\n"); break;
      case 3: printf ("objet\n"); break;
      case 4: printf ("zone\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_Test_FindPosition_type_objectif::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_FindPosition_type_objectif (name, &msgData);
}

void asn1Print_Mission_Pion_Test_FindPosition_type_operation (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_FindPosition_type_operation* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("see\n"); break;
      case 1: printf ("shoot\n"); break;
      case 2: printf ("add\n"); break;
      case 3: printf ("rem\n"); break;
      case 4: printf ("safety\n"); break;
      case 5: printf ("border\n"); break;
      case 6: printf ("appui\n"); break;
      case 7: printf ("support\n"); break;
      case 8: printf ("ambush\n"); break;
      case 9: printf ("random\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_Test_FindPosition_type_operation::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_FindPosition_type_operation (name, &msgData);
}

void asn1Print_Mission_Pion_Test_FindPosition (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_FindPosition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point", name);
   asn1Print_Point (namebuf, &pvalue->point);

   sprintf (namebuf, "%s.retreat", name);
   asn1Print_Point (namebuf, &pvalue->retreat);

   sprintf (namebuf, "%s.unite", name);
   asn1Print_ListAgent (namebuf, &pvalue->unite);

   sprintf (namebuf, "%s.type_objectif", name);
   asn1Print_Mission_Pion_Test_FindPosition_type_objectif (namebuf, &pvalue->type_objectif);

   sprintf (namebuf, "%s.type_operation", name);
   asn1Print_Mission_Pion_Test_FindPosition_type_operation (namebuf, &pvalue->type_operation);

   sprintf (namebuf, "%s.avoid", name);
   rtPrintBoolean (namebuf, pvalue->avoid);

   sprintf (namebuf, "%s.reco", name);
   rtPrintBoolean (namebuf, pvalue->reco);

   sprintf (namebuf, "%s.no_obstacle_avoid", name);
   rtPrintBoolean (namebuf, pvalue->no_obstacle_avoid);

   sprintf (namebuf, "%s.debordement", name);
   rtPrintBoolean (namebuf, pvalue->debordement);

   sprintf (namebuf, "%s.dec_points", name);
   rtPrintBoolean (namebuf, pvalue->dec_points);

   sprintf (namebuf, "%s.niveau_identification", name);
   asn1Print_EnumUnitIdentificationLevel (namebuf, &pvalue->niveau_identification);

   sprintf (namebuf, "%s.dgo", name);
   asn1Print_Direction (namebuf, &pvalue->dgo);

}

void ASN1C_Mission_Pion_Test_FindPosition::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_FindPosition (name, &msgData);
}

void asn1Print_Mission_Pion_Test_Reinforce (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Test_Reinforce* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite", name);
   asn1Print_Agent (namebuf, &pvalue->unite);

   sprintf (namebuf, "%s.renforce", name);
   rtPrintBoolean (namebuf, pvalue->renforce);

}

void ASN1C_Mission_Pion_Test_Reinforce::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Test_Reinforce (name, &msgData);
}

void asn1Print_Mission_Pion_PlastronEnnemi_type (ASN1ConstCharPtr name, ASN1T_Mission_Pion_PlastronEnnemi_type* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("defense_statique\n"); break;
      case 1: printf ("defense_dynamique\n"); break;
      case 2: printf ("esquive\n"); break;
      case 3: printf ("reco_offensive\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_Mission_Pion_PlastronEnnemi_type::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_PlastronEnnemi_type (name, &msgData);
}

void asn1Print_Mission_Pion_PlastronEnnemi (ASN1ConstCharPtr name, ASN1T_Mission_Pion_PlastronEnnemi* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

   sprintf (namebuf, "%s.point_mission", name);
   asn1Print_Point (namebuf, &pvalue->point_mission);

   sprintf (namebuf, "%s.type", name);
   asn1Print_Mission_Pion_PlastronEnnemi_type (namebuf, &pvalue->type);

}

void ASN1C_Mission_Pion_PlastronEnnemi::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_PlastronEnnemi (name, &msgData);
}

void asn1Print_Mission_Pion_FaireMouvement (ASN1ConstCharPtr name, ASN1T_Mission_Pion_FaireMouvement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_FaireMouvement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_FaireMouvement (name, &msgData);
}

void asn1Print_Mission_Pion_Suivre (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Suivre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_suivre", name);
   asn1Print_Agent (namebuf, &pvalue->unite_a_suivre);

}

void ASN1C_Mission_Pion_Suivre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Suivre (name, &msgData);
}

void asn1Print_Mission_Pion_SeFaireDecontaminer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_SeFaireDecontaminer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_arrivee", name);
   asn1Print_Point (namebuf, &pvalue->point_arrivee);

   sprintf (namebuf, "%s.site_decontamination", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_decontamination);

}

void ASN1C_Mission_Pion_SeFaireDecontaminer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_SeFaireDecontaminer (name, &msgData);
}

void asn1Print_Mission_Pion_Franchir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Franchir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.pont_flottant", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->pont_flottant);

   sprintf (namebuf, "%s.point_arrivee", name);
   asn1Print_Point (namebuf, &pvalue->point_arrivee);

}

void ASN1C_Mission_Pion_Franchir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Franchir (name, &msgData);
}

void asn1Print_Mission_Pion_Decrocher (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Decrocher* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

}

void ASN1C_Mission_Pion_Decrocher::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Decrocher (name, &msgData);
}

void asn1Print_Mission_Pion_Stationner (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Stationner* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_attente", name);
   asn1Print_Point (namebuf, &pvalue->point_attente);

}

void ASN1C_Mission_Pion_Stationner::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Stationner (name, &msgData);
}

void asn1Print_Mission_Pion_SeFaireTransporter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_SeFaireTransporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

}

void ASN1C_Mission_Pion_SeFaireTransporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_SeFaireTransporter (name, &msgData);
}

void asn1Print_Mission_Pion_Generique (ASN1ConstCharPtr name, ASN1T_Mission_Pion_Generique* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zones", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones);

   sprintf (namebuf, "%s.points", name);
   asn1Print_ListPoint (namebuf, &pvalue->points);

   sprintf (namebuf, "%s.itineraires", name);
   asn1Print_ListItineraire (namebuf, &pvalue->itineraires);

   sprintf (namebuf, "%s.unites", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites);

   sprintf (namebuf, "%s.automates", name);
   asn1Print_ListAutomate (namebuf, &pvalue->automates);

   sprintf (namebuf, "%s.connaissances_agents", name);
   asn1Print_ListKnowledgeAgent (namebuf, &pvalue->connaissances_agents);

   sprintf (namebuf, "%s.connaissances_objets", name);
   asn1Print_ListKnowledgeObject (namebuf, &pvalue->connaissances_objets);

}

void ASN1C_Mission_Pion_Generique::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_Generique (name, &msgData);
}

void asn1Print_Mission_Pion_MILICE_Provoquer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_MILICE_Provoquer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unite_a_provoquer", name);
   asn1Print_KnowledgeAgent (namebuf, &pvalue->unite_a_provoquer);

}

void ASN1C_Mission_Pion_MILICE_Provoquer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_MILICE_Provoquer (name, &msgData);
}

void asn1Print_Mission_Pion_MILICE_PrendreEtTenir (ASN1ConstCharPtr name, ASN1T_Mission_Pion_MILICE_PrendreEtTenir* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_a_prendre", name);
   asn1Print_Point (namebuf, &pvalue->point_a_prendre);

}

void ASN1C_Mission_Pion_MILICE_PrendreEtTenir::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_MILICE_PrendreEtTenir (name, &msgData);
}

void asn1Print_Mission_Pion_MILICE_DetruireEmbuscade (ASN1ConstCharPtr name, ASN1T_Mission_Pion_MILICE_DetruireEmbuscade* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_embuscade", name);
   asn1Print_Point (namebuf, &pvalue->position_embuscade);

   sprintf (namebuf, "%s.position_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->position_regroupement);

   sprintf (namebuf, "%s.nature_obstacle", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->nature_obstacle);

}

void ASN1C_Mission_Pion_MILICE_DetruireEmbuscade::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_MILICE_DetruireEmbuscade (name, &msgData);
}

void asn1Print_Mission_Pion_JOINT_MARINE_Transporter (ASN1ConstCharPtr name, ASN1T_Mission_Pion_JOINT_MARINE_Transporter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unites_a_transporter", name);
   asn1Print_ListAgent (namebuf, &pvalue->unites_a_transporter);

   sprintf (namebuf, "%s.point_debarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_debarquement);

   sprintf (namebuf, "%s.point_embarquement", name);
   asn1Print_Point (namebuf, &pvalue->point_embarquement);

   sprintf (namebuf, "%s.avec_materiel", name);
   rtPrintBoolean (namebuf, pvalue->avec_materiel);

}

void ASN1C_Mission_Pion_JOINT_MARINE_Transporter::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_JOINT_MARINE_Transporter (name, &msgData);
}

void asn1Print_Mission_Pion_JOINT_AIR_EffectuerRaid (ASN1ConstCharPtr name, ASN1T_Mission_Pion_JOINT_AIR_EffectuerRaid* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_JOINT_AIR_EffectuerRaid::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_JOINT_AIR_EffectuerRaid (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_NBC.h"

void asn1Print_Mission_Pion_NBC_AnimerUnPlotDeDecontamination (ASN1ConstCharPtr name, ASN1T_Mission_Pion_NBC_AnimerUnPlotDeDecontamination* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_site_decontamination", name);
   asn1Print_Point (namebuf, &pvalue->position_site_decontamination);

}

void ASN1C_Mission_Pion_NBC_AnimerUnPlotDeDecontamination::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_NBC_AnimerUnPlotDeDecontamination (name, &msgData);
}

void asn1Print_Mission_Pion_NBC_ReconnaitreItineraire (ASN1ConstCharPtr name, ASN1T_Mission_Pion_NBC_ReconnaitreItineraire* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_Mission_Pion_NBC_ReconnaitreItineraire::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_NBC_ReconnaitreItineraire (name, &msgData);
}

void asn1Print_Mission_Pion_NBC_ReconnaitreZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_NBC_ReconnaitreZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_NBC_ReconnaitreZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_NBC_ReconnaitreZone (name, &msgData);
}

void asn1Print_Mission_Pion_NBC_DecontaminerZone (ASN1ConstCharPtr name, ASN1T_Mission_Pion_NBC_DecontaminerZone* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_NBC_DecontaminerZone::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_NBC_DecontaminerZone (name, &msgData);
}

void asn1Print_Mission_Pion_NBC_ReconnaitreUnSiteROTA (ASN1ConstCharPtr name, ASN1T_Mission_Pion_NBC_ReconnaitreUnSiteROTA* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.site_ROTA", name);
   asn1Print_KnowledgeObject (namebuf, &pvalue->site_ROTA);

}

void ASN1C_Mission_Pion_NBC_ReconnaitreUnSiteROTA::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_NBC_ReconnaitreUnSiteROTA (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_RENS.h"

void asn1Print_Mission_Pion_RENS_ROHUM_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROHUM_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone_a_observer", name);
   asn1Print_Polygon (namebuf, &pvalue->zone_a_observer);

}

void ASN1C_Mission_Pion_RENS_ROHUM_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROHUM_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROHUM_SExfiltrer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROHUM_SExfiltrer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.point_de_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_de_regroupement);

}

void ASN1C_Mission_Pion_RENS_ROHUM_SExfiltrer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROHUM_SExfiltrer (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROHUM_OrienterGuider (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROHUM_OrienterGuider* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ami", name);
   asn1Print_Agent (namebuf, &pvalue->ami);

}

void ASN1C_Mission_Pion_RENS_ROHUM_OrienterGuider::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROHUM_OrienterGuider (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROEM_Appuyer (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROEM_Appuyer* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

   sprintf (namebuf, "%s.point_regroupement", name);
   asn1Print_Point (namebuf, &pvalue->point_regroupement);

}

void ASN1C_Mission_Pion_RENS_ROEM_Appuyer::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROEM_Appuyer (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROEM_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROEM_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zone", name);
   asn1Print_Polygon (namebuf, &pvalue->zone);

}

void ASN1C_Mission_Pion_RENS_ROEM_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROEM_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROEM_MettreEnOeuvre (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROEM_MettreEnOeuvre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_RENS_ROEM_MettreEnOeuvre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROEM_MettreEnOeuvre (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_RADINT_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_RADINT_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.zones_de_recherche", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones_de_recherche);

}

void ASN1C_Mission_Pion_RENS_RADINT_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_RADINT_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_RADINT_MettreEnOeuvre (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_RADINT_MettreEnOeuvre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_RENS_RADINT_MettreEnOeuvre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_RADINT_MettreEnOeuvre (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROIM_MettreEnOeuvre (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROIM_MettreEnOeuvre* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_RENS_ROIM_MettreEnOeuvre::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROIM_MettreEnOeuvre (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ficelle_de_vole", name);
   asn1Print_Itineraire (namebuf, &pvalue->ficelle_de_vole);

}

void ASN1C_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur (name, &msgData);
}

void asn1Print_Mission_Pion_RENS_ROIM_CL289_RenseignerSur (ASN1ConstCharPtr name, ASN1T_Mission_Pion_RENS_ROIM_CL289_RenseignerSur* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ficelle_de_vole", name);
   asn1Print_Itineraire (namebuf, &pvalue->ficelle_de_vole);

   sprintf (namebuf, "%s.zones_de_recherche", name);
   asn1Print_ListPolygon (namebuf, &pvalue->zones_de_recherche);

}

void ASN1C_Mission_Pion_RENS_ROIM_CL289_RenseignerSur::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_RENS_ROIM_CL289_RenseignerSur (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionMission_TRANS.h"

void asn1Print_Mission_Pion_TRANS_EtablirGererLiaison (ASN1ConstCharPtr name, ASN1T_Mission_Pion_TRANS_EtablirGererLiaison* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.position_deploiement", name);
   asn1Print_Point (namebuf, &pvalue->position_deploiement);

}

void ASN1C_Mission_Pion_TRANS_EtablirGererLiaison::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion_TRANS_EtablirGererLiaison (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPionOrder.h"

void asn1Print_Mission_Pion (ASN1ConstCharPtr name, ASN1T_Mission_Pion* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.mission_pion_alat_evacuation_sanitaire", name);
         asn1Print_Mission_Pion_ALAT_EvacuationSanitaire (namebuf, pvalue->u.mission_pion_alat_evacuation_sanitaire);
         break;

      case 2:
         sprintf (namebuf, "%s.u.mission_pion_alat_reconnaitre_dans_la_profondeur", name);
         asn1Print_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur (namebuf, pvalue->u.mission_pion_alat_reconnaitre_dans_la_profondeur);
         break;

      case 3:
         sprintf (namebuf, "%s.u.mission_pion_alat_reconnaitre_contour_ennemi", name);
         asn1Print_Mission_Pion_ALAT_ReconnaitreContourEnnemi (namebuf, pvalue->u.mission_pion_alat_reconnaitre_contour_ennemi);
         break;

      case 4:
         sprintf (namebuf, "%s.u.mission_pion_alat_detruire_neutraliser_dans_zone", name);
         asn1Print_Mission_Pion_ALAT_DetruireNeutraliserDansZone (namebuf, pvalue->u.mission_pion_alat_detruire_neutraliser_dans_zone);
         break;

      case 5:
         sprintf (namebuf, "%s.u.mission_pion_alat_detruire_aeromobile", name);
         asn1Print_Mission_Pion_ALAT_DetruireAeromobile (namebuf, pvalue->u.mission_pion_alat_detruire_aeromobile);
         break;

      case 6:
         sprintf (namebuf, "%s.u.mission_pion_alat_freiner", name);
         asn1Print_Mission_Pion_ALAT_Freiner (namebuf, pvalue->u.mission_pion_alat_freiner);
         break;

      case 7:
         sprintf (namebuf, "%s.u.mission_pion_alat_jalonner", name);
         asn1Print_Mission_Pion_ALAT_Jalonner (namebuf, pvalue->u.mission_pion_alat_jalonner);
         break;

      case 8:
         sprintf (namebuf, "%s.u.mission_pion_alat_escorter", name);
         asn1Print_Mission_Pion_ALAT_Escorter (namebuf, pvalue->u.mission_pion_alat_escorter);
         break;

      case 9:
         sprintf (namebuf, "%s.u.mission_pion_alat_heliporter", name);
         asn1Print_Mission_Pion_ALAT_Heliporter (namebuf, pvalue->u.mission_pion_alat_heliporter);
         break;

      case 10:
         sprintf (namebuf, "%s.u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement", name);
         asn1Print_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement (namebuf, pvalue->u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement);
         break;

      case 11:
         sprintf (namebuf, "%s.u.mission_pion_alat_helitransporter", name);
         asn1Print_Mission_Pion_ALAT_Helitransporter (namebuf, pvalue->u.mission_pion_alat_helitransporter);
         break;

      case 12:
         sprintf (namebuf, "%s.u.mission_pion_alat_effectuer_recherche_et_sauvetage", name);
         asn1Print_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage (namebuf, pvalue->u.mission_pion_alat_effectuer_recherche_et_sauvetage);
         break;

      case 13:
         sprintf (namebuf, "%s.u.mission_pion_alat_imex", name);
         asn1Print_Mission_Pion_ALAT_IMEX (namebuf, pvalue->u.mission_pion_alat_imex);
         break;

      case 14:
         sprintf (namebuf, "%s.u.mission_pion_alat_eclairer", name);
         asn1Print_Mission_Pion_ALAT_Eclairer (namebuf, pvalue->u.mission_pion_alat_eclairer);
         break;

      case 15:
         sprintf (namebuf, "%s.u.mission_pion_alat_surveiller", name);
         asn1Print_Mission_Pion_ALAT_Surveiller (namebuf, pvalue->u.mission_pion_alat_surveiller);
         break;

      case 16:
         sprintf (namebuf, "%s.u.mission_pion_alat_appuyer_direct_au_contact", name);
         asn1Print_Mission_Pion_ALAT_AppuyerDirectAuContact (namebuf, pvalue->u.mission_pion_alat_appuyer_direct_au_contact);
         break;

      case 17:
         sprintf (namebuf, "%s.u.mission_pion_alat_couvrir", name);
         asn1Print_Mission_Pion_ALAT_Couvrir (namebuf, pvalue->u.mission_pion_alat_couvrir);
         break;

      case 18:
         sprintf (namebuf, "%s.u.mission_pion_alat_attaquer", name);
         asn1Print_Mission_Pion_ALAT_Attaquer (namebuf, pvalue->u.mission_pion_alat_attaquer);
         break;

      case 19:
         sprintf (namebuf, "%s.u.mission_pion_asa_defendre_site", name);
         asn1Print_Mission_Pion_ASA_DefendreSite (namebuf, pvalue->u.mission_pion_asa_defendre_site);
         break;

      case 20:
         sprintf (namebuf, "%s.u.mission_pion_asa_defendre_site_a_partir_position", name);
         asn1Print_Mission_Pion_ASA_DefendreSiteAPartirPosition (namebuf, pvalue->u.mission_pion_asa_defendre_site_a_partir_position);
         break;

      case 21:
         sprintf (namebuf, "%s.u.mission_pion_asa_defendre_zone", name);
         asn1Print_Mission_Pion_ASA_DefendreZone (namebuf, pvalue->u.mission_pion_asa_defendre_zone);
         break;

      case 22:
         sprintf (namebuf, "%s.u.mission_pion_asa_defendre_zone_a_partir_position", name);
         asn1Print_Mission_Pion_ASA_DefendreZoneAPartirPosition (namebuf, pvalue->u.mission_pion_asa_defendre_zone_a_partir_position);
         break;

      case 23:
         sprintf (namebuf, "%s.u.mission_pion_asa_surveiller", name);
         asn1Print_Mission_Pion_ASA_Surveiller (namebuf, pvalue->u.mission_pion_asa_surveiller);
         break;

      case 24:
         sprintf (namebuf, "%s.u.mission_pion_asa_defendre_unites", name);
         asn1Print_Mission_Pion_ASA_DefendreUnites (namebuf, pvalue->u.mission_pion_asa_defendre_unites);
         break;

      case 25:
         sprintf (namebuf, "%s.u.mission_pion_asa_mistral_defendre_site", name);
         asn1Print_Mission_Pion_ASA_MISTRAL_DefendreSite (namebuf, pvalue->u.mission_pion_asa_mistral_defendre_site);
         break;

      case 26:
         sprintf (namebuf, "%s.u.mission_pion_asa_mistral_defendre_site_a_partir_position", name);
         asn1Print_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition (namebuf, pvalue->u.mission_pion_asa_mistral_defendre_site_a_partir_position);
         break;

      case 27:
         sprintf (namebuf, "%s.u.mission_pion_asa_mistral_defendre_zone", name);
         asn1Print_Mission_Pion_ASA_MISTRAL_DefendreZone (namebuf, pvalue->u.mission_pion_asa_mistral_defendre_zone);
         break;

      case 28:
         sprintf (namebuf, "%s.u.mission_pion_asa_mistral_defendre_zone_a_partir_position", name);
         asn1Print_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition (namebuf, pvalue->u.mission_pion_asa_mistral_defendre_zone_a_partir_position);
         break;

      case 29:
         sprintf (namebuf, "%s.u.mission_pion_asa_mistral_surveiller", name);
         asn1Print_Mission_Pion_ASA_MISTRAL_Surveiller (namebuf, pvalue->u.mission_pion_asa_mistral_surveiller);
         break;

      case 30:
         sprintf (namebuf, "%s.u.mission_pion_ass_assurer_mise_en_oeuvre", name);
         asn1Print_Mission_Pion_ASS_AssurerMiseEnOeuvre (namebuf, pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre);
         break;

      case 31:
         sprintf (namebuf, "%s.u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position", name);
         asn1Print_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition (namebuf, pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position);
         break;

      case 32:
         sprintf (namebuf, "%s.u.mission_pion_ass_reconnaitre_zone_deploiement", name);
         asn1Print_Mission_Pion_ASS_ReconnaitreZoneDeploiement (namebuf, pvalue->u.mission_pion_ass_reconnaitre_zone_deploiement);
         break;

      case 33:
         sprintf (namebuf, "%s.u.mission_pion_ass_acquerir_lanceurs_eni", name);
         asn1Print_Mission_Pion_ASS_AcquerirLanceursEni (namebuf, pvalue->u.mission_pion_ass_acquerir_lanceurs_eni);
         break;

      case 34:
         sprintf (namebuf, "%s.u.mission_pion_ass_eo_acquerir_objectifs", name);
         asn1Print_Mission_Pion_ASS_EO_AcquerirObjectifs (namebuf, pvalue->u.mission_pion_ass_eo_acquerir_objectifs);
         break;

      case 35:
         sprintf (namebuf, "%s.u.mission_pion_ass_eop_acquerir_objectifs", name);
         asn1Print_Mission_Pion_ASS_EOP_AcquerirObjectifs (namebuf, pvalue->u.mission_pion_ass_eop_acquerir_objectifs);
         break;

      case 36:
         sprintf (namebuf, "%s.u.mission_pion_ass_ratac_acquerir_objectifs", name);
         asn1Print_Mission_Pion_ASS_RATAC_AcquerirObjectifs (namebuf, pvalue->u.mission_pion_ass_ratac_acquerir_objectifs);
         break;

      case 37:
         sprintf (namebuf, "%s.u.mission_pion_abc_reconnaitre_axe", name);
         asn1Print_Mission_Pion_ABC_ReconnaitreAxe (namebuf, pvalue->u.mission_pion_abc_reconnaitre_axe);
         break;

      case 38:
         sprintf (namebuf, "%s.u.mission_pion_abc_soutenir", name);
         asn1Print_Mission_Pion_ABC_Soutenir (namebuf, pvalue->u.mission_pion_abc_soutenir);
         break;

      case 39:
         sprintf (namebuf, "%s.u.mission_pion_abc_couvrir", name);
         asn1Print_Mission_Pion_ABC_Couvrir (namebuf, pvalue->u.mission_pion_abc_couvrir);
         break;

      case 40:
         sprintf (namebuf, "%s.u.mission_pion_abc_flanc_garder", name);
         asn1Print_Mission_Pion_ABC_FlancGarder (namebuf, pvalue->u.mission_pion_abc_flanc_garder);
         break;

      case 41:
         sprintf (namebuf, "%s.u.mission_pion_abc_reduire", name);
         asn1Print_Mission_Pion_ABC_Reduire (namebuf, pvalue->u.mission_pion_abc_reduire);
         break;

      case 42:
         sprintf (namebuf, "%s.u.mission_pion_abc_appuyer", name);
         asn1Print_Mission_Pion_ABC_Appuyer (namebuf, pvalue->u.mission_pion_abc_appuyer);
         break;

      case 43:
         sprintf (namebuf, "%s.u.mission_pion_abc_fixer", name);
         asn1Print_Mission_Pion_ABC_Fixer (namebuf, pvalue->u.mission_pion_abc_fixer);
         break;

      case 44:
         sprintf (namebuf, "%s.u.mission_pion_abc_renseigner_sur", name);
         asn1Print_Mission_Pion_ABC_RenseignerSur (namebuf, pvalue->u.mission_pion_abc_renseigner_sur);
         break;

      case 45:
         sprintf (namebuf, "%s.u.mission_pion_abc_controler_zone", name);
         asn1Print_Mission_Pion_ABC_ControlerZone (namebuf, pvalue->u.mission_pion_abc_controler_zone);
         break;

      case 46:
         sprintf (namebuf, "%s.u.mission_pion_abc_surveiller", name);
         asn1Print_Mission_Pion_ABC_Surveiller (namebuf, pvalue->u.mission_pion_abc_surveiller);
         break;

      case 47:
         sprintf (namebuf, "%s.u.mission_pion_abc_barrer", name);
         asn1Print_Mission_Pion_ABC_Barrer (namebuf, pvalue->u.mission_pion_abc_barrer);
         break;

      case 48:
         sprintf (namebuf, "%s.u.mission_pion_abc_attaquer", name);
         asn1Print_Mission_Pion_ABC_Attaquer (namebuf, pvalue->u.mission_pion_abc_attaquer);
         break;

      case 49:
         sprintf (namebuf, "%s.u.mission_pion_abc_reconnaitre_point", name);
         asn1Print_Mission_Pion_ABC_ReconnaitrePoint (namebuf, pvalue->u.mission_pion_abc_reconnaitre_point);
         break;

      case 50:
         sprintf (namebuf, "%s.u.mission_pion_abc_eclairer", name);
         asn1Print_Mission_Pion_ABC_Eclairer (namebuf, pvalue->u.mission_pion_abc_eclairer);
         break;

      case 51:
         sprintf (namebuf, "%s.u.mission_pion_abc_jalonner", name);
         asn1Print_Mission_Pion_ABC_Jalonner (namebuf, pvalue->u.mission_pion_abc_jalonner);
         break;

      case 52:
         sprintf (namebuf, "%s.u.mission_pion_abc_contre_attaquer", name);
         asn1Print_Mission_Pion_ABC_ContreAttaquer (namebuf, pvalue->u.mission_pion_abc_contre_attaquer);
         break;

      case 53:
         sprintf (namebuf, "%s.u.mission_pion_abc_semparer_zone", name);
         asn1Print_Mission_Pion_ABC_SemparerZone (namebuf, pvalue->u.mission_pion_abc_semparer_zone);
         break;

      case 54:
         sprintf (namebuf, "%s.u.mission_pion_abc_relever_unite", name);
         asn1Print_Mission_Pion_ABC_ReleverUnite (namebuf, pvalue->u.mission_pion_abc_relever_unite);
         break;

      case 55:
         sprintf (namebuf, "%s.u.mission_pion_abc_armer_pia", name);
         asn1Print_Mission_Pion_ABC_ArmerPIA (namebuf, pvalue->u.mission_pion_abc_armer_pia);
         break;

      case 56:
         sprintf (namebuf, "%s.u.mission_pion_abc_ouvrir_itineraire", name);
         asn1Print_Mission_Pion_ABC_OuvrirItineraire (namebuf, pvalue->u.mission_pion_abc_ouvrir_itineraire);
         break;

      case 57:
         sprintf (namebuf, "%s.u.mission_pion_abc_freiner", name);
         asn1Print_Mission_Pion_ABC_Freiner (namebuf, pvalue->u.mission_pion_abc_freiner);
         break;

      case 58:
         sprintf (namebuf, "%s.u.mission_pion_abc_escorter_un_convoi", name);
         asn1Print_Mission_Pion_ABC_EscorterUnConvoi (namebuf, pvalue->u.mission_pion_abc_escorter_un_convoi);
         break;

      case 59:
         sprintf (namebuf, "%s.u.mission_pion_abc_armer_point_de_controle", name);
         asn1Print_Mission_Pion_ABC_ArmerPointDeControle (namebuf, pvalue->u.mission_pion_abc_armer_point_de_controle);
         break;

      case 60:
         sprintf (namebuf, "%s.u.mission_pion_abc_organiser_accueil_colonne_refugies", name);
         asn1Print_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (namebuf, pvalue->u.mission_pion_abc_organiser_accueil_colonne_refugies);
         break;

      case 61:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_fosse_ac", name);
         asn1Print_Mission_Pion_GEN_RealiserFosseAC (namebuf, pvalue->u.mission_pion_gen_realiser_fosse_ac);
         break;

      case 62:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_abattis_mine", name);
         asn1Print_Mission_Pion_GEN_RealiserAbattisMine (namebuf, pvalue->u.mission_pion_gen_realiser_abattis_mine);
         break;

      case 63:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_point_mine", name);
         asn1Print_Mission_Pion_GEN_RealiserPointMine (namebuf, pvalue->u.mission_pion_gen_realiser_point_mine);
         break;

      case 64:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_barricade", name);
         asn1Print_Mission_Pion_GEN_RealiserBarricade (namebuf, pvalue->u.mission_pion_gen_realiser_barricade);
         break;

      case 65:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_eboulement", name);
         asn1Print_Mission_Pion_GEN_RealiserEboulement (namebuf, pvalue->u.mission_pion_gen_realiser_eboulement);
         break;

      case 66:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_bouchon_mine", name);
         asn1Print_Mission_Pion_GEN_RealiserBouchonMine (namebuf, pvalue->u.mission_pion_gen_realiser_bouchon_mine);
         break;

      case 67:
         sprintf (namebuf, "%s.u.mission_pion_gen_detruire_route", name);
         asn1Print_Mission_Pion_GEN_DetruireRoute (namebuf, pvalue->u.mission_pion_gen_detruire_route);
         break;

      case 68:
         sprintf (namebuf, "%s.u.mission_pion_gen_detruire_pont", name);
         asn1Print_Mission_Pion_GEN_DetruirePont (namebuf, pvalue->u.mission_pion_gen_detruire_pont);
         break;

      case 69:
         sprintf (namebuf, "%s.u.mission_pion_gen_securiser_itineraire", name);
         asn1Print_Mission_Pion_GEN_SecuriserItineraire (namebuf, pvalue->u.mission_pion_gen_securiser_itineraire);
         break;

      case 70:
         sprintf (namebuf, "%s.u.mission_pion_gen_degager_abattis_mine", name);
         asn1Print_Mission_Pion_GEN_DegagerAbattisMine (namebuf, pvalue->u.mission_pion_gen_degager_abattis_mine);
         break;

      case 71:
         sprintf (namebuf, "%s.u.mission_pion_gen_degager_eboulement", name);
         asn1Print_Mission_Pion_GEN_DegagerEboulement (namebuf, pvalue->u.mission_pion_gen_degager_eboulement);
         break;

      case 72:
         sprintf (namebuf, "%s.u.mission_pion_gen_degager_rues", name);
         asn1Print_Mission_Pion_GEN_DegagerRues (namebuf, pvalue->u.mission_pion_gen_degager_rues);
         break;

      case 73:
         sprintf (namebuf, "%s.u.mission_pion_gen_combler_entonnoir", name);
         asn1Print_Mission_Pion_GEN_ComblerEntonnoir (namebuf, pvalue->u.mission_pion_gen_combler_entonnoir);
         break;

      case 74:
         sprintf (namebuf, "%s.u.mission_pion_gen_combler_fosse_ac", name);
         asn1Print_Mission_Pion_GEN_ComblerFosseAC (namebuf, pvalue->u.mission_pion_gen_combler_fosse_ac);
         break;

      case 75:
         sprintf (namebuf, "%s.u.mission_pion_gen_creer_contournement", name);
         asn1Print_Mission_Pion_GEN_CreerContournement (namebuf, pvalue->u.mission_pion_gen_creer_contournement);
         break;

      case 76:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_zone_minee_lineaire", name);
         asn1Print_Mission_Pion_GEN_RealiserZoneMineeLineaire (namebuf, pvalue->u.mission_pion_gen_realiser_zone_minee_lineaire);
         break;

      case 77:
         sprintf (namebuf, "%s.u.mission_pion_gen_ouvrir_trouee", name);
         asn1Print_Mission_Pion_GEN_OuvrirTrouee (namebuf, pvalue->u.mission_pion_gen_ouvrir_trouee);
         break;

      case 78:
         sprintf (namebuf, "%s.u.mission_pion_gen_renforcer", name);
         asn1Print_Mission_Pion_GEN_Renforcer (namebuf, pvalue->u.mission_pion_gen_renforcer);
         break;

      case 79:
         sprintf (namebuf, "%s.u.mission_pion_gen_franchir_entonnoir", name);
         asn1Print_Mission_Pion_GEN_FranchirEntonnoir (namebuf, pvalue->u.mission_pion_gen_franchir_entonnoir);
         break;

      case 80:
         sprintf (namebuf, "%s.u.mission_pion_gen_franchir_fosse_ac", name);
         asn1Print_Mission_Pion_GEN_FranchirFosseAC (namebuf, pvalue->u.mission_pion_gen_franchir_fosse_ac);
         break;

      case 81:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_zone_minee_par_dispersion", name);
         asn1Print_Mission_Pion_GEN_RealiserZoneMineeParDispersion (namebuf, pvalue->u.mission_pion_gen_realiser_zone_minee_par_dispersion);
         break;

      case 82:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_postes_tir", name);
         asn1Print_Mission_Pion_GEN_RealiserPostesTir (namebuf, pvalue->u.mission_pion_gen_realiser_postes_tir);
         break;

      case 83:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_travaux_protection", name);
         asn1Print_Mission_Pion_GEN_RealiserTravauxProtection (namebuf, pvalue->u.mission_pion_gen_realiser_travaux_protection);
         break;

      case 84:
         sprintf (namebuf, "%s.u.mission_pion_gen_retablir_itineraire", name);
         asn1Print_Mission_Pion_GEN_RetablirItineraire (namebuf, pvalue->u.mission_pion_gen_retablir_itineraire);
         break;

      case 85:
         sprintf (namebuf, "%s.u.mission_pion_gen_equiper_exploiter", name);
         asn1Print_Mission_Pion_GEN_EquiperExploiter (namebuf, pvalue->u.mission_pion_gen_equiper_exploiter);
         break;

      case 86:
         sprintf (namebuf, "%s.u.mission_pion_gen_executer_variantement", name);
         asn1Print_Mission_Pion_GEN_ExecuterVariantement (namebuf, pvalue->u.mission_pion_gen_executer_variantement);
         break;

      case 87:
         sprintf (namebuf, "%s.u.mission_pion_gen_reconnaitre_site_franchissement", name);
         asn1Print_Mission_Pion_GEN_ReconnaitreSiteFranchissement (namebuf, pvalue->u.mission_pion_gen_reconnaitre_site_franchissement);
         break;

      case 88:
         sprintf (namebuf, "%s.u.mission_pion_gen_reconnaitre_itineraire", name);
         asn1Print_Mission_Pion_GEN_ReconnaitreItineraire (namebuf, pvalue->u.mission_pion_gen_reconnaitre_itineraire);
         break;

      case 89:
         sprintf (namebuf, "%s.u.mission_pion_gen_deminer_site_franchissement", name);
         asn1Print_Mission_Pion_GEN_DeminerSiteFranchissement (namebuf, pvalue->u.mission_pion_gen_deminer_site_franchissement);
         break;

      case 90:
         sprintf (namebuf, "%s.u.mission_pion_gen_reconnaitre_zone", name);
         asn1Print_Mission_Pion_GEN_ReconnaitreZone (namebuf, pvalue->u.mission_pion_gen_reconnaitre_zone);
         break;

      case 91:
         sprintf (namebuf, "%s.u.mission_pion_gen_creer_plate_forme", name);
         asn1Print_Mission_Pion_GEN_CreerPlateForme (namebuf, pvalue->u.mission_pion_gen_creer_plate_forme);
         break;

      case 92:
         sprintf (namebuf, "%s.u.mission_pion_gen_creer_piste", name);
         asn1Print_Mission_Pion_GEN_CreerPiste (namebuf, pvalue->u.mission_pion_gen_creer_piste);
         break;

      case 93:
         sprintf (namebuf, "%s.u.mission_pion_gen_creer_aire_poser", name);
         asn1Print_Mission_Pion_GEN_CreerAirePoser (namebuf, pvalue->u.mission_pion_gen_creer_aire_poser);
         break;

      case 94:
         sprintf (namebuf, "%s.u.mission_pion_gen_neutraliser_engins_explosifs", name);
         asn1Print_Mission_Pion_GEN_NeutraliserEnginsExplosifs (namebuf, pvalue->u.mission_pion_gen_neutraliser_engins_explosifs);
         break;

      case 95:
         sprintf (namebuf, "%s.u.mission_pion_gen_activer_obstacle", name);
         asn1Print_Mission_Pion_GEN_ActiverObstacle (namebuf, pvalue->u.mission_pion_gen_activer_obstacle);
         break;

      case 96:
         sprintf (namebuf, "%s.u.mission_pion_gen_ameliorer_mobilite", name);
         asn1Print_Mission_Pion_GEN_AmeliorerMobilite (namebuf, pvalue->u.mission_pion_gen_ameliorer_mobilite);
         break;

      case 97:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_aire_logistique", name);
         asn1Print_Mission_Pion_GEN_RealiserAireLogistique (namebuf, pvalue->u.mission_pion_gen_realiser_aire_logistique);
         break;

      case 98:
         sprintf (namebuf, "%s.u.mission_pion_gen_depolluer_zone", name);
         asn1Print_Mission_Pion_GEN_DepolluerZone (namebuf, pvalue->u.mission_pion_gen_depolluer_zone);
         break;

      case 99:
         sprintf (namebuf, "%s.u.mission_pion_gen_amenager_terrain_poser", name);
         asn1Print_Mission_Pion_GEN_AmenagerTerrainPoser (namebuf, pvalue->u.mission_pion_gen_amenager_terrain_poser);
         break;

      case 100:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_plate_forme_deploiement", name);
         asn1Print_Mission_Pion_GEN_RealiserPlateFormeDeploiement (namebuf, pvalue->u.mission_pion_gen_realiser_plate_forme_deploiement);
         break;

      case 101:
         sprintf (namebuf, "%s.u.mission_pion_gen_reprendre_mission_construction", name);
         asn1Print_Mission_Pion_GEN_ReprendreMissionConstruction (namebuf, pvalue->u.mission_pion_gen_reprendre_mission_construction);
         break;

      case 102:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_zone_poser_helicoptere", name);
         asn1Print_Mission_Pion_GEN_RealiserZonePoserHelicoptere (namebuf, pvalue->u.mission_pion_gen_realiser_zone_poser_helicoptere);
         break;

      case 103:
         sprintf (namebuf, "%s.u.mission_pion_gen_appuyer_debarquement_troupes_gu", name);
         asn1Print_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (namebuf, pvalue->u.mission_pion_gen_appuyer_debarquement_troupes_gu);
         break;

      case 104:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_camp_prisonniers", name);
         asn1Print_Mission_Pion_GEN_RealiserCampPrisonniers (namebuf, pvalue->u.mission_pion_gen_realiser_camp_prisonniers);
         break;

      case 105:
         sprintf (namebuf, "%s.u.mission_pion_gen_realiser_camp_refugies", name);
         asn1Print_Mission_Pion_GEN_RealiserCampRefugies (namebuf, pvalue->u.mission_pion_gen_realiser_camp_refugies);
         break;

      case 106:
         sprintf (namebuf, "%s.u.mission_pion_inf_reconnaitre_axe", name);
         asn1Print_Mission_Pion_INF_ReconnaitreAxe (namebuf, pvalue->u.mission_pion_inf_reconnaitre_axe);
         break;

      case 107:
         sprintf (namebuf, "%s.u.mission_pion_inf_couvrir", name);
         asn1Print_Mission_Pion_INF_Couvrir (namebuf, pvalue->u.mission_pion_inf_couvrir);
         break;

      case 108:
         sprintf (namebuf, "%s.u.mission_pion_inf_reduire", name);
         asn1Print_Mission_Pion_INF_Reduire (namebuf, pvalue->u.mission_pion_inf_reduire);
         break;

      case 109:
         sprintf (namebuf, "%s.u.mission_pion_inf_appuyer", name);
         asn1Print_Mission_Pion_INF_Appuyer (namebuf, pvalue->u.mission_pion_inf_appuyer);
         break;

      case 110:
         sprintf (namebuf, "%s.u.mission_pion_inf_fixer", name);
         asn1Print_Mission_Pion_INF_Fixer (namebuf, pvalue->u.mission_pion_inf_fixer);
         break;

      case 111:
         sprintf (namebuf, "%s.u.mission_pion_inf_controler_secteur", name);
         asn1Print_Mission_Pion_INF_ControlerSecteur (namebuf, pvalue->u.mission_pion_inf_controler_secteur);
         break;

      case 112:
         sprintf (namebuf, "%s.u.mission_pion_inf_surveiller_secteur", name);
         asn1Print_Mission_Pion_INF_SurveillerSecteur (namebuf, pvalue->u.mission_pion_inf_surveiller_secteur);
         break;

      case 113:
         sprintf (namebuf, "%s.u.mission_pion_inf_barrer", name);
         asn1Print_Mission_Pion_INF_Barrer (namebuf, pvalue->u.mission_pion_inf_barrer);
         break;

      case 114:
         sprintf (namebuf, "%s.u.mission_pion_inf_reconnaitre_point", name);
         asn1Print_Mission_Pion_INF_ReconnaitrePoint (namebuf, pvalue->u.mission_pion_inf_reconnaitre_point);
         break;

      case 115:
         sprintf (namebuf, "%s.u.mission_pion_inf_eclairer", name);
         asn1Print_Mission_Pion_INF_Eclairer (namebuf, pvalue->u.mission_pion_inf_eclairer);
         break;

      case 116:
         sprintf (namebuf, "%s.u.mission_pion_inf_interdire", name);
         asn1Print_Mission_Pion_INF_Interdire (namebuf, pvalue->u.mission_pion_inf_interdire);
         break;

      case 117:
         sprintf (namebuf, "%s.u.mission_pion_inf_semparer", name);
         asn1Print_Mission_Pion_INF_Semparer (namebuf, pvalue->u.mission_pion_inf_semparer);
         break;

      case 118:
         sprintf (namebuf, "%s.u.mission_pion_inf_prendre_preciser_contact", name);
         asn1Print_Mission_Pion_INF_PrendrePreciserContact (namebuf, pvalue->u.mission_pion_inf_prendre_preciser_contact);
         break;

      case 119:
         sprintf (namebuf, "%s.u.mission_pion_inf_defendre", name);
         asn1Print_Mission_Pion_INF_Defendre (namebuf, pvalue->u.mission_pion_inf_defendre);
         break;

      case 120:
         sprintf (namebuf, "%s.u.mission_pion_inf_detruire_embuscade", name);
         asn1Print_Mission_Pion_INF_DetruireEmbuscade (namebuf, pvalue->u.mission_pion_inf_detruire_embuscade);
         break;

      case 121:
         sprintf (namebuf, "%s.u.mission_pion_inf_contre_attaquer", name);
         asn1Print_Mission_Pion_INF_ContreAttaquer (namebuf, pvalue->u.mission_pion_inf_contre_attaquer);
         break;

      case 122:
         sprintf (namebuf, "%s.u.mission_pion_inf_freiner", name);
         asn1Print_Mission_Pion_INF_Freiner (namebuf, pvalue->u.mission_pion_inf_freiner);
         break;

      case 123:
         sprintf (namebuf, "%s.u.mission_pion_inf_flanc_garder", name);
         asn1Print_Mission_Pion_INF_FlancGarder (namebuf, pvalue->u.mission_pion_inf_flanc_garder);
         break;

      case 124:
         sprintf (namebuf, "%s.u.mission_pion_inf_organiser_un_check_point", name);
         asn1Print_Mission_Pion_INF_OrganiserUnCheckPoint (namebuf, pvalue->u.mission_pion_inf_organiser_un_check_point);
         break;

      case 125:
         sprintf (namebuf, "%s.u.mission_pion_inf_harceler", name);
         asn1Print_Mission_Pion_INF_Harceler (namebuf, pvalue->u.mission_pion_inf_harceler);
         break;

      case 126:
         sprintf (namebuf, "%s.u.mission_pion_inf_detruire_par_coup_de_main", name);
         asn1Print_Mission_Pion_INF_DetruireParCoupDeMain (namebuf, pvalue->u.mission_pion_inf_detruire_par_coup_de_main);
         break;

      case 127:
         sprintf (namebuf, "%s.u.mission_pion_inf_escorter_un_convoi", name);
         asn1Print_Mission_Pion_INF_EscorterUnConvoi (namebuf, pvalue->u.mission_pion_inf_escorter_un_convoi);
         break;

      case 128:
         sprintf (namebuf, "%s.u.mission_pion_inf_renseigner_sur", name);
         asn1Print_Mission_Pion_INF_RenseignerSur (namebuf, pvalue->u.mission_pion_inf_renseigner_sur);
         break;

      case 129:
         sprintf (namebuf, "%s.u.mission_pion_inf_soutenir", name);
         asn1Print_Mission_Pion_INF_Soutenir (namebuf, pvalue->u.mission_pion_inf_soutenir);
         break;

      case 130:
         sprintf (namebuf, "%s.u.mission_pion_inf_securiser", name);
         asn1Print_Mission_Pion_INF_Securiser (namebuf, pvalue->u.mission_pion_inf_securiser);
         break;

      case 131:
         sprintf (namebuf, "%s.u.mission_pion_inf_recueillir", name);
         asn1Print_Mission_Pion_INF_Recueillir (namebuf, pvalue->u.mission_pion_inf_recueillir);
         break;

      case 132:
         sprintf (namebuf, "%s.u.mission_pion_inf_repondre_a_aggression", name);
         asn1Print_Mission_Pion_INF_RepondreAAggression (namebuf, pvalue->u.mission_pion_inf_repondre_a_aggression);
         break;

      case 133:
         sprintf (namebuf, "%s.u.mission_pion_log_se_deployer", name);
         asn1Print_Mission_Pion_LOG_SeDeployer (namebuf, pvalue->u.mission_pion_log_se_deployer);
         break;

      case 134:
         sprintf (namebuf, "%s.u.mission_pion_log_distribuer_moyens", name);
         asn1Print_Mission_Pion_LOG_DistribuerMoyens (namebuf, pvalue->u.mission_pion_log_distribuer_moyens);
         break;

      case 135:
         sprintf (namebuf, "%s.u.mission_pion_log_trier_blesses", name);
         asn1Print_Mission_Pion_LOG_TrierBlesses (namebuf, pvalue->u.mission_pion_log_trier_blesses);
         break;

      case 136:
         sprintf (namebuf, "%s.u.mission_pion_log_traiter_blesses", name);
         asn1Print_Mission_Pion_LOG_TraiterBlesses (namebuf, pvalue->u.mission_pion_log_traiter_blesses);
         break;

      case 137:
         sprintf (namebuf, "%s.u.mission_pion_log_trier_et_traiter_blesses", name);
         asn1Print_Mission_Pion_LOG_TrierEtTraiterBlesses (namebuf, pvalue->u.mission_pion_log_trier_et_traiter_blesses);
         break;

      case 138:
         sprintf (namebuf, "%s.u.mission_pion_log_soigner_blesses", name);
         asn1Print_Mission_Pion_LOG_SoignerBlesses (namebuf, pvalue->u.mission_pion_log_soigner_blesses);
         break;

      case 139:
         sprintf (namebuf, "%s.u.mission_pion_log_prendre_en_compte_reactions_mentales", name);
         asn1Print_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (namebuf, pvalue->u.mission_pion_log_prendre_en_compte_reactions_mentales);
         break;

      case 140:
         sprintf (namebuf, "%s.u.mission_pion_log_decontaminer_blesses", name);
         asn1Print_Mission_Pion_LOG_DecontaminerBlesses (namebuf, pvalue->u.mission_pion_log_decontaminer_blesses);
         break;

      case 141:
         sprintf (namebuf, "%s.u.mission_pion_log_reparer", name);
         asn1Print_Mission_Pion_LOG_Reparer (namebuf, pvalue->u.mission_pion_log_reparer);
         break;

      case 142:
         sprintf (namebuf, "%s.u.mission_pion_log_evacuer", name);
         asn1Print_Mission_Pion_LOG_Evacuer (namebuf, pvalue->u.mission_pion_log_evacuer);
         break;

      case 143:
         sprintf (namebuf, "%s.u.mission_pion_log_convoyer", name);
         asn1Print_Mission_Pion_LOG_Convoyer (namebuf, pvalue->u.mission_pion_log_convoyer);
         break;

      case 144:
         sprintf (namebuf, "%s.u.mission_pion_log_distribuer_ressources", name);
         asn1Print_Mission_Pion_LOG_DistribuerRessources (namebuf, pvalue->u.mission_pion_log_distribuer_ressources);
         break;

      case 145:
         sprintf (namebuf, "%s.u.mission_pion_log_constituer_convoi", name);
         asn1Print_Mission_Pion_LOG_ConstituerConvoi (namebuf, pvalue->u.mission_pion_log_constituer_convoi);
         break;

      case 146:
         sprintf (namebuf, "%s.u.mission_pion_log_livrer", name);
         asn1Print_Mission_Pion_LOG_Livrer (namebuf, pvalue->u.mission_pion_log_livrer);
         break;

      case 147:
         sprintf (namebuf, "%s.u.mission_pion_log_preparer_bascule", name);
         asn1Print_Mission_Pion_LOG_PreparerBascule (namebuf, pvalue->u.mission_pion_log_preparer_bascule);
         break;

      case 148:
         sprintf (namebuf, "%s.u.mission_pion_log_appuyer_mouvement", name);
         asn1Print_Mission_Pion_LOG_AppuyerMouvement (namebuf, pvalue->u.mission_pion_log_appuyer_mouvement);
         break;

      case 149:
         sprintf (namebuf, "%s.u.mission_pion_log_reconnaitre_itineraire", name);
         asn1Print_Mission_Pion_LOG_ReconnaitreItineraire (namebuf, pvalue->u.mission_pion_log_reconnaitre_itineraire);
         break;

      case 150:
         sprintf (namebuf, "%s.u.mission_pion_log_transporter_unite_chars", name);
         asn1Print_Mission_Pion_LOG_TransporterUniteChars (namebuf, pvalue->u.mission_pion_log_transporter_unite_chars);
         break;

      case 151:
         sprintf (namebuf, "%s.u.mission_pion_log_reconnaitre_zone_contaminee", name);
         asn1Print_Mission_Pion_LOG_ReconnaitreZoneContaminee (namebuf, pvalue->u.mission_pion_log_reconnaitre_zone_contaminee);
         break;

      case 152:
         sprintf (namebuf, "%s.u.mission_pion_log_appuyer_mouvement_dans_zone", name);
         asn1Print_Mission_Pion_LOG_AppuyerMouvementDansZone (namebuf, pvalue->u.mission_pion_log_appuyer_mouvement_dans_zone);
         break;

      case 153:
         sprintf (namebuf, "%s.u.mission_pion_log_mettre_en_oeuvre_zone_stationnement", name);
         asn1Print_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (namebuf, pvalue->u.mission_pion_log_mettre_en_oeuvre_zone_stationnement);
         break;

      case 154:
         sprintf (namebuf, "%s.u.mission_pion_log_appuyer_franchissement_sur_un_point", name);
         asn1Print_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (namebuf, pvalue->u.mission_pion_log_appuyer_franchissement_sur_un_point);
         break;

      case 155:
         sprintf (namebuf, "%s.u.mission_pion_log_bloquer_zone", name);
         asn1Print_Mission_Pion_LOG_BloquerZone (namebuf, pvalue->u.mission_pion_log_bloquer_zone);
         break;

      case 156:
         sprintf (namebuf, "%s.u.mission_pion_log_reconnaitre_zone_de_deploiement", name);
         asn1Print_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (namebuf, pvalue->u.mission_pion_log_reconnaitre_zone_de_deploiement);
         break;

      case 157:
         sprintf (namebuf, "%s.u.mission_pion_log_armer_pia", name);
         asn1Print_Mission_Pion_LOG_ArmerPIA (namebuf, pvalue->u.mission_pion_log_armer_pia);
         break;

      case 158:
         sprintf (namebuf, "%s.u.mission_pion_log_surveiller", name);
         asn1Print_Mission_Pion_LOG_Surveiller (namebuf, pvalue->u.mission_pion_log_surveiller);
         break;

      case 159:
         sprintf (namebuf, "%s.u.mission_pion_test_heliporter", name);
         asn1Print_Mission_Pion_Test_Heliporter (namebuf, pvalue->u.mission_pion_test_heliporter);
         break;

      case 160:
         sprintf (namebuf, "%s.u.mission_pion_test_move_to", name);
         asn1Print_Mission_Pion_Test_MoveTo (namebuf, pvalue->u.mission_pion_test_move_to);
         break;

      case 161:
         sprintf (namebuf, "%s.u.mission_pion_test_create_object", name);
         asn1Print_Mission_Pion_Test_CreateObject (namebuf, pvalue->u.mission_pion_test_create_object);
         break;

      case 162:
         sprintf (namebuf, "%s.u.mission_pion_test_destroy_object", name);
         asn1Print_Mission_Pion_Test_DestroyObject (namebuf, pvalue->u.mission_pion_test_destroy_object);
         break;

      case 163:
         sprintf (namebuf, "%s.u.mission_pion_test_create_bypass", name);
         asn1Print_Mission_Pion_Test_CreateBypass (namebuf, pvalue->u.mission_pion_test_create_bypass);
         break;

      case 164:
         sprintf (namebuf, "%s.u.mission_pion_test_fire", name);
         asn1Print_Mission_Pion_Test_Fire (namebuf, pvalue->u.mission_pion_test_fire);
         break;

      case 165:
         sprintf (namebuf, "%s.u.mission_pion_test_change_posture", name);
         asn1Print_Mission_Pion_Test_ChangePosture (namebuf, pvalue->u.mission_pion_test_change_posture);
         break;

      case 166:
         sprintf (namebuf, "%s.u.mission_pion_test_path_find", name);
         asn1Print_Mission_Pion_Test_PathFind (namebuf, pvalue->u.mission_pion_test_path_find);
         break;

      case 167:
         sprintf (namebuf, "%s.u.mission_pion_test_find_position", name);
         asn1Print_Mission_Pion_Test_FindPosition (namebuf, pvalue->u.mission_pion_test_find_position);
         break;

      case 168:
         sprintf (namebuf, "%s.u.mission_pion_test_reinforce", name);
         asn1Print_Mission_Pion_Test_Reinforce (namebuf, pvalue->u.mission_pion_test_reinforce);
         break;

      case 169:
         sprintf (namebuf, "%s.u.mission_pion_plastron_ennemi", name);
         asn1Print_Mission_Pion_PlastronEnnemi (namebuf, pvalue->u.mission_pion_plastron_ennemi);
         break;

      case 170:
         sprintf (namebuf, "%s.u.mission_pion_faire_mouvement", name);
         asn1Print_Mission_Pion_FaireMouvement (namebuf, pvalue->u.mission_pion_faire_mouvement);
         break;

      case 171:
         sprintf (namebuf, "%s.u.mission_pion_suivre", name);
         asn1Print_Mission_Pion_Suivre (namebuf, pvalue->u.mission_pion_suivre);
         break;

      case 172:
         sprintf (namebuf, "%s.u.mission_pion_se_faire_decontaminer", name);
         asn1Print_Mission_Pion_SeFaireDecontaminer (namebuf, pvalue->u.mission_pion_se_faire_decontaminer);
         break;

      case 173:
         sprintf (namebuf, "%s.u.mission_pion_franchir", name);
         asn1Print_Mission_Pion_Franchir (namebuf, pvalue->u.mission_pion_franchir);
         break;

      case 174:
         sprintf (namebuf, "%s.u.mission_pion_decrocher", name);
         asn1Print_Mission_Pion_Decrocher (namebuf, pvalue->u.mission_pion_decrocher);
         break;

      case 175:
         sprintf (namebuf, "%s.u.mission_pion_stationner", name);
         asn1Print_Mission_Pion_Stationner (namebuf, pvalue->u.mission_pion_stationner);
         break;

      case 176:
         sprintf (namebuf, "%s.u.mission_pion_se_faire_transporter", name);
         asn1Print_Mission_Pion_SeFaireTransporter (namebuf, pvalue->u.mission_pion_se_faire_transporter);
         break;

      case 177:
         sprintf (namebuf, "%s.u.mission_pion_generique", name);
         asn1Print_Mission_Pion_Generique (namebuf, pvalue->u.mission_pion_generique);
         break;

      case 178:
         sprintf (namebuf, "%s.u.mission_pion_milice_provoquer", name);
         asn1Print_Mission_Pion_MILICE_Provoquer (namebuf, pvalue->u.mission_pion_milice_provoquer);
         break;

      case 179:
         sprintf (namebuf, "%s.u.mission_pion_milice_prendre_et_tenir", name);
         asn1Print_Mission_Pion_MILICE_PrendreEtTenir (namebuf, pvalue->u.mission_pion_milice_prendre_et_tenir);
         break;

      case 180:
         sprintf (namebuf, "%s.u.mission_pion_milice_detruire_embuscade", name);
         asn1Print_Mission_Pion_MILICE_DetruireEmbuscade (namebuf, pvalue->u.mission_pion_milice_detruire_embuscade);
         break;

      case 181:
         sprintf (namebuf, "%s.u.mission_pion_joint_marine_transporter", name);
         asn1Print_Mission_Pion_JOINT_MARINE_Transporter (namebuf, pvalue->u.mission_pion_joint_marine_transporter);
         break;

      case 182:
         sprintf (namebuf, "%s.u.mission_pion_joint_air_effectuer_raid", name);
         asn1Print_Mission_Pion_JOINT_AIR_EffectuerRaid (namebuf, pvalue->u.mission_pion_joint_air_effectuer_raid);
         break;

      case 183:
         sprintf (namebuf, "%s.u.mission_pion_nbc_animer_un_plot_de_decontamination", name);
         asn1Print_Mission_Pion_NBC_AnimerUnPlotDeDecontamination (namebuf, pvalue->u.mission_pion_nbc_animer_un_plot_de_decontamination);
         break;

      case 184:
         sprintf (namebuf, "%s.u.mission_pion_nbc_reconnaitre_itineraire", name);
         asn1Print_Mission_Pion_NBC_ReconnaitreItineraire (namebuf, pvalue->u.mission_pion_nbc_reconnaitre_itineraire);
         break;

      case 185:
         sprintf (namebuf, "%s.u.mission_pion_nbc_reconnaitre_zone", name);
         asn1Print_Mission_Pion_NBC_ReconnaitreZone (namebuf, pvalue->u.mission_pion_nbc_reconnaitre_zone);
         break;

      case 186:
         sprintf (namebuf, "%s.u.mission_pion_nbc_decontaminer_zone", name);
         asn1Print_Mission_Pion_NBC_DecontaminerZone (namebuf, pvalue->u.mission_pion_nbc_decontaminer_zone);
         break;

      case 187:
         sprintf (namebuf, "%s.u.mission_pion_nbc_reconnaitre_un_site_rota", name);
         asn1Print_Mission_Pion_NBC_ReconnaitreUnSiteROTA (namebuf, pvalue->u.mission_pion_nbc_reconnaitre_un_site_rota);
         break;

      case 188:
         sprintf (namebuf, "%s.u.mission_pion_rens_rohum_renseigner_sur", name);
         asn1Print_Mission_Pion_RENS_ROHUM_RenseignerSur (namebuf, pvalue->u.mission_pion_rens_rohum_renseigner_sur);
         break;

      case 189:
         sprintf (namebuf, "%s.u.mission_pion_rens_rohum_sexfiltrer", name);
         asn1Print_Mission_Pion_RENS_ROHUM_SExfiltrer (namebuf, pvalue->u.mission_pion_rens_rohum_sexfiltrer);
         break;

      case 190:
         sprintf (namebuf, "%s.u.mission_pion_rens_rohum_orienter_guider", name);
         asn1Print_Mission_Pion_RENS_ROHUM_OrienterGuider (namebuf, pvalue->u.mission_pion_rens_rohum_orienter_guider);
         break;

      case 191:
         sprintf (namebuf, "%s.u.mission_pion_rens_roem_appuyer", name);
         asn1Print_Mission_Pion_RENS_ROEM_Appuyer (namebuf, pvalue->u.mission_pion_rens_roem_appuyer);
         break;

      case 192:
         sprintf (namebuf, "%s.u.mission_pion_rens_roem_renseigner_sur", name);
         asn1Print_Mission_Pion_RENS_ROEM_RenseignerSur (namebuf, pvalue->u.mission_pion_rens_roem_renseigner_sur);
         break;

      case 193:
         sprintf (namebuf, "%s.u.mission_pion_rens_roem_mettre_en_oeuvre", name);
         asn1Print_Mission_Pion_RENS_ROEM_MettreEnOeuvre (namebuf, pvalue->u.mission_pion_rens_roem_mettre_en_oeuvre);
         break;

      case 194:
         sprintf (namebuf, "%s.u.mission_pion_rens_radint_renseigner_sur", name);
         asn1Print_Mission_Pion_RENS_RADINT_RenseignerSur (namebuf, pvalue->u.mission_pion_rens_radint_renseigner_sur);
         break;

      case 195:
         sprintf (namebuf, "%s.u.mission_pion_rens_radint_mettre_en_oeuvre", name);
         asn1Print_Mission_Pion_RENS_RADINT_MettreEnOeuvre (namebuf, pvalue->u.mission_pion_rens_radint_mettre_en_oeuvre);
         break;

      case 196:
         sprintf (namebuf, "%s.u.mission_pion_rens_roim_mettre_en_oeuvre", name);
         asn1Print_Mission_Pion_RENS_ROIM_MettreEnOeuvre (namebuf, pvalue->u.mission_pion_rens_roim_mettre_en_oeuvre);
         break;

      case 197:
         sprintf (namebuf, "%s.u.mission_pion_rens_roim_sdti_renseigner_sur", name);
         asn1Print_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur (namebuf, pvalue->u.mission_pion_rens_roim_sdti_renseigner_sur);
         break;

      case 198:
         sprintf (namebuf, "%s.u.mission_pion_rens_roim_cl289_renseigner_sur", name);
         asn1Print_Mission_Pion_RENS_ROIM_CL289_RenseignerSur (namebuf, pvalue->u.mission_pion_rens_roim_cl289_renseigner_sur);
         break;

      case 199:
         sprintf (namebuf, "%s.u.mission_pion_trans_etablir_gerer_liaison", name);
         asn1Print_Mission_Pion_TRANS_EtablirGererLiaison (namebuf, pvalue->u.mission_pion_trans_etablir_gerer_liaison);
         break;

      default:;
   }
}

void ASN1C_Mission_Pion::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Pion (name, &msgData);
}

void asn1Print_MsgPionOrder (ASN1ConstCharPtr name, ASN1T_MsgPionOrder* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_limite_gauchePresent = %d\n", name, (int)pvalue->m.oid_limite_gauchePresent);
   printf ("%s.m.oid_limite_droitePresent = %d\n", name, (int)pvalue->m.oid_limite_droitePresent);
   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   if (pvalue->m.oid_limite_gauchePresent) {
      sprintf (namebuf, "%s.oid_limite_gauche", name);
      asn1Print_OID (namebuf, &pvalue->oid_limite_gauche);
   }

   if (pvalue->m.oid_limite_droitePresent) {
      sprintf (namebuf, "%s.oid_limite_droite", name);
      asn1Print_OID (namebuf, &pvalue->oid_limite_droite);
   }

   sprintf (namebuf, "%s.oid_limas", name);
   asn1Print_ListOID (namebuf, &pvalue->oid_limas);

   sprintf (namebuf, "%s.direction_dangereuse", name);
   asn1Print_Direction (namebuf, &pvalue->direction_dangereuse);

   sprintf (namebuf, "%s.mission", name);
   asn1Print_Mission_Pion (namebuf, &pvalue->mission);

}

void ASN1C_MsgPionOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPionOrder (name, &msgData);
}

void asn1Print_MsgPionOrderAck (ASN1ConstCharPtr name, ASN1T_MsgPionOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgPionOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPionOrderAck (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPopulation.h"

void asn1Print_MsgPopulationCreation (ASN1ConstCharPtr name, ASN1T_MsgPopulationCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

   sprintf (namebuf, "%s.type_population", name);
   asn1Print_TypePopulation (namebuf, &pvalue->type_population);

   sprintf (namebuf, "%s.nom", name);
   rtPrintCharStr (namebuf, pvalue->nom);

   sprintf (namebuf, "%s.oid_camp", name);
   asn1Print_OID (namebuf, &pvalue->oid_camp);

}

void ASN1C_MsgPopulationCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationCreation (name, &msgData);
}

void asn1Print_MsgPopulationUpdate (ASN1ConstCharPtr name, ASN1T_MsgPopulationUpdate* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

}

void ASN1C_MsgPopulationUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationUpdate (name, &msgData);
}

void asn1Print_MsgPopulationConcentrationCreation (ASN1ConstCharPtr name, ASN1T_MsgPopulationConcentrationCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_concentration", name);
   asn1Print_OID (namebuf, &pvalue->oid_concentration);

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

   sprintf (namebuf, "%s.position", name);
   asn1Print_CoordUTM (namebuf, &pvalue->position);

}

void ASN1C_MsgPopulationConcentrationCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationConcentrationCreation (name, &msgData);
}

void asn1Print_MsgPopulationConcentrationDestruction (ASN1ConstCharPtr name, ASN1T_MsgPopulationConcentrationDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_concentration", name);
   asn1Print_OID (namebuf, &pvalue->oid_concentration);

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

}

void ASN1C_MsgPopulationConcentrationDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationConcentrationDestruction (name, &msgData);
}

void asn1Print_EnumPopulationAttitude (ASN1ConstCharPtr name, ASN1T_EnumPopulationAttitude* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("calme\n"); break;
      case 1: printf ("agitee\n"); break;
      case 2: printf ("excitee\n"); break;
      case 3: printf ("agressive\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumPopulationAttitude::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumPopulationAttitude (name, &msgData);
}

void asn1Print_MsgPopulationConcentrationUpdate (ASN1ConstCharPtr name, ASN1T_MsgPopulationConcentrationUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.nb_humains_vivantsPresent = %d\n", name, (int)pvalue->m.nb_humains_vivantsPresent);
   printf ("%s.m.nb_humains_mortsPresent = %d\n", name, (int)pvalue->m.nb_humains_mortsPresent);
   printf ("%s.m.attitudePresent = %d\n", name, (int)pvalue->m.attitudePresent);
   sprintf (namebuf, "%s.oid_concentration", name);
   asn1Print_OID (namebuf, &pvalue->oid_concentration);

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

   if (pvalue->m.nb_humains_vivantsPresent) {
      sprintf (namebuf, "%s.nb_humains_vivants", name);
      rtPrintInteger (namebuf, pvalue->nb_humains_vivants);
   }

   if (pvalue->m.nb_humains_mortsPresent) {
      sprintf (namebuf, "%s.nb_humains_morts", name);
      rtPrintInteger (namebuf, pvalue->nb_humains_morts);
   }

   if (pvalue->m.attitudePresent) {
      sprintf (namebuf, "%s.attitude", name);
      asn1Print_EnumPopulationAttitude (namebuf, &pvalue->attitude);
   }

}

void ASN1C_MsgPopulationConcentrationUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationConcentrationUpdate (name, &msgData);
}

void asn1Print_MsgPopulationFluxCreation (ASN1ConstCharPtr name, ASN1T_MsgPopulationFluxCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_flux", name);
   asn1Print_OID (namebuf, &pvalue->oid_flux);

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

}

void ASN1C_MsgPopulationFluxCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationFluxCreation (name, &msgData);
}

void asn1Print_MsgPopulationFluxDestruction (ASN1ConstCharPtr name, ASN1T_MsgPopulationFluxDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_flux", name);
   asn1Print_OID (namebuf, &pvalue->oid_flux);

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

}

void ASN1C_MsgPopulationFluxDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationFluxDestruction (name, &msgData);
}

void asn1Print_MsgPopulationFluxUpdate (ASN1ConstCharPtr name, ASN1T_MsgPopulationFluxUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.itinerairePresent = %d\n", name, (int)pvalue->m.itinerairePresent);
   printf ("%s.m.fluxPresent = %d\n", name, (int)pvalue->m.fluxPresent);
   printf ("%s.m.directionPresent = %d\n", name, (int)pvalue->m.directionPresent);
   printf ("%s.m.vitessePresent = %d\n", name, (int)pvalue->m.vitessePresent);
   printf ("%s.m.nb_humains_vivantsPresent = %d\n", name, (int)pvalue->m.nb_humains_vivantsPresent);
   printf ("%s.m.nb_humains_mortsPresent = %d\n", name, (int)pvalue->m.nb_humains_mortsPresent);
   printf ("%s.m.attitudePresent = %d\n", name, (int)pvalue->m.attitudePresent);
   sprintf (namebuf, "%s.oid_flux", name);
   asn1Print_OID (namebuf, &pvalue->oid_flux);

   sprintf (namebuf, "%s.oid_population", name);
   asn1Print_OID (namebuf, &pvalue->oid_population);

   if (pvalue->m.itinerairePresent) {
      sprintf (namebuf, "%s.itineraire", name);
      asn1Print_Itineraire (namebuf, &pvalue->itineraire);
   }

   if (pvalue->m.fluxPresent) {
      sprintf (namebuf, "%s.flux", name);
      asn1Print_Itineraire (namebuf, &pvalue->flux);
   }

   if (pvalue->m.directionPresent) {
      sprintf (namebuf, "%s.direction", name);
      asn1Print_Direction (namebuf, &pvalue->direction);
   }

   if (pvalue->m.vitessePresent) {
      sprintf (namebuf, "%s.vitesse", name);
      asn1Print_Vitesse (namebuf, &pvalue->vitesse);
   }

   if (pvalue->m.nb_humains_vivantsPresent) {
      sprintf (namebuf, "%s.nb_humains_vivants", name);
      rtPrintInteger (namebuf, pvalue->nb_humains_vivants);
   }

   if (pvalue->m.nb_humains_mortsPresent) {
      sprintf (namebuf, "%s.nb_humains_morts", name);
      rtPrintInteger (namebuf, pvalue->nb_humains_morts);
   }

   if (pvalue->m.attitudePresent) {
      sprintf (namebuf, "%s.attitude", name);
      asn1Print_EnumPopulationAttitude (namebuf, &pvalue->attitude);
   }

}

void ASN1C_MsgPopulationFluxUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationFluxUpdate (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPopulationMission.h"

void asn1Print_Mission_Population_FaireMouvement (ASN1ConstCharPtr name, ASN1T_Mission_Population_FaireMouvement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.destination", name);
   asn1Print_Point (namebuf, &pvalue->destination);

}

void ASN1C_Mission_Population_FaireMouvement::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Population_FaireMouvement (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioPopulationOrder.h"

void asn1Print_MsgPopulationOrderAck (ASN1ConstCharPtr name, ASN1T_MsgPopulationOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Population (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgPopulationOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationOrderAck (name, &msgData);
}

void asn1Print_Mission_Population (ASN1ConstCharPtr name, ASN1T_Mission_Population* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.mission_population_faire_mouvement", name);
         asn1Print_Mission_Population_FaireMouvement (namebuf, pvalue->u.mission_population_faire_mouvement);
         break;

      default:;
   }
}

void ASN1C_Mission_Population::Print (ASN1ConstCharPtr name)

{
   asn1Print_Mission_Population (name, &msgData);
}

void asn1Print_MsgPopulationOrder (ASN1ConstCharPtr name, ASN1T_MsgPopulationOrder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Population (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.mission", name);
   asn1Print_Mission_Population (namebuf, &pvalue->mission);

}

void ASN1C_MsgPopulationOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationOrder (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioUnitAttr.h"

void asn1Print_EnumAutomateState (ASN1ConstCharPtr name, ASN1T_EnumAutomateState* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("embraye\n"); break;
      case 1: printf ("debraye\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumAutomateState::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumAutomateState (name, &msgData);
}

void asn1Print_EnumUnitPosture (ASN1ConstCharPtr name, ASN1T_EnumUnitPosture* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("posture_mouvement\n"); break;
      case 1: printf ("posture_mouvement_discret\n"); break;
      case 2: printf ("posture_arret\n"); break;
      case 3: printf ("posture_poste_reflexe\n"); break;
      case 4: printf ("posture_poste\n"); break;
      case 5: printf ("posture_poste_amenage\n"); break;
      case 6: printf ("posture_poste_prepare_genie\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitPosture::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitPosture (name, &msgData);
}

void asn1Print_EnumEtatRapFor (ASN1ConstCharPtr name, ASN1T_EnumEtatRapFor* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("neutre\n"); break;
      case 2: printf ("favorable\n"); break;
      case 3: printf ("defavorable\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumEtatRapFor::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumEtatRapFor (name, &msgData);
}

void asn1Print_EnumReglesEngagement (ASN1ConstCharPtr name, ASN1T_EnumReglesEngagement* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("tir_libre\n"); break;
      case 2: printf ("tir_sur_riposte\n"); break;
      case 3: printf ("tir_interdit\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumReglesEngagement::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumReglesEngagement (name, &msgData);
}

void asn1Print_EnumEtatCombatRencontre (ASN1ConstCharPtr name, ASN1T_EnumEtatCombatRencontre* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("none\n"); break;
      case 1: printf ("etat_esquive\n"); break;
      case 2: printf ("etat_fixe\n"); break;
      case 3: printf ("etat_poursuite_mission\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumEtatCombatRencontre::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumEtatCombatRencontre (name, &msgData);
}

void asn1Print_EnumEtatOperationnel (ASN1ConstCharPtr name, ASN1T_EnumEtatOperationnel* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("detruit_totalement\n"); break;
      case 1: printf ("detruit_tactiquement\n"); break;
      case 2: printf ("operationnel\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumEtatOperationnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumEtatOperationnel (name, &msgData);
}

void asn1Print_EnumUnitFatigue (ASN1ConstCharPtr name, ASN1T_EnumUnitFatigue* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("normal\n"); break;
      case 1: printf ("fatigue\n"); break;
      case 2: printf ("epuise\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitFatigue::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitFatigue (name, &msgData);
}

void asn1Print_EnumUnitMoral (ASN1ConstCharPtr name, ASN1T_EnumUnitMoral* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("fanatique\n"); break;
      case 1: printf ("bon\n"); break;
      case 2: printf ("moyen\n"); break;
      case 3: printf ("mauvais\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitMoral::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitMoral (name, &msgData);
}

void asn1Print_EnumUnitExperience (ASN1ConstCharPtr name, ASN1T_EnumUnitExperience* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("veteran\n"); break;
      case 1: printf ("experimente\n"); break;
      case 2: printf ("conscrit\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitExperience::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitExperience (name, &msgData);
}

void asn1Print_MsgUnitAttributes (ASN1ConstCharPtr name, ASN1T_MsgUnitAttributes* pvalue)
{
   char namebuf[512];

   printf ("%s.m.positionPresent = %d\n", name, (int)pvalue->m.positionPresent);
   printf ("%s.m.directionPresent = %d\n", name, (int)pvalue->m.directionPresent);
   printf ("%s.m.hauteurPresent = %d\n", name, (int)pvalue->m.hauteurPresent);
   printf ("%s.m.vitessePresent = %d\n", name, (int)pvalue->m.vitessePresent);
   printf ("%s.m.etat_operationnel_brutPresent = %d\n", name, (int)pvalue->m.etat_operationnel_brutPresent);
   printf ("%s.m.pions_renforcantPresent = %d\n", name, (int)pvalue->m.pions_renforcantPresent);
   printf ("%s.m.pion_renforcePresent = %d\n", name, (int)pvalue->m.pion_renforcePresent);
   printf ("%s.m.etat_automatePresent = %d\n", name, (int)pvalue->m.etat_automatePresent);
   printf ("%s.m.mortPresent = %d\n", name, (int)pvalue->m.mortPresent);
   printf ("%s.m.neutralisePresent = %d\n", name, (int)pvalue->m.neutralisePresent);
   printf ("%s.m.mode_furtif_actifPresent = %d\n", name, (int)pvalue->m.mode_furtif_actifPresent);
   printf ("%s.m.embarquePresent = %d\n", name, (int)pvalue->m.embarquePresent);
   printf ("%s.m.transporteurs_disponiblesPresent = %d\n", name, (int)pvalue->m.transporteurs_disponiblesPresent);
   printf ("%s.m.posture_oldPresent = %d\n", name, (int)pvalue->m.posture_oldPresent);
   printf ("%s.m.posture_newPresent = %d\n", name, (int)pvalue->m.posture_newPresent);
   printf ("%s.m.posture_pourcentagePresent = %d\n", name, (int)pvalue->m.posture_pourcentagePresent);
   printf ("%s.m.en_tenue_de_protection_nbcPresent = %d\n", name, (int)pvalue->m.en_tenue_de_protection_nbcPresent);
   printf ("%s.m.contamine_par_agents_nbcPresent = %d\n", name, (int)pvalue->m.contamine_par_agents_nbcPresent);
   printf ("%s.m.etat_contaminationPresent = %d\n", name, (int)pvalue->m.etat_contaminationPresent);
   printf ("%s.m.communications_brouilleesPresent = %d\n", name, (int)pvalue->m.communications_brouilleesPresent);
   printf ("%s.m.silence_radioPresent = %d\n", name, (int)pvalue->m.silence_radioPresent);
   printf ("%s.m.radar_actifPresent = %d\n", name, (int)pvalue->m.radar_actifPresent);
   printf ("%s.m.pions_transportesPresent = %d\n", name, (int)pvalue->m.pions_transportesPresent);
   printf ("%s.m.pion_transporteurPresent = %d\n", name, (int)pvalue->m.pion_transporteurPresent);
   printf ("%s.m.rapport_de_forcePresent = %d\n", name, (int)pvalue->m.rapport_de_forcePresent);
   printf ("%s.m.regles_d_engagementPresent = %d\n", name, (int)pvalue->m.regles_d_engagementPresent);
   printf ("%s.m.combat_de_rencontrePresent = %d\n", name, (int)pvalue->m.combat_de_rencontrePresent);
   printf ("%s.m.etat_operationnelPresent = %d\n", name, (int)pvalue->m.etat_operationnelPresent);
   printf ("%s.m.fatiguePresent = %d\n", name, (int)pvalue->m.fatiguePresent);
   printf ("%s.m.moralPresent = %d\n", name, (int)pvalue->m.moralPresent);
   printf ("%s.m.experiencePresent = %d\n", name, (int)pvalue->m.experiencePresent);
   printf ("%s.m.renduPresent = %d\n", name, (int)pvalue->m.renduPresent);
   printf ("%s.m.prisonnierPresent = %d\n", name, (int)pvalue->m.prisonnierPresent);
   printf ("%s.m.refugie_pris_en_comptePresent = %d\n", name, (int)pvalue->m.refugie_pris_en_comptePresent);
   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   if (pvalue->m.positionPresent) {
      sprintf (namebuf, "%s.position", name);
      asn1Print_CoordUTM (namebuf, &pvalue->position);
   }

   if (pvalue->m.directionPresent) {
      sprintf (namebuf, "%s.direction", name);
      asn1Print_Direction (namebuf, &pvalue->direction);
   }

   if (pvalue->m.hauteurPresent) {
      sprintf (namebuf, "%s.hauteur", name);
      asn1Print_Hauteur (namebuf, &pvalue->hauteur);
   }

   if (pvalue->m.vitessePresent) {
      sprintf (namebuf, "%s.vitesse", name);
      asn1Print_Vitesse (namebuf, &pvalue->vitesse);
   }

   if (pvalue->m.etat_operationnel_brutPresent) {
      sprintf (namebuf, "%s.etat_operationnel_brut", name);
      asn1Print_PourcentageLibre (namebuf, &pvalue->etat_operationnel_brut);
   }

   if (pvalue->m.pions_renforcantPresent) {
      sprintf (namebuf, "%s.pions_renforcant", name);
      asn1Print_ListAgent (namebuf, &pvalue->pions_renforcant);
   }

   if (pvalue->m.pion_renforcePresent) {
      sprintf (namebuf, "%s.pion_renforce", name);
      asn1Print_Agent (namebuf, &pvalue->pion_renforce);
   }

   if (pvalue->m.etat_automatePresent) {
      sprintf (namebuf, "%s.etat_automate", name);
      asn1Print_EnumAutomateState (namebuf, &pvalue->etat_automate);
   }

   if (pvalue->m.mortPresent) {
      sprintf (namebuf, "%s.mort", name);
      rtPrintBoolean (namebuf, pvalue->mort);
   }

   if (pvalue->m.neutralisePresent) {
      sprintf (namebuf, "%s.neutralise", name);
      rtPrintBoolean (namebuf, pvalue->neutralise);
   }

   if (pvalue->m.mode_furtif_actifPresent) {
      sprintf (namebuf, "%s.mode_furtif_actif", name);
      rtPrintBoolean (namebuf, pvalue->mode_furtif_actif);
   }

   if (pvalue->m.embarquePresent) {
      sprintf (namebuf, "%s.embarque", name);
      rtPrintBoolean (namebuf, pvalue->embarque);
   }

   if (pvalue->m.transporteurs_disponiblesPresent) {
      sprintf (namebuf, "%s.transporteurs_disponibles", name);
      rtPrintBoolean (namebuf, pvalue->transporteurs_disponibles);
   }

   if (pvalue->m.posture_oldPresent) {
      sprintf (namebuf, "%s.posture_old", name);
      asn1Print_EnumUnitPosture (namebuf, &pvalue->posture_old);
   }

   if (pvalue->m.posture_newPresent) {
      sprintf (namebuf, "%s.posture_new", name);
      asn1Print_EnumUnitPosture (namebuf, &pvalue->posture_new);
   }

   if (pvalue->m.posture_pourcentagePresent) {
      sprintf (namebuf, "%s.posture_pourcentage", name);
      asn1Print_Pourcentage (namebuf, &pvalue->posture_pourcentage);
   }

   if (pvalue->m.en_tenue_de_protection_nbcPresent) {
      sprintf (namebuf, "%s.en_tenue_de_protection_nbc", name);
      rtPrintBoolean (namebuf, pvalue->en_tenue_de_protection_nbc);
   }

   if (pvalue->m.contamine_par_agents_nbcPresent) {
      sprintf (namebuf, "%s.contamine_par_agents_nbc", name);
      asn1Print_ListOID (namebuf, &pvalue->contamine_par_agents_nbc);
   }

   if (pvalue->m.etat_contaminationPresent) {
      sprintf (namebuf, "%s.etat_contamination", name);
      asn1Print_Pourcentage (namebuf, &pvalue->etat_contamination);
   }

   if (pvalue->m.communications_brouilleesPresent) {
      sprintf (namebuf, "%s.communications_brouillees", name);
      rtPrintBoolean (namebuf, pvalue->communications_brouillees);
   }

   if (pvalue->m.silence_radioPresent) {
      sprintf (namebuf, "%s.silence_radio", name);
      rtPrintBoolean (namebuf, pvalue->silence_radio);
   }

   if (pvalue->m.radar_actifPresent) {
      sprintf (namebuf, "%s.radar_actif", name);
      rtPrintBoolean (namebuf, pvalue->radar_actif);
   }

   if (pvalue->m.pions_transportesPresent) {
      sprintf (namebuf, "%s.pions_transportes", name);
      asn1Print_ListAgent (namebuf, &pvalue->pions_transportes);
   }

   if (pvalue->m.pion_transporteurPresent) {
      sprintf (namebuf, "%s.pion_transporteur", name);
      asn1Print_Agent (namebuf, &pvalue->pion_transporteur);
   }

   if (pvalue->m.rapport_de_forcePresent) {
      sprintf (namebuf, "%s.rapport_de_force", name);
      asn1Print_EnumEtatRapFor (namebuf, &pvalue->rapport_de_force);
   }

   if (pvalue->m.regles_d_engagementPresent) {
      sprintf (namebuf, "%s.regles_d_engagement", name);
      asn1Print_EnumReglesEngagement (namebuf, &pvalue->regles_d_engagement);
   }

   if (pvalue->m.combat_de_rencontrePresent) {
      sprintf (namebuf, "%s.combat_de_rencontre", name);
      asn1Print_EnumEtatCombatRencontre (namebuf, &pvalue->combat_de_rencontre);
   }

   if (pvalue->m.etat_operationnelPresent) {
      sprintf (namebuf, "%s.etat_operationnel", name);
      asn1Print_EnumEtatOperationnel (namebuf, &pvalue->etat_operationnel);
   }

   if (pvalue->m.fatiguePresent) {
      sprintf (namebuf, "%s.fatigue", name);
      asn1Print_EnumUnitFatigue (namebuf, &pvalue->fatigue);
   }

   if (pvalue->m.moralPresent) {
      sprintf (namebuf, "%s.moral", name);
      asn1Print_EnumUnitMoral (namebuf, &pvalue->moral);
   }

   if (pvalue->m.experiencePresent) {
      sprintf (namebuf, "%s.experience", name);
      asn1Print_EnumUnitExperience (namebuf, &pvalue->experience);
   }

   if (pvalue->m.renduPresent) {
      sprintf (namebuf, "%s.rendu", name);
      rtPrintBoolean (namebuf, pvalue->rendu);
   }

   if (pvalue->m.prisonnierPresent) {
      sprintf (namebuf, "%s.prisonnier", name);
      rtPrintBoolean (namebuf, pvalue->prisonnier);
   }

   if (pvalue->m.refugie_pris_en_comptePresent) {
      sprintf (namebuf, "%s.refugie_pris_en_compte", name);
      rtPrintBoolean (namebuf, pvalue->refugie_pris_en_compte);
   }

}

void ASN1C_MsgUnitAttributes::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitAttributes (name, &msgData);
}

void asn1Print_DotationPersonnel (ASN1ConstCharPtr name, ASN1T_DotationPersonnel* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.rang", name);
   asn1Print_EnumHumanRank (namebuf, &pvalue->rang);

   sprintf (namebuf, "%s.nb_total", name);
   rtPrintUnsigned (namebuf, pvalue->nb_total);

   sprintf (namebuf, "%s.nb_operationnels", name);
   rtPrintUnsigned (namebuf, pvalue->nb_operationnels);

   sprintf (namebuf, "%s.nb_morts", name);
   rtPrintUnsigned (namebuf, pvalue->nb_morts);

   sprintf (namebuf, "%s.nb_blesses", name);
   rtPrintUnsigned (namebuf, pvalue->nb_blesses);

   sprintf (namebuf, "%s.nb_blesses_mentaux", name);
   rtPrintUnsigned (namebuf, pvalue->nb_blesses_mentaux);

   sprintf (namebuf, "%s.nb_contamines_nbc", name);
   rtPrintUnsigned (namebuf, pvalue->nb_contamines_nbc);

   sprintf (namebuf, "%s.nb_dans_chaine_sante", name);
   rtPrintUnsigned (namebuf, pvalue->nb_dans_chaine_sante);

   sprintf (namebuf, "%s.nb_utilises_pour_maintenance", name);
   rtPrintUnsigned (namebuf, pvalue->nb_utilises_pour_maintenance);

}

void ASN1C_DotationPersonnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_DotationPersonnel (name, &msgData);
}

void asn1Print__SeqOfDotationPersonnel (ASN1ConstCharPtr name, ASN1T__SeqOfDotationPersonnel* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_DotationPersonnel (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfDotationPersonnel::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfDotationPersonnel (name, &msgData);
}

void asn1Print_DotationEquipement (ASN1ConstCharPtr name, ASN1T_DotationEquipement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.nb_disponibles", name);
   rtPrintUnsigned (namebuf, pvalue->nb_disponibles);

   sprintf (namebuf, "%s.nb_indisponibles", name);
   rtPrintUnsigned (namebuf, pvalue->nb_indisponibles);

   sprintf (namebuf, "%s.nb_reparables", name);
   rtPrintUnsigned (namebuf, pvalue->nb_reparables);

   sprintf (namebuf, "%s.nb_dans_chaine_maintenance", name);
   rtPrintUnsigned (namebuf, pvalue->nb_dans_chaine_maintenance);

   sprintf (namebuf, "%s.nb_prisonniers", name);
   rtPrintUnsigned (namebuf, pvalue->nb_prisonniers);

   sprintf (namebuf, "%s.majeur", name);
   rtPrintBoolean (namebuf, pvalue->majeur);

}

void ASN1C_DotationEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print_DotationEquipement (name, &msgData);
}

void asn1Print__SeqOfDotationEquipement (ASN1ConstCharPtr name, ASN1T__SeqOfDotationEquipement* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_DotationEquipement (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfDotationEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfDotationEquipement (name, &msgData);
}

void asn1Print_DotationRessource (ASN1ConstCharPtr name, ASN1T_DotationRessource* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.ressource_id", name);
   asn1Print_TypeDotation (namebuf, &pvalue->ressource_id);

   sprintf (namebuf, "%s.quantite_disponible", name);
   rtPrintUnsigned (namebuf, pvalue->quantite_disponible);

   sprintf (namebuf, "%s.majeur", name);
   rtPrintBoolean (namebuf, pvalue->majeur);

}

void ASN1C_DotationRessource::Print (ASN1ConstCharPtr name)

{
   asn1Print_DotationRessource (name, &msgData);
}

void asn1Print__SeqOfDotationRessource (ASN1ConstCharPtr name, ASN1T__SeqOfDotationRessource* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_DotationRessource (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfDotationRessource::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfDotationRessource (name, &msgData);
}

void asn1Print_PretEquipement (ASN1ConstCharPtr name, ASN1T_PretEquipement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion_emprunteur", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion_emprunteur);

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.nombre", name);
   rtPrintInteger (namebuf, pvalue->nombre);

}

void ASN1C_PretEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print_PretEquipement (name, &msgData);
}

void asn1Print__SeqOfPretEquipement (ASN1ConstCharPtr name, ASN1T__SeqOfPretEquipement* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_PretEquipement (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfPretEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfPretEquipement (name, &msgData);
}

void asn1Print_MsgUnitDotations (ASN1ConstCharPtr name, ASN1T_MsgUnitDotations* pvalue)
{
   char namebuf[512];

   printf ("%s.m.dotation_eff_personnelPresent = %d\n", name, (int)pvalue->m.dotation_eff_personnelPresent);
   printf ("%s.m.dotation_eff_materielPresent = %d\n", name, (int)pvalue->m.dotation_eff_materielPresent);
   printf ("%s.m.dotation_eff_ressourcePresent = %d\n", name, (int)pvalue->m.dotation_eff_ressourcePresent);
   printf ("%s.m.prets_equipementPresent = %d\n", name, (int)pvalue->m.prets_equipementPresent);
   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   if (pvalue->m.dotation_eff_personnelPresent) {
      sprintf (namebuf, "%s.dotation_eff_personnel", name);
      asn1Print__SeqOfDotationPersonnel (namebuf, &pvalue->dotation_eff_personnel);
   }

   if (pvalue->m.dotation_eff_materielPresent) {
      sprintf (namebuf, "%s.dotation_eff_materiel", name);
      asn1Print__SeqOfDotationEquipement (namebuf, &pvalue->dotation_eff_materiel);
   }

   if (pvalue->m.dotation_eff_ressourcePresent) {
      sprintf (namebuf, "%s.dotation_eff_ressource", name);
      asn1Print__SeqOfDotationRessource (namebuf, &pvalue->dotation_eff_ressource);
   }

   if (pvalue->m.prets_equipementPresent) {
      sprintf (namebuf, "%s.prets_equipement", name);
      asn1Print__SeqOfPretEquipement (namebuf, &pvalue->prets_equipement);
   }

}

void ASN1C_MsgUnitDotations::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitDotations (name, &msgData);
}

void asn1Print_MsgUnitPathFind (ASN1ConstCharPtr name, ASN1T_MsgUnitPathFind* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_OID (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.order_id", name);
   asn1Print_OID (namebuf, &pvalue->order_id);

   sprintf (namebuf, "%s.itineraire", name);
   asn1Print_Itineraire (namebuf, &pvalue->itineraire);

}

void ASN1C_MsgUnitPathFind::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitPathFind (name, &msgData);
}

void asn1Print_EnumSetAutomateModeErrorCode (ASN1ConstCharPtr name, ASN1T_EnumSetAutomateModeErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_unit\n"); break;
      case 2: printf ("error_unit_not_automate\n"); break;
      case 3: printf ("error_already_embraye\n"); break;
      case 4: printf ("error_already_debraye\n"); break;
      case 5: printf ("error_unit_surrendered\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumSetAutomateModeErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumSetAutomateModeErrorCode (name, &msgData);
}

void asn1Print_MsgSetAutomateModeAck (ASN1ConstCharPtr name, ASN1T_MsgSetAutomateModeAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_Agent (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumSetAutomateModeErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgSetAutomateModeAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSetAutomateModeAck (name, &msgData);
}

void asn1Print_EnumUnitAttrErrorCode (ASN1ConstCharPtr name, ASN1T_EnumUnitAttrErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_unit\n"); break;
      case 2: printf ("error_automate_embraye\n"); break;
      case 3: printf ("error_invalid_attribute\n"); break;
      case 4: printf ("error_unit_surrendered\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumUnitAttrErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumUnitAttrErrorCode (name, &msgData);
}

void asn1Print_MsgUnitMagicActionAck (ASN1ConstCharPtr name, ASN1T_MsgUnitMagicActionAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumUnitAttrErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgUnitMagicActionAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitMagicActionAck (name, &msgData);
}

void asn1Print_MsgSetAutomateMode (ASN1ConstCharPtr name, ASN1T_MsgSetAutomateMode* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_Agent (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.mode", name);
   asn1Print_EnumAutomateState (namebuf, &pvalue->mode);

}

void ASN1C_MsgSetAutomateMode::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSetAutomateMode (name, &msgData);
}

void asn1Print_MagicActionMoveTo (ASN1ConstCharPtr name, ASN1T_MagicActionMoveTo* pvalue)
{
   asn1Print_CoordUTM (name, pvalue);
}

void ASN1C_MagicActionMoveTo::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionMoveTo (name, &msgData);
}

void asn1Print_MagicActionRecompletementTotal (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionRecompletementTotal::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionRecompletementTotal (name);
}

void asn1Print_RecompletementEquipement (ASN1ConstCharPtr name, ASN1T_RecompletementEquipement* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type_equipement", name);
   asn1Print_TypeEquipement (namebuf, &pvalue->type_equipement);

   sprintf (namebuf, "%s.nombre_disponible", name);
   rtPrintInteger (namebuf, pvalue->nombre_disponible);

}

void ASN1C_RecompletementEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print_RecompletementEquipement (name, &msgData);
}

void asn1Print__SeqOfRecompletementEquipement (ASN1ConstCharPtr name, ASN1T__SeqOfRecompletementEquipement* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_RecompletementEquipement (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfRecompletementEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfRecompletementEquipement (name, &msgData);
}

void asn1Print_RecompletementPersonnel (ASN1ConstCharPtr name, ASN1T_RecompletementPersonnel* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.rang", name);
   asn1Print_EnumHumanRank (namebuf, &pvalue->rang);

   sprintf (namebuf, "%s.nombre_disponible", name);
   rtPrintInteger (namebuf, pvalue->nombre_disponible);

}

void ASN1C_RecompletementPersonnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_RecompletementPersonnel (name, &msgData);
}

void asn1Print__SeqOfRecompletementPersonnel (ASN1ConstCharPtr name, ASN1T__SeqOfRecompletementPersonnel* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_RecompletementPersonnel (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfRecompletementPersonnel::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfRecompletementPersonnel (name, &msgData);
}

void asn1Print_RecompletementDotation (ASN1ConstCharPtr name, ASN1T_RecompletementDotation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.famille_dotation", name);
   asn1Print_EnumFamilleDotation (namebuf, &pvalue->famille_dotation);

   sprintf (namebuf, "%s.pourcentage", name);
   asn1Print_Pourcentage (namebuf, &pvalue->pourcentage);

}

void ASN1C_RecompletementDotation::Print (ASN1ConstCharPtr name)

{
   asn1Print_RecompletementDotation (name, &msgData);
}

void asn1Print__SeqOfRecompletementDotation (ASN1ConstCharPtr name, ASN1T__SeqOfRecompletementDotation* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_RecompletementDotation (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfRecompletementDotation::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfRecompletementDotation (name, &msgData);
}

void asn1Print_RecompletementDotationMunition (ASN1ConstCharPtr name, ASN1T_RecompletementDotationMunition* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.famille_munition", name);
   asn1Print_EnumFamilleMunition (namebuf, &pvalue->famille_munition);

   sprintf (namebuf, "%s.pourcentage", name);
   asn1Print_Pourcentage (namebuf, &pvalue->pourcentage);

}

void ASN1C_RecompletementDotationMunition::Print (ASN1ConstCharPtr name)

{
   asn1Print_RecompletementDotationMunition (name, &msgData);
}

void asn1Print__SeqOfRecompletementDotationMunition (ASN1ConstCharPtr name, ASN1T__SeqOfRecompletementDotationMunition* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_RecompletementDotationMunition (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfRecompletementDotationMunition::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfRecompletementDotationMunition (name, &msgData);
}

void asn1Print_MagicActionRecompletementPartiel (ASN1ConstCharPtr name, ASN1T_MagicActionRecompletementPartiel* pvalue)
{
   char namebuf[512];

   printf ("%s.m.equipementsPresent = %d\n", name, (int)pvalue->m.equipementsPresent);
   printf ("%s.m.personnelsPresent = %d\n", name, (int)pvalue->m.personnelsPresent);
   printf ("%s.m.dotationsPresent = %d\n", name, (int)pvalue->m.dotationsPresent);
   printf ("%s.m.munitionsPresent = %d\n", name, (int)pvalue->m.munitionsPresent);
   if (pvalue->m.equipementsPresent) {
      sprintf (namebuf, "%s.equipements", name);
      asn1Print__SeqOfRecompletementEquipement (namebuf, &pvalue->equipements);
   }

   if (pvalue->m.personnelsPresent) {
      sprintf (namebuf, "%s.personnels", name);
      asn1Print__SeqOfRecompletementPersonnel (namebuf, &pvalue->personnels);
   }

   if (pvalue->m.dotationsPresent) {
      sprintf (namebuf, "%s.dotations", name);
      asn1Print__SeqOfRecompletementDotation (namebuf, &pvalue->dotations);
   }

   if (pvalue->m.munitionsPresent) {
      sprintf (namebuf, "%s.munitions", name);
      asn1Print__SeqOfRecompletementDotationMunition (namebuf, &pvalue->munitions);
   }

}

void ASN1C_MagicActionRecompletementPartiel::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionRecompletementPartiel (name, &msgData);
}

void asn1Print_MagicActionRecompletementPersonnel (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionRecompletementPersonnel::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionRecompletementPersonnel (name);
}

void asn1Print_MagicActionRecompletementEquipement (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionRecompletementEquipement::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionRecompletementEquipement (name);
}

void asn1Print_MagicActionRecompletementRessources (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionRecompletementRessources::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionRecompletementRessources (name);
}

void asn1Print_MagicActionChangeFacteursHumains (ASN1ConstCharPtr name, ASN1T_MagicActionChangeFacteursHumains* pvalue)
{
   char namebuf[512];

   printf ("%s.m.fatiguePresent = %d\n", name, (int)pvalue->m.fatiguePresent);
   printf ("%s.m.moralPresent = %d\n", name, (int)pvalue->m.moralPresent);
   printf ("%s.m.experiencePresent = %d\n", name, (int)pvalue->m.experiencePresent);
   if (pvalue->m.fatiguePresent) {
      sprintf (namebuf, "%s.fatigue", name);
      asn1Print_EnumUnitFatigue (namebuf, &pvalue->fatigue);
   }

   if (pvalue->m.moralPresent) {
      sprintf (namebuf, "%s.moral", name);
      asn1Print_EnumUnitMoral (namebuf, &pvalue->moral);
   }

   if (pvalue->m.experiencePresent) {
      sprintf (namebuf, "%s.experience", name);
      asn1Print_EnumUnitExperience (namebuf, &pvalue->experience);
   }

}

void ASN1C_MagicActionChangeFacteursHumains::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionChangeFacteursHumains (name, &msgData);
}

void asn1Print_MagicActionDestructionTotale (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionDestructionTotale::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionDestructionTotale (name);
}

void asn1Print_MagicActionSeRendre (ASN1ConstCharPtr name)
{
}

void ASN1C_MagicActionSeRendre::Print (ASN1ConstCharPtr name)

{
   asn1Print_MagicActionSeRendre (name);
}

void asn1Print_MsgUnitMagicAction_action (ASN1ConstCharPtr name, ASN1T_MsgUnitMagicAction_action* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.move_to", name);
         asn1Print_MagicActionMoveTo (namebuf, pvalue->u.move_to);
         break;

      case 2:
         sprintf (namebuf, "%s.u.recompletement_total", name);
         break;

      case 3:
         sprintf (namebuf, "%s.u.recompletement_partiel", name);
         asn1Print_MagicActionRecompletementPartiel (namebuf, pvalue->u.recompletement_partiel);
         break;

      case 4:
         sprintf (namebuf, "%s.u.recompletement_personnel", name);
         break;

      case 5:
         sprintf (namebuf, "%s.u.recompletement_equipement", name);
         break;

      case 6:
         sprintf (namebuf, "%s.u.recompletement_ressources", name);
         break;

      case 7:
         sprintf (namebuf, "%s.u.change_facteurs_humains", name);
         asn1Print_MagicActionChangeFacteursHumains (namebuf, pvalue->u.change_facteurs_humains);
         break;

      case 8:
         sprintf (namebuf, "%s.u.destruction_totale", name);
         break;

      case 9:
         sprintf (namebuf, "%s.u.se_rendre", name);
         break;

      default:;
   }
}

void ASN1C_MsgUnitMagicAction_action::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitMagicAction_action (name, &msgData);
}

void asn1Print_MsgUnitMagicAction (ASN1ConstCharPtr name, ASN1T_MsgUnitMagicAction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid", name);
   asn1Print_OID (namebuf, &pvalue->oid);

   sprintf (namebuf, "%s.action", name);
   asn1Print_MsgUnitMagicAction_action (namebuf, &pvalue->action);

}

void ASN1C_MsgUnitMagicAction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitMagicAction (name, &msgData);
}

/* This file was generated by ASN1C V5.31 on 05-Oct-2005 */

#include "ScipioUnitKnowledge.h"

void asn1Print_MsgUnitKnowledgeCreation (ASN1ConstCharPtr name, ASN1T_MsgUnitKnowledgeCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_connaissance);

   sprintf (namebuf, "%s.oid_groupe_possesseur", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_possesseur);

   sprintf (namebuf, "%s.oid_unite_reelle", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_reelle);

}

void ASN1C_MsgUnitKnowledgeCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitKnowledgeCreation (name, &msgData);
}

void asn1Print_AutomatePerception (ASN1ConstCharPtr name, ASN1T_AutomatePerception* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_compagnie", name);
   asn1Print_OID (namebuf, &pvalue->oid_compagnie);

   sprintf (namebuf, "%s.identification_level", name);
   asn1Print_EnumUnitIdentificationLevel (namebuf, &pvalue->identification_level);

}

void ASN1C_AutomatePerception::Print (ASN1ConstCharPtr name)

{
   asn1Print_AutomatePerception (name, &msgData);
}

void asn1Print__SeqOfAutomatePerception (ASN1ConstCharPtr name, ASN1T__SeqOfAutomatePerception* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_AutomatePerception (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C__SeqOfAutomatePerception::Print (ASN1ConstCharPtr name)

{
   asn1Print__SeqOfAutomatePerception (name, &msgData);
}

void asn1Print_MsgUnitKnowledgeUpdate (ASN1ConstCharPtr name, ASN1T_MsgUnitKnowledgeUpdate* pvalue)
{
   char namebuf[512];

   printf ("%s.m.pertinencePresent = %d\n", name, (int)pvalue->m.pertinencePresent);
   printf ("%s.m.identification_levelPresent = %d\n", name, (int)pvalue->m.identification_levelPresent);
   printf ("%s.m.max_identification_levelPresent = %d\n", name, (int)pvalue->m.max_identification_levelPresent);
   printf ("%s.m.etat_opPresent = %d\n", name, (int)pvalue->m.etat_opPresent);
   printf ("%s.m.positionPresent = %d\n", name, (int)pvalue->m.positionPresent);
   printf ("%s.m.directionPresent = %d\n", name, (int)pvalue->m.directionPresent);
   printf ("%s.m.speedPresent = %d\n", name, (int)pvalue->m.speedPresent);
   printf ("%s.m.campPresent = %d\n", name, (int)pvalue->m.campPresent);
   printf ("%s.m.nature_armePresent = %d\n", name, (int)pvalue->m.nature_armePresent);
   printf ("%s.m.nature_niveauPresent = %d\n", name, (int)pvalue->m.nature_niveauPresent);
   printf ("%s.m.nature_pcPresent = %d\n", name, (int)pvalue->m.nature_pcPresent);
   printf ("%s.m.nature_specialisationPresent = %d\n", name, (int)pvalue->m.nature_specialisationPresent);
   printf ("%s.m.nature_qualificationPresent = %d\n", name, (int)pvalue->m.nature_qualificationPresent);
   printf ("%s.m.nature_categoriePresent = %d\n", name, (int)pvalue->m.nature_categoriePresent);
   printf ("%s.m.nature_mobilitePresent = %d\n", name, (int)pvalue->m.nature_mobilitePresent);
   printf ("%s.m.capacite_missionPresent = %d\n", name, (int)pvalue->m.capacite_missionPresent);
   printf ("%s.m.perception_par_compagniePresent = %d\n", name, (int)pvalue->m.perception_par_compagniePresent);
   printf ("%s.m.renduPresent = %d\n", name, (int)pvalue->m.renduPresent);
   printf ("%s.m.prisonnierPresent = %d\n", name, (int)pvalue->m.prisonnierPresent);
   printf ("%s.m.refugie_pris_en_comptePresent = %d\n", name, (int)pvalue->m.refugie_pris_en_comptePresent);
   sprintf (namebuf, "%s.oid_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_connaissance);

   sprintf (namebuf, "%s.oid_groupe_possesseur", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_possesseur);

   if (pvalue->m.pertinencePresent) {
      sprintf (namebuf, "%s.pertinence", name);
      asn1Print_Pourcentage (namebuf, &pvalue->pertinence);
   }

   if (pvalue->m.identification_levelPresent) {
      sprintf (namebuf, "%s.identification_level", name);
      asn1Print_EnumUnitIdentificationLevel (namebuf, &pvalue->identification_level);
   }

   if (pvalue->m.max_identification_levelPresent) {
      sprintf (namebuf, "%s.max_identification_level", name);
      asn1Print_EnumUnitIdentificationLevel (namebuf, &pvalue->max_identification_level);
   }

   if (pvalue->m.etat_opPresent) {
      sprintf (namebuf, "%s.etat_op", name);
      asn1Print_PourcentageLibre (namebuf, &pvalue->etat_op);
   }

   if (pvalue->m.positionPresent) {
      sprintf (namebuf, "%s.position", name);
      asn1Print_CoordUTM (namebuf, &pvalue->position);
   }

   if (pvalue->m.directionPresent) {
      sprintf (namebuf, "%s.direction", name);
      asn1Print_Direction (namebuf, &pvalue->direction);
   }

   if (pvalue->m.speedPresent) {
      sprintf (namebuf, "%s.speed", name);
      asn1Print_Vitesse (namebuf, &pvalue->speed);
   }

   if (pvalue->m.campPresent) {
      sprintf (namebuf, "%s.camp", name);
      asn1Print_OID (namebuf, &pvalue->camp);
   }

   if (pvalue->m.nature_armePresent) {
      sprintf (namebuf, "%s.nature_arme", name);
      asn1Print_EnumUnitNatureWeapon (namebuf, &pvalue->nature_arme);
   }

   if (pvalue->m.nature_niveauPresent) {
      sprintf (namebuf, "%s.nature_niveau", name);
      asn1Print_EnumNatureLevel (namebuf, &pvalue->nature_niveau);
   }

   if (pvalue->m.nature_pcPresent) {
      sprintf (namebuf, "%s.nature_pc", name);
      rtPrintBoolean (namebuf, pvalue->nature_pc);
   }

   if (pvalue->m.nature_specialisationPresent) {
      sprintf (namebuf, "%s.nature_specialisation", name);
      asn1Print_EnumUnitNatureSpecialization (namebuf, &pvalue->nature_specialisation);
   }

   if (pvalue->m.nature_qualificationPresent) {
      sprintf (namebuf, "%s.nature_qualification", name);
      asn1Print_EnumUnitNatureQualifier (namebuf, &pvalue->nature_qualification);
   }

   if (pvalue->m.nature_categoriePresent) {
      sprintf (namebuf, "%s.nature_categorie", name);
      asn1Print_EnumUnitNatureCategory (namebuf, &pvalue->nature_categorie);
   }

   if (pvalue->m.nature_mobilitePresent) {
      sprintf (namebuf, "%s.nature_mobilite", name);
      asn1Print_EnumUnitNatureMobility (namebuf, &pvalue->nature_mobilite);
   }

   if (pvalue->m.capacite_missionPresent) {
      sprintf (namebuf, "%s.capacite_mission", name);
      asn1Print_EnumUnitCapaciteMission (namebuf, &pvalue->capacite_mission);
   }

   if (pvalue->m.perception_par_compagniePresent) {
      sprintf (namebuf, "%s.perception_par_compagnie", name);
      asn1Print__SeqOfAutomatePerception (namebuf, &pvalue->perception_par_compagnie);
   }

   if (pvalue->m.renduPresent) {
      sprintf (namebuf, "%s.rendu", name);
      rtPrintBoolean (namebuf, pvalue->rendu);
   }

   if (pvalue->m.prisonnierPresent) {
      sprintf (namebuf, "%s.prisonnier", name);
      rtPrintBoolean (namebuf, pvalue->prisonnier);
   }

   if (pvalue->m.refugie_pris_en_comptePresent) {
      sprintf (namebuf, "%s.refugie_pris_en_compte", name);
      rtPrintBoolean (namebuf, pvalue->refugie_pris_en_compte);
   }

}

void ASN1C_MsgUnitKnowledgeUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitKnowledgeUpdate (name, &msgData);
}

void asn1Print_MsgUnitKnowledgeDestruction (ASN1ConstCharPtr name, ASN1T_MsgUnitKnowledgeDestruction* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_connaissance);

   sprintf (namebuf, "%s.oid_groupe_possesseur", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_possesseur);

}

void ASN1C_MsgUnitKnowledgeDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgUnitKnowledgeDestruction (name, &msgData);
}


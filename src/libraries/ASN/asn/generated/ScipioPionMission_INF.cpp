/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 26-Dec-2005.
 */
#include "ScipioPionMission_INF.h"

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_ReconnaitreAxe                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_ReconnaitreAxe::ASN1C_Mission_Pion_INF_ReconnaitreAxe (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_ReconnaitreAxe& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_ReconnaitreAxe (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ReconnaitreAxe* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_ReconnaitreAxe: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_ReconnaitreAxe: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_ReconnaitreAxe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_ReconnaitreAxe (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_ReconnaitreAxe (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ReconnaitreAxe* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_ReconnaitreAxe: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_ReconnaitreAxe: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_ReconnaitreAxe::Decode ()
{
   return asn1PD_Mission_Pion_INF_ReconnaitreAxe (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Couvrir                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Couvrir::ASN1C_Mission_Pion_INF_Couvrir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Couvrir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Couvrir: start\n");

   /* encode point_couverture */

   PU_PUSHNAME (ctxt_p, "point_couverture");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_couverture);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_Agent (ctxt_p, pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Couvrir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Couvrir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Couvrir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Couvrir: start\n");

   /* decode point_couverture */

   PU_PUSHNAME (ctxt_p, "point_couverture");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_couverture);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_Agent (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Couvrir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Couvrir::Decode ()
{
   return asn1PD_Mission_Pion_INF_Couvrir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Reduire                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Reduire::ASN1C_Mission_Pion_INF_Reduire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Reduire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Reduire: start\n");

   /* encode unite_a_reduire */

   PU_PUSHNAME (ctxt_p, "unite_a_reduire");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->unite_a_reduire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Reduire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Reduire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Reduire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Reduire: start\n");

   /* decode unite_a_reduire */

   PU_PUSHNAME (ctxt_p, "unite_a_reduire");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->unite_a_reduire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Reduire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Reduire::Decode ()
{
   return asn1PD_Mission_Pion_INF_Reduire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Appuyer                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Appuyer::ASN1C_Mission_Pion_INF_Appuyer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Appuyer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Appuyer: start\n");

   /* encode unite_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unite_a_appuyer");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Appuyer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Appuyer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Appuyer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Appuyer: start\n");

   /* decode unite_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unite_a_appuyer");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Appuyer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Appuyer::Decode ()
{
   return asn1PD_Mission_Pion_INF_Appuyer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Fixer                                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Fixer::ASN1C_Mission_Pion_INF_Fixer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Fixer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Fixer: start\n");

   /* encode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Fixer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Fixer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Fixer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Fixer: start\n");

   /* decode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Fixer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Fixer::Decode ()
{
   return asn1PD_Mission_Pion_INF_Fixer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_ControlerSecteur                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_ControlerSecteur::ASN1C_Mission_Pion_INF_ControlerSecteur (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_ControlerSecteur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_ControlerSecteur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ControlerSecteur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_ControlerSecteur: start\n");

   /* encode secteur */

   PU_PUSHNAME (ctxt_p, "secteur");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->secteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   PU_PUSHNAME (ctxt_p, "preparer_terrain");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_ControlerSecteur: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_ControlerSecteur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_ControlerSecteur (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_ControlerSecteur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ControlerSecteur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_ControlerSecteur: start\n");

   /* decode secteur */

   PU_PUSHNAME (ctxt_p, "secteur");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->secteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   PU_PUSHNAME (ctxt_p, "preparer_terrain");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_ControlerSecteur: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_ControlerSecteur::Decode ()
{
   return asn1PD_Mission_Pion_INF_ControlerSecteur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_SurveillerSecteur                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_SurveillerSecteur::ASN1C_Mission_Pion_INF_SurveillerSecteur (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_SurveillerSecteur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_SurveillerSecteur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_SurveillerSecteur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_SurveillerSecteur: start\n");

   /* encode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_SurveillerSecteur: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_SurveillerSecteur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_SurveillerSecteur (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_SurveillerSecteur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_SurveillerSecteur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_SurveillerSecteur: start\n");

   /* decode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_SurveillerSecteur: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_SurveillerSecteur::Decode ()
{
   return asn1PD_Mission_Pion_INF_SurveillerSecteur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Barrer                                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Barrer::ASN1C_Mission_Pion_INF_Barrer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Barrer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Barrer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Barrer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Barrer: start\n");

   /* encode position_a_barrer */

   PU_PUSHNAME (ctxt_p, "position_a_barrer");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_a_barrer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Barrer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Barrer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Barrer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Barrer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Barrer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Barrer: start\n");

   /* decode position_a_barrer */

   PU_PUSHNAME (ctxt_p, "position_a_barrer");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_a_barrer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Barrer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Barrer::Decode ()
{
   return asn1PD_Mission_Pion_INF_Barrer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_ReconnaitrePoint                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_ReconnaitrePoint::ASN1C_Mission_Pion_INF_ReconnaitrePoint (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_ReconnaitrePoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_ReconnaitrePoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ReconnaitrePoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_ReconnaitrePoint: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_a_reconnaitre */

   PU_PUSHNAME (ctxt_p, "point_a_reconnaitre");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_a_reconnaitre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_ReconnaitrePoint: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_ReconnaitrePoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_ReconnaitrePoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_ReconnaitrePoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ReconnaitrePoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_ReconnaitrePoint: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_a_reconnaitre */

   PU_PUSHNAME (ctxt_p, "point_a_reconnaitre");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_a_reconnaitre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_ReconnaitrePoint: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_ReconnaitrePoint::Decode ()
{
   return asn1PD_Mission_Pion_INF_ReconnaitrePoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Eclairer                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Eclairer::ASN1C_Mission_Pion_INF_Eclairer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Eclairer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Eclairer: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Eclairer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Eclairer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Eclairer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Eclairer: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Eclairer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Eclairer::Decode ()
{
   return asn1PD_Mission_Pion_INF_Eclairer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Interdire                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Interdire::ASN1C_Mission_Pion_INF_Interdire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Interdire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Interdire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Interdire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Interdire: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode point_a_interdire */

   PU_PUSHNAME (ctxt_p, "point_a_interdire");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_a_interdire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Pion_INF_Interdire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Interdire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Interdire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Interdire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Interdire* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Pion_INF_Interdire: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode point_a_interdire */

   PU_PUSHNAME (ctxt_p, "point_a_interdire");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_a_interdire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Pion_INF_Interdire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Interdire::Decode ()
{
   return asn1PD_Mission_Pion_INF_Interdire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Semparer                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Semparer::ASN1C_Mission_Pion_INF_Semparer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Semparer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Semparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Semparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Semparer: start\n");

   /* encode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PE_Point (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Semparer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Semparer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Semparer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Semparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Semparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Semparer: start\n");

   /* decode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PD_Point (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Semparer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Semparer::Decode ()
{
   return asn1PD_Mission_Pion_INF_Semparer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_PrendrePreciserContact                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_PrendrePreciserContact::ASN1C_Mission_Pion_INF_PrendrePreciserContact (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_PrendrePreciserContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_PrendrePreciserContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_PrendrePreciserContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_PrendrePreciserContact: start\n");

   /* encode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_PrendrePreciserContact: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_PrendrePreciserContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_PrendrePreciserContact (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_PrendrePreciserContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_PrendrePreciserContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_PrendrePreciserContact: start\n");

   /* decode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_PrendrePreciserContact: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_PrendrePreciserContact::Decode ()
{
   return asn1PD_Mission_Pion_INF_PrendrePreciserContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Defendre                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Defendre::ASN1C_Mission_Pion_INF_Defendre (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Defendre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Defendre (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Defendre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Defendre: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode point_a_defendre */

   PU_PUSHNAME (ctxt_p, "point_a_defendre");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_a_defendre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Pion_INF_Defendre: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Defendre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Defendre (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Defendre (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Defendre* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Pion_INF_Defendre: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode point_a_defendre */

   PU_PUSHNAME (ctxt_p, "point_a_defendre");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_a_defendre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Pion_INF_Defendre: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Defendre::Decode ()
{
   return asn1PD_Mission_Pion_INF_Defendre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_DetruireEmbuscade                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_DetruireEmbuscade::ASN1C_Mission_Pion_INF_DetruireEmbuscade (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_DetruireEmbuscade& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_DetruireEmbuscade (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_DetruireEmbuscade* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_DetruireEmbuscade: start\n");

   /* encode position_embuscade */

   PU_PUSHNAME (ctxt_p, "position_embuscade");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_embuscade);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode position_regroupement */

   PU_PUSHNAME (ctxt_p, "position_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nature_obstacle */

   PU_PUSHNAME (ctxt_p, "nature_obstacle");

   stat = asn1PE_EnumObjectType (ctxt_p, pvalue->nature_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_DetruireEmbuscade: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_DetruireEmbuscade::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_DetruireEmbuscade (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_DetruireEmbuscade (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_DetruireEmbuscade* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_DetruireEmbuscade: start\n");

   /* decode position_embuscade */

   PU_PUSHNAME (ctxt_p, "position_embuscade");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_embuscade);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode position_regroupement */

   PU_PUSHNAME (ctxt_p, "position_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nature_obstacle */

   PU_PUSHNAME (ctxt_p, "nature_obstacle");

   stat = asn1PD_EnumObjectType (ctxt_p, &pvalue->nature_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_DetruireEmbuscade: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_DetruireEmbuscade::Decode ()
{
   return asn1PD_Mission_Pion_INF_DetruireEmbuscade (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_ContreAttaquer                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_ContreAttaquer::ASN1C_Mission_Pion_INF_ContreAttaquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_ContreAttaquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_ContreAttaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ContreAttaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_ContreAttaquer: start\n");

   /* encode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_ContreAttaquer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_ContreAttaquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_ContreAttaquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_ContreAttaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_ContreAttaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_ContreAttaquer: start\n");

   /* decode ennemi */

   PU_PUSHNAME (ctxt_p, "ennemi");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->ennemi);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_ContreAttaquer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_ContreAttaquer::Decode ()
{
   return asn1PD_Mission_Pion_INF_ContreAttaquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Freiner                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Freiner::ASN1C_Mission_Pion_INF_Freiner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Freiner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Freiner: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Freiner: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Freiner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Freiner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Freiner: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Freiner: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Freiner::Decode ()
{
   return asn1PD_Mission_Pion_INF_Freiner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_FlancGarder                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_FlancGarder::ASN1C_Mission_Pion_INF_FlancGarder (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_FlancGarder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_FlancGarder: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unite_a_flancgarder */

   PU_PUSHNAME (ctxt_p, "unite_a_flancgarder");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_flancgarder);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_FlancGarder: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_FlancGarder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_FlancGarder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_FlancGarder: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unite_a_flancgarder */

   PU_PUSHNAME (ctxt_p, "unite_a_flancgarder");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_flancgarder);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_FlancGarder: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_FlancGarder::Decode ()
{
   return asn1PD_Mission_Pion_INF_FlancGarder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_OrganiserUnCheckPoint                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_OrganiserUnCheckPoint::ASN1C_Mission_Pion_INF_OrganiserUnCheckPoint (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_OrganiserUnCheckPoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_OrganiserUnCheckPoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_OrganiserUnCheckPoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_OrganiserUnCheckPoint: start\n");

   /* encode point_installation */

   PU_PUSHNAME (ctxt_p, "point_installation");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_OrganiserUnCheckPoint: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_OrganiserUnCheckPoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_OrganiserUnCheckPoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_OrganiserUnCheckPoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_OrganiserUnCheckPoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_OrganiserUnCheckPoint: start\n");

   /* decode point_installation */

   PU_PUSHNAME (ctxt_p, "point_installation");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_OrganiserUnCheckPoint: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_OrganiserUnCheckPoint::Decode ()
{
   return asn1PD_Mission_Pion_INF_OrganiserUnCheckPoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumMissionInfNatureObjectif                              */
/*                                                            */
/**************************************************************/

ASN1C_EnumMissionInfNatureObjectif::ASN1C_EnumMissionInfNatureObjectif (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumMissionInfNatureObjectif& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumMissionInfNatureObjectif (ASN1CTXT* ctxt_p, ASN1T_EnumMissionInfNatureObjectif value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumMissionInfNatureObjectif: start\n");

   switch (value) {
      case EnumMissionInfNatureObjectif::elements_terrain: ui = 0; break;
      case EnumMissionInfNatureObjectif::objets: ui = 1; break;
      case EnumMissionInfNatureObjectif::elements_mobiles: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumMissionInfNatureObjectif: end\n");
   return (stat);
}

int ASN1C_EnumMissionInfNatureObjectif::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumMissionInfNatureObjectif (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumMissionInfNatureObjectif (ASN1CTXT* ctxt_p, ASN1T_EnumMissionInfNatureObjectif* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumMissionInfNatureObjectif: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumMissionInfNatureObjectif::elements_terrain; break;
      case 1: *pvalue = EnumMissionInfNatureObjectif::objets; break;
      case 2: *pvalue = EnumMissionInfNatureObjectif::elements_mobiles; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumMissionInfNatureObjectif: end\n");

   return (stat);
}

int ASN1C_EnumMissionInfNatureObjectif::Decode ()
{
   return asn1PD_EnumMissionInfNatureObjectif (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Harceler                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Harceler::ASN1C_Mission_Pion_INF_Harceler (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Harceler& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Harceler (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Harceler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Harceler: start\n");

   /* encode secteur */

   PU_PUSHNAME (ctxt_p, "secteur");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->secteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nature_objectif */

   PU_PUSHNAME (ctxt_p, "nature_objectif");

   stat = asn1PE_EnumMissionInfNatureObjectif (ctxt_p, pvalue->nature_objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Harceler: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Harceler::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Harceler (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Harceler (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Harceler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Harceler: start\n");

   /* decode secteur */

   PU_PUSHNAME (ctxt_p, "secteur");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->secteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nature_objectif */

   PU_PUSHNAME (ctxt_p, "nature_objectif");

   stat = asn1PD_EnumMissionInfNatureObjectif (ctxt_p, &pvalue->nature_objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Harceler: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Harceler::Decode ()
{
   return asn1PD_Mission_Pion_INF_Harceler (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_DetruireParCoupDeMain                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_DetruireParCoupDeMain::ASN1C_Mission_Pion_INF_DetruireParCoupDeMain (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_DetruireParCoupDeMain& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_DetruireParCoupDeMain (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_DetruireParCoupDeMain* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_DetruireParCoupDeMain: start\n");

   /* encode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PE_Point (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode heure_destruction */

   PU_PUSHNAME (ctxt_p, "heure_destruction");

   stat = asn1PE_GDH (ctxt_p, &pvalue->heure_destruction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nature_destruction */

   PU_PUSHNAME (ctxt_p, "nature_destruction");

   stat = asn1PE_EnumMissionInfNatureObjectif (ctxt_p, pvalue->nature_destruction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_DetruireParCoupDeMain: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_DetruireParCoupDeMain::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_DetruireParCoupDeMain (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_DetruireParCoupDeMain (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_DetruireParCoupDeMain* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_DetruireParCoupDeMain: start\n");

   /* decode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PD_Point (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode heure_destruction */

   PU_PUSHNAME (ctxt_p, "heure_destruction");

   stat = asn1PD_GDH (ctxt_p, &pvalue->heure_destruction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nature_destruction */

   PU_PUSHNAME (ctxt_p, "nature_destruction");

   stat = asn1PD_EnumMissionInfNatureObjectif (ctxt_p, &pvalue->nature_destruction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_DetruireParCoupDeMain: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_DetruireParCoupDeMain::Decode ()
{
   return asn1PD_Mission_Pion_INF_DetruireParCoupDeMain (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_EscorterUnConvoi                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_EscorterUnConvoi::ASN1C_Mission_Pion_INF_EscorterUnConvoi (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_EscorterUnConvoi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_EscorterUnConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_EscorterUnConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_EscorterUnConvoi: start\n");

   /* encode convoi_a_escorter */

   PU_PUSHNAME (ctxt_p, "convoi_a_escorter");

   stat = asn1PE_Agent (ctxt_p, pvalue->convoi_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_EscorterUnConvoi: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_EscorterUnConvoi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_EscorterUnConvoi (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_EscorterUnConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_EscorterUnConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_EscorterUnConvoi: start\n");

   /* decode convoi_a_escorter */

   PU_PUSHNAME (ctxt_p, "convoi_a_escorter");

   stat = asn1PD_Agent (ctxt_p, &pvalue->convoi_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_EscorterUnConvoi: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_EscorterUnConvoi::Decode ()
{
   return asn1PD_Mission_Pion_INF_EscorterUnConvoi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_RenseignerSur                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_RenseignerSur::ASN1C_Mission_Pion_INF_RenseignerSur (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_RenseignerSur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_RenseignerSur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_RenseignerSur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_RenseignerSur: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_RenseignerSur: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_RenseignerSur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_RenseignerSur (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_RenseignerSur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_RenseignerSur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_RenseignerSur: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_RenseignerSur: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_RenseignerSur::Decode ()
{
   return asn1PD_Mission_Pion_INF_RenseignerSur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Soutenir                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Soutenir::ASN1C_Mission_Pion_INF_Soutenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Soutenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Soutenir: start\n");

   /* encode unite_a_soutenir */

   PU_PUSHNAME (ctxt_p, "unite_a_soutenir");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_soutenir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Soutenir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Soutenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Soutenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Soutenir: start\n");

   /* decode unite_a_soutenir */

   PU_PUSHNAME (ctxt_p, "unite_a_soutenir");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_soutenir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Soutenir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Soutenir::Decode ()
{
   return asn1PD_Mission_Pion_INF_Soutenir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Securiser                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Securiser::ASN1C_Mission_Pion_INF_Securiser (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Securiser& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Securiser (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Securiser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Securiser: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Securiser: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Securiser::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Securiser (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Securiser (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Securiser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Securiser: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Securiser: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Securiser::Decode ()
{
   return asn1PD_Mission_Pion_INF_Securiser (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_Recueillir                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_Recueillir::ASN1C_Mission_Pion_INF_Recueillir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_Recueillir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_Recueillir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Recueillir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_Recueillir: start\n");

   /* encode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pia */

   PU_PUSHNAME (ctxt_p, "pia");

   stat = asn1PE_Point (ctxt_p, &pvalue->pia);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_Recueillir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_Recueillir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_Recueillir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_Recueillir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_Recueillir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_Recueillir: start\n");

   /* decode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pia */

   PU_PUSHNAME (ctxt_p, "pia");

   stat = asn1PD_Point (ctxt_p, &pvalue->pia);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_Recueillir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_Recueillir::Decode ()
{
   return asn1PD_Mission_Pion_INF_Recueillir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_INF_RepondreAAggression                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_INF_RepondreAAggression::ASN1C_Mission_Pion_INF_RepondreAAggression (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_INF_RepondreAAggression& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_INF_RepondreAAggression (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_RepondreAAggression* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_INF_RepondreAAggression: start\n");

   /* encode aggresseur */

   PU_PUSHNAME (ctxt_p, "aggresseur");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->aggresseur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_INF_RepondreAAggression: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_INF_RepondreAAggression::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_INF_RepondreAAggression (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_INF_RepondreAAggression (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_INF_RepondreAAggression* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_INF_RepondreAAggression: start\n");

   /* decode aggresseur */

   PU_PUSHNAME (ctxt_p, "aggresseur");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->aggresseur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_INF_RepondreAAggression: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_INF_RepondreAAggression::Decode ()
{
   return asn1PD_Mission_Pion_INF_RepondreAAggression (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 18-Aug-2005.
 */
#include "ScipioAutomateMission_ABC.h"

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_ArmerPointDeControle                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_ArmerPointDeControle::ASN1C_Mission_Automate_ABC_ArmerPointDeControle (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_ArmerPointDeControle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_ArmerPointDeControle (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ArmerPointDeControle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_ArmerPointDeControle: start\n");

   /* encode zone_de_controle */

   PU_PUSHNAME (ctxt_p, "zone_de_controle");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_de_controle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_ArmerPointDeControle: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_ArmerPointDeControle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_ArmerPointDeControle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_ArmerPointDeControle (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ArmerPointDeControle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_ArmerPointDeControle: start\n");

   /* decode zone_de_controle */

   PU_PUSHNAME (ctxt_p, "zone_de_controle");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_de_controle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_ArmerPointDeControle: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_ArmerPointDeControle::Decode ()
{
   return asn1PD_Mission_Automate_ABC_ArmerPointDeControle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_OrganiserAccueilColonneRefugies      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_OrganiserAccueilColonneRefugies::ASN1C_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_OrganiserAccueilColonneRefugies& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_OrganiserAccueilColonneRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_OrganiserAccueilColonneRefugies: start\n");

   /* encode zone_installation */

   PU_PUSHNAME (ctxt_p, "zone_installation");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_OrganiserAccueilColonneRefugies: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_OrganiserAccueilColonneRefugies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_OrganiserAccueilColonneRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_OrganiserAccueilColonneRefugies: start\n");

   /* decode zone_installation */

   PU_PUSHNAME (ctxt_p, "zone_installation");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_OrganiserAccueilColonneRefugies: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_OrganiserAccueilColonneRefugies::Decode ()
{
   return asn1PD_Mission_Automate_ABC_OrganiserAccueilColonneRefugies (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_ProtegerPC                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_ProtegerPC::ASN1C_Mission_Automate_ABC_ProtegerPC (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_ProtegerPC& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_ProtegerPC (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ProtegerPC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_ProtegerPC: start\n");

   /* encode pc */

   PU_PUSHNAME (ctxt_p, "pc");

   stat = asn1PE_Automate (ctxt_p, pvalue->pc);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_ProtegerPC: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_ProtegerPC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_ProtegerPC (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_ProtegerPC (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ProtegerPC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_ProtegerPC: start\n");

   /* decode pc */

   PU_PUSHNAME (ctxt_p, "pc");

   stat = asn1PD_Automate (ctxt_p, &pvalue->pc);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_ProtegerPC: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_ProtegerPC::Decode ()
{
   return asn1PD_Mission_Automate_ABC_ProtegerPC (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Appuyer                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Appuyer::ASN1C_Mission_Automate_ABC_Appuyer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Appuyer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Appuyer: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Appuyer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Appuyer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Appuyer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Appuyer: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Appuyer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Appuyer::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Appuyer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Attaquer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Attaquer::ASN1C_Mission_Automate_ABC_Attaquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Attaquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Attaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Attaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Attaquer: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_Attaquer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Attaquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Attaquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Attaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Attaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Attaquer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Attaquer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Attaquer::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Attaquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_ContreAttaquer                       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_ContreAttaquer::ASN1C_Mission_Automate_ABC_ContreAttaquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_ContreAttaquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_ContreAttaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ContreAttaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_ContreAttaquer: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_ContreAttaquer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_ContreAttaquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_ContreAttaquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_ContreAttaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ContreAttaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_ContreAttaquer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_ContreAttaquer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_ContreAttaquer::Decode ()
{
   return asn1PD_Mission_Automate_ABC_ContreAttaquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Controler                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Controler::ASN1C_Mission_Automate_ABC_Controler (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Controler& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Controler (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Controler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Controler: start\n");

   /* encode zone_a_controler */

   PU_PUSHNAME (ctxt_p, "zone_a_controler");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_a_controler);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Controler: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Controler::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Controler (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Controler (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Controler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Controler: start\n");

   /* decode zone_a_controler */

   PU_PUSHNAME (ctxt_p, "zone_a_controler");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_a_controler);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Controler: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Controler::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Controler (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Couvrir                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Couvrir::ASN1C_Mission_Automate_ABC_Couvrir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Couvrir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Couvrir: start\n");

   /* encode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Couvrir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Couvrir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Couvrir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Couvrir: start\n");

   /* decode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Couvrir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Couvrir::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Couvrir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_DonnerCoupArret                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_DonnerCoupArret::ASN1C_Mission_Automate_ABC_DonnerCoupArret (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_DonnerCoupArret& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_DonnerCoupArret (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_DonnerCoupArret* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_DonnerCoupArret: start\n");

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_DonnerCoupArret: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_DonnerCoupArret::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_DonnerCoupArret (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_DonnerCoupArret (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_DonnerCoupArret* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_DonnerCoupArret: start\n");

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_DonnerCoupArret: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_DonnerCoupArret::Decode ()
{
   return asn1PD_Mission_Automate_ABC_DonnerCoupArret (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Eclairer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Eclairer::ASN1C_Mission_Automate_ABC_Eclairer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Eclairer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Eclairer: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_Eclairer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Eclairer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Eclairer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Eclairer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Eclairer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Eclairer::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Eclairer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_EffectuerRaid                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_EffectuerRaid::ASN1C_Mission_Automate_ABC_EffectuerRaid (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_EffectuerRaid& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_EffectuerRaid (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_EffectuerRaid* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_EffectuerRaid: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_EffectuerRaid: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_EffectuerRaid::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_EffectuerRaid (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_EffectuerRaid (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_EffectuerRaid* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_EffectuerRaid: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_EffectuerRaid: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_EffectuerRaid::Decode ()
{
   return asn1PD_Mission_Automate_ABC_EffectuerRaid (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Interdire                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Interdire::ASN1C_Mission_Automate_ABC_Interdire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Interdire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Interdire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Interdire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Interdire: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_Interdire: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Interdire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Interdire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Interdire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Interdire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Interdire: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Interdire: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Interdire::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Interdire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Jalonner                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Jalonner::ASN1C_Mission_Automate_ABC_Jalonner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Jalonner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Jalonner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Jalonner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Jalonner: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_Jalonner: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Jalonner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Jalonner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Jalonner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Jalonner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Jalonner: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Jalonner: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Jalonner::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Jalonner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_PrendrePreciserContact               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_PrendrePreciserContact::ASN1C_Mission_Automate_ABC_PrendrePreciserContact (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_PrendrePreciserContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_PrendrePreciserContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_PrendrePreciserContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_PrendrePreciserContact: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_PrendrePreciserContact: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_PrendrePreciserContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_PrendrePreciserContact (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_PrendrePreciserContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_PrendrePreciserContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_PrendrePreciserContact: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_PrendrePreciserContact: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_PrendrePreciserContact::Decode ()
{
   return asn1PD_Mission_Automate_ABC_PrendrePreciserContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Reconnaitre                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Reconnaitre::ASN1C_Mission_Automate_ABC_Reconnaitre (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Reconnaitre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Reconnaitre (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Reconnaitre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Reconnaitre: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_Reconnaitre: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Reconnaitre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Reconnaitre (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Reconnaitre (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Reconnaitre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Reconnaitre: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Reconnaitre: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Reconnaitre::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Reconnaitre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_ReconnaitrePoint                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_ReconnaitrePoint::ASN1C_Mission_Automate_ABC_ReconnaitrePoint (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_ReconnaitrePoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_ReconnaitrePoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ReconnaitrePoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_ReconnaitrePoint: start\n");

   /* encode point_a_reconnaitre */

   PU_PUSHNAME (ctxt_p, "point_a_reconnaitre");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->point_a_reconnaitre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_ReconnaitrePoint: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_ReconnaitrePoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_ReconnaitrePoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_ReconnaitrePoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ReconnaitrePoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_ReconnaitrePoint: start\n");

   /* decode point_a_reconnaitre */

   PU_PUSHNAME (ctxt_p, "point_a_reconnaitre");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->point_a_reconnaitre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_ReconnaitrePoint: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_ReconnaitrePoint::Decode ()
{
   return asn1PD_Mission_Automate_ABC_ReconnaitrePoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Reduire                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Reduire::ASN1C_Mission_Automate_ABC_Reduire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Reduire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Reduire: start\n");

   /* encode zone_resistance */

   PU_PUSHNAME (ctxt_p, "zone_resistance");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_resistance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Reduire: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Reduire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Reduire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Reduire: start\n");

   /* decode zone_resistance */

   PU_PUSHNAME (ctxt_p, "zone_resistance");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_resistance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Reduire: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Reduire::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Reduire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_ReleverEnDepassant                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_ReleverEnDepassant::ASN1C_Mission_Automate_ABC_ReleverEnDepassant (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_ReleverEnDepassant& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_ReleverEnDepassant (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ReleverEnDepassant* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_ReleverEnDepassant: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_ReleverEnDepassant: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_ReleverEnDepassant::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_ReleverEnDepassant (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_ReleverEnDepassant (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_ReleverEnDepassant* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_ReleverEnDepassant: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_ReleverEnDepassant: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_ReleverEnDepassant::Decode ()
{
   return asn1PD_Mission_Automate_ABC_ReleverEnDepassant (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Semparer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Semparer::ASN1C_Mission_Automate_ABC_Semparer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Semparer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Semparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Semparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Semparer: start\n");

   /* encode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Semparer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Semparer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Semparer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Semparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Semparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Semparer: start\n");

   /* decode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Semparer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Semparer::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Semparer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Tenir                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Tenir::ASN1C_Mission_Automate_ABC_Tenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Tenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Tenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Tenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Tenir: start\n");

   /* encode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Tenir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Tenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Tenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Tenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Tenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Tenir: start\n");

   /* decode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Tenir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Tenir::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Tenir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Soutenir                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Soutenir::ASN1C_Mission_Automate_ABC_Soutenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Soutenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Soutenir: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Soutenir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Soutenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Soutenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Soutenir: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Soutenir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Soutenir::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Soutenir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Surveiller                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Surveiller::ASN1C_Mission_Automate_ABC_Surveiller (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Surveiller& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Surveiller: start\n");

   /* encode zone_installation */

   PU_PUSHNAME (ctxt_p, "zone_installation");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Surveiller: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Surveiller::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Surveiller (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Surveiller: start\n");

   /* decode zone_installation */

   PU_PUSHNAME (ctxt_p, "zone_installation");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Surveiller: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Surveiller::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Surveiller (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_FlancGarder                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_FlancGarder::ASN1C_Mission_Automate_ABC_FlancGarder (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_FlancGarder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_FlancGarder: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_FlancGarder: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_FlancGarder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_FlancGarder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_FlancGarder: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_FlancGarder: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_FlancGarder::Decode ()
{
   return asn1PD_Mission_Automate_ABC_FlancGarder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_RenseignerSur                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_RenseignerSur::ASN1C_Mission_Automate_ABC_RenseignerSur (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_RenseignerSur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_RenseignerSur (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_RenseignerSur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_RenseignerSur: start\n");

   /* encode zone_a_renseigner */

   PU_PUSHNAME (ctxt_p, "zone_a_renseigner");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_a_renseigner);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_RenseignerSur: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_RenseignerSur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_RenseignerSur (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_RenseignerSur (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_RenseignerSur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_RenseignerSur: start\n");

   /* decode zone_a_renseigner */

   PU_PUSHNAME (ctxt_p, "zone_a_renseigner");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_a_renseigner);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_RenseignerSur: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_RenseignerSur::Decode ()
{
   return asn1PD_Mission_Automate_ABC_RenseignerSur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Fixer                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Fixer::ASN1C_Mission_Automate_ABC_Fixer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Fixer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Fixer: start\n");

   /* encode ennemis */

   PU_PUSHNAME (ctxt_p, "ennemis");

   stat = asn1PE_ListKnowledgeAgent (ctxt_p, &pvalue->ennemis);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_Fixer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Fixer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Fixer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Fixer: start\n");

   /* decode ennemis */

   PU_PUSHNAME (ctxt_p, "ennemis");

   stat = asn1PD_ListKnowledgeAgent (ctxt_p, &pvalue->ennemis);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Fixer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Fixer::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Fixer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_Freiner                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_Freiner::ASN1C_Mission_Automate_ABC_Freiner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_Freiner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_Freiner: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_Freiner: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_Freiner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_Freiner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_Freiner: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_Freiner: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_Freiner::Decode ()
{
   return asn1PD_Mission_Automate_ABC_Freiner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_SurveillerItineraire                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_SurveillerItineraire::ASN1C_Mission_Automate_ABC_SurveillerItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_SurveillerItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_SurveillerItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_SurveillerItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_SurveillerItineraire: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_SurveillerItineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_SurveillerItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_SurveillerItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_SurveillerItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_SurveillerItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_SurveillerItineraire: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_SurveillerItineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_SurveillerItineraire::Decode ()
{
   return asn1PD_Mission_Automate_ABC_SurveillerItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_RenseignerSurUnAxe                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_RenseignerSurUnAxe::ASN1C_Mission_Automate_ABC_RenseignerSurUnAxe (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_RenseignerSurUnAxe& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_RenseignerSurUnAxe (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_RenseignerSurUnAxe* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_RenseignerSurUnAxe: start\n");


   rtdiag ("asn1PE_Mission_Automate_ABC_RenseignerSurUnAxe: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_RenseignerSurUnAxe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_RenseignerSurUnAxe (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_RenseignerSurUnAxe (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_RenseignerSurUnAxe* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_RenseignerSurUnAxe: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_RenseignerSurUnAxe: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_RenseignerSurUnAxe::Decode ()
{
   return asn1PD_Mission_Automate_ABC_RenseignerSurUnAxe (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_RecueillirUnite                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_RecueillirUnite::ASN1C_Mission_Automate_ABC_RecueillirUnite (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_RecueillirUnite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_RecueillirUnite (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_RecueillirUnite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_RecueillirUnite: start\n");

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_RecueillirUnite: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_RecueillirUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_RecueillirUnite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_RecueillirUnite (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_RecueillirUnite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_RecueillirUnite: start\n");

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_RecueillirUnite: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_RecueillirUnite::Decode ()
{
   return asn1PD_Mission_Automate_ABC_RecueillirUnite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_ABC_EscorterUnConvoi                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_ABC_EscorterUnConvoi::ASN1C_Mission_Automate_ABC_EscorterUnConvoi (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_ABC_EscorterUnConvoi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_ABC_EscorterUnConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_EscorterUnConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_ABC_EscorterUnConvoi: start\n");

   /* encode convoi_a_escorter */

   PU_PUSHNAME (ctxt_p, "convoi_a_escorter");

   stat = asn1PE_Agent (ctxt_p, pvalue->convoi_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_ABC_EscorterUnConvoi: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_ABC_EscorterUnConvoi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_ABC_EscorterUnConvoi (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_ABC_EscorterUnConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_ABC_EscorterUnConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_ABC_EscorterUnConvoi: start\n");

   /* decode convoi_a_escorter */

   PU_PUSHNAME (ctxt_p, "convoi_a_escorter");

   stat = asn1PD_Agent (ctxt_p, &pvalue->convoi_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_ABC_EscorterUnConvoi: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_ABC_EscorterUnConvoi::Decode ()
{
   return asn1PD_Mission_Automate_ABC_EscorterUnConvoi (mpContext->GetPtr(), &msgData);
}


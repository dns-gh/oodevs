/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 29-Sep-2005.
 */
#include "ScipioAutomateMission_GEN.h"

/**************************************************************/
/*                                                            */
/*  EnumMissionGenPriorite                                    */
/*                                                            */
/**************************************************************/

ASN1C_EnumMissionGenPriorite::ASN1C_EnumMissionGenPriorite (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumMissionGenPriorite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumMissionGenPriorite (ASN1CTXT* ctxt_p, ASN1T_EnumMissionGenPriorite value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumMissionGenPriorite: start\n");

   switch (value) {
      case EnumMissionGenPriorite::prioritaire: ui = 0; break;
      case EnumMissionGenPriorite::normal: ui = 1; break;
      case EnumMissionGenPriorite::peu_prioritaire: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumMissionGenPriorite: end\n");
   return (stat);
}

int ASN1C_EnumMissionGenPriorite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumMissionGenPriorite (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumMissionGenPriorite (ASN1CTXT* ctxt_p, ASN1T_EnumMissionGenPriorite* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumMissionGenPriorite: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumMissionGenPriorite::prioritaire; break;
      case 1: *pvalue = EnumMissionGenPriorite::normal; break;
      case 2: *pvalue = EnumMissionGenPriorite::peu_prioritaire; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumMissionGenPriorite: end\n");

   return (stat);
}

int ASN1C_EnumMissionGenPriorite::Decode ()
{
   return asn1PD_EnumMissionGenPriorite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MissionGenObject                                          */
/*                                                            */
/**************************************************************/

ASN1C_MissionGenObject::ASN1C_MissionGenObject (
   ASN1MessageBuffer& msgBuf, ASN1T_MissionGenObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MissionGenObject (ASN1CTXT* ctxt_p, ASN1T_MissionGenObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MissionGenObject: start\n");

   PU_NEWFIELD (ctxt_p, "urgencePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->urgence != EnumMissionGenUrgence::serie_complementaire));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "preliminairePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preliminaire != EnumMissionGenSousTypeObstacle::preliminaire));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode type_obstacle */

   PU_PUSHNAME (ctxt_p, "type_obstacle");

   stat = asn1PE_EnumObjectType (ctxt_p, pvalue->type_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode urgence */

   if (pvalue->urgence != EnumMissionGenUrgence::serie_complementaire) {
      PU_PUSHNAME (ctxt_p, "urgence");

      stat = asn1PE_EnumMissionGenUrgence (ctxt_p, pvalue->urgence);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode preliminaire */

   if (pvalue->preliminaire != EnumMissionGenSousTypeObstacle::preliminaire) {
      PU_PUSHNAME (ctxt_p, "preliminaire");

      stat = asn1PE_EnumMissionGenSousTypeObstacle (ctxt_p, pvalue->preliminaire);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode priorite */

   PU_PUSHNAME (ctxt_p, "priorite");

   stat = asn1PE_EnumMissionGenPriorite (ctxt_p, pvalue->priorite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MissionGenObject: end\n");
   return (stat);
}

int ASN1C_MissionGenObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MissionGenObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MissionGenObject (ASN1CTXT* ctxt_p, ASN1T_MissionGenObject* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL urgencePresent;
   ASN1BOOL preliminairePresent;

   rtdiag ("asn1PD_MissionGenObject: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "urgencePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else urgencePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "preliminairePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preliminairePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode type_obstacle */

   PU_PUSHNAME (ctxt_p, "type_obstacle");

   stat = asn1PD_EnumObjectType (ctxt_p, &pvalue->type_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode urgence */

   if (urgencePresent) {
      PU_PUSHNAME (ctxt_p, "urgence");

      stat = asn1PD_EnumMissionGenUrgence (ctxt_p, &pvalue->urgence);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->urgence = EnumMissionGenUrgence::serie_complementaire;
   }

   /* decode preliminaire */

   if (preliminairePresent) {
      PU_PUSHNAME (ctxt_p, "preliminaire");

      stat = asn1PD_EnumMissionGenSousTypeObstacle (ctxt_p, &pvalue->preliminaire);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preliminaire = EnumMissionGenSousTypeObstacle::preliminaire;
   }

   /* decode priorite */

   PU_PUSHNAME (ctxt_p, "priorite");

   stat = asn1PD_EnumMissionGenPriorite (ctxt_p, &pvalue->priorite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MissionGenObject: end\n");

   return (stat);
}

int ASN1C_MissionGenObject::Decode ()
{
   return asn1PD_MissionGenObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListMissionGenObject                                      */
/*                                                            */
/**************************************************************/

ASN1C_ListMissionGenObject::ASN1C_ListMissionGenObject (
   ASN1MessageBuffer& msgBuf, ASN1T_ListMissionGenObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListMissionGenObject (ASN1CTXT* ctxt_p, ASN1T_ListMissionGenObject* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListMissionGenObject: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_MissionGenObject (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListMissionGenObject: end\n");
   return (stat);
}

int ASN1C_ListMissionGenObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListMissionGenObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListMissionGenObject (ASN1CTXT* ctxt_p, ASN1T_ListMissionGenObject* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListMissionGenObject: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_MissionGenObject);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_MissionGenObject (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListMissionGenObject: end\n");

   return (stat);
}

int ASN1C_ListMissionGenObject::Decode ()
{
   return asn1PD_ListMissionGenObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_SeDeployer                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_SeDeployer::ASN1C_Mission_Automate_GEN_SeDeployer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_SeDeployer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_SeDeployer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_SeDeployer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_SeDeployer: start\n");

   /* encode zone_deploiement */

   PU_PUSHNAME (ctxt_p, "zone_deploiement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_deploiement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_SeDeployer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_SeDeployer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_SeDeployer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_SeDeployer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_SeDeployer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_SeDeployer: start\n");

   /* decode zone_deploiement */

   PU_PUSHNAME (ctxt_p, "zone_deploiement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_deploiement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_SeDeployer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_SeDeployer::Decode ()
{
   return asn1PD_Mission_Automate_GEN_SeDeployer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_FaireFranchir                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_FaireFranchir::ASN1C_Mission_Automate_GEN_FaireFranchir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_FaireFranchir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_FaireFranchir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FaireFranchir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_FaireFranchir: start\n");

   /* encode sites_de_franchissement */

   PU_PUSHNAME (ctxt_p, "sites_de_franchissement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->sites_de_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_FaireFranchir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_FaireFranchir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_FaireFranchir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_FaireFranchir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FaireFranchir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_FaireFranchir: start\n");

   /* decode sites_de_franchissement */

   PU_PUSHNAME (ctxt_p, "sites_de_franchissement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->sites_de_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_FaireFranchir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_FaireFranchir::Decode ()
{
   return asn1PD_Mission_Automate_GEN_FaireFranchir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserSystemeObstacles             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserSystemeObstacles::ASN1C_Mission_Automate_GEN_RealiserSystemeObstacles (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserSystemeObstacles& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserSystemeObstacles (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserSystemeObstacles* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserSystemeObstacles: start\n");

   /* encode obstacles */

   PU_PUSHNAME (ctxt_p, "obstacles");

   stat = asn1PE_ListMissionGenObject (ctxt_p, &pvalue->obstacles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserSystemeObstacles: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserSystemeObstacles::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserSystemeObstacles (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserSystemeObstacles (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserSystemeObstacles* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserSystemeObstacles: start\n");

   /* decode obstacles */

   PU_PUSHNAME (ctxt_p, "obstacles");

   stat = asn1PD_ListMissionGenObject (ctxt_p, &pvalue->obstacles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserSystemeObstacles: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserSystemeObstacles::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserSystemeObstacles (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_FranchirDeViveForce                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_FranchirDeViveForce::ASN1C_Mission_Automate_GEN_FranchirDeViveForce (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_FranchirDeViveForce& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_FranchirDeViveForce (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FranchirDeViveForce* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_FranchirDeViveForce: start\n");

   /* encode obstacles_a_franchir */

   PU_PUSHNAME (ctxt_p, "obstacles_a_franchir");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->obstacles_a_franchir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_FranchirDeViveForce: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_FranchirDeViveForce::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_FranchirDeViveForce (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_FranchirDeViveForce (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FranchirDeViveForce* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_FranchirDeViveForce: start\n");

   /* decode obstacles_a_franchir */

   PU_PUSHNAME (ctxt_p, "obstacles_a_franchir");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->obstacles_a_franchir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_FranchirDeViveForce: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_FranchirDeViveForce::Decode ()
{
   return asn1PD_Mission_Automate_GEN_FranchirDeViveForce (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RetablirItineraires                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RetablirItineraires::ASN1C_Mission_Automate_GEN_RetablirItineraires (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RetablirItineraires& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RetablirItineraires (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RetablirItineraires* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RetablirItineraires: start\n");

   /* encode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PE_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RetablirItineraires: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RetablirItineraires::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RetablirItineraires (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RetablirItineraires (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RetablirItineraires* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RetablirItineraires: start\n");

   /* decode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PD_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RetablirItineraires: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RetablirItineraires::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RetablirItineraires (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_AmenagerAireStationnement            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_AmenagerAireStationnement::ASN1C_Mission_Automate_GEN_AmenagerAireStationnement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_AmenagerAireStationnement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_AmenagerAireStationnement (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_AmenagerAireStationnement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_AmenagerAireStationnement: start\n");

   /* encode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PE_ListMissionGenObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_AmenagerAireStationnement: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_AmenagerAireStationnement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_AmenagerAireStationnement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_AmenagerAireStationnement (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_AmenagerAireStationnement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_AmenagerAireStationnement: start\n");

   /* decode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PD_ListMissionGenObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_AmenagerAireStationnement: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_AmenagerAireStationnement::Decode ()
{
   return asn1PD_Mission_Automate_GEN_AmenagerAireStationnement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_AmenagerTerrainPoserSommaire         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_AmenagerTerrainPoserSommaire::ASN1C_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_AmenagerTerrainPoserSommaire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_AmenagerTerrainPoserSommaire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_AmenagerTerrainPoserSommaire: start\n");

   /* encode terrain */

   PU_PUSHNAME (ctxt_p, "terrain");

   stat = asn1PE_MissionGenObject (ctxt_p, &pvalue->terrain);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_AmenagerTerrainPoserSommaire: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_AmenagerTerrainPoserSommaire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_AmenagerTerrainPoserSommaire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_AmenagerTerrainPoserSommaire: start\n");

   /* decode terrain */

   PU_PUSHNAME (ctxt_p, "terrain");

   stat = asn1PD_MissionGenObject (ctxt_p, &pvalue->terrain);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_AmenagerTerrainPoserSommaire: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_AmenagerTerrainPoserSommaire::Decode ()
{
   return asn1PD_Mission_Automate_GEN_AmenagerTerrainPoserSommaire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserZonePoser                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserZonePoser::ASN1C_Mission_Automate_GEN_RealiserZonePoser (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserZonePoser& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserZonePoser (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserZonePoser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserZonePoser: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_MissionGenObject (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserZonePoser: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserZonePoser::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserZonePoser (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserZonePoser (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserZonePoser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserZonePoser: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_MissionGenObject (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserZonePoser: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserZonePoser::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserZonePoser (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_ReconnaitreZoneDeploiement           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_ReconnaitreZoneDeploiement::ASN1C_Mission_Automate_GEN_ReconnaitreZoneDeploiement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_ReconnaitreZoneDeploiement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_ReconnaitreZoneDeploiement (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_ReconnaitreZoneDeploiement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_ReconnaitreZoneDeploiement: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_ReconnaitreZoneDeploiement: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_ReconnaitreZoneDeploiement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_ReconnaitreZoneDeploiement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_ReconnaitreZoneDeploiement (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_ReconnaitreZoneDeploiement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_ReconnaitreZoneDeploiement: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_ReconnaitreZoneDeploiement: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_ReconnaitreZoneDeploiement::Decode ()
{
   return asn1PD_Mission_Automate_GEN_ReconnaitreZoneDeploiement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserCampPrisonniers              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserCampPrisonniers::ASN1C_Mission_Automate_GEN_RealiserCampPrisonniers (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserCampPrisonniers& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserCampPrisonniers (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserCampPrisonniers* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserCampPrisonniers: start\n");

   /* encode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PE_Automate (ctxt_p, pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserCampPrisonniers: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserCampPrisonniers::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserCampPrisonniers (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserCampPrisonniers (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserCampPrisonniers* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserCampPrisonniers: start\n");

   /* decode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PD_Automate (ctxt_p, &pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserCampPrisonniers: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserCampPrisonniers::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserCampPrisonniers (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserCampRefugies                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserCampRefugies::ASN1C_Mission_Automate_GEN_RealiserCampRefugies (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserCampRefugies& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserCampRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserCampRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserCampRefugies: start\n");

   /* encode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PE_Automate (ctxt_p, pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserCampRefugies: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserCampRefugies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserCampRefugies (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserCampRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserCampRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserCampRefugies: start\n");

   /* decode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PD_Automate (ctxt_p, &pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserCampRefugies: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserCampRefugies::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserCampRefugies (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserPlatesformesSommairesDeDepl  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial::ASN1C_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial: start\n");

   /* encode plates_formes */

   PU_PUSHNAME (ctxt_p, "plates_formes");

   stat = asn1PE_ListMissionGenObject (ctxt_p, &pvalue->plates_formes);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial: start\n");

   /* decode plates_formes */

   PU_PUSHNAME (ctxt_p, "plates_formes");

   stat = asn1PD_ListMissionGenObject (ctxt_p, &pvalue->plates_formes);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserPlatesformesSommairesDeDeploiementInitial (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPop  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation::ASN1C_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation: start\n");

   /* encode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PE_ListMissionGenObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation: start\n");

   /* decode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PD_ListMissionGenObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserTravauxSommairesAuProfitPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_AppuyerDebarquementTroupes           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_AppuyerDebarquementTroupes::ASN1C_Mission_Automate_GEN_AppuyerDebarquementTroupes (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_AppuyerDebarquementTroupes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_AppuyerDebarquementTroupes (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_AppuyerDebarquementTroupes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_AppuyerDebarquementTroupes: start\n");

   /* encode zones_debarquement */

   PU_PUSHNAME (ctxt_p, "zones_debarquement");

   stat = asn1PE_ListMissionGenObject (ctxt_p, &pvalue->zones_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_AppuyerDebarquementTroupes: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_AppuyerDebarquementTroupes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_AppuyerDebarquementTroupes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_AppuyerDebarquementTroupes (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_AppuyerDebarquementTroupes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_AppuyerDebarquementTroupes: start\n");

   /* decode zones_debarquement */

   PU_PUSHNAME (ctxt_p, "zones_debarquement");

   stat = asn1PD_ListMissionGenObject (ctxt_p, &pvalue->zones_debarquement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_AppuyerDebarquementTroupes: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_AppuyerDebarquementTroupes::Decode ()
{
   return asn1PD_Mission_Automate_GEN_AppuyerDebarquementTroupes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_OuvrirAxesProgression                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_OuvrirAxesProgression::ASN1C_Mission_Automate_GEN_OuvrirAxesProgression (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_OuvrirAxesProgression& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_OuvrirAxesProgression (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_OuvrirAxesProgression* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_OuvrirAxesProgression: start\n");

   /* encode axes */

   PU_PUSHNAME (ctxt_p, "axes");

   stat = asn1PE_ListItineraire (ctxt_p, &pvalue->axes);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_OuvrirAxesProgression: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_OuvrirAxesProgression::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_OuvrirAxesProgression (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_OuvrirAxesProgression (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_OuvrirAxesProgression* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_OuvrirAxesProgression: start\n");

   /* decode axes */

   PU_PUSHNAME (ctxt_p, "axes");

   stat = asn1PD_ListItineraire (ctxt_p, &pvalue->axes);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_OuvrirAxesProgression: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_OuvrirAxesProgression::Decode ()
{
   return asn1PD_Mission_Automate_GEN_OuvrirAxesProgression (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 08-Nov-2006.
 */
#include "ScipioAutomateMission_GEN.h"

/**************************************************************/
/*                                                            */
/*  MissionGenObject                                          */
/*                                                            */
/**************************************************************/

ASN1C_MissionGenObject::ASN1C_MissionGenObject (
   ASN1MessageBuffer& msgBuf, ASN1T_MissionGenObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MissionGenObject (ASN1CTXT* ctxt_p, ASN1T_MissionGenObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MissionGenObject: start\n");

   PU_NEWFIELD (ctxt_p, "preliminairePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preliminaire != EnumMissionGenSousTypeObstacle::preliminaire));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "densitePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->densite != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "tc2Present");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->tc2 != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumObjectType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preliminaire */

   if (pvalue->preliminaire != EnumMissionGenSousTypeObstacle::preliminaire) {
      PU_PUSHNAME (ctxt_p, "preliminaire");

      stat = asn1PE_EnumMissionGenSousTypeObstacle (ctxt_p, pvalue->preliminaire);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode densite */

   if (pvalue->densite != 0) {
      PU_PUSHNAME (ctxt_p, "densite");

      stat = pe_Real (ctxt_p, pvalue->densite);if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode tc2 */

   if (pvalue->tc2 != 0) {
      PU_PUSHNAME (ctxt_p, "tc2");

      stat = asn1PE_Automate (ctxt_p, pvalue->tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MissionGenObject: end\n");
   return (stat);
}

int ASN1C_MissionGenObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MissionGenObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MissionGenObject (ASN1CTXT* ctxt_p, ASN1T_MissionGenObject* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preliminairePresent;
   ASN1BOOL densitePresent;
   ASN1BOOL tc2Present;

   rtdiag ("asn1PD_MissionGenObject: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preliminairePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preliminairePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "densitePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else densitePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "tc2Present");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else tc2Present = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumObjectType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preliminaire */

   if (preliminairePresent) {
      PU_PUSHNAME (ctxt_p, "preliminaire");

      stat = asn1PD_EnumMissionGenSousTypeObstacle (ctxt_p, &pvalue->preliminaire);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preliminaire = EnumMissionGenSousTypeObstacle::preliminaire;
   }

   /* decode densite */

   if (densitePresent) {
      PU_PUSHNAME (ctxt_p, "densite");

      stat = pd_Real (ctxt_p, &pvalue->densite);if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
   }

   /* decode tc2 */

   if (tc2Present) {
      PU_PUSHNAME (ctxt_p, "tc2");

      stat = asn1PD_Automate (ctxt_p, &pvalue->tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->tc2 = 0;
   }


   rtdiag ("asn1PD_MissionGenObject: end\n");

   return (stat);
}

int ASN1C_MissionGenObject::Decode ()
{
   return asn1PD_MissionGenObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListMissionGenObject                                      */
/*                                                            */
/**************************************************************/

ASN1C_ListMissionGenObject::ASN1C_ListMissionGenObject (
   ASN1MessageBuffer& msgBuf, ASN1T_ListMissionGenObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListMissionGenObject (ASN1CTXT* ctxt_p, ASN1T_ListMissionGenObject* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListMissionGenObject: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_MissionGenObject (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListMissionGenObject: end\n");
   return (stat);
}

int ASN1C_ListMissionGenObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListMissionGenObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListMissionGenObject (ASN1CTXT* ctxt_p, ASN1T_ListMissionGenObject* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListMissionGenObject: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_MissionGenObject);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_MissionGenObject (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListMissionGenObject: end\n");

   return (stat);
}

int ASN1C_ListMissionGenObject::Decode ()
{
   return asn1PD_ListMissionGenObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_SeDeployer                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_SeDeployer::ASN1C_Mission_Automate_GEN_SeDeployer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_SeDeployer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_SeDeployer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_SeDeployer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_SeDeployer: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_SeDeployer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_SeDeployer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_SeDeployer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_SeDeployer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_SeDeployer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_SeDeployer: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_SeDeployer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_SeDeployer::Decode ()
{
   return asn1PD_Mission_Automate_GEN_SeDeployer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_ReconnaitreZone                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_ReconnaitreZone::ASN1C_Mission_Automate_GEN_ReconnaitreZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_ReconnaitreZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_ReconnaitreZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_ReconnaitreZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_ReconnaitreZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_ReconnaitreZone: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_ReconnaitreZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_ReconnaitreZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_ReconnaitreZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_ReconnaitreZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_ReconnaitreZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_ReconnaitreZone: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_ReconnaitreZone::Decode ()
{
   return asn1PD_Mission_Automate_GEN_ReconnaitreZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RealiserTravaux                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RealiserTravaux::ASN1C_Mission_Automate_GEN_RealiserTravaux (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RealiserTravaux& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RealiserTravaux (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserTravaux* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserTravaux: start\n");

   /* encode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PE_ListMissionGenObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RealiserTravaux: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserTravaux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RealiserTravaux (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RealiserTravaux (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RealiserTravaux* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserTravaux: start\n");

   /* decode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PD_ListMissionGenObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RealiserTravaux: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RealiserTravaux::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RealiserTravaux (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_OuvrirItineraires                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_OuvrirItineraires::ASN1C_Mission_Automate_GEN_OuvrirItineraires (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_OuvrirItineraires& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_OuvrirItineraires (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_OuvrirItineraires* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_OuvrirItineraires: start\n");

   /* encode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PE_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_OuvrirItineraires: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_OuvrirItineraires::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_OuvrirItineraires (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_OuvrirItineraires (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_OuvrirItineraires* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_OuvrirItineraires: start\n");

   /* decode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PD_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_OuvrirItineraires: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_OuvrirItineraires::Decode ()
{
   return asn1PD_Mission_Automate_GEN_OuvrirItineraires (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_RetablirItineraires                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_RetablirItineraires::ASN1C_Mission_Automate_GEN_RetablirItineraires (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_RetablirItineraires& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_RetablirItineraires (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RetablirItineraires* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_RetablirItineraires: start\n");

   /* encode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PE_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_RetablirItineraires: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_RetablirItineraires::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_RetablirItineraires (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_RetablirItineraires (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_RetablirItineraires* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_RetablirItineraires: start\n");

   /* decode itineraires */

   PU_PUSHNAME (ctxt_p, "itineraires");

   stat = asn1PD_ListItineraire (ctxt_p, &pvalue->itineraires);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_RetablirItineraires: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_RetablirItineraires::Decode ()
{
   return asn1PD_Mission_Automate_GEN_RetablirItineraires (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_FaireFranchir                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_FaireFranchir::ASN1C_Mission_Automate_GEN_FaireFranchir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_FaireFranchir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_FaireFranchir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FaireFranchir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_FaireFranchir: start\n");

   /* encode sites_de_franchissement */

   PU_PUSHNAME (ctxt_p, "sites_de_franchissement");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->sites_de_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_FaireFranchir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_FaireFranchir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_FaireFranchir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_FaireFranchir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FaireFranchir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_FaireFranchir: start\n");

   /* decode sites_de_franchissement */

   PU_PUSHNAME (ctxt_p, "sites_de_franchissement");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->sites_de_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_FaireFranchir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_FaireFranchir::Decode ()
{
   return asn1PD_Mission_Automate_GEN_FaireFranchir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_FranchirDeViveForce                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_FranchirDeViveForce::ASN1C_Mission_Automate_GEN_FranchirDeViveForce (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_FranchirDeViveForce& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_FranchirDeViveForce (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FranchirDeViveForce* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_FranchirDeViveForce: start\n");

   /* encode obstacles */

   PU_PUSHNAME (ctxt_p, "obstacles");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->obstacles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_FranchirDeViveForce: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_FranchirDeViveForce::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_FranchirDeViveForce (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_FranchirDeViveForce (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_FranchirDeViveForce* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_FranchirDeViveForce: start\n");

   /* decode obstacles */

   PU_PUSHNAME (ctxt_p, "obstacles");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->obstacles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_FranchirDeViveForce: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_FranchirDeViveForce::Decode ()
{
   return asn1PD_Mission_Automate_GEN_FranchirDeViveForce (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_GEN_DegagerObstaclesDansZone             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_GEN_DegagerObstaclesDansZone::ASN1C_Mission_Automate_GEN_DegagerObstaclesDansZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_GEN_DegagerObstaclesDansZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_GEN_DegagerObstaclesDansZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_DegagerObstaclesDansZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_GEN_DegagerObstaclesDansZone: start\n");

   /* encode obstacles */

   PU_PUSHNAME (ctxt_p, "obstacles");

   stat = asn1PE_ListKnowledgeObject (ctxt_p, &pvalue->obstacles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_GEN_DegagerObstaclesDansZone: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_GEN_DegagerObstaclesDansZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_GEN_DegagerObstaclesDansZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_GEN_DegagerObstaclesDansZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_GEN_DegagerObstaclesDansZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_GEN_DegagerObstaclesDansZone: start\n");

   /* decode obstacles */

   PU_PUSHNAME (ctxt_p, "obstacles");

   stat = asn1PD_ListKnowledgeObject (ctxt_p, &pvalue->obstacles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_GEN_DegagerObstaclesDansZone: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_GEN_DegagerObstaclesDansZone::Decode ()
{
   return asn1PD_Mission_Automate_GEN_DegagerObstaclesDansZone (mpContext->GetPtr(), &msgData);
}


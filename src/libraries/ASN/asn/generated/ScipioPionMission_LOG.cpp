/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 28-Oct-2005.
 */
#include "ScipioPionMission_LOG.h"

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_SeDeployer                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_SeDeployer::ASN1C_Mission_Pion_LOG_SeDeployer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_SeDeployer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_SeDeployer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_SeDeployer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_SeDeployer: start\n");

   /* encode position_deploiement */

   PU_PUSHNAME (ctxt_p, "position_deploiement");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_deploiement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_SeDeployer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_SeDeployer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_SeDeployer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_SeDeployer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_SeDeployer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_SeDeployer: start\n");

   /* decode position_deploiement */

   PU_PUSHNAME (ctxt_p, "position_deploiement");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_deploiement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_SeDeployer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_SeDeployer::Decode ()
{
   return asn1PD_Mission_Pion_LOG_SeDeployer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_DistribuerMoyens                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_DistribuerMoyens::ASN1C_Mission_Pion_LOG_DistribuerMoyens (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_DistribuerMoyens& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_DistribuerMoyens (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_DistribuerMoyens* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_DistribuerMoyens: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_DistribuerMoyens: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_DistribuerMoyens::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_DistribuerMoyens (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_DistribuerMoyens (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_DistribuerMoyens* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_DistribuerMoyens: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_DistribuerMoyens: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_DistribuerMoyens::Decode ()
{
   return asn1PD_Mission_Pion_LOG_DistribuerMoyens (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_TrierBlesses                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_TrierBlesses::ASN1C_Mission_Pion_LOG_TrierBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_TrierBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_TrierBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TrierBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_TrierBlesses: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_TrierBlesses: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_TrierBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_TrierBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_TrierBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TrierBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_TrierBlesses: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_TrierBlesses: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_TrierBlesses::Decode ()
{
   return asn1PD_Mission_Pion_LOG_TrierBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_TraiterBlesses                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_TraiterBlesses::ASN1C_Mission_Pion_LOG_TraiterBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_TraiterBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_TraiterBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TraiterBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_TraiterBlesses: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_TraiterBlesses: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_TraiterBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_TraiterBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_TraiterBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TraiterBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_TraiterBlesses: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_TraiterBlesses: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_TraiterBlesses::Decode ()
{
   return asn1PD_Mission_Pion_LOG_TraiterBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_TrierEtTraiterBlesses                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_TrierEtTraiterBlesses::ASN1C_Mission_Pion_LOG_TrierEtTraiterBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_TrierEtTraiterBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_TrierEtTraiterBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TrierEtTraiterBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_TrierEtTraiterBlesses: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_TrierEtTraiterBlesses: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_TrierEtTraiterBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_TrierEtTraiterBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_TrierEtTraiterBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TrierEtTraiterBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_TrierEtTraiterBlesses: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_TrierEtTraiterBlesses: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_TrierEtTraiterBlesses::Decode ()
{
   return asn1PD_Mission_Pion_LOG_TrierEtTraiterBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_SoignerBlesses                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_SoignerBlesses::ASN1C_Mission_Pion_LOG_SoignerBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_SoignerBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_SoignerBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_SoignerBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_SoignerBlesses: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_SoignerBlesses: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_SoignerBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_SoignerBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_SoignerBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_SoignerBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_SoignerBlesses: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_SoignerBlesses: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_SoignerBlesses::Decode ()
{
   return asn1PD_Mission_Pion_LOG_SoignerBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_PrendreEnCompteReactionsMentales         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_PrendreEnCompteReactionsMentales::ASN1C_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_PrendreEnCompteReactionsMentales& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_PrendreEnCompteReactionsMentales* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_PrendreEnCompteReactionsMentales: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_PrendreEnCompteReactionsMentales: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_PrendreEnCompteReactionsMentales::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_PrendreEnCompteReactionsMentales* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_PrendreEnCompteReactionsMentales: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_PrendreEnCompteReactionsMentales: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_PrendreEnCompteReactionsMentales::Decode ()
{
   return asn1PD_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_DecontaminerBlesses                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_DecontaminerBlesses::ASN1C_Mission_Pion_LOG_DecontaminerBlesses (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_DecontaminerBlesses& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_DecontaminerBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_DecontaminerBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_DecontaminerBlesses: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_DecontaminerBlesses: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_DecontaminerBlesses::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_DecontaminerBlesses (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_DecontaminerBlesses (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_DecontaminerBlesses* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_DecontaminerBlesses: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_DecontaminerBlesses: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_DecontaminerBlesses::Decode ()
{
   return asn1PD_Mission_Pion_LOG_DecontaminerBlesses (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_Reparer                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_Reparer::ASN1C_Mission_Pion_LOG_Reparer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_Reparer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_Reparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Reparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_Reparer: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_Reparer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_Reparer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_Reparer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_Reparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Reparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_Reparer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_Reparer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_Reparer::Decode ()
{
   return asn1PD_Mission_Pion_LOG_Reparer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_Evacuer                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_Evacuer::ASN1C_Mission_Pion_LOG_Evacuer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_Evacuer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_Evacuer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Evacuer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_Evacuer: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_Evacuer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_Evacuer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_Evacuer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_Evacuer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Evacuer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_Evacuer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_Evacuer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_Evacuer::Decode ()
{
   return asn1PD_Mission_Pion_LOG_Evacuer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_Convoyer                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_Convoyer::ASN1C_Mission_Pion_LOG_Convoyer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_Convoyer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_Convoyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Convoyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_Convoyer: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_Convoyer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_Convoyer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_Convoyer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_Convoyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Convoyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_Convoyer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_Convoyer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_Convoyer::Decode ()
{
   return asn1PD_Mission_Pion_LOG_Convoyer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_DistribuerRessources                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_DistribuerRessources::ASN1C_Mission_Pion_LOG_DistribuerRessources (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_DistribuerRessources& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_DistribuerRessources (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_DistribuerRessources* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_DistribuerRessources: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_DistribuerRessources: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_DistribuerRessources::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_DistribuerRessources (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_DistribuerRessources (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_DistribuerRessources* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_DistribuerRessources: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_DistribuerRessources: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_DistribuerRessources::Decode ()
{
   return asn1PD_Mission_Pion_LOG_DistribuerRessources (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_ConstituerConvoi                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_ConstituerConvoi::ASN1C_Mission_Pion_LOG_ConstituerConvoi (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_ConstituerConvoi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_ConstituerConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ConstituerConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_ConstituerConvoi: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_ConstituerConvoi: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_ConstituerConvoi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_ConstituerConvoi (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_ConstituerConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ConstituerConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_ConstituerConvoi: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_ConstituerConvoi: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_ConstituerConvoi::Decode ()
{
   return asn1PD_Mission_Pion_LOG_ConstituerConvoi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_Livrer                                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_Livrer::ASN1C_Mission_Pion_LOG_Livrer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_Livrer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_Livrer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Livrer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_Livrer: start\n");


   rtdiag ("asn1PE_Mission_Pion_LOG_Livrer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_Livrer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_Livrer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_Livrer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Livrer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_Livrer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_Livrer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_Livrer::Decode ()
{
   return asn1PD_Mission_Pion_LOG_Livrer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_PreparerBascule                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_PreparerBascule::ASN1C_Mission_Pion_LOG_PreparerBascule (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_PreparerBascule& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_PreparerBascule (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_PreparerBascule* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_PreparerBascule: start\n");

   /* encode automate_pour_bascule */

   PU_PUSHNAME (ctxt_p, "automate_pour_bascule");

   stat = asn1PE_Automate (ctxt_p, pvalue->automate_pour_bascule);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_PreparerBascule: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_PreparerBascule::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_PreparerBascule (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_PreparerBascule (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_PreparerBascule* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_PreparerBascule: start\n");

   /* decode automate_pour_bascule */

   PU_PUSHNAME (ctxt_p, "automate_pour_bascule");

   stat = asn1PD_Automate (ctxt_p, &pvalue->automate_pour_bascule);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_PreparerBascule: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_PreparerBascule::Decode ()
{
   return asn1PD_Mission_Pion_LOG_PreparerBascule (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_AppuyerMouvement                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_AppuyerMouvement::ASN1C_Mission_Pion_LOG_AppuyerMouvement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_AppuyerMouvement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_AppuyerMouvement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerMouvement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_AppuyerMouvement: start\n");

   /* encode unite_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unite_a_appuyer");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_AppuyerMouvement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_AppuyerMouvement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_AppuyerMouvement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_AppuyerMouvement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerMouvement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_AppuyerMouvement: start\n");

   /* decode unite_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unite_a_appuyer");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_AppuyerMouvement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_AppuyerMouvement::Decode ()
{
   return asn1PD_Mission_Pion_LOG_AppuyerMouvement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_ReconnaitreItineraire                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_ReconnaitreItineraire::ASN1C_Mission_Pion_LOG_ReconnaitreItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_ReconnaitreItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_ReconnaitreItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_ReconnaitreItineraire: start\n");

   /* encode itineraire_log */

   PU_PUSHNAME (ctxt_p, "itineraire_log");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire_log);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_ReconnaitreItineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_ReconnaitreItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_ReconnaitreItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_ReconnaitreItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_ReconnaitreItineraire: start\n");

   /* decode itineraire_log */

   PU_PUSHNAME (ctxt_p, "itineraire_log");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire_log);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_ReconnaitreItineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_ReconnaitreItineraire::Decode ()
{
   return asn1PD_Mission_Pion_LOG_ReconnaitreItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_TransporterUniteChars                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_TransporterUniteChars::ASN1C_Mission_Pion_LOG_TransporterUniteChars (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_TransporterUniteChars& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_TransporterUniteChars (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TransporterUniteChars* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_TransporterUniteChars: start\n");

   /* encode unites_a_transporter */

   PU_PUSHNAME (ctxt_p, "unites_a_transporter");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_transporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_rendez_vous */

   PU_PUSHNAME (ctxt_p, "point_rendez_vous");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_rendez_vous);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_destination */

   PU_PUSHNAME (ctxt_p, "point_destination");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_destination);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_TransporterUniteChars: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_TransporterUniteChars::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_TransporterUniteChars (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_TransporterUniteChars (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_TransporterUniteChars* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_TransporterUniteChars: start\n");

   /* decode unites_a_transporter */

   PU_PUSHNAME (ctxt_p, "unites_a_transporter");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_transporter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_rendez_vous */

   PU_PUSHNAME (ctxt_p, "point_rendez_vous");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_rendez_vous);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_destination */

   PU_PUSHNAME (ctxt_p, "point_destination");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_destination);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_TransporterUniteChars: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_TransporterUniteChars::Decode ()
{
   return asn1PD_Mission_Pion_LOG_TransporterUniteChars (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_ReconnaitreZoneContaminee                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_ReconnaitreZoneContaminee::ASN1C_Mission_Pion_LOG_ReconnaitreZoneContaminee (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_ReconnaitreZoneContaminee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_ReconnaitreZoneContaminee (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreZoneContaminee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_ReconnaitreZoneContaminee: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_ReconnaitreZoneContaminee: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_ReconnaitreZoneContaminee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_ReconnaitreZoneContaminee (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_ReconnaitreZoneContaminee (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreZoneContaminee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_ReconnaitreZoneContaminee: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_ReconnaitreZoneContaminee: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_ReconnaitreZoneContaminee::Decode ()
{
   return asn1PD_Mission_Pion_LOG_ReconnaitreZoneContaminee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_AppuyerMouvementDansZone                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_AppuyerMouvementDansZone::ASN1C_Mission_Pion_LOG_AppuyerMouvementDansZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_AppuyerMouvementDansZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_AppuyerMouvementDansZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerMouvementDansZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_AppuyerMouvementDansZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_AppuyerMouvementDansZone: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_AppuyerMouvementDansZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_AppuyerMouvementDansZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_AppuyerMouvementDansZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerMouvementDansZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_AppuyerMouvementDansZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_AppuyerMouvementDansZone: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_AppuyerMouvementDansZone::Decode ()
{
   return asn1PD_Mission_Pion_LOG_AppuyerMouvementDansZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_MettreEnOeuvreZoneStationnement          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement::ASN1C_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement::Decode ()
{
   return asn1PD_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_AppuyerFranchissementSurUnPoint          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint::ASN1C_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint: start\n");

   /* encode pont_flottant */

   PU_PUSHNAME (ctxt_p, "pont_flottant");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->pont_flottant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint: start\n");

   /* decode pont_flottant */

   PU_PUSHNAME (ctxt_p, "pont_flottant");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->pont_flottant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint::Decode ()
{
   return asn1PD_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_BloquerZone                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_BloquerZone::ASN1C_Mission_Pion_LOG_BloquerZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_BloquerZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_BloquerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_BloquerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_BloquerZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_BloquerZone: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_BloquerZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_BloquerZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_BloquerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_BloquerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_BloquerZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_BloquerZone: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_BloquerZone::Decode ()
{
   return asn1PD_Mission_Pion_LOG_BloquerZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_ReconnaitreZoneDeDeploiement             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement::ASN1C_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement::Decode ()
{
   return asn1PD_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_ArmerPIA                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_ArmerPIA::ASN1C_Mission_Pion_LOG_ArmerPIA (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_ArmerPIA& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_ArmerPIA (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ArmerPIA* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_ArmerPIA: start\n");

   /* encode point */

   PU_PUSHNAME (ctxt_p, "point");

   stat = asn1PE_Point (ctxt_p, &pvalue->point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_ArmerPIA: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_ArmerPIA::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_ArmerPIA (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_ArmerPIA (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_ArmerPIA* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_ArmerPIA: start\n");

   /* decode point */

   PU_PUSHNAME (ctxt_p, "point");

   stat = asn1PD_Point (ctxt_p, &pvalue->point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_ArmerPIA: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_ArmerPIA::Decode ()
{
   return asn1PD_Mission_Pion_LOG_ArmerPIA (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_LOG_Surveiller                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_LOG_Surveiller::ASN1C_Mission_Pion_LOG_Surveiller (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_LOG_Surveiller& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_LOG_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_LOG_Surveiller: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_LOG_Surveiller: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_LOG_Surveiller::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_LOG_Surveiller (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_LOG_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_LOG_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_LOG_Surveiller: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_LOG_Surveiller: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_LOG_Surveiller::Decode ()
{
   return asn1PD_Mission_Pion_LOG_Surveiller (mpContext->GetPtr(), &msgData);
}


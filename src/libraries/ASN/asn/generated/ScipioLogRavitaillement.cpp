/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 16-Aug-2005.
 */
#include "ScipioLogRavitaillement.h"

/**************************************************************/
/*                                                            */
/*  DemandeDotation                                           */
/*                                                            */
/**************************************************************/

ASN1C_DemandeDotation::ASN1C_DemandeDotation (
   ASN1MessageBuffer& msgBuf, ASN1T_DemandeDotation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DemandeDotation (ASN1CTXT* ctxt_p, ASN1T_DemandeDotation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DemandeDotation: start\n");

   /* encode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PE_TypeDotation (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quantite_demandee */

   PU_PUSHNAME (ctxt_p, "quantite_demandee");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->quantite_demandee, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode quantite_accordee */

   PU_PUSHNAME (ctxt_p, "quantite_accordee");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->quantite_accordee, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode quantite_en_transit */

   PU_PUSHNAME (ctxt_p, "quantite_en_transit");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->quantite_en_transit, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_DemandeDotation: end\n");
   return (stat);
}

int ASN1C_DemandeDotation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DemandeDotation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DemandeDotation (ASN1CTXT* ctxt_p, ASN1T_DemandeDotation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DemandeDotation: start\n");

   /* decode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PD_TypeDotation (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quantite_demandee */

   PU_PUSHNAME (ctxt_p, "quantite_demandee");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->quantite_demandee, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quantite_accordee */

   PU_PUSHNAME (ctxt_p, "quantite_accordee");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->quantite_accordee, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quantite_en_transit */

   PU_PUSHNAME (ctxt_p, "quantite_en_transit");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->quantite_en_transit, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_DemandeDotation: end\n");

   return (stat);
}

int ASN1C_DemandeDotation::Decode ()
{
   return asn1PD_DemandeDotation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDemandeDotation                                     */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDemandeDotation::ASN1C__SeqOfDemandeDotation (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDemandeDotation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDemandeDotation (ASN1CTXT* ctxt_p, ASN1T__SeqOfDemandeDotation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfDemandeDotation: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_DemandeDotation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfDemandeDotation: end\n");
   return (stat);
}

int ASN1C__SeqOfDemandeDotation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDemandeDotation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDemandeDotation (ASN1CTXT* ctxt_p, ASN1T__SeqOfDemandeDotation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfDemandeDotation: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DemandeDotation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_DemandeDotation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfDemandeDotation: end\n");

   return (stat);
}

int ASN1C__SeqOfDemandeDotation::Decode ()
{
   return asn1PD__SeqOfDemandeDotation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementTraitementCreation                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementTraitementCreation::ASN1C_MsgLogRavitaillementTraitementCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementTraitementCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementTraitementCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementTraitementCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementTraitementCreation: start\n");

   /* encode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode dotations */

   PU_PUSHNAME (ctxt_p, "dotations");

   stat = asn1PE__SeqOfDemandeDotation (ctxt_p, &pvalue->dotations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogRavitaillementTraitementCreation: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementTraitementCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementTraitementCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementTraitementCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementTraitementCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogRavitaillementTraitementCreation: start\n");

   /* decode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode dotations */

   PU_PUSHNAME (ctxt_p, "dotations");

   stat = asn1PD__SeqOfDemandeDotation (ctxt_p, &pvalue->dotations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogRavitaillementTraitementCreation: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementTraitementCreation::Decode ()
{
   return asn1PD_MsgLogRavitaillementTraitementCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumLogRavitaillementTraitementEtat                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumLogRavitaillementTraitementEtat::ASN1C_EnumLogRavitaillementTraitementEtat (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumLogRavitaillementTraitementEtat& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumLogRavitaillementTraitementEtat (ASN1CTXT* ctxt_p, ASN1T_EnumLogRavitaillementTraitementEtat value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumLogRavitaillementTraitementEtat: start\n");

   switch (value) {
      case EnumLogRavitaillementTraitementEtat::convoi_consitution: ui = 0; break;
      case EnumLogRavitaillementTraitementEtat::convoi_chargement: ui = 1; break;
      case EnumLogRavitaillementTraitementEtat::convoi_deplacement_aller: ui = 2; break;
      case EnumLogRavitaillementTraitementEtat::convoi_dechargement: ui = 3; break;
      case EnumLogRavitaillementTraitementEtat::convoi_deplacement_retour: ui = 4; break;
      case EnumLogRavitaillementTraitementEtat::termine: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumLogRavitaillementTraitementEtat: end\n");
   return (stat);
}

int ASN1C_EnumLogRavitaillementTraitementEtat::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumLogRavitaillementTraitementEtat (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumLogRavitaillementTraitementEtat (ASN1CTXT* ctxt_p, ASN1T_EnumLogRavitaillementTraitementEtat* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumLogRavitaillementTraitementEtat: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumLogRavitaillementTraitementEtat::convoi_consitution; break;
      case 1: *pvalue = EnumLogRavitaillementTraitementEtat::convoi_chargement; break;
      case 2: *pvalue = EnumLogRavitaillementTraitementEtat::convoi_deplacement_aller; break;
      case 3: *pvalue = EnumLogRavitaillementTraitementEtat::convoi_dechargement; break;
      case 4: *pvalue = EnumLogRavitaillementTraitementEtat::convoi_deplacement_retour; break;
      case 5: *pvalue = EnumLogRavitaillementTraitementEtat::termine; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumLogRavitaillementTraitementEtat: end\n");

   return (stat);
}

int ASN1C_EnumLogRavitaillementTraitementEtat::Decode ()
{
   return asn1PD_EnumLogRavitaillementTraitementEtat (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementTraitementUpdate                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementTraitementUpdate::ASN1C_MsgLogRavitaillementTraitementUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementTraitementUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementTraitementUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementTraitementUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementTraitementUpdate: start\n");

   PU_NEWFIELD (ctxt_p, "oid_pion_log_traitantPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_pion_log_traitantPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_pion_convoiPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_pion_convoiPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etatPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etatPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotationsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotationsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_pion_log_traitant */

   if (pvalue->m.oid_pion_log_traitantPresent) {
      PU_PUSHNAME (ctxt_p, "oid_pion_log_traitant");

      stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion_log_traitant);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_pion_convoi */

   if (pvalue->m.oid_pion_convoiPresent) {
      PU_PUSHNAME (ctxt_p, "oid_pion_convoi");

      stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion_convoi);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode etat */

   if (pvalue->m.etatPresent) {
      PU_PUSHNAME (ctxt_p, "etat");

      stat = asn1PE_EnumLogRavitaillementTraitementEtat (ctxt_p, pvalue->etat);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode dotations */

   if (pvalue->m.dotationsPresent) {
      PU_PUSHNAME (ctxt_p, "dotations");

      stat = asn1PE__SeqOfDemandeDotation (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgLogRavitaillementTraitementUpdate: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementTraitementUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementTraitementUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementTraitementUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementTraitementUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgLogRavitaillementTraitementUpdate: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_pion_log_traitantPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_pion_log_traitantPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_pion_convoiPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_pion_convoiPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etatPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etatPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotationsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.dotationsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_pion_log_traitant */

   if (pvalue->m.oid_pion_log_traitantPresent) {
      PU_PUSHNAME (ctxt_p, "oid_pion_log_traitant");

      stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion_log_traitant);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_pion_convoi */

   if (pvalue->m.oid_pion_convoiPresent) {
      PU_PUSHNAME (ctxt_p, "oid_pion_convoi");

      stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion_convoi);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode etat */

   if (pvalue->m.etatPresent) {
      PU_PUSHNAME (ctxt_p, "etat");

      stat = asn1PD_EnumLogRavitaillementTraitementEtat (ctxt_p, &pvalue->etat);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode dotations */

   if (pvalue->m.dotationsPresent) {
      PU_PUSHNAME (ctxt_p, "dotations");

      stat = asn1PD__SeqOfDemandeDotation (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgLogRavitaillementTraitementUpdate: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementTraitementUpdate::Decode ()
{
   return asn1PD_MsgLogRavitaillementTraitementUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementTraitementDestruction                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementTraitementDestruction::ASN1C_MsgLogRavitaillementTraitementDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementTraitementDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementTraitementDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementTraitementDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementTraitementDestruction: start\n");

   /* encode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogRavitaillementTraitementDestruction: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementTraitementDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementTraitementDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementTraitementDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementTraitementDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogRavitaillementTraitementDestruction: start\n");

   /* decode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogRavitaillementTraitementDestruction: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementTraitementDestruction::Decode ()
{
   return asn1PD_MsgLogRavitaillementTraitementDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  RavitaillementDisponibiliteMoyens                         */
/*                                                            */
/**************************************************************/

ASN1C_RavitaillementDisponibiliteMoyens::ASN1C_RavitaillementDisponibiliteMoyens (
   ASN1MessageBuffer& msgBuf, ASN1T_RavitaillementDisponibiliteMoyens& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_RavitaillementDisponibiliteMoyens (ASN1CTXT* ctxt_p, ASN1T_RavitaillementDisponibiliteMoyens* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_RavitaillementDisponibiliteMoyens: start\n");

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_TypeEquipement (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pourcentage_disponibilite */

   PU_PUSHNAME (ctxt_p, "pourcentage_disponibilite");

   stat = asn1PE_Pourcentage (ctxt_p, pvalue->pourcentage_disponibilite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_RavitaillementDisponibiliteMoyens: end\n");
   return (stat);
}

int ASN1C_RavitaillementDisponibiliteMoyens::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_RavitaillementDisponibiliteMoyens (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_RavitaillementDisponibiliteMoyens (ASN1CTXT* ctxt_p, ASN1T_RavitaillementDisponibiliteMoyens* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_RavitaillementDisponibiliteMoyens: start\n");

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_TypeEquipement (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pourcentage_disponibilite */

   PU_PUSHNAME (ctxt_p, "pourcentage_disponibilite");

   stat = asn1PD_Pourcentage (ctxt_p, &pvalue->pourcentage_disponibilite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_RavitaillementDisponibiliteMoyens: end\n");

   return (stat);
}

int ASN1C_RavitaillementDisponibiliteMoyens::Decode ()
{
   return asn1PD_RavitaillementDisponibiliteMoyens (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationStock                                             */
/*                                                            */
/**************************************************************/

ASN1C_DotationStock::ASN1C_DotationStock (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationStock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationStock (ASN1CTXT* ctxt_p, ASN1T_DotationStock* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DotationStock: start\n");

   /* encode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PE_TypeDotation (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quantite_disponible */

   PU_PUSHNAME (ctxt_p, "quantite_disponible");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->quantite_disponible, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_DotationStock: end\n");
   return (stat);
}

int ASN1C_DotationStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationStock (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationStock (ASN1CTXT* ctxt_p, ASN1T_DotationStock* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DotationStock: start\n");

   /* decode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PD_TypeDotation (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quantite_disponible */

   PU_PUSHNAME (ctxt_p, "quantite_disponible");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->quantite_disponible, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_DotationStock: end\n");

   return (stat);
}

int ASN1C_DotationStock::Decode ()
{
   return asn1PD_DotationStock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationStock                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationStock::ASN1C__SeqOfDotationStock (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationStock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationStock (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationStock* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfDotationStock: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_DotationStock (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfDotationStock: end\n");
   return (stat);
}

int ASN1C__SeqOfDotationStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationStock (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationStock (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationStock* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfDotationStock: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationStock);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_DotationStock (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfDotationStock: end\n");

   return (stat);
}

int ASN1C__SeqOfDotationStock::Decode ()
{
   return asn1PD__SeqOfDotationStock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfRavitaillementDisponibiliteMoyens                   */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfRavitaillementDisponibiliteMoyens::ASN1C__SeqOfRavitaillementDisponibiliteMoyens (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfRavitaillementDisponibiliteMoyens& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfRavitaillementDisponibiliteMoyens (ASN1CTXT* ctxt_p, ASN1T__SeqOfRavitaillementDisponibiliteMoyens* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfRavitaillementDisponibiliteMoyens: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_RavitaillementDisponibiliteMoyens (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfRavitaillementDisponibiliteMoyens: end\n");
   return (stat);
}

int ASN1C__SeqOfRavitaillementDisponibiliteMoyens::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfRavitaillementDisponibiliteMoyens (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfRavitaillementDisponibiliteMoyens (ASN1CTXT* ctxt_p, ASN1T__SeqOfRavitaillementDisponibiliteMoyens* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfRavitaillementDisponibiliteMoyens: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_RavitaillementDisponibiliteMoyens);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_RavitaillementDisponibiliteMoyens (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfRavitaillementDisponibiliteMoyens: end\n");

   return (stat);
}

int ASN1C__SeqOfRavitaillementDisponibiliteMoyens::Decode ()
{
   return asn1PD__SeqOfRavitaillementDisponibiliteMoyens (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementEtat                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementEtat::ASN1C_MsgLogRavitaillementEtat (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementEtat& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementEtat (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementEtat* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementEtat: start\n");

   PU_NEWFIELD (ctxt_p, "chaine_activeePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.chaine_activeePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "stocksPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.stocksPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_chefs_convoisPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilites_chefs_convoisPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_transporteurs_convoisPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilites_transporteurs_convoisPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode chaine_activee */

   if (pvalue->m.chaine_activeePresent) {
      PU_PUSHNAME (ctxt_p, "chaine_activee");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->chaine_activee);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode stocks */

   if (pvalue->m.stocksPresent) {
      PU_PUSHNAME (ctxt_p, "stocks");

      stat = asn1PE__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode disponibilites_chefs_convois */

   if (pvalue->m.disponibilites_chefs_convoisPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_chefs_convois");

      stat = asn1PE__SeqOfRavitaillementDisponibiliteMoyens (ctxt_p, &pvalue->disponibilites_chefs_convois);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode disponibilites_transporteurs_convois */

   if (pvalue->m.disponibilites_transporteurs_convoisPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_transporteurs_convois");

      stat = asn1PE__SeqOfRavitaillementDisponibiliteMoyens (ctxt_p, &pvalue->disponibilites_transporteurs_convois);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgLogRavitaillementEtat: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementEtat::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementEtat (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementEtat (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementEtat* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgLogRavitaillementEtat: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "chaine_activeePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.chaine_activeePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "stocksPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.stocksPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_chefs_convoisPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.disponibilites_chefs_convoisPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_transporteurs_convoisPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.disponibilites_transporteurs_convoisPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode chaine_activee */

   if (pvalue->m.chaine_activeePresent) {
      PU_PUSHNAME (ctxt_p, "chaine_activee");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->chaine_activee);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode stocks */

   if (pvalue->m.stocksPresent) {
      PU_PUSHNAME (ctxt_p, "stocks");

      stat = asn1PD__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode disponibilites_chefs_convois */

   if (pvalue->m.disponibilites_chefs_convoisPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_chefs_convois");

      stat = asn1PD__SeqOfRavitaillementDisponibiliteMoyens (ctxt_p, &pvalue->disponibilites_chefs_convois);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode disponibilites_transporteurs_convois */

   if (pvalue->m.disponibilites_transporteurs_convoisPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_transporteurs_convois");

      stat = asn1PD__SeqOfRavitaillementDisponibiliteMoyens (ctxt_p, &pvalue->disponibilites_transporteurs_convois);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgLogRavitaillementEtat: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementEtat::Decode ()
{
   return asn1PD_MsgLogRavitaillementEtat (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationQuota                                             */
/*                                                            */
/**************************************************************/

ASN1C_DotationQuota::ASN1C_DotationQuota (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationQuota& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationQuota (ASN1CTXT* ctxt_p, ASN1T_DotationQuota* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DotationQuota: start\n");

   /* encode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PE_TypeDotation (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quota_disponible */

   PU_PUSHNAME (ctxt_p, "quota_disponible");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->quota_disponible, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_DotationQuota: end\n");
   return (stat);
}

int ASN1C_DotationQuota::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationQuota (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationQuota (ASN1CTXT* ctxt_p, ASN1T_DotationQuota* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DotationQuota: start\n");

   /* decode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PD_TypeDotation (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quota_disponible */

   PU_PUSHNAME (ctxt_p, "quota_disponible");

   stat = pd_ConsUnsigned (ctxt_p, &pvalue->quota_disponible, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_DotationQuota: end\n");

   return (stat);
}

int ASN1C_DotationQuota::Decode ()
{
   return asn1PD_DotationQuota (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationQuota                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationQuota::ASN1C__SeqOfDotationQuota (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationQuota& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationQuota (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationQuota* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfDotationQuota: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_DotationQuota (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfDotationQuota: end\n");
   return (stat);
}

int ASN1C__SeqOfDotationQuota::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationQuota (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationQuota (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationQuota* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfDotationQuota: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationQuota);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_DotationQuota (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfDotationQuota: end\n");

   return (stat);
}

int ASN1C__SeqOfDotationQuota::Decode ()
{
   return asn1PD__SeqOfDotationQuota (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementChangeQuotas                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementChangeQuotas::ASN1C_MsgLogRavitaillementChangeQuotas (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementChangeQuotas& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementChangeQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementChangeQuotas* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementChangeQuotas: start\n");

   /* encode oid_donneur */

   PU_PUSHNAME (ctxt_p, "oid_donneur");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_donneur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_receveur */

   PU_PUSHNAME (ctxt_p, "oid_receveur");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_receveur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quotas */

   PU_PUSHNAME (ctxt_p, "quotas");

   stat = asn1PE__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogRavitaillementChangeQuotas: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementChangeQuotas::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementChangeQuotas (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementChangeQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementChangeQuotas* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogRavitaillementChangeQuotas: start\n");

   /* decode oid_donneur */

   PU_PUSHNAME (ctxt_p, "oid_donneur");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_donneur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_receveur */

   PU_PUSHNAME (ctxt_p, "oid_receveur");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_receveur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quotas */

   PU_PUSHNAME (ctxt_p, "quotas");

   stat = asn1PD__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogRavitaillementChangeQuotas: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementChangeQuotas::Decode ()
{
   return asn1PD_MsgLogRavitaillementChangeQuotas (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementChangeQuotasAck                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementChangeQuotasAck::ASN1C_MsgLogRavitaillementChangeQuotasAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementChangeQuotasAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementChangeQuotasAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementChangeQuotasAck value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgLogRavitaillementChangeQuotasAck: start\n");

   switch (value) {
      case MsgLogRavitaillementChangeQuotasAck::no_error: ui = 0; break;
      case MsgLogRavitaillementChangeQuotasAck::error_invalid_donneur: ui = 1; break;
      case MsgLogRavitaillementChangeQuotasAck::error_invalid_receveur: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLogRavitaillementChangeQuotasAck: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementChangeQuotasAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementChangeQuotasAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementChangeQuotasAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementChangeQuotasAck* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgLogRavitaillementChangeQuotasAck: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgLogRavitaillementChangeQuotasAck::no_error; break;
      case 1: *pvalue = MsgLogRavitaillementChangeQuotasAck::error_invalid_donneur; break;
      case 2: *pvalue = MsgLogRavitaillementChangeQuotasAck::error_invalid_receveur; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgLogRavitaillementChangeQuotasAck: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementChangeQuotasAck::Decode ()
{
   return asn1PD_MsgLogRavitaillementChangeQuotasAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementPousserFlux                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementPousserFlux::ASN1C_MsgLogRavitaillementPousserFlux (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementPousserFlux& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementPousserFlux (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementPousserFlux* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementPousserFlux: start\n");

   /* encode oid_donneur */

   PU_PUSHNAME (ctxt_p, "oid_donneur");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_donneur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_receveur */

   PU_PUSHNAME (ctxt_p, "oid_receveur");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_receveur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode stocks */

   PU_PUSHNAME (ctxt_p, "stocks");

   stat = asn1PE__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogRavitaillementPousserFlux: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementPousserFlux::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementPousserFlux (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementPousserFlux (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementPousserFlux* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogRavitaillementPousserFlux: start\n");

   /* decode oid_donneur */

   PU_PUSHNAME (ctxt_p, "oid_donneur");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_donneur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_receveur */

   PU_PUSHNAME (ctxt_p, "oid_receveur");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_receveur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode stocks */

   PU_PUSHNAME (ctxt_p, "stocks");

   stat = asn1PD__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogRavitaillementPousserFlux: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementPousserFlux::Decode ()
{
   return asn1PD_MsgLogRavitaillementPousserFlux (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementPousserFluxAck                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementPousserFluxAck::ASN1C_MsgLogRavitaillementPousserFluxAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementPousserFluxAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementPousserFluxAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementPousserFluxAck value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgLogRavitaillementPousserFluxAck: start\n");

   switch (value) {
      case MsgLogRavitaillementPousserFluxAck::no_error: ui = 0; break;
      case MsgLogRavitaillementPousserFluxAck::error_invalid_donneur: ui = 1; break;
      case MsgLogRavitaillementPousserFluxAck::error_invalid_receveur: ui = 2; break;
      case MsgLogRavitaillementPousserFluxAck::error_ravitaillement_en_cours: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLogRavitaillementPousserFluxAck: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementPousserFluxAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementPousserFluxAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementPousserFluxAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementPousserFluxAck* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgLogRavitaillementPousserFluxAck: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgLogRavitaillementPousserFluxAck::no_error; break;
      case 1: *pvalue = MsgLogRavitaillementPousserFluxAck::error_invalid_donneur; break;
      case 2: *pvalue = MsgLogRavitaillementPousserFluxAck::error_invalid_receveur; break;
      case 3: *pvalue = MsgLogRavitaillementPousserFluxAck::error_ravitaillement_en_cours; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgLogRavitaillementPousserFluxAck: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementPousserFluxAck::Decode ()
{
   return asn1PD_MsgLogRavitaillementPousserFluxAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogRavitaillementQuotas                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogRavitaillementQuotas::ASN1C_MsgLogRavitaillementQuotas (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogRavitaillementQuotas& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogRavitaillementQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementQuotas* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogRavitaillementQuotas: start\n");

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quotas */

   PU_PUSHNAME (ctxt_p, "quotas");

   stat = asn1PE__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogRavitaillementQuotas: end\n");
   return (stat);
}

int ASN1C_MsgLogRavitaillementQuotas::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogRavitaillementQuotas (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogRavitaillementQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogRavitaillementQuotas* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogRavitaillementQuotas: start\n");

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quotas */

   PU_PUSHNAME (ctxt_p, "quotas");

   stat = asn1PD__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogRavitaillementQuotas: end\n");

   return (stat);
}

int ASN1C_MsgLogRavitaillementQuotas::Decode ()
{
   return asn1PD_MsgLogRavitaillementQuotas (mpContext->GetPtr(), &msgData);
}


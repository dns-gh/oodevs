/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 28-Sep-2005.
 */
#include "ScipioPionMission_GEN.h"

/**************************************************************/
/*                                                            */
/*  EnumTypeFosseAC                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeFosseAC::ASN1C_EnumTypeFosseAC (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeFosseAC& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeFosseAC (ASN1CTXT* ctxt_p, ASN1T_EnumTypeFosseAC value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeFosseAC: start\n");

   switch (value) {
      case EnumTypeFosseAC::simple: ui = 0; break;
      case EnumTypeFosseAC::compose: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeFosseAC: end\n");
   return (stat);
}

int ASN1C_EnumTypeFosseAC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeFosseAC (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeFosseAC (ASN1CTXT* ctxt_p, ASN1T_EnumTypeFosseAC* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeFosseAC: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeFosseAC::simple; break;
      case 1: *pvalue = EnumTypeFosseAC::compose; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeFosseAC: end\n");

   return (stat);
}

int ASN1C_EnumTypeFosseAC::Decode ()
{
   return asn1PD_EnumTypeFosseAC (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserFosseAC                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserFosseAC::ASN1C_Mission_Pion_GEN_RealiserFosseAC (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserFosseAC& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserFosseAC (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserFosseAC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserFosseAC: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Line (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumTypeFosseAC (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserFosseAC: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserFosseAC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserFosseAC (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserFosseAC (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserFosseAC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserFosseAC: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Line (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumTypeFosseAC (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserFosseAC: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserFosseAC::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserFosseAC (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserAbattisMine                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserAbattisMine::ASN1C_Mission_Pion_GEN_RealiserAbattisMine (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserAbattisMine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserAbattisMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserAbattisMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserAbattisMine: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode urgence */

   PU_PUSHNAME (ctxt_p, "urgence");

   stat = asn1PE_EnumMissionGenUrgence (ctxt_p, pvalue->urgence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PE_EnumMissionGenSousTypeObstacle (ctxt_p, pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserAbattisMine: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserAbattisMine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserAbattisMine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserAbattisMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserAbattisMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserAbattisMine: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode urgence */

   PU_PUSHNAME (ctxt_p, "urgence");

   stat = asn1PD_EnumMissionGenUrgence (ctxt_p, &pvalue->urgence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PD_EnumMissionGenSousTypeObstacle (ctxt_p, &pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserAbattisMine: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserAbattisMine::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserAbattisMine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserPointMine                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserPointMine::ASN1C_Mission_Pion_GEN_RealiserPointMine (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserPointMine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserPointMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPointMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserPointMine: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserPointMine: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserPointMine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserPointMine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserPointMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPointMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserPointMine: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserPointMine: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserPointMine::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserPointMine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserBarricade                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserBarricade::ASN1C_Mission_Pion_GEN_RealiserBarricade (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserBarricade& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserBarricade (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserBarricade* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserBarricade: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode urgence */

   PU_PUSHNAME (ctxt_p, "urgence");

   stat = asn1PE_EnumMissionGenUrgence (ctxt_p, pvalue->urgence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserBarricade: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserBarricade::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserBarricade (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserBarricade (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserBarricade* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserBarricade: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode urgence */

   PU_PUSHNAME (ctxt_p, "urgence");

   stat = asn1PD_EnumMissionGenUrgence (ctxt_p, &pvalue->urgence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserBarricade: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserBarricade::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserBarricade (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserEboulement                       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserEboulement::ASN1C_Mission_Pion_GEN_RealiserEboulement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserEboulement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserEboulement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserEboulement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserEboulement: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PE_EnumMissionGenSousTypeObstacle (ctxt_p, pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserEboulement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserEboulement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserEboulement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserEboulement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserEboulement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserEboulement: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PD_EnumMissionGenSousTypeObstacle (ctxt_p, &pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserEboulement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserEboulement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserEboulement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserBouchonMine                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserBouchonMine::ASN1C_Mission_Pion_GEN_RealiserBouchonMine (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserBouchonMine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserBouchonMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserBouchonMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserBouchonMine: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode urgence */

   PU_PUSHNAME (ctxt_p, "urgence");

   stat = asn1PE_EnumMissionGenUrgence (ctxt_p, pvalue->urgence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserBouchonMine: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserBouchonMine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserBouchonMine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserBouchonMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserBouchonMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserBouchonMine: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode urgence */

   PU_PUSHNAME (ctxt_p, "urgence");

   stat = asn1PD_EnumMissionGenUrgence (ctxt_p, &pvalue->urgence);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserBouchonMine: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserBouchonMine::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserBouchonMine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DetruireRoute                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DetruireRoute::ASN1C_Mission_Pion_GEN_DetruireRoute (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DetruireRoute& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DetruireRoute (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DetruireRoute* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DetruireRoute: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PE_EnumMissionGenSousTypeObstacle (ctxt_p, pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DetruireRoute: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DetruireRoute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DetruireRoute (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DetruireRoute (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DetruireRoute* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DetruireRoute: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PD_EnumMissionGenSousTypeObstacle (ctxt_p, &pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DetruireRoute: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DetruireRoute::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DetruireRoute (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DetruirePont                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DetruirePont::ASN1C_Mission_Pion_GEN_DetruirePont (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DetruirePont& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DetruirePont (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DetruirePont* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DetruirePont: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PE_EnumMissionGenSousTypeObstacle (ctxt_p, pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DetruirePont: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DetruirePont::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DetruirePont (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DetruirePont (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DetruirePont* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DetruirePont: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preliminaire */

   PU_PUSHNAME (ctxt_p, "preliminaire");

   stat = asn1PD_EnumMissionGenSousTypeObstacle (ctxt_p, &pvalue->preliminaire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DetruirePont: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DetruirePont::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DetruirePont (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_SecuriserItineraire                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_SecuriserItineraire::ASN1C_Mission_Pion_GEN_SecuriserItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_SecuriserItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_SecuriserItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_SecuriserItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_SecuriserItineraire: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_SecuriserItineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_SecuriserItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_SecuriserItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_SecuriserItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_SecuriserItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_SecuriserItineraire: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_SecuriserItineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_SecuriserItineraire::Decode ()
{
   return asn1PD_Mission_Pion_GEN_SecuriserItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DegagerAbattisMine                       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DegagerAbattisMine::ASN1C_Mission_Pion_GEN_DegagerAbattisMine (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DegagerAbattisMine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DegagerAbattisMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DegagerAbattisMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DegagerAbattisMine: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DegagerAbattisMine: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DegagerAbattisMine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DegagerAbattisMine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DegagerAbattisMine (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DegagerAbattisMine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DegagerAbattisMine: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DegagerAbattisMine: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DegagerAbattisMine::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DegagerAbattisMine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DegagerEboulement                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DegagerEboulement::ASN1C_Mission_Pion_GEN_DegagerEboulement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DegagerEboulement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DegagerEboulement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DegagerEboulement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DegagerEboulement: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DegagerEboulement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DegagerEboulement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DegagerEboulement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DegagerEboulement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DegagerEboulement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DegagerEboulement: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DegagerEboulement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DegagerEboulement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DegagerEboulement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DegagerRues                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DegagerRues::ASN1C_Mission_Pion_GEN_DegagerRues (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DegagerRues& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DegagerRues (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DegagerRues* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DegagerRues: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DegagerRues: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DegagerRues::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DegagerRues (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DegagerRues (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DegagerRues* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DegagerRues: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DegagerRues: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DegagerRues::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DegagerRues (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ComblerEntonnoir                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ComblerEntonnoir::ASN1C_Mission_Pion_GEN_ComblerEntonnoir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ComblerEntonnoir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ComblerEntonnoir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ComblerEntonnoir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ComblerEntonnoir: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ComblerEntonnoir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ComblerEntonnoir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ComblerEntonnoir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ComblerEntonnoir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ComblerEntonnoir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ComblerEntonnoir: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ComblerEntonnoir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ComblerEntonnoir::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ComblerEntonnoir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ComblerFosseAC                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ComblerFosseAC::ASN1C_Mission_Pion_GEN_ComblerFosseAC (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ComblerFosseAC& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ComblerFosseAC (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ComblerFosseAC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ComblerFosseAC: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ComblerFosseAC: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ComblerFosseAC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ComblerFosseAC (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ComblerFosseAC (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ComblerFosseAC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ComblerFosseAC: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ComblerFosseAC: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ComblerFosseAC::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ComblerFosseAC (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_CreerContournement                       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_CreerContournement::ASN1C_Mission_Pion_GEN_CreerContournement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_CreerContournement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_CreerContournement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerContournement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_CreerContournement: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_CreerContournement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerContournement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_CreerContournement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_CreerContournement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerContournement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_CreerContournement: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_CreerContournement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerContournement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_CreerContournement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserZoneMineeLineaire                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserZoneMineeLineaire::ASN1C_Mission_Pion_GEN_RealiserZoneMineeLineaire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserZoneMineeLineaire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserZoneMineeLineaire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZoneMineeLineaire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserZoneMineeLineaire: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode densite */

   PU_PUSHNAME (ctxt_p, "densite");

   stat = pe_Real (ctxt_p, pvalue->densite);if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserZoneMineeLineaire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserZoneMineeLineaire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserZoneMineeLineaire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserZoneMineeLineaire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZoneMineeLineaire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserZoneMineeLineaire: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode densite */

   PU_PUSHNAME (ctxt_p, "densite");

   stat = pd_Real (ctxt_p, &pvalue->densite);if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserZoneMineeLineaire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserZoneMineeLineaire::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserZoneMineeLineaire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_OuvrirTrouee                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_OuvrirTrouee::ASN1C_Mission_Pion_GEN_OuvrirTrouee (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_OuvrirTrouee& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_OuvrirTrouee (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_OuvrirTrouee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_OuvrirTrouee: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_OuvrirTrouee: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_OuvrirTrouee::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_OuvrirTrouee (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_OuvrirTrouee (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_OuvrirTrouee* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_OuvrirTrouee: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_OuvrirTrouee: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_OuvrirTrouee::Decode ()
{
   return asn1PD_Mission_Pion_GEN_OuvrirTrouee (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_Renforcer                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_Renforcer::ASN1C_Mission_Pion_GEN_Renforcer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_Renforcer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_Renforcer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_Renforcer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_Renforcer: start\n");

   /* encode lieu_renforcement */

   PU_PUSHNAME (ctxt_p, "lieu_renforcement");

   stat = asn1PE_Point (ctxt_p, &pvalue->lieu_renforcement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unite */

   PU_PUSHNAME (ctxt_p, "unite");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_Renforcer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_Renforcer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_Renforcer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_Renforcer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_Renforcer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_Renforcer: start\n");

   /* decode lieu_renforcement */

   PU_PUSHNAME (ctxt_p, "lieu_renforcement");

   stat = asn1PD_Point (ctxt_p, &pvalue->lieu_renforcement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unite */

   PU_PUSHNAME (ctxt_p, "unite");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_Renforcer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_Renforcer::Decode ()
{
   return asn1PD_Mission_Pion_GEN_Renforcer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_FranchirEntonnoir                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_FranchirEntonnoir::ASN1C_Mission_Pion_GEN_FranchirEntonnoir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_FranchirEntonnoir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_FranchirEntonnoir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_FranchirEntonnoir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_FranchirEntonnoir: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_FranchirEntonnoir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_FranchirEntonnoir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_FranchirEntonnoir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_FranchirEntonnoir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_FranchirEntonnoir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_FranchirEntonnoir: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_FranchirEntonnoir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_FranchirEntonnoir::Decode ()
{
   return asn1PD_Mission_Pion_GEN_FranchirEntonnoir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_FranchirFosseAC                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_FranchirFosseAC::ASN1C_Mission_Pion_GEN_FranchirFosseAC (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_FranchirFosseAC& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_FranchirFosseAC (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_FranchirFosseAC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_FranchirFosseAC: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_FranchirFosseAC: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_FranchirFosseAC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_FranchirFosseAC (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_FranchirFosseAC (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_FranchirFosseAC* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_FranchirFosseAC: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_FranchirFosseAC: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_FranchirFosseAC::Decode ()
{
   return asn1PD_Mission_Pion_GEN_FranchirFosseAC (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserZoneMineeParDispersion           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserZoneMineeParDispersion::ASN1C_Mission_Pion_GEN_RealiserZoneMineeParDispersion (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserZoneMineeParDispersion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserZoneMineeParDispersion (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZoneMineeParDispersion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserZoneMineeParDispersion: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode densite */

   PU_PUSHNAME (ctxt_p, "densite");

   stat = pe_Real (ctxt_p, pvalue->densite);if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserZoneMineeParDispersion: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserZoneMineeParDispersion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserZoneMineeParDispersion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserZoneMineeParDispersion (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZoneMineeParDispersion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserZoneMineeParDispersion: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode densite */

   PU_PUSHNAME (ctxt_p, "densite");

   stat = pd_Real (ctxt_p, &pvalue->densite);if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserZoneMineeParDispersion: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserZoneMineeParDispersion::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserZoneMineeParDispersion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserPostesTir                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserPostesTir::ASN1C_Mission_Pion_GEN_RealiserPostesTir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserPostesTir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserPostesTir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPostesTir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserPostesTir: start\n");

   /* encode pos_objet */

   PU_PUSHNAME (ctxt_p, "pos_objet");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserPostesTir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserPostesTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserPostesTir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserPostesTir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPostesTir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserPostesTir: start\n");

   /* decode pos_objet */

   PU_PUSHNAME (ctxt_p, "pos_objet");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserPostesTir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserPostesTir::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserPostesTir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserTravauxProtection                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserTravauxProtection::ASN1C_Mission_Pion_GEN_RealiserTravauxProtection (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserTravauxProtection& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserTravauxProtection (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserTravauxProtection* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserTravauxProtection: start\n");

   /* encode pos_objet */

   PU_PUSHNAME (ctxt_p, "pos_objet");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserTravauxProtection: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserTravauxProtection::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserTravauxProtection (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserTravauxProtection (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserTravauxProtection* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserTravauxProtection: start\n");

   /* decode pos_objet */

   PU_PUSHNAME (ctxt_p, "pos_objet");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserTravauxProtection: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserTravauxProtection::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserTravauxProtection (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RetablirItineraire                       */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RetablirItineraire::ASN1C_Mission_Pion_GEN_RetablirItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RetablirItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RetablirItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RetablirItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RetablirItineraire: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RetablirItineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RetablirItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RetablirItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RetablirItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RetablirItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RetablirItineraire: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RetablirItineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RetablirItineraire::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RetablirItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumGenTypePontage                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumGenTypePontage::ASN1C_EnumGenTypePontage (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumGenTypePontage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumGenTypePontage (ASN1CTXT* ctxt_p, ASN1T_EnumGenTypePontage value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumGenTypePontage: start\n");

   switch (value) {
      case EnumGenTypePontage::continu: ui = 0; break;
      case EnumGenTypePontage::discontinu: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumGenTypePontage: end\n");
   return (stat);
}

int ASN1C_EnumGenTypePontage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumGenTypePontage (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumGenTypePontage (ASN1CTXT* ctxt_p, ASN1T_EnumGenTypePontage* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumGenTypePontage: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumGenTypePontage::continu; break;
      case 1: *pvalue = EnumGenTypePontage::discontinu; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumGenTypePontage: end\n");

   return (stat);
}

int ASN1C_EnumGenTypePontage::Decode ()
{
   return asn1PD_EnumGenTypePontage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_EquiperExploiter                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_EquiperExploiter::ASN1C_Mission_Pion_GEN_EquiperExploiter (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_EquiperExploiter& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_EquiperExploiter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_EquiperExploiter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_EquiperExploiter: start\n");

   /* encode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_pontage */

   PU_PUSHNAME (ctxt_p, "type_pontage");

   stat = asn1PE_EnumGenTypePontage (ctxt_p, pvalue->type_pontage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_EquiperExploiter: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_EquiperExploiter::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_EquiperExploiter (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_EquiperExploiter (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_EquiperExploiter* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_EquiperExploiter: start\n");

   /* decode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_pontage */

   PU_PUSHNAME (ctxt_p, "type_pontage");

   stat = asn1PD_EnumGenTypePontage (ctxt_p, &pvalue->type_pontage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_EquiperExploiter: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_EquiperExploiter::Decode ()
{
   return asn1PD_Mission_Pion_GEN_EquiperExploiter (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ExecuterVariantement                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ExecuterVariantement::ASN1C_Mission_Pion_GEN_ExecuterVariantement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ExecuterVariantement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ExecuterVariantement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ExecuterVariantement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ExecuterVariantement: start\n");

   /* encode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_pontage */

   PU_PUSHNAME (ctxt_p, "type_pontage");

   stat = asn1PE_EnumGenTypePontage (ctxt_p, pvalue->type_pontage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ExecuterVariantement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ExecuterVariantement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ExecuterVariantement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ExecuterVariantement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ExecuterVariantement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ExecuterVariantement: start\n");

   /* decode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_objet_planifie */

   PU_PUSHNAME (ctxt_p, "oid_objet_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_objet_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_pontage */

   PU_PUSHNAME (ctxt_p, "type_pontage");

   stat = asn1PD_EnumGenTypePontage (ctxt_p, &pvalue->type_pontage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ExecuterVariantement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ExecuterVariantement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ExecuterVariantement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ReconnaitreSiteFranchissement            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ReconnaitreSiteFranchissement::ASN1C_Mission_Pion_GEN_ReconnaitreSiteFranchissement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ReconnaitreSiteFranchissement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ReconnaitreSiteFranchissement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreSiteFranchissement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ReconnaitreSiteFranchissement: start\n");

   /* encode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ReconnaitreSiteFranchissement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReconnaitreSiteFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ReconnaitreSiteFranchissement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ReconnaitreSiteFranchissement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreSiteFranchissement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ReconnaitreSiteFranchissement: start\n");

   /* decode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ReconnaitreSiteFranchissement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReconnaitreSiteFranchissement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ReconnaitreSiteFranchissement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ReconnaitreItineraire                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ReconnaitreItineraire::ASN1C_Mission_Pion_GEN_ReconnaitreItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ReconnaitreItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ReconnaitreItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ReconnaitreItineraire: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ReconnaitreItineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReconnaitreItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ReconnaitreItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ReconnaitreItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ReconnaitreItineraire: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ReconnaitreItineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReconnaitreItineraire::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ReconnaitreItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DeminerSiteFranchissement                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DeminerSiteFranchissement::ASN1C_Mission_Pion_GEN_DeminerSiteFranchissement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DeminerSiteFranchissement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DeminerSiteFranchissement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DeminerSiteFranchissement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DeminerSiteFranchissement: start\n");

   /* encode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DeminerSiteFranchissement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DeminerSiteFranchissement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DeminerSiteFranchissement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DeminerSiteFranchissement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DeminerSiteFranchissement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DeminerSiteFranchissement: start\n");

   /* decode site_franchissement */

   PU_PUSHNAME (ctxt_p, "site_franchissement");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->site_franchissement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DeminerSiteFranchissement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DeminerSiteFranchissement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DeminerSiteFranchissement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ReconnaitreZone                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ReconnaitreZone::ASN1C_Mission_Pion_GEN_ReconnaitreZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ReconnaitreZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ReconnaitreZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ReconnaitreZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ReconnaitreZone: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReconnaitreZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ReconnaitreZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ReconnaitreZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ReconnaitreZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ReconnaitreZone: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReconnaitreZone::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ReconnaitreZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_CreerPlateForme                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_CreerPlateForme::ASN1C_Mission_Pion_GEN_CreerPlateForme (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_CreerPlateForme& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_CreerPlateForme (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerPlateForme* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_CreerPlateForme: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_CreerPlateForme: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerPlateForme::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_CreerPlateForme (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_CreerPlateForme (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerPlateForme* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_CreerPlateForme: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_CreerPlateForme: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerPlateForme::Decode ()
{
   return asn1PD_Mission_Pion_GEN_CreerPlateForme (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_CreerPiste                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_CreerPiste::ASN1C_Mission_Pion_GEN_CreerPiste (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_CreerPiste& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_CreerPiste (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerPiste* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_CreerPiste: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Line (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_CreerPiste: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerPiste::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_CreerPiste (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_CreerPiste (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerPiste* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_CreerPiste: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Line (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_CreerPiste: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerPiste::Decode ()
{
   return asn1PD_Mission_Pion_GEN_CreerPiste (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_CreerAirePoser                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_CreerAirePoser::ASN1C_Mission_Pion_GEN_CreerAirePoser (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_CreerAirePoser& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_CreerAirePoser (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerAirePoser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_CreerAirePoser: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_CreerAirePoser: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerAirePoser::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_CreerAirePoser (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_CreerAirePoser (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_CreerAirePoser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_CreerAirePoser: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_CreerAirePoser: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_CreerAirePoser::Decode ()
{
   return asn1PD_Mission_Pion_GEN_CreerAirePoser (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_NeutraliserEnginsExplosifs               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_NeutraliserEnginsExplosifs::ASN1C_Mission_Pion_GEN_NeutraliserEnginsExplosifs (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_NeutraliserEnginsExplosifs& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_NeutraliserEnginsExplosifs (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_NeutraliserEnginsExplosifs* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_NeutraliserEnginsExplosifs: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_NeutraliserEnginsExplosifs: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_NeutraliserEnginsExplosifs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_NeutraliserEnginsExplosifs (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_NeutraliserEnginsExplosifs (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_NeutraliserEnginsExplosifs* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_NeutraliserEnginsExplosifs: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_NeutraliserEnginsExplosifs: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_NeutraliserEnginsExplosifs::Decode ()
{
   return asn1PD_Mission_Pion_GEN_NeutraliserEnginsExplosifs (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ActiverObstacle                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ActiverObstacle::ASN1C_Mission_Pion_GEN_ActiverObstacle (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ActiverObstacle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ActiverObstacle (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ActiverObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ActiverObstacle: start\n");

   /* encode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ActiverObstacle: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ActiverObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ActiverObstacle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ActiverObstacle (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ActiverObstacle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ActiverObstacle: start\n");

   /* decode obstacle */

   PU_PUSHNAME (ctxt_p, "obstacle");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ActiverObstacle: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ActiverObstacle::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ActiverObstacle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_AmeliorerMobilite                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_AmeliorerMobilite::ASN1C_Mission_Pion_GEN_AmeliorerMobilite (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_AmeliorerMobilite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_AmeliorerMobilite (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AmeliorerMobilite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_AmeliorerMobilite: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_AmeliorerMobilite: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_AmeliorerMobilite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_AmeliorerMobilite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_AmeliorerMobilite (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AmeliorerMobilite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_AmeliorerMobilite: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_AmeliorerMobilite: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_AmeliorerMobilite::Decode ()
{
   return asn1PD_Mission_Pion_GEN_AmeliorerMobilite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserAireLogistique                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserAireLogistique::ASN1C_Mission_Pion_GEN_RealiserAireLogistique (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserAireLogistique& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserAireLogistique (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserAireLogistique* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserAireLogistique: start\n");

   /* encode position_obstacle */

   PU_PUSHNAME (ctxt_p, "position_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserAireLogistique: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserAireLogistique::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserAireLogistique (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserAireLogistique (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserAireLogistique* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserAireLogistique: start\n");

   /* decode position_obstacle */

   PU_PUSHNAME (ctxt_p, "position_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserAireLogistique: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserAireLogistique::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserAireLogistique (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_DepolluerZone                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_DepolluerZone::ASN1C_Mission_Pion_GEN_DepolluerZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_DepolluerZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_DepolluerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DepolluerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_DepolluerZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_DepolluerZone: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_DepolluerZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_DepolluerZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_DepolluerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_DepolluerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_DepolluerZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_DepolluerZone: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_DepolluerZone::Decode ()
{
   return asn1PD_Mission_Pion_GEN_DepolluerZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_AmenagerTerrainPoser_type_objet          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet: start\n");

   switch (value) {
      case Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::aire_poser: ui = 0; break;
      case Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::terrain_largage: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::aire_poser; break;
      case 1: *pvalue = Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::terrain_largage; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet::Decode ()
{
   return asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_AmenagerTerrainPoser                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser::ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser: start\n");

   /* encode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_objet */

   PU_PUSHNAME (ctxt_p, "type_objet");

   stat = asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (ctxt_p, pvalue->type_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser: start\n");

   /* decode pos_obstacle */

   PU_PUSHNAME (ctxt_p, "pos_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->pos_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_objet */

   PU_PUSHNAME (ctxt_p, "type_objet");

   stat = asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser_type_objet (ctxt_p, &pvalue->type_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_AmenagerTerrainPoser::Decode ()
{
   return asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserPlateFormeDeploiement            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserPlateFormeDeploiement::ASN1C_Mission_Pion_GEN_RealiserPlateFormeDeploiement (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserPlateFormeDeploiement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserPlateFormeDeploiement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPlateFormeDeploiement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserPlateFormeDeploiement: start\n");

   /* encode position_obstacle */

   PU_PUSHNAME (ctxt_p, "position_obstacle");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserPlateFormeDeploiement: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserPlateFormeDeploiement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserPlateFormeDeploiement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserPlateFormeDeploiement (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPlateFormeDeploiement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserPlateFormeDeploiement: start\n");

   /* decode position_obstacle */

   PU_PUSHNAME (ctxt_p, "position_obstacle");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_obstacle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserPlateFormeDeploiement: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserPlateFormeDeploiement::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserPlateFormeDeploiement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_ReprendreMissionConstruction             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_ReprendreMissionConstruction::ASN1C_Mission_Pion_GEN_ReprendreMissionConstruction (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_ReprendreMissionConstruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_ReprendreMissionConstruction (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReprendreMissionConstruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_ReprendreMissionConstruction: start\n");

   /* encode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_ReprendreMissionConstruction: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReprendreMissionConstruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_ReprendreMissionConstruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_ReprendreMissionConstruction (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_ReprendreMissionConstruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_ReprendreMissionConstruction: start\n");

   /* decode travaux */

   PU_PUSHNAME (ctxt_p, "travaux");

   stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->travaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_ReprendreMissionConstruction: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_ReprendreMissionConstruction::Decode ()
{
   return asn1PD_Mission_Pion_GEN_ReprendreMissionConstruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserZonePoserHelicoptere             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserZonePoserHelicoptere::ASN1C_Mission_Pion_GEN_RealiserZonePoserHelicoptere (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserZonePoserHelicoptere& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserZonePoserHelicoptere (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZonePoserHelicoptere* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserZonePoserHelicoptere: start\n");

   /* encode zone_poser */

   PU_PUSHNAME (ctxt_p, "zone_poser");

   stat = asn1PE_Point (ctxt_p, &pvalue->zone_poser);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserZonePoserHelicoptere: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserZonePoserHelicoptere::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserZonePoserHelicoptere (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserZonePoserHelicoptere (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZonePoserHelicoptere* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserZonePoserHelicoptere: start\n");

   /* decode zone_poser */

   PU_PUSHNAME (ctxt_p, "zone_poser");

   stat = asn1PD_Point (ctxt_p, &pvalue->zone_poser);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_obstacle_planifie */

   PU_PUSHNAME (ctxt_p, "oid_obstacle_planifie");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_obstacle_planifie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserZonePoserHelicoptere: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserZonePoserHelicoptere::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserZonePoserHelicoptere (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_AppuyerDebarquementTroupesGU             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_AppuyerDebarquementTroupesGU::ASN1C_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_AppuyerDebarquementTroupesGU& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AppuyerDebarquementTroupesGU* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_AppuyerDebarquementTroupesGU: start\n");

   /* encode zone_appui */

   PU_PUSHNAME (ctxt_p, "zone_appui");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_appui);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_AppuyerDebarquementTroupesGU: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_AppuyerDebarquementTroupesGU::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_AppuyerDebarquementTroupesGU* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_AppuyerDebarquementTroupesGU: start\n");

   /* decode zone_appui */

   PU_PUSHNAME (ctxt_p, "zone_appui");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_appui);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_AppuyerDebarquementTroupesGU: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_AppuyerDebarquementTroupesGU::Decode ()
{
   return asn1PD_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserCampPrisonniers                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserCampPrisonniers::ASN1C_Mission_Pion_GEN_RealiserCampPrisonniers (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserCampPrisonniers& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserCampPrisonniers (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserCampPrisonniers* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserCampPrisonniers: start\n");

   /* encode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PE_Automate (ctxt_p, pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserCampPrisonniers: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserCampPrisonniers::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserCampPrisonniers (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserCampPrisonniers (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserCampPrisonniers* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserCampPrisonniers: start\n");

   /* decode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PD_Automate (ctxt_p, &pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserCampPrisonniers: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserCampPrisonniers::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserCampPrisonniers (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_GEN_RealiserCampRefugies                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_GEN_RealiserCampRefugies::ASN1C_Mission_Pion_GEN_RealiserCampRefugies (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_GEN_RealiserCampRefugies& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_GEN_RealiserCampRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserCampRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserCampRefugies: start\n");

   /* encode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PE_Automate (ctxt_p, pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_GEN_RealiserCampRefugies: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserCampRefugies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_GEN_RealiserCampRefugies (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_GEN_RealiserCampRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_GEN_RealiserCampRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserCampRefugies: start\n");

   /* decode camp */

   PU_PUSHNAME (ctxt_p, "camp");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tc2 */

   PU_PUSHNAME (ctxt_p, "tc2");

   stat = asn1PD_Automate (ctxt_p, &pvalue->tc2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_GEN_RealiserCampRefugies: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_GEN_RealiserCampRefugies::Decode ()
{
   return asn1PD_Mission_Pion_GEN_RealiserCampRefugies (mpContext->GetPtr(), &msgData);
}


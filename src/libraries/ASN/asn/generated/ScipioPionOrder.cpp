/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 16-Nov-2005.
 */
#include "ScipioPionOrder.h"

/**************************************************************/
/*                                                            */
/*  Mission_Pion                                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion::ASN1C_Mission_Pion (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 198);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* mission_pion_alat_evacuation_sanitaire */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_evacuation_sanitaire");

         stat = asn1PE_Mission_Pion_ALAT_EvacuationSanitaire (ctxt_p, pvalue->u.mission_pion_alat_evacuation_sanitaire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_reconnaitre_dans_la_profondeur */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_reconnaitre_dans_la_profondeur");

         stat = asn1PE_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur (ctxt_p, pvalue->u.mission_pion_alat_reconnaitre_dans_la_profondeur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_reconnaitre_contour_ennemi */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_reconnaitre_contour_ennemi");

         stat = asn1PE_Mission_Pion_ALAT_ReconnaitreContourEnnemi (ctxt_p, pvalue->u.mission_pion_alat_reconnaitre_contour_ennemi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_detruire_neutraliser_dans_zone */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_detruire_neutraliser_dans_zone");

         stat = asn1PE_Mission_Pion_ALAT_DetruireNeutraliserDansZone (ctxt_p, pvalue->u.mission_pion_alat_detruire_neutraliser_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_detruire_aeromobile */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_detruire_aeromobile");

         stat = asn1PE_Mission_Pion_ALAT_DetruireAeromobile (ctxt_p, pvalue->u.mission_pion_alat_detruire_aeromobile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_freiner */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_freiner");

         stat = asn1PE_Mission_Pion_ALAT_Freiner (ctxt_p, pvalue->u.mission_pion_alat_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_jalonner */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_jalonner");

         stat = asn1PE_Mission_Pion_ALAT_Jalonner (ctxt_p, pvalue->u.mission_pion_alat_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_escorter */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_escorter");

         stat = asn1PE_Mission_Pion_ALAT_Escorter (ctxt_p, pvalue->u.mission_pion_alat_escorter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_heliporter */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_heliporter");

         stat = asn1PE_Mission_Pion_ALAT_Heliporter (ctxt_p, pvalue->u.mission_pion_alat_heliporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_heliporter_helitransporter_plot_ravitaillement */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement");

         stat = asn1PE_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement (ctxt_p, pvalue->u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_helitransporter */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_helitransporter");

         stat = asn1PE_Mission_Pion_ALAT_Helitransporter (ctxt_p, pvalue->u.mission_pion_alat_helitransporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_effectuer_recherche_et_sauvetage */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_effectuer_recherche_et_sauvetage");

         stat = asn1PE_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage (ctxt_p, pvalue->u.mission_pion_alat_effectuer_recherche_et_sauvetage);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_imex */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_imex");

         stat = asn1PE_Mission_Pion_ALAT_IMEX (ctxt_p, pvalue->u.mission_pion_alat_imex);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_eclairer */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_eclairer");

         stat = asn1PE_Mission_Pion_ALAT_Eclairer (ctxt_p, pvalue->u.mission_pion_alat_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_surveiller */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_surveiller");

         stat = asn1PE_Mission_Pion_ALAT_Surveiller (ctxt_p, pvalue->u.mission_pion_alat_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_appuyer_direct_au_contact */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_appuyer_direct_au_contact");

         stat = asn1PE_Mission_Pion_ALAT_AppuyerDirectAuContact (ctxt_p, pvalue->u.mission_pion_alat_appuyer_direct_au_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_couvrir */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_couvrir");

         stat = asn1PE_Mission_Pion_ALAT_Couvrir (ctxt_p, pvalue->u.mission_pion_alat_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_attaquer */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_attaquer");

         stat = asn1PE_Mission_Pion_ALAT_Attaquer (ctxt_p, pvalue->u.mission_pion_alat_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_site */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_site");

         stat = asn1PE_Mission_Pion_ASA_DefendreSite (ctxt_p, pvalue->u.mission_pion_asa_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_site_a_partir_position */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_site_a_partir_position");

         stat = asn1PE_Mission_Pion_ASA_DefendreSiteAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_defendre_site_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_zone */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_zone");

         stat = asn1PE_Mission_Pion_ASA_DefendreZone (ctxt_p, pvalue->u.mission_pion_asa_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_zone_a_partir_position */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_zone_a_partir_position");

         stat = asn1PE_Mission_Pion_ASA_DefendreZoneAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_defendre_zone_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_surveiller */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_surveiller");

         stat = asn1PE_Mission_Pion_ASA_Surveiller (ctxt_p, pvalue->u.mission_pion_asa_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_unites */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_unites");

         stat = asn1PE_Mission_Pion_ASA_DefendreUnites (ctxt_p, pvalue->u.mission_pion_asa_defendre_unites);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_site */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_site");

         stat = asn1PE_Mission_Pion_ASA_MISTRAL_DefendreSite (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_site_a_partir_position */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_site_a_partir_position");

         stat = asn1PE_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_site_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_zone */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_zone");

         stat = asn1PE_Mission_Pion_ASA_MISTRAL_DefendreZone (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_zone_a_partir_position */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_zone_a_partir_position");

         stat = asn1PE_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_zone_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_surveiller */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_surveiller");

         stat = asn1PE_Mission_Pion_ASA_MISTRAL_Surveiller (ctxt_p, pvalue->u.mission_pion_asa_mistral_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_assurer_mise_en_oeuvre */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_assurer_mise_en_oeuvre");

         stat = asn1PE_Mission_Pion_ASS_AssurerMiseEnOeuvre (ctxt_p, pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_assurer_mise_en_oeuvre_sur_position */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position");

         stat = asn1PE_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition (ctxt_p, pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_reconnaitre_zone_deploiement */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_reconnaitre_zone_deploiement");

         stat = asn1PE_Mission_Pion_ASS_ReconnaitreZoneDeploiement (ctxt_p, pvalue->u.mission_pion_ass_reconnaitre_zone_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_acquerir_lanceurs_eni */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_acquerir_lanceurs_eni");

         stat = asn1PE_Mission_Pion_ASS_AcquerirLanceursEni (ctxt_p, pvalue->u.mission_pion_ass_acquerir_lanceurs_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_eo_acquerir_objectifs */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_eo_acquerir_objectifs");

         stat = asn1PE_Mission_Pion_ASS_EO_AcquerirObjectifs (ctxt_p, pvalue->u.mission_pion_ass_eo_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_eop_acquerir_objectifs */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_eop_acquerir_objectifs");

         stat = asn1PE_Mission_Pion_ASS_EOP_AcquerirObjectifs (ctxt_p, pvalue->u.mission_pion_ass_eop_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_ratac_acquerir_objectifs */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_ratac_acquerir_objectifs");

         stat = asn1PE_Mission_Pion_ASS_RATAC_AcquerirObjectifs (ctxt_p, pvalue->u.mission_pion_ass_ratac_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_reconnaitre_axe */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_reconnaitre_axe");

         stat = asn1PE_Mission_Pion_ABC_ReconnaitreAxe (ctxt_p, pvalue->u.mission_pion_abc_reconnaitre_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_soutenir */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_soutenir");

         stat = asn1PE_Mission_Pion_ABC_Soutenir (ctxt_p, pvalue->u.mission_pion_abc_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_couvrir */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_couvrir");

         stat = asn1PE_Mission_Pion_ABC_Couvrir (ctxt_p, pvalue->u.mission_pion_abc_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_flanc_garder */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_flanc_garder");

         stat = asn1PE_Mission_Pion_ABC_FlancGarder (ctxt_p, pvalue->u.mission_pion_abc_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_reduire */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_reduire");

         stat = asn1PE_Mission_Pion_ABC_Reduire (ctxt_p, pvalue->u.mission_pion_abc_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_appuyer */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_appuyer");

         stat = asn1PE_Mission_Pion_ABC_Appuyer (ctxt_p, pvalue->u.mission_pion_abc_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_fixer */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_fixer");

         stat = asn1PE_Mission_Pion_ABC_Fixer (ctxt_p, pvalue->u.mission_pion_abc_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_renseigner_sur */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_renseigner_sur");

         stat = asn1PE_Mission_Pion_ABC_RenseignerSur (ctxt_p, pvalue->u.mission_pion_abc_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_controler_zone */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_controler_zone");

         stat = asn1PE_Mission_Pion_ABC_ControlerZone (ctxt_p, pvalue->u.mission_pion_abc_controler_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_surveiller */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_surveiller");

         stat = asn1PE_Mission_Pion_ABC_Surveiller (ctxt_p, pvalue->u.mission_pion_abc_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_barrer */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_barrer");

         stat = asn1PE_Mission_Pion_ABC_Barrer (ctxt_p, pvalue->u.mission_pion_abc_barrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_attaquer */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_attaquer");

         stat = asn1PE_Mission_Pion_ABC_Attaquer (ctxt_p, pvalue->u.mission_pion_abc_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_reconnaitre_point */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_reconnaitre_point");

         stat = asn1PE_Mission_Pion_ABC_ReconnaitrePoint (ctxt_p, pvalue->u.mission_pion_abc_reconnaitre_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_eclairer */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_eclairer");

         stat = asn1PE_Mission_Pion_ABC_Eclairer (ctxt_p, pvalue->u.mission_pion_abc_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_jalonner */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_jalonner");

         stat = asn1PE_Mission_Pion_ABC_Jalonner (ctxt_p, pvalue->u.mission_pion_abc_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_contre_attaquer */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_contre_attaquer");

         stat = asn1PE_Mission_Pion_ABC_ContreAttaquer (ctxt_p, pvalue->u.mission_pion_abc_contre_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_semparer_zone */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_semparer_zone");

         stat = asn1PE_Mission_Pion_ABC_SemparerZone (ctxt_p, pvalue->u.mission_pion_abc_semparer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_relever_unite */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_relever_unite");

         stat = asn1PE_Mission_Pion_ABC_ReleverUnite (ctxt_p, pvalue->u.mission_pion_abc_relever_unite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_armer_pia */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_armer_pia");

         stat = asn1PE_Mission_Pion_ABC_ArmerPIA (ctxt_p, pvalue->u.mission_pion_abc_armer_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_ouvrir_itineraire */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_ouvrir_itineraire");

         stat = asn1PE_Mission_Pion_ABC_OuvrirItineraire (ctxt_p, pvalue->u.mission_pion_abc_ouvrir_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_freiner */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_freiner");

         stat = asn1PE_Mission_Pion_ABC_Freiner (ctxt_p, pvalue->u.mission_pion_abc_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_escorter_un_convoi */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_escorter_un_convoi");

         stat = asn1PE_Mission_Pion_ABC_EscorterUnConvoi (ctxt_p, pvalue->u.mission_pion_abc_escorter_un_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_armer_point_de_controle */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_armer_point_de_controle");

         stat = asn1PE_Mission_Pion_ABC_ArmerPointDeControle (ctxt_p, pvalue->u.mission_pion_abc_armer_point_de_controle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_organiser_accueil_colonne_refugies */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_organiser_accueil_colonne_refugies");

         stat = asn1PE_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (ctxt_p, pvalue->u.mission_pion_abc_organiser_accueil_colonne_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_fosse_ac */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_fosse_ac");

         stat = asn1PE_Mission_Pion_GEN_RealiserFosseAC (ctxt_p, pvalue->u.mission_pion_gen_realiser_fosse_ac);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_abattis_mine */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_abattis_mine");

         stat = asn1PE_Mission_Pion_GEN_RealiserAbattisMine (ctxt_p, pvalue->u.mission_pion_gen_realiser_abattis_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_point_mine */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_point_mine");

         stat = asn1PE_Mission_Pion_GEN_RealiserPointMine (ctxt_p, pvalue->u.mission_pion_gen_realiser_point_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_barricade */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_barricade");

         stat = asn1PE_Mission_Pion_GEN_RealiserBarricade (ctxt_p, pvalue->u.mission_pion_gen_realiser_barricade);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_eboulement */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_eboulement");

         stat = asn1PE_Mission_Pion_GEN_RealiserEboulement (ctxt_p, pvalue->u.mission_pion_gen_realiser_eboulement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_bouchon_mine */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_bouchon_mine");

         stat = asn1PE_Mission_Pion_GEN_RealiserBouchonMine (ctxt_p, pvalue->u.mission_pion_gen_realiser_bouchon_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_detruire_route */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_detruire_route");

         stat = asn1PE_Mission_Pion_GEN_DetruireRoute (ctxt_p, pvalue->u.mission_pion_gen_detruire_route);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_detruire_pont */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_detruire_pont");

         stat = asn1PE_Mission_Pion_GEN_DetruirePont (ctxt_p, pvalue->u.mission_pion_gen_detruire_pont);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_securiser_itineraire */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_securiser_itineraire");

         stat = asn1PE_Mission_Pion_GEN_SecuriserItineraire (ctxt_p, pvalue->u.mission_pion_gen_securiser_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_degager_abattis_mine */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_degager_abattis_mine");

         stat = asn1PE_Mission_Pion_GEN_DegagerAbattisMine (ctxt_p, pvalue->u.mission_pion_gen_degager_abattis_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_degager_eboulement */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_degager_eboulement");

         stat = asn1PE_Mission_Pion_GEN_DegagerEboulement (ctxt_p, pvalue->u.mission_pion_gen_degager_eboulement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_degager_rues */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_degager_rues");

         stat = asn1PE_Mission_Pion_GEN_DegagerRues (ctxt_p, pvalue->u.mission_pion_gen_degager_rues);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_combler_entonnoir */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_combler_entonnoir");

         stat = asn1PE_Mission_Pion_GEN_ComblerEntonnoir (ctxt_p, pvalue->u.mission_pion_gen_combler_entonnoir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_combler_fosse_ac */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_combler_fosse_ac");

         stat = asn1PE_Mission_Pion_GEN_ComblerFosseAC (ctxt_p, pvalue->u.mission_pion_gen_combler_fosse_ac);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_contournement */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_contournement");

         stat = asn1PE_Mission_Pion_GEN_CreerContournement (ctxt_p, pvalue->u.mission_pion_gen_creer_contournement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_zone_minee_lineaire */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_zone_minee_lineaire");

         stat = asn1PE_Mission_Pion_GEN_RealiserZoneMineeLineaire (ctxt_p, pvalue->u.mission_pion_gen_realiser_zone_minee_lineaire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_ouvrir_trouee */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_ouvrir_trouee");

         stat = asn1PE_Mission_Pion_GEN_OuvrirTrouee (ctxt_p, pvalue->u.mission_pion_gen_ouvrir_trouee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_renforcer */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_renforcer");

         stat = asn1PE_Mission_Pion_GEN_Renforcer (ctxt_p, pvalue->u.mission_pion_gen_renforcer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_franchir_entonnoir */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_franchir_entonnoir");

         stat = asn1PE_Mission_Pion_GEN_FranchirEntonnoir (ctxt_p, pvalue->u.mission_pion_gen_franchir_entonnoir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_franchir_fosse_ac */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_franchir_fosse_ac");

         stat = asn1PE_Mission_Pion_GEN_FranchirFosseAC (ctxt_p, pvalue->u.mission_pion_gen_franchir_fosse_ac);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_zone_minee_par_dispersion */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_zone_minee_par_dispersion");

         stat = asn1PE_Mission_Pion_GEN_RealiserZoneMineeParDispersion (ctxt_p, pvalue->u.mission_pion_gen_realiser_zone_minee_par_dispersion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_postes_tir */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_postes_tir");

         stat = asn1PE_Mission_Pion_GEN_RealiserPostesTir (ctxt_p, pvalue->u.mission_pion_gen_realiser_postes_tir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_travaux_protection */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_travaux_protection");

         stat = asn1PE_Mission_Pion_GEN_RealiserTravauxProtection (ctxt_p, pvalue->u.mission_pion_gen_realiser_travaux_protection);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_retablir_itineraire */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_retablir_itineraire");

         stat = asn1PE_Mission_Pion_GEN_RetablirItineraire (ctxt_p, pvalue->u.mission_pion_gen_retablir_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_equiper_exploiter */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_equiper_exploiter");

         stat = asn1PE_Mission_Pion_GEN_EquiperExploiter (ctxt_p, pvalue->u.mission_pion_gen_equiper_exploiter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_executer_variantement */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_executer_variantement");

         stat = asn1PE_Mission_Pion_GEN_ExecuterVariantement (ctxt_p, pvalue->u.mission_pion_gen_executer_variantement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reconnaitre_site_franchissement */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reconnaitre_site_franchissement");

         stat = asn1PE_Mission_Pion_GEN_ReconnaitreSiteFranchissement (ctxt_p, pvalue->u.mission_pion_gen_reconnaitre_site_franchissement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reconnaitre_itineraire */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reconnaitre_itineraire");

         stat = asn1PE_Mission_Pion_GEN_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_pion_gen_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_deminer_site_franchissement */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_deminer_site_franchissement");

         stat = asn1PE_Mission_Pion_GEN_DeminerSiteFranchissement (ctxt_p, pvalue->u.mission_pion_gen_deminer_site_franchissement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reconnaitre_zone */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reconnaitre_zone");

         stat = asn1PE_Mission_Pion_GEN_ReconnaitreZone (ctxt_p, pvalue->u.mission_pion_gen_reconnaitre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_plate_forme */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_plate_forme");

         stat = asn1PE_Mission_Pion_GEN_CreerPlateForme (ctxt_p, pvalue->u.mission_pion_gen_creer_plate_forme);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_piste */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_piste");

         stat = asn1PE_Mission_Pion_GEN_CreerPiste (ctxt_p, pvalue->u.mission_pion_gen_creer_piste);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_aire_poser */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_aire_poser");

         stat = asn1PE_Mission_Pion_GEN_CreerAirePoser (ctxt_p, pvalue->u.mission_pion_gen_creer_aire_poser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_neutraliser_engins_explosifs */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_neutraliser_engins_explosifs");

         stat = asn1PE_Mission_Pion_GEN_NeutraliserEnginsExplosifs (ctxt_p, pvalue->u.mission_pion_gen_neutraliser_engins_explosifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_activer_obstacle */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_activer_obstacle");

         stat = asn1PE_Mission_Pion_GEN_ActiverObstacle (ctxt_p, pvalue->u.mission_pion_gen_activer_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_ameliorer_mobilite */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_ameliorer_mobilite");

         stat = asn1PE_Mission_Pion_GEN_AmeliorerMobilite (ctxt_p, pvalue->u.mission_pion_gen_ameliorer_mobilite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_aire_logistique */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_aire_logistique");

         stat = asn1PE_Mission_Pion_GEN_RealiserAireLogistique (ctxt_p, pvalue->u.mission_pion_gen_realiser_aire_logistique);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_depolluer_zone */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_depolluer_zone");

         stat = asn1PE_Mission_Pion_GEN_DepolluerZone (ctxt_p, pvalue->u.mission_pion_gen_depolluer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_amenager_terrain_poser */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_amenager_terrain_poser");

         stat = asn1PE_Mission_Pion_GEN_AmenagerTerrainPoser (ctxt_p, pvalue->u.mission_pion_gen_amenager_terrain_poser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_plate_forme_deploiement */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_plate_forme_deploiement");

         stat = asn1PE_Mission_Pion_GEN_RealiserPlateFormeDeploiement (ctxt_p, pvalue->u.mission_pion_gen_realiser_plate_forme_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reprendre_mission_construction */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reprendre_mission_construction");

         stat = asn1PE_Mission_Pion_GEN_ReprendreMissionConstruction (ctxt_p, pvalue->u.mission_pion_gen_reprendre_mission_construction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_zone_poser_helicoptere */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_zone_poser_helicoptere");

         stat = asn1PE_Mission_Pion_GEN_RealiserZonePoserHelicoptere (ctxt_p, pvalue->u.mission_pion_gen_realiser_zone_poser_helicoptere);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_appuyer_debarquement_troupes_gu */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_appuyer_debarquement_troupes_gu");

         stat = asn1PE_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (ctxt_p, pvalue->u.mission_pion_gen_appuyer_debarquement_troupes_gu);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_camp_prisonniers */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_camp_prisonniers");

         stat = asn1PE_Mission_Pion_GEN_RealiserCampPrisonniers (ctxt_p, pvalue->u.mission_pion_gen_realiser_camp_prisonniers);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_camp_refugies */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_camp_refugies");

         stat = asn1PE_Mission_Pion_GEN_RealiserCampRefugies (ctxt_p, pvalue->u.mission_pion_gen_realiser_camp_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_reconnaitre_axe */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_reconnaitre_axe");

         stat = asn1PE_Mission_Pion_INF_ReconnaitreAxe (ctxt_p, pvalue->u.mission_pion_inf_reconnaitre_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_couvrir */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_couvrir");

         stat = asn1PE_Mission_Pion_INF_Couvrir (ctxt_p, pvalue->u.mission_pion_inf_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_reduire */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_reduire");

         stat = asn1PE_Mission_Pion_INF_Reduire (ctxt_p, pvalue->u.mission_pion_inf_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_appuyer */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_appuyer");

         stat = asn1PE_Mission_Pion_INF_Appuyer (ctxt_p, pvalue->u.mission_pion_inf_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_fixer */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_fixer");

         stat = asn1PE_Mission_Pion_INF_Fixer (ctxt_p, pvalue->u.mission_pion_inf_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_controler_secteur */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_controler_secteur");

         stat = asn1PE_Mission_Pion_INF_ControlerSecteur (ctxt_p, pvalue->u.mission_pion_inf_controler_secteur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_surveiller_secteur */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_surveiller_secteur");

         stat = asn1PE_Mission_Pion_INF_SurveillerSecteur (ctxt_p, pvalue->u.mission_pion_inf_surveiller_secteur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_barrer */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_barrer");

         stat = asn1PE_Mission_Pion_INF_Barrer (ctxt_p, pvalue->u.mission_pion_inf_barrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_reconnaitre_point */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_reconnaitre_point");

         stat = asn1PE_Mission_Pion_INF_ReconnaitrePoint (ctxt_p, pvalue->u.mission_pion_inf_reconnaitre_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_eclairer */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_eclairer");

         stat = asn1PE_Mission_Pion_INF_Eclairer (ctxt_p, pvalue->u.mission_pion_inf_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_interdire */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_interdire");

         stat = asn1PE_Mission_Pion_INF_Interdire (ctxt_p, pvalue->u.mission_pion_inf_interdire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_semparer */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_semparer");

         stat = asn1PE_Mission_Pion_INF_Semparer (ctxt_p, pvalue->u.mission_pion_inf_semparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_prendre_preciser_contact */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_prendre_preciser_contact");

         stat = asn1PE_Mission_Pion_INF_PrendrePreciserContact (ctxt_p, pvalue->u.mission_pion_inf_prendre_preciser_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_defendre */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_defendre");

         stat = asn1PE_Mission_Pion_INF_Defendre (ctxt_p, pvalue->u.mission_pion_inf_defendre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_detruire_embuscade */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_detruire_embuscade");

         stat = asn1PE_Mission_Pion_INF_DetruireEmbuscade (ctxt_p, pvalue->u.mission_pion_inf_detruire_embuscade);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_contre_attaquer */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_contre_attaquer");

         stat = asn1PE_Mission_Pion_INF_ContreAttaquer (ctxt_p, pvalue->u.mission_pion_inf_contre_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_freiner */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_freiner");

         stat = asn1PE_Mission_Pion_INF_Freiner (ctxt_p, pvalue->u.mission_pion_inf_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_flanc_garder */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_flanc_garder");

         stat = asn1PE_Mission_Pion_INF_FlancGarder (ctxt_p, pvalue->u.mission_pion_inf_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_organiser_un_check_point */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_organiser_un_check_point");

         stat = asn1PE_Mission_Pion_INF_OrganiserUnCheckPoint (ctxt_p, pvalue->u.mission_pion_inf_organiser_un_check_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_harceler */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_harceler");

         stat = asn1PE_Mission_Pion_INF_Harceler (ctxt_p, pvalue->u.mission_pion_inf_harceler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_detruire_par_coup_de_main */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_detruire_par_coup_de_main");

         stat = asn1PE_Mission_Pion_INF_DetruireParCoupDeMain (ctxt_p, pvalue->u.mission_pion_inf_detruire_par_coup_de_main);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_escorter_un_convoi */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_escorter_un_convoi");

         stat = asn1PE_Mission_Pion_INF_EscorterUnConvoi (ctxt_p, pvalue->u.mission_pion_inf_escorter_un_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_renseigner_sur */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_renseigner_sur");

         stat = asn1PE_Mission_Pion_INF_RenseignerSur (ctxt_p, pvalue->u.mission_pion_inf_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_soutenir */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_soutenir");

         stat = asn1PE_Mission_Pion_INF_Soutenir (ctxt_p, pvalue->u.mission_pion_inf_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_securiser */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_securiser");

         stat = asn1PE_Mission_Pion_INF_Securiser (ctxt_p, pvalue->u.mission_pion_inf_securiser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_recueillir */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_recueillir");

         stat = asn1PE_Mission_Pion_INF_Recueillir (ctxt_p, pvalue->u.mission_pion_inf_recueillir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_repondre_a_aggression */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_repondre_a_aggression");

         stat = asn1PE_Mission_Pion_INF_RepondreAAggression (ctxt_p, pvalue->u.mission_pion_inf_repondre_a_aggression);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_se_deployer */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_se_deployer");

         stat = asn1PE_Mission_Pion_LOG_SeDeployer (ctxt_p, pvalue->u.mission_pion_log_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_distribuer_moyens */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_distribuer_moyens");

         stat = asn1PE_Mission_Pion_LOG_DistribuerMoyens (ctxt_p, pvalue->u.mission_pion_log_distribuer_moyens);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_trier_blesses */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_trier_blesses");

         stat = asn1PE_Mission_Pion_LOG_TrierBlesses (ctxt_p, pvalue->u.mission_pion_log_trier_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_traiter_blesses */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_traiter_blesses");

         stat = asn1PE_Mission_Pion_LOG_TraiterBlesses (ctxt_p, pvalue->u.mission_pion_log_traiter_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_trier_et_traiter_blesses */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_trier_et_traiter_blesses");

         stat = asn1PE_Mission_Pion_LOG_TrierEtTraiterBlesses (ctxt_p, pvalue->u.mission_pion_log_trier_et_traiter_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_soigner_blesses */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_soigner_blesses");

         stat = asn1PE_Mission_Pion_LOG_SoignerBlesses (ctxt_p, pvalue->u.mission_pion_log_soigner_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_prendre_en_compte_reactions_mentales */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_prendre_en_compte_reactions_mentales");

         stat = asn1PE_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (ctxt_p, pvalue->u.mission_pion_log_prendre_en_compte_reactions_mentales);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_decontaminer_blesses */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_decontaminer_blesses");

         stat = asn1PE_Mission_Pion_LOG_DecontaminerBlesses (ctxt_p, pvalue->u.mission_pion_log_decontaminer_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reparer */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reparer");

         stat = asn1PE_Mission_Pion_LOG_Reparer (ctxt_p, pvalue->u.mission_pion_log_reparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_evacuer */
      case 142:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_evacuer");

         stat = asn1PE_Mission_Pion_LOG_Evacuer (ctxt_p, pvalue->u.mission_pion_log_evacuer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_convoyer */
      case 143:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_convoyer");

         stat = asn1PE_Mission_Pion_LOG_Convoyer (ctxt_p, pvalue->u.mission_pion_log_convoyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_distribuer_ressources */
      case 144:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_distribuer_ressources");

         stat = asn1PE_Mission_Pion_LOG_DistribuerRessources (ctxt_p, pvalue->u.mission_pion_log_distribuer_ressources);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_constituer_convoi */
      case 145:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_constituer_convoi");

         stat = asn1PE_Mission_Pion_LOG_ConstituerConvoi (ctxt_p, pvalue->u.mission_pion_log_constituer_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_livrer */
      case 146:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_livrer");

         stat = asn1PE_Mission_Pion_LOG_Livrer (ctxt_p, pvalue->u.mission_pion_log_livrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_preparer_bascule */
      case 147:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_preparer_bascule");

         stat = asn1PE_Mission_Pion_LOG_PreparerBascule (ctxt_p, pvalue->u.mission_pion_log_preparer_bascule);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_appuyer_mouvement */
      case 148:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_appuyer_mouvement");

         stat = asn1PE_Mission_Pion_LOG_AppuyerMouvement (ctxt_p, pvalue->u.mission_pion_log_appuyer_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reconnaitre_itineraire */
      case 149:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reconnaitre_itineraire");

         stat = asn1PE_Mission_Pion_LOG_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_pion_log_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_transporter_unite_chars */
      case 150:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_transporter_unite_chars");

         stat = asn1PE_Mission_Pion_LOG_TransporterUniteChars (ctxt_p, pvalue->u.mission_pion_log_transporter_unite_chars);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reconnaitre_zone_contaminee */
      case 151:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reconnaitre_zone_contaminee");

         stat = asn1PE_Mission_Pion_LOG_ReconnaitreZoneContaminee (ctxt_p, pvalue->u.mission_pion_log_reconnaitre_zone_contaminee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_appuyer_mouvement_dans_zone */
      case 152:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_appuyer_mouvement_dans_zone");

         stat = asn1PE_Mission_Pion_LOG_AppuyerMouvementDansZone (ctxt_p, pvalue->u.mission_pion_log_appuyer_mouvement_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_mettre_en_oeuvre_zone_stationnement */
      case 153:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_mettre_en_oeuvre_zone_stationnement");

         stat = asn1PE_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (ctxt_p, pvalue->u.mission_pion_log_mettre_en_oeuvre_zone_stationnement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_appuyer_franchissement_sur_un_point */
      case 154:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_appuyer_franchissement_sur_un_point");

         stat = asn1PE_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (ctxt_p, pvalue->u.mission_pion_log_appuyer_franchissement_sur_un_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_bloquer_zone */
      case 155:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_bloquer_zone");

         stat = asn1PE_Mission_Pion_LOG_BloquerZone (ctxt_p, pvalue->u.mission_pion_log_bloquer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reconnaitre_zone_de_deploiement */
      case 156:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reconnaitre_zone_de_deploiement");

         stat = asn1PE_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (ctxt_p, pvalue->u.mission_pion_log_reconnaitre_zone_de_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_armer_pia */
      case 157:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_armer_pia");

         stat = asn1PE_Mission_Pion_LOG_ArmerPIA (ctxt_p, pvalue->u.mission_pion_log_armer_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_surveiller */
      case 158:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_surveiller");

         stat = asn1PE_Mission_Pion_LOG_Surveiller (ctxt_p, pvalue->u.mission_pion_log_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_heliporter */
      case 159:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_heliporter");

         stat = asn1PE_Mission_Pion_Test_Heliporter (ctxt_p, pvalue->u.mission_pion_test_heliporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_move_to */
      case 160:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_move_to");

         stat = asn1PE_Mission_Pion_Test_MoveTo (ctxt_p, pvalue->u.mission_pion_test_move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_create_object */
      case 161:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_create_object");

         stat = asn1PE_Mission_Pion_Test_CreateObject (ctxt_p, pvalue->u.mission_pion_test_create_object);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_destroy_object */
      case 162:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_destroy_object");

         stat = asn1PE_Mission_Pion_Test_DestroyObject (ctxt_p, pvalue->u.mission_pion_test_destroy_object);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_create_bypass */
      case 163:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_create_bypass");

         stat = asn1PE_Mission_Pion_Test_CreateBypass (ctxt_p, pvalue->u.mission_pion_test_create_bypass);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_fire */
      case 164:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_fire");

         stat = asn1PE_Mission_Pion_Test_Fire (ctxt_p, pvalue->u.mission_pion_test_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_change_posture */
      case 165:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_change_posture");

         stat = asn1PE_Mission_Pion_Test_ChangePosture (ctxt_p, pvalue->u.mission_pion_test_change_posture);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_path_find */
      case 166:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_path_find");

         stat = asn1PE_Mission_Pion_Test_PathFind (ctxt_p, pvalue->u.mission_pion_test_path_find);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_find_position */
      case 167:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_find_position");

         stat = asn1PE_Mission_Pion_Test_FindPosition (ctxt_p, pvalue->u.mission_pion_test_find_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_reinforce */
      case 168:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_reinforce");

         stat = asn1PE_Mission_Pion_Test_Reinforce (ctxt_p, pvalue->u.mission_pion_test_reinforce);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_plastron_ennemi */
      case 169:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_plastron_ennemi");

         stat = asn1PE_Mission_Pion_PlastronEnnemi (ctxt_p, pvalue->u.mission_pion_plastron_ennemi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_faire_mouvement */
      case 170:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_faire_mouvement");

         stat = asn1PE_Mission_Pion_FaireMouvement (ctxt_p, pvalue->u.mission_pion_faire_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_suivre */
      case 171:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_suivre");

         stat = asn1PE_Mission_Pion_Suivre (ctxt_p, pvalue->u.mission_pion_suivre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_se_faire_decontaminer */
      case 172:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_se_faire_decontaminer");

         stat = asn1PE_Mission_Pion_SeFaireDecontaminer (ctxt_p, pvalue->u.mission_pion_se_faire_decontaminer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_franchir */
      case 173:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_franchir");

         stat = asn1PE_Mission_Pion_Franchir (ctxt_p, pvalue->u.mission_pion_franchir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_decrocher */
      case 174:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_decrocher");

         stat = asn1PE_Mission_Pion_Decrocher (ctxt_p, pvalue->u.mission_pion_decrocher);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_stationner */
      case 175:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_stationner");

         stat = asn1PE_Mission_Pion_Stationner (ctxt_p, pvalue->u.mission_pion_stationner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_se_faire_transporter */
      case 176:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_se_faire_transporter");

         stat = asn1PE_Mission_Pion_SeFaireTransporter (ctxt_p, pvalue->u.mission_pion_se_faire_transporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_generique */
      case 177:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_generique");

         stat = asn1PE_Mission_Pion_Generique (ctxt_p, pvalue->u.mission_pion_generique);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_milice_provoquer */
      case 178:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_milice_provoquer");

         stat = asn1PE_Mission_Pion_MILICE_Provoquer (ctxt_p, pvalue->u.mission_pion_milice_provoquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_milice_prendre_et_tenir */
      case 179:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_milice_prendre_et_tenir");

         stat = asn1PE_Mission_Pion_MILICE_PrendreEtTenir (ctxt_p, pvalue->u.mission_pion_milice_prendre_et_tenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_milice_detruire_embuscade */
      case 180:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_milice_detruire_embuscade");

         stat = asn1PE_Mission_Pion_MILICE_DetruireEmbuscade (ctxt_p, pvalue->u.mission_pion_milice_detruire_embuscade);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_joint_marine_transporter */
      case 181:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_joint_marine_transporter");

         stat = asn1PE_Mission_Pion_JOINT_MARINE_Transporter (ctxt_p, pvalue->u.mission_pion_joint_marine_transporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_joint_air_effectuer_raid */
      case 182:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_joint_air_effectuer_raid");

         stat = asn1PE_Mission_Pion_JOINT_AIR_EffectuerRaid (ctxt_p, pvalue->u.mission_pion_joint_air_effectuer_raid);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_animer_un_plot_de_decontamination */
      case 183:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_animer_un_plot_de_decontamination");

         stat = asn1PE_Mission_Pion_NBC_AnimerUnPlotDeDecontamination (ctxt_p, pvalue->u.mission_pion_nbc_animer_un_plot_de_decontamination);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_reconnaitre_itineraire */
      case 184:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_reconnaitre_itineraire");

         stat = asn1PE_Mission_Pion_NBC_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_pion_nbc_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_reconnaitre_zone */
      case 185:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_reconnaitre_zone");

         stat = asn1PE_Mission_Pion_NBC_ReconnaitreZone (ctxt_p, pvalue->u.mission_pion_nbc_reconnaitre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_decontaminer_zone */
      case 186:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_decontaminer_zone");

         stat = asn1PE_Mission_Pion_NBC_DecontaminerZone (ctxt_p, pvalue->u.mission_pion_nbc_decontaminer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_reconnaitre_un_site_rota */
      case 187:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_reconnaitre_un_site_rota");

         stat = asn1PE_Mission_Pion_NBC_ReconnaitreUnSiteROTA (ctxt_p, pvalue->u.mission_pion_nbc_reconnaitre_un_site_rota);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_rohum_renseigner_sur */
      case 188:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_rohum_renseigner_sur");

         stat = asn1PE_Mission_Pion_RENS_ROHUM_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_rohum_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_rohum_sexfiltrer */
      case 189:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_rohum_sexfiltrer");

         stat = asn1PE_Mission_Pion_RENS_ROHUM_SExfiltrer (ctxt_p, pvalue->u.mission_pion_rens_rohum_sexfiltrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_rohum_orienter_guider */
      case 190:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_rohum_orienter_guider");

         stat = asn1PE_Mission_Pion_RENS_ROHUM_OrienterGuider (ctxt_p, pvalue->u.mission_pion_rens_rohum_orienter_guider);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roem_appuyer */
      case 191:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roem_appuyer");

         stat = asn1PE_Mission_Pion_RENS_ROEM_Appuyer (ctxt_p, pvalue->u.mission_pion_rens_roem_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roem_renseigner_sur */
      case 192:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roem_renseigner_sur");

         stat = asn1PE_Mission_Pion_RENS_ROEM_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_roem_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roem_mettre_en_oeuvre */
      case 193:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roem_mettre_en_oeuvre");

         stat = asn1PE_Mission_Pion_RENS_ROEM_MettreEnOeuvre (ctxt_p, pvalue->u.mission_pion_rens_roem_mettre_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_radint_renseigner_sur */
      case 194:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_radint_renseigner_sur");

         stat = asn1PE_Mission_Pion_RENS_RADINT_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_radint_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_radint_mettre_en_oeuvre */
      case 195:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_radint_mettre_en_oeuvre");

         stat = asn1PE_Mission_Pion_RENS_RADINT_MettreEnOeuvre (ctxt_p, pvalue->u.mission_pion_rens_radint_mettre_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roim_mettre_en_oeuvre */
      case 196:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roim_mettre_en_oeuvre");

         stat = asn1PE_Mission_Pion_RENS_ROIM_MettreEnOeuvre (ctxt_p, pvalue->u.mission_pion_rens_roim_mettre_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roim_sdti_renseigner_sur */
      case 197:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roim_sdti_renseigner_sur");

         stat = asn1PE_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_roim_sdti_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roim_cl289_renseigner_sur */
      case 198:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roim_cl289_renseigner_sur");

         stat = asn1PE_Mission_Pion_RENS_ROIM_CL289_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_roim_cl289_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_trans_etablir_gerer_liaison */
      case 199:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_trans_etablir_gerer_liaison");

         stat = asn1PE_Mission_Pion_TRANS_EtablirGererLiaison (ctxt_p, pvalue->u.mission_pion_trans_etablir_gerer_liaison);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_Mission_Pion: end\n");
   return (stat);
}

int ASN1C_Mission_Pion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Mission_Pion: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 198);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* mission_pion_alat_evacuation_sanitaire */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_evacuation_sanitaire");

         pvalue->u.mission_pion_alat_evacuation_sanitaire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_EvacuationSanitaire);
         if (pvalue->u.mission_pion_alat_evacuation_sanitaire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_EvacuationSanitaire (ctxt_p, pvalue->u.mission_pion_alat_evacuation_sanitaire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_reconnaitre_dans_la_profondeur */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_reconnaitre_dans_la_profondeur");

         pvalue->u.mission_pion_alat_reconnaitre_dans_la_profondeur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur);
         if (pvalue->u.mission_pion_alat_reconnaitre_dans_la_profondeur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur (ctxt_p, pvalue->u.mission_pion_alat_reconnaitre_dans_la_profondeur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_reconnaitre_contour_ennemi */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_reconnaitre_contour_ennemi");

         pvalue->u.mission_pion_alat_reconnaitre_contour_ennemi = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_ReconnaitreContourEnnemi);
         if (pvalue->u.mission_pion_alat_reconnaitre_contour_ennemi == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_ReconnaitreContourEnnemi (ctxt_p, pvalue->u.mission_pion_alat_reconnaitre_contour_ennemi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_detruire_neutraliser_dans_zone */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_detruire_neutraliser_dans_zone");

         pvalue->u.mission_pion_alat_detruire_neutraliser_dans_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_DetruireNeutraliserDansZone);
         if (pvalue->u.mission_pion_alat_detruire_neutraliser_dans_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_DetruireNeutraliserDansZone (ctxt_p, pvalue->u.mission_pion_alat_detruire_neutraliser_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_detruire_aeromobile */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_detruire_aeromobile");

         pvalue->u.mission_pion_alat_detruire_aeromobile = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_DetruireAeromobile);
         if (pvalue->u.mission_pion_alat_detruire_aeromobile == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_DetruireAeromobile (ctxt_p, pvalue->u.mission_pion_alat_detruire_aeromobile);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_freiner */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_freiner");

         pvalue->u.mission_pion_alat_freiner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Freiner);
         if (pvalue->u.mission_pion_alat_freiner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Freiner (ctxt_p, pvalue->u.mission_pion_alat_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_jalonner */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_jalonner");

         pvalue->u.mission_pion_alat_jalonner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Jalonner);
         if (pvalue->u.mission_pion_alat_jalonner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Jalonner (ctxt_p, pvalue->u.mission_pion_alat_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_escorter */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_escorter");

         pvalue->u.mission_pion_alat_escorter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Escorter);
         if (pvalue->u.mission_pion_alat_escorter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Escorter (ctxt_p, pvalue->u.mission_pion_alat_escorter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_heliporter */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_heliporter");

         pvalue->u.mission_pion_alat_heliporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Heliporter);
         if (pvalue->u.mission_pion_alat_heliporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Heliporter (ctxt_p, pvalue->u.mission_pion_alat_heliporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_heliporter_helitransporter_plot_ravitaillement */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement");

         pvalue->u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement);
         if (pvalue->u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement (ctxt_p, pvalue->u.mission_pion_alat_heliporter_helitransporter_plot_ravitaillement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_helitransporter */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_helitransporter");

         pvalue->u.mission_pion_alat_helitransporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Helitransporter);
         if (pvalue->u.mission_pion_alat_helitransporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Helitransporter (ctxt_p, pvalue->u.mission_pion_alat_helitransporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_effectuer_recherche_et_sauvetage */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_effectuer_recherche_et_sauvetage");

         pvalue->u.mission_pion_alat_effectuer_recherche_et_sauvetage = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage);
         if (pvalue->u.mission_pion_alat_effectuer_recherche_et_sauvetage == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_EffectuerRechercheEtSauvetage (ctxt_p, pvalue->u.mission_pion_alat_effectuer_recherche_et_sauvetage);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_imex */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_imex");

         pvalue->u.mission_pion_alat_imex = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_IMEX);
         if (pvalue->u.mission_pion_alat_imex == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_IMEX (ctxt_p, pvalue->u.mission_pion_alat_imex);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_eclairer */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_eclairer");

         pvalue->u.mission_pion_alat_eclairer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Eclairer);
         if (pvalue->u.mission_pion_alat_eclairer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Eclairer (ctxt_p, pvalue->u.mission_pion_alat_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_surveiller */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_surveiller");

         pvalue->u.mission_pion_alat_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Surveiller);
         if (pvalue->u.mission_pion_alat_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Surveiller (ctxt_p, pvalue->u.mission_pion_alat_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_appuyer_direct_au_contact */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_appuyer_direct_au_contact");

         pvalue->u.mission_pion_alat_appuyer_direct_au_contact = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_AppuyerDirectAuContact);
         if (pvalue->u.mission_pion_alat_appuyer_direct_au_contact == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_AppuyerDirectAuContact (ctxt_p, pvalue->u.mission_pion_alat_appuyer_direct_au_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_couvrir */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_couvrir");

         pvalue->u.mission_pion_alat_couvrir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Couvrir);
         if (pvalue->u.mission_pion_alat_couvrir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Couvrir (ctxt_p, pvalue->u.mission_pion_alat_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_alat_attaquer */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_alat_attaquer");

         pvalue->u.mission_pion_alat_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ALAT_Attaquer);
         if (pvalue->u.mission_pion_alat_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ALAT_Attaquer (ctxt_p, pvalue->u.mission_pion_alat_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_site */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_site");

         pvalue->u.mission_pion_asa_defendre_site = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_DefendreSite);
         if (pvalue->u.mission_pion_asa_defendre_site == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_DefendreSite (ctxt_p, pvalue->u.mission_pion_asa_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_site_a_partir_position */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_site_a_partir_position");

         pvalue->u.mission_pion_asa_defendre_site_a_partir_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_DefendreSiteAPartirPosition);
         if (pvalue->u.mission_pion_asa_defendre_site_a_partir_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_DefendreSiteAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_defendre_site_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_zone */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_zone");

         pvalue->u.mission_pion_asa_defendre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_DefendreZone);
         if (pvalue->u.mission_pion_asa_defendre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_DefendreZone (ctxt_p, pvalue->u.mission_pion_asa_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_zone_a_partir_position */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_zone_a_partir_position");

         pvalue->u.mission_pion_asa_defendre_zone_a_partir_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_DefendreZoneAPartirPosition);
         if (pvalue->u.mission_pion_asa_defendre_zone_a_partir_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_DefendreZoneAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_defendre_zone_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_surveiller */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_surveiller");

         pvalue->u.mission_pion_asa_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_Surveiller);
         if (pvalue->u.mission_pion_asa_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_Surveiller (ctxt_p, pvalue->u.mission_pion_asa_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_defendre_unites */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_defendre_unites");

         pvalue->u.mission_pion_asa_defendre_unites = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_DefendreUnites);
         if (pvalue->u.mission_pion_asa_defendre_unites == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_DefendreUnites (ctxt_p, pvalue->u.mission_pion_asa_defendre_unites);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_site */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_site");

         pvalue->u.mission_pion_asa_mistral_defendre_site = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreSite);
         if (pvalue->u.mission_pion_asa_mistral_defendre_site == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_MISTRAL_DefendreSite (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_site);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_site_a_partir_position */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_site_a_partir_position");

         pvalue->u.mission_pion_asa_mistral_defendre_site_a_partir_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition);
         if (pvalue->u.mission_pion_asa_mistral_defendre_site_a_partir_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_site_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_zone */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_zone");

         pvalue->u.mission_pion_asa_mistral_defendre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreZone);
         if (pvalue->u.mission_pion_asa_mistral_defendre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_MISTRAL_DefendreZone (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_defendre_zone_a_partir_position */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_defendre_zone_a_partir_position");

         pvalue->u.mission_pion_asa_mistral_defendre_zone_a_partir_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition);
         if (pvalue->u.mission_pion_asa_mistral_defendre_zone_a_partir_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition (ctxt_p, pvalue->u.mission_pion_asa_mistral_defendre_zone_a_partir_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_asa_mistral_surveiller */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_asa_mistral_surveiller");

         pvalue->u.mission_pion_asa_mistral_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASA_MISTRAL_Surveiller);
         if (pvalue->u.mission_pion_asa_mistral_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASA_MISTRAL_Surveiller (ctxt_p, pvalue->u.mission_pion_asa_mistral_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_assurer_mise_en_oeuvre */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_assurer_mise_en_oeuvre");

         pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_AssurerMiseEnOeuvre);
         if (pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_AssurerMiseEnOeuvre (ctxt_p, pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_assurer_mise_en_oeuvre_sur_position */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position");

         pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition);
         if (pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_AssurerMiseEnOeuvreSurPosition (ctxt_p, pvalue->u.mission_pion_ass_assurer_mise_en_oeuvre_sur_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_reconnaitre_zone_deploiement */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_reconnaitre_zone_deploiement");

         pvalue->u.mission_pion_ass_reconnaitre_zone_deploiement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_ReconnaitreZoneDeploiement);
         if (pvalue->u.mission_pion_ass_reconnaitre_zone_deploiement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_ReconnaitreZoneDeploiement (ctxt_p, pvalue->u.mission_pion_ass_reconnaitre_zone_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_acquerir_lanceurs_eni */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_acquerir_lanceurs_eni");

         pvalue->u.mission_pion_ass_acquerir_lanceurs_eni = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_AcquerirLanceursEni);
         if (pvalue->u.mission_pion_ass_acquerir_lanceurs_eni == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_AcquerirLanceursEni (ctxt_p, pvalue->u.mission_pion_ass_acquerir_lanceurs_eni);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_eo_acquerir_objectifs */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_eo_acquerir_objectifs");

         pvalue->u.mission_pion_ass_eo_acquerir_objectifs = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_EO_AcquerirObjectifs);
         if (pvalue->u.mission_pion_ass_eo_acquerir_objectifs == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_EO_AcquerirObjectifs (ctxt_p, pvalue->u.mission_pion_ass_eo_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_eop_acquerir_objectifs */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_eop_acquerir_objectifs");

         pvalue->u.mission_pion_ass_eop_acquerir_objectifs = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_EOP_AcquerirObjectifs);
         if (pvalue->u.mission_pion_ass_eop_acquerir_objectifs == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_EOP_AcquerirObjectifs (ctxt_p, pvalue->u.mission_pion_ass_eop_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_ass_ratac_acquerir_objectifs */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_ass_ratac_acquerir_objectifs");

         pvalue->u.mission_pion_ass_ratac_acquerir_objectifs = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ASS_RATAC_AcquerirObjectifs);
         if (pvalue->u.mission_pion_ass_ratac_acquerir_objectifs == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ASS_RATAC_AcquerirObjectifs (ctxt_p, pvalue->u.mission_pion_ass_ratac_acquerir_objectifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_reconnaitre_axe */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_reconnaitre_axe");

         pvalue->u.mission_pion_abc_reconnaitre_axe = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ReconnaitreAxe);
         if (pvalue->u.mission_pion_abc_reconnaitre_axe == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ReconnaitreAxe (ctxt_p, pvalue->u.mission_pion_abc_reconnaitre_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_soutenir */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_soutenir");

         pvalue->u.mission_pion_abc_soutenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Soutenir);
         if (pvalue->u.mission_pion_abc_soutenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Soutenir (ctxt_p, pvalue->u.mission_pion_abc_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_couvrir */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_couvrir");

         pvalue->u.mission_pion_abc_couvrir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Couvrir);
         if (pvalue->u.mission_pion_abc_couvrir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Couvrir (ctxt_p, pvalue->u.mission_pion_abc_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_flanc_garder */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_flanc_garder");

         pvalue->u.mission_pion_abc_flanc_garder = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_FlancGarder);
         if (pvalue->u.mission_pion_abc_flanc_garder == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_FlancGarder (ctxt_p, pvalue->u.mission_pion_abc_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_reduire */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_reduire");

         pvalue->u.mission_pion_abc_reduire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Reduire);
         if (pvalue->u.mission_pion_abc_reduire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Reduire (ctxt_p, pvalue->u.mission_pion_abc_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_appuyer */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_appuyer");

         pvalue->u.mission_pion_abc_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Appuyer);
         if (pvalue->u.mission_pion_abc_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Appuyer (ctxt_p, pvalue->u.mission_pion_abc_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_fixer */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_fixer");

         pvalue->u.mission_pion_abc_fixer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Fixer);
         if (pvalue->u.mission_pion_abc_fixer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Fixer (ctxt_p, pvalue->u.mission_pion_abc_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_renseigner_sur */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_renseigner_sur");

         pvalue->u.mission_pion_abc_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_RenseignerSur);
         if (pvalue->u.mission_pion_abc_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_RenseignerSur (ctxt_p, pvalue->u.mission_pion_abc_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_controler_zone */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_controler_zone");

         pvalue->u.mission_pion_abc_controler_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ControlerZone);
         if (pvalue->u.mission_pion_abc_controler_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ControlerZone (ctxt_p, pvalue->u.mission_pion_abc_controler_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_surveiller */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_surveiller");

         pvalue->u.mission_pion_abc_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Surveiller);
         if (pvalue->u.mission_pion_abc_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Surveiller (ctxt_p, pvalue->u.mission_pion_abc_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_barrer */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_barrer");

         pvalue->u.mission_pion_abc_barrer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Barrer);
         if (pvalue->u.mission_pion_abc_barrer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Barrer (ctxt_p, pvalue->u.mission_pion_abc_barrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_attaquer */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_attaquer");

         pvalue->u.mission_pion_abc_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Attaquer);
         if (pvalue->u.mission_pion_abc_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Attaquer (ctxt_p, pvalue->u.mission_pion_abc_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_reconnaitre_point */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_reconnaitre_point");

         pvalue->u.mission_pion_abc_reconnaitre_point = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ReconnaitrePoint);
         if (pvalue->u.mission_pion_abc_reconnaitre_point == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ReconnaitrePoint (ctxt_p, pvalue->u.mission_pion_abc_reconnaitre_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_eclairer */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_eclairer");

         pvalue->u.mission_pion_abc_eclairer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Eclairer);
         if (pvalue->u.mission_pion_abc_eclairer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Eclairer (ctxt_p, pvalue->u.mission_pion_abc_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_jalonner */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_jalonner");

         pvalue->u.mission_pion_abc_jalonner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Jalonner);
         if (pvalue->u.mission_pion_abc_jalonner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Jalonner (ctxt_p, pvalue->u.mission_pion_abc_jalonner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_contre_attaquer */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_contre_attaquer");

         pvalue->u.mission_pion_abc_contre_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ContreAttaquer);
         if (pvalue->u.mission_pion_abc_contre_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ContreAttaquer (ctxt_p, pvalue->u.mission_pion_abc_contre_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_semparer_zone */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_semparer_zone");

         pvalue->u.mission_pion_abc_semparer_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_SemparerZone);
         if (pvalue->u.mission_pion_abc_semparer_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_SemparerZone (ctxt_p, pvalue->u.mission_pion_abc_semparer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_relever_unite */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_relever_unite");

         pvalue->u.mission_pion_abc_relever_unite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ReleverUnite);
         if (pvalue->u.mission_pion_abc_relever_unite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ReleverUnite (ctxt_p, pvalue->u.mission_pion_abc_relever_unite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_armer_pia */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_armer_pia");

         pvalue->u.mission_pion_abc_armer_pia = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ArmerPIA);
         if (pvalue->u.mission_pion_abc_armer_pia == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ArmerPIA (ctxt_p, pvalue->u.mission_pion_abc_armer_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_ouvrir_itineraire */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_ouvrir_itineraire");

         pvalue->u.mission_pion_abc_ouvrir_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_OuvrirItineraire);
         if (pvalue->u.mission_pion_abc_ouvrir_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_OuvrirItineraire (ctxt_p, pvalue->u.mission_pion_abc_ouvrir_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_freiner */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_freiner");

         pvalue->u.mission_pion_abc_freiner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_Freiner);
         if (pvalue->u.mission_pion_abc_freiner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_Freiner (ctxt_p, pvalue->u.mission_pion_abc_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_escorter_un_convoi */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_escorter_un_convoi");

         pvalue->u.mission_pion_abc_escorter_un_convoi = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_EscorterUnConvoi);
         if (pvalue->u.mission_pion_abc_escorter_un_convoi == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_EscorterUnConvoi (ctxt_p, pvalue->u.mission_pion_abc_escorter_un_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_armer_point_de_controle */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_armer_point_de_controle");

         pvalue->u.mission_pion_abc_armer_point_de_controle = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_ArmerPointDeControle);
         if (pvalue->u.mission_pion_abc_armer_point_de_controle == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_ArmerPointDeControle (ctxt_p, pvalue->u.mission_pion_abc_armer_point_de_controle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_abc_organiser_accueil_colonne_refugies */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_abc_organiser_accueil_colonne_refugies");

         pvalue->u.mission_pion_abc_organiser_accueil_colonne_refugies = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_ABC_OrganiserAccueilColonneRefugies);
         if (pvalue->u.mission_pion_abc_organiser_accueil_colonne_refugies == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (ctxt_p, pvalue->u.mission_pion_abc_organiser_accueil_colonne_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_fosse_ac */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_fosse_ac");

         pvalue->u.mission_pion_gen_realiser_fosse_ac = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserFosseAC);
         if (pvalue->u.mission_pion_gen_realiser_fosse_ac == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserFosseAC (ctxt_p, pvalue->u.mission_pion_gen_realiser_fosse_ac);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_abattis_mine */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_abattis_mine");

         pvalue->u.mission_pion_gen_realiser_abattis_mine = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserAbattisMine);
         if (pvalue->u.mission_pion_gen_realiser_abattis_mine == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserAbattisMine (ctxt_p, pvalue->u.mission_pion_gen_realiser_abattis_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_point_mine */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_point_mine");

         pvalue->u.mission_pion_gen_realiser_point_mine = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPointMine);
         if (pvalue->u.mission_pion_gen_realiser_point_mine == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserPointMine (ctxt_p, pvalue->u.mission_pion_gen_realiser_point_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_barricade */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_barricade");

         pvalue->u.mission_pion_gen_realiser_barricade = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserBarricade);
         if (pvalue->u.mission_pion_gen_realiser_barricade == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserBarricade (ctxt_p, pvalue->u.mission_pion_gen_realiser_barricade);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_eboulement */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_eboulement");

         pvalue->u.mission_pion_gen_realiser_eboulement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserEboulement);
         if (pvalue->u.mission_pion_gen_realiser_eboulement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserEboulement (ctxt_p, pvalue->u.mission_pion_gen_realiser_eboulement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_bouchon_mine */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_bouchon_mine");

         pvalue->u.mission_pion_gen_realiser_bouchon_mine = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserBouchonMine);
         if (pvalue->u.mission_pion_gen_realiser_bouchon_mine == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserBouchonMine (ctxt_p, pvalue->u.mission_pion_gen_realiser_bouchon_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_detruire_route */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_detruire_route");

         pvalue->u.mission_pion_gen_detruire_route = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DetruireRoute);
         if (pvalue->u.mission_pion_gen_detruire_route == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DetruireRoute (ctxt_p, pvalue->u.mission_pion_gen_detruire_route);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_detruire_pont */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_detruire_pont");

         pvalue->u.mission_pion_gen_detruire_pont = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DetruirePont);
         if (pvalue->u.mission_pion_gen_detruire_pont == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DetruirePont (ctxt_p, pvalue->u.mission_pion_gen_detruire_pont);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_securiser_itineraire */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_securiser_itineraire");

         pvalue->u.mission_pion_gen_securiser_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_SecuriserItineraire);
         if (pvalue->u.mission_pion_gen_securiser_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_SecuriserItineraire (ctxt_p, pvalue->u.mission_pion_gen_securiser_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_degager_abattis_mine */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_degager_abattis_mine");

         pvalue->u.mission_pion_gen_degager_abattis_mine = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DegagerAbattisMine);
         if (pvalue->u.mission_pion_gen_degager_abattis_mine == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DegagerAbattisMine (ctxt_p, pvalue->u.mission_pion_gen_degager_abattis_mine);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_degager_eboulement */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_degager_eboulement");

         pvalue->u.mission_pion_gen_degager_eboulement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DegagerEboulement);
         if (pvalue->u.mission_pion_gen_degager_eboulement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DegagerEboulement (ctxt_p, pvalue->u.mission_pion_gen_degager_eboulement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_degager_rues */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_degager_rues");

         pvalue->u.mission_pion_gen_degager_rues = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DegagerRues);
         if (pvalue->u.mission_pion_gen_degager_rues == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DegagerRues (ctxt_p, pvalue->u.mission_pion_gen_degager_rues);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_combler_entonnoir */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_combler_entonnoir");

         pvalue->u.mission_pion_gen_combler_entonnoir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ComblerEntonnoir);
         if (pvalue->u.mission_pion_gen_combler_entonnoir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ComblerEntonnoir (ctxt_p, pvalue->u.mission_pion_gen_combler_entonnoir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_combler_fosse_ac */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_combler_fosse_ac");

         pvalue->u.mission_pion_gen_combler_fosse_ac = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ComblerFosseAC);
         if (pvalue->u.mission_pion_gen_combler_fosse_ac == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ComblerFosseAC (ctxt_p, pvalue->u.mission_pion_gen_combler_fosse_ac);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_contournement */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_contournement");

         pvalue->u.mission_pion_gen_creer_contournement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_CreerContournement);
         if (pvalue->u.mission_pion_gen_creer_contournement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_CreerContournement (ctxt_p, pvalue->u.mission_pion_gen_creer_contournement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_zone_minee_lineaire */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_zone_minee_lineaire");

         pvalue->u.mission_pion_gen_realiser_zone_minee_lineaire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZoneMineeLineaire);
         if (pvalue->u.mission_pion_gen_realiser_zone_minee_lineaire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserZoneMineeLineaire (ctxt_p, pvalue->u.mission_pion_gen_realiser_zone_minee_lineaire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_ouvrir_trouee */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_ouvrir_trouee");

         pvalue->u.mission_pion_gen_ouvrir_trouee = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_OuvrirTrouee);
         if (pvalue->u.mission_pion_gen_ouvrir_trouee == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_OuvrirTrouee (ctxt_p, pvalue->u.mission_pion_gen_ouvrir_trouee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_renforcer */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_renforcer");

         pvalue->u.mission_pion_gen_renforcer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_Renforcer);
         if (pvalue->u.mission_pion_gen_renforcer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_Renforcer (ctxt_p, pvalue->u.mission_pion_gen_renforcer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_franchir_entonnoir */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_franchir_entonnoir");

         pvalue->u.mission_pion_gen_franchir_entonnoir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_FranchirEntonnoir);
         if (pvalue->u.mission_pion_gen_franchir_entonnoir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_FranchirEntonnoir (ctxt_p, pvalue->u.mission_pion_gen_franchir_entonnoir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_franchir_fosse_ac */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_franchir_fosse_ac");

         pvalue->u.mission_pion_gen_franchir_fosse_ac = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_FranchirFosseAC);
         if (pvalue->u.mission_pion_gen_franchir_fosse_ac == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_FranchirFosseAC (ctxt_p, pvalue->u.mission_pion_gen_franchir_fosse_ac);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_zone_minee_par_dispersion */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_zone_minee_par_dispersion");

         pvalue->u.mission_pion_gen_realiser_zone_minee_par_dispersion = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZoneMineeParDispersion);
         if (pvalue->u.mission_pion_gen_realiser_zone_minee_par_dispersion == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserZoneMineeParDispersion (ctxt_p, pvalue->u.mission_pion_gen_realiser_zone_minee_par_dispersion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_postes_tir */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_postes_tir");

         pvalue->u.mission_pion_gen_realiser_postes_tir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPostesTir);
         if (pvalue->u.mission_pion_gen_realiser_postes_tir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserPostesTir (ctxt_p, pvalue->u.mission_pion_gen_realiser_postes_tir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_travaux_protection */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_travaux_protection");

         pvalue->u.mission_pion_gen_realiser_travaux_protection = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserTravauxProtection);
         if (pvalue->u.mission_pion_gen_realiser_travaux_protection == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserTravauxProtection (ctxt_p, pvalue->u.mission_pion_gen_realiser_travaux_protection);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_retablir_itineraire */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_retablir_itineraire");

         pvalue->u.mission_pion_gen_retablir_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RetablirItineraire);
         if (pvalue->u.mission_pion_gen_retablir_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RetablirItineraire (ctxt_p, pvalue->u.mission_pion_gen_retablir_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_equiper_exploiter */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_equiper_exploiter");

         pvalue->u.mission_pion_gen_equiper_exploiter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_EquiperExploiter);
         if (pvalue->u.mission_pion_gen_equiper_exploiter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_EquiperExploiter (ctxt_p, pvalue->u.mission_pion_gen_equiper_exploiter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_executer_variantement */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_executer_variantement");

         pvalue->u.mission_pion_gen_executer_variantement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ExecuterVariantement);
         if (pvalue->u.mission_pion_gen_executer_variantement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ExecuterVariantement (ctxt_p, pvalue->u.mission_pion_gen_executer_variantement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reconnaitre_site_franchissement */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reconnaitre_site_franchissement");

         pvalue->u.mission_pion_gen_reconnaitre_site_franchissement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreSiteFranchissement);
         if (pvalue->u.mission_pion_gen_reconnaitre_site_franchissement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ReconnaitreSiteFranchissement (ctxt_p, pvalue->u.mission_pion_gen_reconnaitre_site_franchissement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reconnaitre_itineraire */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reconnaitre_itineraire");

         pvalue->u.mission_pion_gen_reconnaitre_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreItineraire);
         if (pvalue->u.mission_pion_gen_reconnaitre_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_pion_gen_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_deminer_site_franchissement */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_deminer_site_franchissement");

         pvalue->u.mission_pion_gen_deminer_site_franchissement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DeminerSiteFranchissement);
         if (pvalue->u.mission_pion_gen_deminer_site_franchissement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DeminerSiteFranchissement (ctxt_p, pvalue->u.mission_pion_gen_deminer_site_franchissement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reconnaitre_zone */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reconnaitre_zone");

         pvalue->u.mission_pion_gen_reconnaitre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ReconnaitreZone);
         if (pvalue->u.mission_pion_gen_reconnaitre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ReconnaitreZone (ctxt_p, pvalue->u.mission_pion_gen_reconnaitre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_plate_forme */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_plate_forme");

         pvalue->u.mission_pion_gen_creer_plate_forme = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_CreerPlateForme);
         if (pvalue->u.mission_pion_gen_creer_plate_forme == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_CreerPlateForme (ctxt_p, pvalue->u.mission_pion_gen_creer_plate_forme);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_piste */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_piste");

         pvalue->u.mission_pion_gen_creer_piste = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_CreerPiste);
         if (pvalue->u.mission_pion_gen_creer_piste == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_CreerPiste (ctxt_p, pvalue->u.mission_pion_gen_creer_piste);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_creer_aire_poser */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_creer_aire_poser");

         pvalue->u.mission_pion_gen_creer_aire_poser = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_CreerAirePoser);
         if (pvalue->u.mission_pion_gen_creer_aire_poser == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_CreerAirePoser (ctxt_p, pvalue->u.mission_pion_gen_creer_aire_poser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_neutraliser_engins_explosifs */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_neutraliser_engins_explosifs");

         pvalue->u.mission_pion_gen_neutraliser_engins_explosifs = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_NeutraliserEnginsExplosifs);
         if (pvalue->u.mission_pion_gen_neutraliser_engins_explosifs == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_NeutraliserEnginsExplosifs (ctxt_p, pvalue->u.mission_pion_gen_neutraliser_engins_explosifs);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_activer_obstacle */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_activer_obstacle");

         pvalue->u.mission_pion_gen_activer_obstacle = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ActiverObstacle);
         if (pvalue->u.mission_pion_gen_activer_obstacle == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ActiverObstacle (ctxt_p, pvalue->u.mission_pion_gen_activer_obstacle);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_ameliorer_mobilite */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_ameliorer_mobilite");

         pvalue->u.mission_pion_gen_ameliorer_mobilite = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_AmeliorerMobilite);
         if (pvalue->u.mission_pion_gen_ameliorer_mobilite == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_AmeliorerMobilite (ctxt_p, pvalue->u.mission_pion_gen_ameliorer_mobilite);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_aire_logistique */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_aire_logistique");

         pvalue->u.mission_pion_gen_realiser_aire_logistique = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserAireLogistique);
         if (pvalue->u.mission_pion_gen_realiser_aire_logistique == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserAireLogistique (ctxt_p, pvalue->u.mission_pion_gen_realiser_aire_logistique);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_depolluer_zone */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_depolluer_zone");

         pvalue->u.mission_pion_gen_depolluer_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_DepolluerZone);
         if (pvalue->u.mission_pion_gen_depolluer_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_DepolluerZone (ctxt_p, pvalue->u.mission_pion_gen_depolluer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_amenager_terrain_poser */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_amenager_terrain_poser");

         pvalue->u.mission_pion_gen_amenager_terrain_poser = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_AmenagerTerrainPoser);
         if (pvalue->u.mission_pion_gen_amenager_terrain_poser == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_AmenagerTerrainPoser (ctxt_p, pvalue->u.mission_pion_gen_amenager_terrain_poser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_plate_forme_deploiement */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_plate_forme_deploiement");

         pvalue->u.mission_pion_gen_realiser_plate_forme_deploiement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserPlateFormeDeploiement);
         if (pvalue->u.mission_pion_gen_realiser_plate_forme_deploiement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserPlateFormeDeploiement (ctxt_p, pvalue->u.mission_pion_gen_realiser_plate_forme_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_reprendre_mission_construction */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_reprendre_mission_construction");

         pvalue->u.mission_pion_gen_reprendre_mission_construction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_ReprendreMissionConstruction);
         if (pvalue->u.mission_pion_gen_reprendre_mission_construction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_ReprendreMissionConstruction (ctxt_p, pvalue->u.mission_pion_gen_reprendre_mission_construction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_zone_poser_helicoptere */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_zone_poser_helicoptere");

         pvalue->u.mission_pion_gen_realiser_zone_poser_helicoptere = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserZonePoserHelicoptere);
         if (pvalue->u.mission_pion_gen_realiser_zone_poser_helicoptere == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserZonePoserHelicoptere (ctxt_p, pvalue->u.mission_pion_gen_realiser_zone_poser_helicoptere);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_appuyer_debarquement_troupes_gu */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_appuyer_debarquement_troupes_gu");

         pvalue->u.mission_pion_gen_appuyer_debarquement_troupes_gu = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_AppuyerDebarquementTroupesGU);
         if (pvalue->u.mission_pion_gen_appuyer_debarquement_troupes_gu == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_AppuyerDebarquementTroupesGU (ctxt_p, pvalue->u.mission_pion_gen_appuyer_debarquement_troupes_gu);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_camp_prisonniers */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_camp_prisonniers");

         pvalue->u.mission_pion_gen_realiser_camp_prisonniers = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserCampPrisonniers);
         if (pvalue->u.mission_pion_gen_realiser_camp_prisonniers == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserCampPrisonniers (ctxt_p, pvalue->u.mission_pion_gen_realiser_camp_prisonniers);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_gen_realiser_camp_refugies */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_gen_realiser_camp_refugies");

         pvalue->u.mission_pion_gen_realiser_camp_refugies = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_GEN_RealiserCampRefugies);
         if (pvalue->u.mission_pion_gen_realiser_camp_refugies == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_GEN_RealiserCampRefugies (ctxt_p, pvalue->u.mission_pion_gen_realiser_camp_refugies);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_reconnaitre_axe */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_reconnaitre_axe");

         pvalue->u.mission_pion_inf_reconnaitre_axe = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_ReconnaitreAxe);
         if (pvalue->u.mission_pion_inf_reconnaitre_axe == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_ReconnaitreAxe (ctxt_p, pvalue->u.mission_pion_inf_reconnaitre_axe);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_couvrir */
      case 106:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_couvrir");

         pvalue->u.mission_pion_inf_couvrir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Couvrir);
         if (pvalue->u.mission_pion_inf_couvrir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Couvrir (ctxt_p, pvalue->u.mission_pion_inf_couvrir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_reduire */
      case 107:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_reduire");

         pvalue->u.mission_pion_inf_reduire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Reduire);
         if (pvalue->u.mission_pion_inf_reduire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Reduire (ctxt_p, pvalue->u.mission_pion_inf_reduire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_appuyer */
      case 108:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_appuyer");

         pvalue->u.mission_pion_inf_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Appuyer);
         if (pvalue->u.mission_pion_inf_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Appuyer (ctxt_p, pvalue->u.mission_pion_inf_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_fixer */
      case 109:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_fixer");

         pvalue->u.mission_pion_inf_fixer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Fixer);
         if (pvalue->u.mission_pion_inf_fixer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Fixer (ctxt_p, pvalue->u.mission_pion_inf_fixer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_controler_secteur */
      case 110:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_controler_secteur");

         pvalue->u.mission_pion_inf_controler_secteur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_ControlerSecteur);
         if (pvalue->u.mission_pion_inf_controler_secteur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_ControlerSecteur (ctxt_p, pvalue->u.mission_pion_inf_controler_secteur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_surveiller_secteur */
      case 111:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_surveiller_secteur");

         pvalue->u.mission_pion_inf_surveiller_secteur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_SurveillerSecteur);
         if (pvalue->u.mission_pion_inf_surveiller_secteur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_SurveillerSecteur (ctxt_p, pvalue->u.mission_pion_inf_surveiller_secteur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_barrer */
      case 112:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_barrer");

         pvalue->u.mission_pion_inf_barrer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Barrer);
         if (pvalue->u.mission_pion_inf_barrer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Barrer (ctxt_p, pvalue->u.mission_pion_inf_barrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_reconnaitre_point */
      case 113:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_reconnaitre_point");

         pvalue->u.mission_pion_inf_reconnaitre_point = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_ReconnaitrePoint);
         if (pvalue->u.mission_pion_inf_reconnaitre_point == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_ReconnaitrePoint (ctxt_p, pvalue->u.mission_pion_inf_reconnaitre_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_eclairer */
      case 114:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_eclairer");

         pvalue->u.mission_pion_inf_eclairer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Eclairer);
         if (pvalue->u.mission_pion_inf_eclairer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Eclairer (ctxt_p, pvalue->u.mission_pion_inf_eclairer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_interdire */
      case 115:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_interdire");

         pvalue->u.mission_pion_inf_interdire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Interdire);
         if (pvalue->u.mission_pion_inf_interdire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Interdire (ctxt_p, pvalue->u.mission_pion_inf_interdire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_semparer */
      case 116:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_semparer");

         pvalue->u.mission_pion_inf_semparer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Semparer);
         if (pvalue->u.mission_pion_inf_semparer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Semparer (ctxt_p, pvalue->u.mission_pion_inf_semparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_prendre_preciser_contact */
      case 117:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_prendre_preciser_contact");

         pvalue->u.mission_pion_inf_prendre_preciser_contact = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_PrendrePreciserContact);
         if (pvalue->u.mission_pion_inf_prendre_preciser_contact == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_PrendrePreciserContact (ctxt_p, pvalue->u.mission_pion_inf_prendre_preciser_contact);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_defendre */
      case 118:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_defendre");

         pvalue->u.mission_pion_inf_defendre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Defendre);
         if (pvalue->u.mission_pion_inf_defendre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Defendre (ctxt_p, pvalue->u.mission_pion_inf_defendre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_detruire_embuscade */
      case 119:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_detruire_embuscade");

         pvalue->u.mission_pion_inf_detruire_embuscade = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_DetruireEmbuscade);
         if (pvalue->u.mission_pion_inf_detruire_embuscade == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_DetruireEmbuscade (ctxt_p, pvalue->u.mission_pion_inf_detruire_embuscade);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_contre_attaquer */
      case 120:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_contre_attaquer");

         pvalue->u.mission_pion_inf_contre_attaquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_ContreAttaquer);
         if (pvalue->u.mission_pion_inf_contre_attaquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_ContreAttaquer (ctxt_p, pvalue->u.mission_pion_inf_contre_attaquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_freiner */
      case 121:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_freiner");

         pvalue->u.mission_pion_inf_freiner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Freiner);
         if (pvalue->u.mission_pion_inf_freiner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Freiner (ctxt_p, pvalue->u.mission_pion_inf_freiner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_flanc_garder */
      case 122:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_flanc_garder");

         pvalue->u.mission_pion_inf_flanc_garder = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_FlancGarder);
         if (pvalue->u.mission_pion_inf_flanc_garder == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_FlancGarder (ctxt_p, pvalue->u.mission_pion_inf_flanc_garder);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_organiser_un_check_point */
      case 123:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_organiser_un_check_point");

         pvalue->u.mission_pion_inf_organiser_un_check_point = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_OrganiserUnCheckPoint);
         if (pvalue->u.mission_pion_inf_organiser_un_check_point == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_OrganiserUnCheckPoint (ctxt_p, pvalue->u.mission_pion_inf_organiser_un_check_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_harceler */
      case 124:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_harceler");

         pvalue->u.mission_pion_inf_harceler = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Harceler);
         if (pvalue->u.mission_pion_inf_harceler == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Harceler (ctxt_p, pvalue->u.mission_pion_inf_harceler);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_detruire_par_coup_de_main */
      case 125:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_detruire_par_coup_de_main");

         pvalue->u.mission_pion_inf_detruire_par_coup_de_main = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_DetruireParCoupDeMain);
         if (pvalue->u.mission_pion_inf_detruire_par_coup_de_main == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_DetruireParCoupDeMain (ctxt_p, pvalue->u.mission_pion_inf_detruire_par_coup_de_main);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_escorter_un_convoi */
      case 126:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_escorter_un_convoi");

         pvalue->u.mission_pion_inf_escorter_un_convoi = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_EscorterUnConvoi);
         if (pvalue->u.mission_pion_inf_escorter_un_convoi == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_EscorterUnConvoi (ctxt_p, pvalue->u.mission_pion_inf_escorter_un_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_renseigner_sur */
      case 127:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_renseigner_sur");

         pvalue->u.mission_pion_inf_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_RenseignerSur);
         if (pvalue->u.mission_pion_inf_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_RenseignerSur (ctxt_p, pvalue->u.mission_pion_inf_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_soutenir */
      case 128:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_soutenir");

         pvalue->u.mission_pion_inf_soutenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Soutenir);
         if (pvalue->u.mission_pion_inf_soutenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Soutenir (ctxt_p, pvalue->u.mission_pion_inf_soutenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_securiser */
      case 129:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_securiser");

         pvalue->u.mission_pion_inf_securiser = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Securiser);
         if (pvalue->u.mission_pion_inf_securiser == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Securiser (ctxt_p, pvalue->u.mission_pion_inf_securiser);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_recueillir */
      case 130:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_recueillir");

         pvalue->u.mission_pion_inf_recueillir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_Recueillir);
         if (pvalue->u.mission_pion_inf_recueillir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_Recueillir (ctxt_p, pvalue->u.mission_pion_inf_recueillir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_inf_repondre_a_aggression */
      case 131:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_inf_repondre_a_aggression");

         pvalue->u.mission_pion_inf_repondre_a_aggression = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_INF_RepondreAAggression);
         if (pvalue->u.mission_pion_inf_repondre_a_aggression == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_INF_RepondreAAggression (ctxt_p, pvalue->u.mission_pion_inf_repondre_a_aggression);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_se_deployer */
      case 132:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_se_deployer");

         pvalue->u.mission_pion_log_se_deployer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_SeDeployer);
         if (pvalue->u.mission_pion_log_se_deployer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_SeDeployer (ctxt_p, pvalue->u.mission_pion_log_se_deployer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_distribuer_moyens */
      case 133:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_distribuer_moyens");

         pvalue->u.mission_pion_log_distribuer_moyens = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_DistribuerMoyens);
         if (pvalue->u.mission_pion_log_distribuer_moyens == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_DistribuerMoyens (ctxt_p, pvalue->u.mission_pion_log_distribuer_moyens);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_trier_blesses */
      case 134:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_trier_blesses");

         pvalue->u.mission_pion_log_trier_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_TrierBlesses);
         if (pvalue->u.mission_pion_log_trier_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_TrierBlesses (ctxt_p, pvalue->u.mission_pion_log_trier_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_traiter_blesses */
      case 135:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_traiter_blesses");

         pvalue->u.mission_pion_log_traiter_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_TraiterBlesses);
         if (pvalue->u.mission_pion_log_traiter_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_TraiterBlesses (ctxt_p, pvalue->u.mission_pion_log_traiter_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_trier_et_traiter_blesses */
      case 136:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_trier_et_traiter_blesses");

         pvalue->u.mission_pion_log_trier_et_traiter_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_TrierEtTraiterBlesses);
         if (pvalue->u.mission_pion_log_trier_et_traiter_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_TrierEtTraiterBlesses (ctxt_p, pvalue->u.mission_pion_log_trier_et_traiter_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_soigner_blesses */
      case 137:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_soigner_blesses");

         pvalue->u.mission_pion_log_soigner_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_SoignerBlesses);
         if (pvalue->u.mission_pion_log_soigner_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_SoignerBlesses (ctxt_p, pvalue->u.mission_pion_log_soigner_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_prendre_en_compte_reactions_mentales */
      case 138:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_prendre_en_compte_reactions_mentales");

         pvalue->u.mission_pion_log_prendre_en_compte_reactions_mentales = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_PrendreEnCompteReactionsMentales);
         if (pvalue->u.mission_pion_log_prendre_en_compte_reactions_mentales == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_PrendreEnCompteReactionsMentales (ctxt_p, pvalue->u.mission_pion_log_prendre_en_compte_reactions_mentales);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_decontaminer_blesses */
      case 139:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_decontaminer_blesses");

         pvalue->u.mission_pion_log_decontaminer_blesses = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_DecontaminerBlesses);
         if (pvalue->u.mission_pion_log_decontaminer_blesses == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_DecontaminerBlesses (ctxt_p, pvalue->u.mission_pion_log_decontaminer_blesses);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reparer */
      case 140:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reparer");

         pvalue->u.mission_pion_log_reparer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_Reparer);
         if (pvalue->u.mission_pion_log_reparer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_Reparer (ctxt_p, pvalue->u.mission_pion_log_reparer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_evacuer */
      case 141:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_evacuer");

         pvalue->u.mission_pion_log_evacuer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_Evacuer);
         if (pvalue->u.mission_pion_log_evacuer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_Evacuer (ctxt_p, pvalue->u.mission_pion_log_evacuer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_convoyer */
      case 142:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_convoyer");

         pvalue->u.mission_pion_log_convoyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_Convoyer);
         if (pvalue->u.mission_pion_log_convoyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_Convoyer (ctxt_p, pvalue->u.mission_pion_log_convoyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_distribuer_ressources */
      case 143:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_distribuer_ressources");

         pvalue->u.mission_pion_log_distribuer_ressources = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_DistribuerRessources);
         if (pvalue->u.mission_pion_log_distribuer_ressources == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_DistribuerRessources (ctxt_p, pvalue->u.mission_pion_log_distribuer_ressources);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_constituer_convoi */
      case 144:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_constituer_convoi");

         pvalue->u.mission_pion_log_constituer_convoi = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_ConstituerConvoi);
         if (pvalue->u.mission_pion_log_constituer_convoi == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_ConstituerConvoi (ctxt_p, pvalue->u.mission_pion_log_constituer_convoi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_livrer */
      case 145:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_livrer");

         pvalue->u.mission_pion_log_livrer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_Livrer);
         if (pvalue->u.mission_pion_log_livrer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_Livrer (ctxt_p, pvalue->u.mission_pion_log_livrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_preparer_bascule */
      case 146:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_preparer_bascule");

         pvalue->u.mission_pion_log_preparer_bascule = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_PreparerBascule);
         if (pvalue->u.mission_pion_log_preparer_bascule == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_PreparerBascule (ctxt_p, pvalue->u.mission_pion_log_preparer_bascule);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_appuyer_mouvement */
      case 147:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_appuyer_mouvement");

         pvalue->u.mission_pion_log_appuyer_mouvement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerMouvement);
         if (pvalue->u.mission_pion_log_appuyer_mouvement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_AppuyerMouvement (ctxt_p, pvalue->u.mission_pion_log_appuyer_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reconnaitre_itineraire */
      case 148:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reconnaitre_itineraire");

         pvalue->u.mission_pion_log_reconnaitre_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreItineraire);
         if (pvalue->u.mission_pion_log_reconnaitre_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_pion_log_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_transporter_unite_chars */
      case 149:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_transporter_unite_chars");

         pvalue->u.mission_pion_log_transporter_unite_chars = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_TransporterUniteChars);
         if (pvalue->u.mission_pion_log_transporter_unite_chars == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_TransporterUniteChars (ctxt_p, pvalue->u.mission_pion_log_transporter_unite_chars);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reconnaitre_zone_contaminee */
      case 150:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reconnaitre_zone_contaminee");

         pvalue->u.mission_pion_log_reconnaitre_zone_contaminee = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreZoneContaminee);
         if (pvalue->u.mission_pion_log_reconnaitre_zone_contaminee == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_ReconnaitreZoneContaminee (ctxt_p, pvalue->u.mission_pion_log_reconnaitre_zone_contaminee);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_appuyer_mouvement_dans_zone */
      case 151:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_appuyer_mouvement_dans_zone");

         pvalue->u.mission_pion_log_appuyer_mouvement_dans_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerMouvementDansZone);
         if (pvalue->u.mission_pion_log_appuyer_mouvement_dans_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_AppuyerMouvementDansZone (ctxt_p, pvalue->u.mission_pion_log_appuyer_mouvement_dans_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_mettre_en_oeuvre_zone_stationnement */
      case 152:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_mettre_en_oeuvre_zone_stationnement");

         pvalue->u.mission_pion_log_mettre_en_oeuvre_zone_stationnement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement);
         if (pvalue->u.mission_pion_log_mettre_en_oeuvre_zone_stationnement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement (ctxt_p, pvalue->u.mission_pion_log_mettre_en_oeuvre_zone_stationnement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_appuyer_franchissement_sur_un_point */
      case 153:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_appuyer_franchissement_sur_un_point");

         pvalue->u.mission_pion_log_appuyer_franchissement_sur_un_point = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint);
         if (pvalue->u.mission_pion_log_appuyer_franchissement_sur_un_point == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint (ctxt_p, pvalue->u.mission_pion_log_appuyer_franchissement_sur_un_point);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_bloquer_zone */
      case 154:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_bloquer_zone");

         pvalue->u.mission_pion_log_bloquer_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_BloquerZone);
         if (pvalue->u.mission_pion_log_bloquer_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_BloquerZone (ctxt_p, pvalue->u.mission_pion_log_bloquer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_reconnaitre_zone_de_deploiement */
      case 155:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_reconnaitre_zone_de_deploiement");

         pvalue->u.mission_pion_log_reconnaitre_zone_de_deploiement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement);
         if (pvalue->u.mission_pion_log_reconnaitre_zone_de_deploiement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement (ctxt_p, pvalue->u.mission_pion_log_reconnaitre_zone_de_deploiement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_armer_pia */
      case 156:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_armer_pia");

         pvalue->u.mission_pion_log_armer_pia = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_ArmerPIA);
         if (pvalue->u.mission_pion_log_armer_pia == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_ArmerPIA (ctxt_p, pvalue->u.mission_pion_log_armer_pia);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_log_surveiller */
      case 157:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_log_surveiller");

         pvalue->u.mission_pion_log_surveiller = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_LOG_Surveiller);
         if (pvalue->u.mission_pion_log_surveiller == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_LOG_Surveiller (ctxt_p, pvalue->u.mission_pion_log_surveiller);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_heliporter */
      case 158:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_heliporter");

         pvalue->u.mission_pion_test_heliporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_Heliporter);
         if (pvalue->u.mission_pion_test_heliporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_Heliporter (ctxt_p, pvalue->u.mission_pion_test_heliporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_move_to */
      case 159:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_move_to");

         pvalue->u.mission_pion_test_move_to = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_MoveTo);
         if (pvalue->u.mission_pion_test_move_to == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_MoveTo (ctxt_p, pvalue->u.mission_pion_test_move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_create_object */
      case 160:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_create_object");

         pvalue->u.mission_pion_test_create_object = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_CreateObject);
         if (pvalue->u.mission_pion_test_create_object == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_CreateObject (ctxt_p, pvalue->u.mission_pion_test_create_object);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_destroy_object */
      case 161:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_destroy_object");

         pvalue->u.mission_pion_test_destroy_object = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_DestroyObject);
         if (pvalue->u.mission_pion_test_destroy_object == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_DestroyObject (ctxt_p, pvalue->u.mission_pion_test_destroy_object);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_create_bypass */
      case 162:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_create_bypass");

         pvalue->u.mission_pion_test_create_bypass = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_CreateBypass);
         if (pvalue->u.mission_pion_test_create_bypass == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_CreateBypass (ctxt_p, pvalue->u.mission_pion_test_create_bypass);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_fire */
      case 163:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_fire");

         pvalue->u.mission_pion_test_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_Fire);
         if (pvalue->u.mission_pion_test_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_Fire (ctxt_p, pvalue->u.mission_pion_test_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_change_posture */
      case 164:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_change_posture");

         pvalue->u.mission_pion_test_change_posture = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_ChangePosture);
         if (pvalue->u.mission_pion_test_change_posture == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_ChangePosture (ctxt_p, pvalue->u.mission_pion_test_change_posture);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_path_find */
      case 165:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_path_find");

         pvalue->u.mission_pion_test_path_find = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_PathFind);
         if (pvalue->u.mission_pion_test_path_find == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_PathFind (ctxt_p, pvalue->u.mission_pion_test_path_find);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_find_position */
      case 166:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_find_position");

         pvalue->u.mission_pion_test_find_position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_FindPosition);
         if (pvalue->u.mission_pion_test_find_position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_FindPosition (ctxt_p, pvalue->u.mission_pion_test_find_position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_test_reinforce */
      case 167:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_test_reinforce");

         pvalue->u.mission_pion_test_reinforce = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Test_Reinforce);
         if (pvalue->u.mission_pion_test_reinforce == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Test_Reinforce (ctxt_p, pvalue->u.mission_pion_test_reinforce);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_plastron_ennemi */
      case 168:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_plastron_ennemi");

         pvalue->u.mission_pion_plastron_ennemi = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_PlastronEnnemi);
         if (pvalue->u.mission_pion_plastron_ennemi == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_PlastronEnnemi (ctxt_p, pvalue->u.mission_pion_plastron_ennemi);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_faire_mouvement */
      case 169:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_faire_mouvement");

         pvalue->u.mission_pion_faire_mouvement = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_FaireMouvement);
         if (pvalue->u.mission_pion_faire_mouvement == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_FaireMouvement (ctxt_p, pvalue->u.mission_pion_faire_mouvement);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_suivre */
      case 170:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_suivre");

         pvalue->u.mission_pion_suivre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Suivre);
         if (pvalue->u.mission_pion_suivre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Suivre (ctxt_p, pvalue->u.mission_pion_suivre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_se_faire_decontaminer */
      case 171:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_se_faire_decontaminer");

         pvalue->u.mission_pion_se_faire_decontaminer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_SeFaireDecontaminer);
         if (pvalue->u.mission_pion_se_faire_decontaminer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_SeFaireDecontaminer (ctxt_p, pvalue->u.mission_pion_se_faire_decontaminer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_franchir */
      case 172:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_franchir");

         pvalue->u.mission_pion_franchir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Franchir);
         if (pvalue->u.mission_pion_franchir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Franchir (ctxt_p, pvalue->u.mission_pion_franchir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_decrocher */
      case 173:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_decrocher");

         pvalue->u.mission_pion_decrocher = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Decrocher);
         if (pvalue->u.mission_pion_decrocher == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Decrocher (ctxt_p, pvalue->u.mission_pion_decrocher);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_stationner */
      case 174:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_stationner");

         pvalue->u.mission_pion_stationner = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Stationner);
         if (pvalue->u.mission_pion_stationner == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Stationner (ctxt_p, pvalue->u.mission_pion_stationner);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_se_faire_transporter */
      case 175:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_se_faire_transporter");

         pvalue->u.mission_pion_se_faire_transporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_SeFaireTransporter);
         if (pvalue->u.mission_pion_se_faire_transporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_SeFaireTransporter (ctxt_p, pvalue->u.mission_pion_se_faire_transporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_generique */
      case 176:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_generique");

         pvalue->u.mission_pion_generique = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_Generique);
         if (pvalue->u.mission_pion_generique == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_Generique (ctxt_p, pvalue->u.mission_pion_generique);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_milice_provoquer */
      case 177:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_milice_provoquer");

         pvalue->u.mission_pion_milice_provoquer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_MILICE_Provoquer);
         if (pvalue->u.mission_pion_milice_provoquer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_MILICE_Provoquer (ctxt_p, pvalue->u.mission_pion_milice_provoquer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_milice_prendre_et_tenir */
      case 178:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_milice_prendre_et_tenir");

         pvalue->u.mission_pion_milice_prendre_et_tenir = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_MILICE_PrendreEtTenir);
         if (pvalue->u.mission_pion_milice_prendre_et_tenir == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_MILICE_PrendreEtTenir (ctxt_p, pvalue->u.mission_pion_milice_prendre_et_tenir);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_milice_detruire_embuscade */
      case 179:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_milice_detruire_embuscade");

         pvalue->u.mission_pion_milice_detruire_embuscade = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_MILICE_DetruireEmbuscade);
         if (pvalue->u.mission_pion_milice_detruire_embuscade == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_MILICE_DetruireEmbuscade (ctxt_p, pvalue->u.mission_pion_milice_detruire_embuscade);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_joint_marine_transporter */
      case 180:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_joint_marine_transporter");

         pvalue->u.mission_pion_joint_marine_transporter = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_JOINT_MARINE_Transporter);
         if (pvalue->u.mission_pion_joint_marine_transporter == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_JOINT_MARINE_Transporter (ctxt_p, pvalue->u.mission_pion_joint_marine_transporter);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_joint_air_effectuer_raid */
      case 181:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_joint_air_effectuer_raid");

         pvalue->u.mission_pion_joint_air_effectuer_raid = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_JOINT_AIR_EffectuerRaid);
         if (pvalue->u.mission_pion_joint_air_effectuer_raid == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_JOINT_AIR_EffectuerRaid (ctxt_p, pvalue->u.mission_pion_joint_air_effectuer_raid);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_animer_un_plot_de_decontamination */
      case 182:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_animer_un_plot_de_decontamination");

         pvalue->u.mission_pion_nbc_animer_un_plot_de_decontamination = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_NBC_AnimerUnPlotDeDecontamination);
         if (pvalue->u.mission_pion_nbc_animer_un_plot_de_decontamination == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_NBC_AnimerUnPlotDeDecontamination (ctxt_p, pvalue->u.mission_pion_nbc_animer_un_plot_de_decontamination);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_reconnaitre_itineraire */
      case 183:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_reconnaitre_itineraire");

         pvalue->u.mission_pion_nbc_reconnaitre_itineraire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_NBC_ReconnaitreItineraire);
         if (pvalue->u.mission_pion_nbc_reconnaitre_itineraire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_NBC_ReconnaitreItineraire (ctxt_p, pvalue->u.mission_pion_nbc_reconnaitre_itineraire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_reconnaitre_zone */
      case 184:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_reconnaitre_zone");

         pvalue->u.mission_pion_nbc_reconnaitre_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_NBC_ReconnaitreZone);
         if (pvalue->u.mission_pion_nbc_reconnaitre_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_NBC_ReconnaitreZone (ctxt_p, pvalue->u.mission_pion_nbc_reconnaitre_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_decontaminer_zone */
      case 185:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_decontaminer_zone");

         pvalue->u.mission_pion_nbc_decontaminer_zone = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_NBC_DecontaminerZone);
         if (pvalue->u.mission_pion_nbc_decontaminer_zone == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_NBC_DecontaminerZone (ctxt_p, pvalue->u.mission_pion_nbc_decontaminer_zone);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_nbc_reconnaitre_un_site_rota */
      case 186:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_nbc_reconnaitre_un_site_rota");

         pvalue->u.mission_pion_nbc_reconnaitre_un_site_rota = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_NBC_ReconnaitreUnSiteROTA);
         if (pvalue->u.mission_pion_nbc_reconnaitre_un_site_rota == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_NBC_ReconnaitreUnSiteROTA (ctxt_p, pvalue->u.mission_pion_nbc_reconnaitre_un_site_rota);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_rohum_renseigner_sur */
      case 187:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_rohum_renseigner_sur");

         pvalue->u.mission_pion_rens_rohum_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROHUM_RenseignerSur);
         if (pvalue->u.mission_pion_rens_rohum_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROHUM_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_rohum_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_rohum_sexfiltrer */
      case 188:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_rohum_sexfiltrer");

         pvalue->u.mission_pion_rens_rohum_sexfiltrer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROHUM_SExfiltrer);
         if (pvalue->u.mission_pion_rens_rohum_sexfiltrer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROHUM_SExfiltrer (ctxt_p, pvalue->u.mission_pion_rens_rohum_sexfiltrer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_rohum_orienter_guider */
      case 189:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_rohum_orienter_guider");

         pvalue->u.mission_pion_rens_rohum_orienter_guider = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROHUM_OrienterGuider);
         if (pvalue->u.mission_pion_rens_rohum_orienter_guider == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROHUM_OrienterGuider (ctxt_p, pvalue->u.mission_pion_rens_rohum_orienter_guider);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roem_appuyer */
      case 190:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roem_appuyer");

         pvalue->u.mission_pion_rens_roem_appuyer = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROEM_Appuyer);
         if (pvalue->u.mission_pion_rens_roem_appuyer == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROEM_Appuyer (ctxt_p, pvalue->u.mission_pion_rens_roem_appuyer);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roem_renseigner_sur */
      case 191:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roem_renseigner_sur");

         pvalue->u.mission_pion_rens_roem_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROEM_RenseignerSur);
         if (pvalue->u.mission_pion_rens_roem_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROEM_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_roem_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roem_mettre_en_oeuvre */
      case 192:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roem_mettre_en_oeuvre");

         pvalue->u.mission_pion_rens_roem_mettre_en_oeuvre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROEM_MettreEnOeuvre);
         if (pvalue->u.mission_pion_rens_roem_mettre_en_oeuvre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROEM_MettreEnOeuvre (ctxt_p, pvalue->u.mission_pion_rens_roem_mettre_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_radint_renseigner_sur */
      case 193:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_radint_renseigner_sur");

         pvalue->u.mission_pion_rens_radint_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_RADINT_RenseignerSur);
         if (pvalue->u.mission_pion_rens_radint_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_RADINT_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_radint_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_radint_mettre_en_oeuvre */
      case 194:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_radint_mettre_en_oeuvre");

         pvalue->u.mission_pion_rens_radint_mettre_en_oeuvre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_RADINT_MettreEnOeuvre);
         if (pvalue->u.mission_pion_rens_radint_mettre_en_oeuvre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_RADINT_MettreEnOeuvre (ctxt_p, pvalue->u.mission_pion_rens_radint_mettre_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roim_mettre_en_oeuvre */
      case 195:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roim_mettre_en_oeuvre");

         pvalue->u.mission_pion_rens_roim_mettre_en_oeuvre = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROIM_MettreEnOeuvre);
         if (pvalue->u.mission_pion_rens_roim_mettre_en_oeuvre == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROIM_MettreEnOeuvre (ctxt_p, pvalue->u.mission_pion_rens_roim_mettre_en_oeuvre);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roim_sdti_renseigner_sur */
      case 196:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roim_sdti_renseigner_sur");

         pvalue->u.mission_pion_rens_roim_sdti_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur);
         if (pvalue->u.mission_pion_rens_roim_sdti_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_roim_sdti_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_rens_roim_cl289_renseigner_sur */
      case 197:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_rens_roim_cl289_renseigner_sur");

         pvalue->u.mission_pion_rens_roim_cl289_renseigner_sur = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_RENS_ROIM_CL289_RenseignerSur);
         if (pvalue->u.mission_pion_rens_roim_cl289_renseigner_sur == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_RENS_ROIM_CL289_RenseignerSur (ctxt_p, pvalue->u.mission_pion_rens_roim_cl289_renseigner_sur);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* mission_pion_trans_etablir_gerer_liaison */
      case 198:
         PU_PUSHNAME (ctxt_p, "u.mission_pion_trans_etablir_gerer_liaison");

         pvalue->u.mission_pion_trans_etablir_gerer_liaison = ALLOC_ASN1ELEM (ctxt_p, ASN1T_Mission_Pion_TRANS_EtablirGererLiaison);
         if (pvalue->u.mission_pion_trans_etablir_gerer_liaison == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_Mission_Pion_TRANS_EtablirGererLiaison (ctxt_p, pvalue->u.mission_pion_trans_etablir_gerer_liaison);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_Mission_Pion: end\n");

   return (stat);
}

int ASN1C_Mission_Pion::Decode ()
{
   return asn1PD_Mission_Pion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPionOrder                                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgPionOrder::ASN1C_MsgPionOrder (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPionOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPionOrder (ASN1CTXT* ctxt_p, ASN1T_MsgPionOrder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPionOrder: start\n");

   PU_NEWFIELD (ctxt_p, "oid_limite_gauchePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_limite_gauchePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_limite_droitePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_limite_droitePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_limite_gauche */

   if (pvalue->m.oid_limite_gauchePresent) {
      PU_PUSHNAME (ctxt_p, "oid_limite_gauche");

      stat = asn1PE_OID (ctxt_p, pvalue->oid_limite_gauche);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_limite_droite */

   if (pvalue->m.oid_limite_droitePresent) {
      PU_PUSHNAME (ctxt_p, "oid_limite_droite");

      stat = asn1PE_OID (ctxt_p, pvalue->oid_limite_droite);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_limas */

   PU_PUSHNAME (ctxt_p, "oid_limas");

   stat = asn1PE_ListOID (ctxt_p, &pvalue->oid_limas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode direction_dangereuse */

   PU_PUSHNAME (ctxt_p, "direction_dangereuse");

   stat = asn1PE_Direction (ctxt_p, pvalue->direction_dangereuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode mission */

   PU_PUSHNAME (ctxt_p, "mission");

   stat = asn1PE_Mission_Pion (ctxt_p, &pvalue->mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPionOrder: end\n");
   return (stat);
}

int ASN1C_MsgPionOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPionOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPionOrder (ASN1CTXT* ctxt_p, ASN1T_MsgPionOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgPionOrder: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_limite_gauchePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_limite_gauchePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_limite_droitePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_limite_droitePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_limite_gauche */

   if (pvalue->m.oid_limite_gauchePresent) {
      PU_PUSHNAME (ctxt_p, "oid_limite_gauche");

      stat = asn1PD_OID (ctxt_p, &pvalue->oid_limite_gauche);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_limite_droite */

   if (pvalue->m.oid_limite_droitePresent) {
      PU_PUSHNAME (ctxt_p, "oid_limite_droite");

      stat = asn1PD_OID (ctxt_p, &pvalue->oid_limite_droite);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_limas */

   PU_PUSHNAME (ctxt_p, "oid_limas");

   stat = asn1PD_ListOID (ctxt_p, &pvalue->oid_limas);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode direction_dangereuse */

   PU_PUSHNAME (ctxt_p, "direction_dangereuse");

   stat = asn1PD_Direction (ctxt_p, &pvalue->direction_dangereuse);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode mission */

   PU_PUSHNAME (ctxt_p, "mission");

   stat = asn1PD_Mission_Pion (ctxt_p, &pvalue->mission);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPionOrder: end\n");

   return (stat);
}

int ASN1C_MsgPionOrder::Decode ()
{
   return asn1PD_MsgPionOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPionOrderAck                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgPionOrderAck::ASN1C_MsgPionOrderAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPionOrderAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPionOrderAck (ASN1CTXT* ctxt_p, ASN1T_MsgPionOrderAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPionOrderAck: start\n");

   /* encode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PE_OID (ctxt_p, pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumOrderErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPionOrderAck: end\n");
   return (stat);
}

int ASN1C_MsgPionOrderAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPionOrderAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPionOrderAck (ASN1CTXT* ctxt_p, ASN1T_MsgPionOrderAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPionOrderAck: start\n");

   /* decode oid_unite_executante */

   PU_PUSHNAME (ctxt_p, "oid_unite_executante");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_unite_executante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode order_id */

   PU_PUSHNAME (ctxt_p, "order_id");

   stat = asn1PD_OID (ctxt_p, &pvalue->order_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumOrderErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPionOrderAck: end\n");

   return (stat);
}

int ASN1C_MsgPionOrderAck::Decode ()
{
   return asn1PD_MsgPionOrderAck (mpContext->GetPtr(), &msgData);
}


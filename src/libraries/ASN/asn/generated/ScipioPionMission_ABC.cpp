/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 17-Aug-2005.
 */
#include "ScipioPionMission_ABC.h"

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ReconnaitreAxe                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ReconnaitreAxe::ASN1C_Mission_Pion_ABC_ReconnaitreAxe (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ReconnaitreAxe& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ReconnaitreAxe (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ReconnaitreAxe* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ReconnaitreAxe: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ReconnaitreAxe: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ReconnaitreAxe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ReconnaitreAxe (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ReconnaitreAxe (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ReconnaitreAxe* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ReconnaitreAxe: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ReconnaitreAxe: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ReconnaitreAxe::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ReconnaitreAxe (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Soutenir                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Soutenir::ASN1C_Mission_Pion_ABC_Soutenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Soutenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Soutenir: start\n");

   /* encode unite_a_soutenir */

   PU_PUSHNAME (ctxt_p, "unite_a_soutenir");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_soutenir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Soutenir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Soutenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Soutenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Soutenir: start\n");

   /* decode unite_a_soutenir */

   PU_PUSHNAME (ctxt_p, "unite_a_soutenir");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_soutenir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Soutenir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Soutenir::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Soutenir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Couvrir                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Couvrir::ASN1C_Mission_Pion_ABC_Couvrir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Couvrir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Couvrir: start\n");

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_Point (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unites_a_couvrir */

   PU_PUSHNAME (ctxt_p, "unites_a_couvrir");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_couvrir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Couvrir: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Couvrir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Couvrir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Couvrir: start\n");

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_Point (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unites_a_couvrir */

   PU_PUSHNAME (ctxt_p, "unites_a_couvrir");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_couvrir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Couvrir: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Couvrir::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Couvrir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_FlancGarder                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_FlancGarder::ASN1C_Mission_Pion_ABC_FlancGarder (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_FlancGarder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_FlancGarder: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unites_a_couvrir */

   PU_PUSHNAME (ctxt_p, "unites_a_couvrir");

   stat = asn1PE_ListAgent (ctxt_p, &pvalue->unites_a_couvrir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_FlancGarder: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_FlancGarder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_FlancGarder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_FlancGarder: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unites_a_couvrir */

   PU_PUSHNAME (ctxt_p, "unites_a_couvrir");

   stat = asn1PD_ListAgent (ctxt_p, &pvalue->unites_a_couvrir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_FlancGarder: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_FlancGarder::Decode ()
{
   return asn1PD_Mission_Pion_ABC_FlancGarder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Reduire                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Reduire::ASN1C_Mission_Pion_ABC_Reduire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Reduire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Reduire: start\n");

   /* encode unite_a_reduire */

   PU_PUSHNAME (ctxt_p, "unite_a_reduire");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->unite_a_reduire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Reduire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Reduire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Reduire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Reduire: start\n");

   /* decode unite_a_reduire */

   PU_PUSHNAME (ctxt_p, "unite_a_reduire");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->unite_a_reduire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Reduire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Reduire::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Reduire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Appuyer                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Appuyer::ASN1C_Mission_Pion_ABC_Appuyer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Appuyer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Appuyer: start\n");

   /* encode unite_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unite_a_appuyer");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Appuyer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Appuyer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Appuyer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Appuyer: start\n");

   /* decode unite_a_appuyer */

   PU_PUSHNAME (ctxt_p, "unite_a_appuyer");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_appuyer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Appuyer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Appuyer::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Appuyer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Fixer                                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Fixer::ASN1C_Mission_Pion_ABC_Fixer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Fixer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Fixer: start\n");

   /* encode unite_a_fixer */

   PU_PUSHNAME (ctxt_p, "unite_a_fixer");

   stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->unite_a_fixer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Fixer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Fixer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Fixer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Fixer: start\n");

   /* decode unite_a_fixer */

   PU_PUSHNAME (ctxt_p, "unite_a_fixer");

   stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->unite_a_fixer);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Fixer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Fixer::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Fixer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_RenseignerSur                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_RenseignerSur::ASN1C_Mission_Pion_ABC_RenseignerSur (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_RenseignerSur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_RenseignerSur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_RenseignerSur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_RenseignerSur: start\n");

   /* encode point_a_renseigner */

   PU_PUSHNAME (ctxt_p, "point_a_renseigner");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_a_renseigner);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_RenseignerSur: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_RenseignerSur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_RenseignerSur (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_RenseignerSur (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_RenseignerSur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_RenseignerSur: start\n");

   /* decode point_a_renseigner */

   PU_PUSHNAME (ctxt_p, "point_a_renseigner");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_a_renseigner);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_RenseignerSur: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_RenseignerSur::Decode ()
{
   return asn1PD_Mission_Pion_ABC_RenseignerSur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ControlerZone                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ControlerZone::ASN1C_Mission_Pion_ABC_ControlerZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ControlerZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ControlerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ControlerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ControlerZone: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ControlerZone: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ControlerZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ControlerZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ControlerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ControlerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ControlerZone: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ControlerZone: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ControlerZone::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ControlerZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Surveiller                               */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Surveiller::ASN1C_Mission_Pion_ABC_Surveiller (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Surveiller& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Surveiller: start\n");

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_Point (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Surveiller: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Surveiller::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Surveiller (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Surveiller: start\n");

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_Point (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Surveiller: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Surveiller::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Surveiller (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Barrer                                   */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Barrer::ASN1C_Mission_Pion_ABC_Barrer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Barrer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Barrer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Barrer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Barrer: start\n");

   /* encode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Barrer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Barrer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Barrer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Barrer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Barrer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Barrer: start\n");

   /* decode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Barrer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Barrer::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Barrer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Attaquer                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Attaquer::ASN1C_Mission_Pion_ABC_Attaquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Attaquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Attaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Attaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Attaquer: start\n");

   /* encode itineraire_assaut */

   PU_PUSHNAME (ctxt_p, "itineraire_assaut");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire_assaut);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Attaquer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Attaquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Attaquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Attaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Attaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Attaquer: start\n");

   /* decode itineraire_assaut */

   PU_PUSHNAME (ctxt_p, "itineraire_assaut");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire_assaut);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Attaquer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Attaquer::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Attaquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ReconnaitrePoint                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ReconnaitrePoint::ASN1C_Mission_Pion_ABC_ReconnaitrePoint (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ReconnaitrePoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ReconnaitrePoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ReconnaitrePoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ReconnaitrePoint: start\n");

   /* encode point_a_reconnaitre */

   PU_PUSHNAME (ctxt_p, "point_a_reconnaitre");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_a_reconnaitre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ReconnaitrePoint: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ReconnaitrePoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ReconnaitrePoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ReconnaitrePoint (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ReconnaitrePoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ReconnaitrePoint: start\n");

   /* decode point_a_reconnaitre */

   PU_PUSHNAME (ctxt_p, "point_a_reconnaitre");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_a_reconnaitre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ReconnaitrePoint: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ReconnaitrePoint::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ReconnaitrePoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Eclairer                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Eclairer::ASN1C_Mission_Pion_ABC_Eclairer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Eclairer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Eclairer: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Eclairer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Eclairer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Eclairer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Eclairer: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Eclairer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Eclairer::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Eclairer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Jalonner                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Jalonner::ASN1C_Mission_Pion_ABC_Jalonner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Jalonner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Jalonner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Jalonner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Jalonner: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Jalonner: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Jalonner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Jalonner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Jalonner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Jalonner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Jalonner: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Jalonner: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Jalonner::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Jalonner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ContreAttaquer                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ContreAttaquer::ASN1C_Mission_Pion_ABC_ContreAttaquer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ContreAttaquer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ContreAttaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ContreAttaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ContreAttaquer: start\n");

   /* encode itineraire_assaut */

   PU_PUSHNAME (ctxt_p, "itineraire_assaut");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire_assaut);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ContreAttaquer: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ContreAttaquer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ContreAttaquer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ContreAttaquer (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ContreAttaquer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ContreAttaquer: start\n");

   /* decode itineraire_assaut */

   PU_PUSHNAME (ctxt_p, "itineraire_assaut");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire_assaut);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ContreAttaquer: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ContreAttaquer::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ContreAttaquer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_SemparerZone                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_SemparerZone::ASN1C_Mission_Pion_ABC_SemparerZone (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_SemparerZone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_SemparerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_SemparerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_SemparerZone: start\n");

   /* encode zone_a_prendre */

   PU_PUSHNAME (ctxt_p, "zone_a_prendre");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_a_prendre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_SemparerZone: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_SemparerZone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_SemparerZone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_SemparerZone (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_SemparerZone* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_SemparerZone: start\n");

   /* decode zone_a_prendre */

   PU_PUSHNAME (ctxt_p, "zone_a_prendre");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_a_prendre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_SemparerZone: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_SemparerZone::Decode ()
{
   return asn1PD_Mission_Pion_ABC_SemparerZone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ReleverUnite                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ReleverUnite::ASN1C_Mission_Pion_ABC_ReleverUnite (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ReleverUnite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ReleverUnite (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ReleverUnite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ReleverUnite: start\n");

   /* encode unite_a_relever */

   PU_PUSHNAME (ctxt_p, "unite_a_relever");

   stat = asn1PE_Agent (ctxt_p, pvalue->unite_a_relever);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ReleverUnite: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ReleverUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ReleverUnite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ReleverUnite (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ReleverUnite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ReleverUnite: start\n");

   /* decode unite_a_relever */

   PU_PUSHNAME (ctxt_p, "unite_a_relever");

   stat = asn1PD_Agent (ctxt_p, &pvalue->unite_a_relever);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ReleverUnite: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ReleverUnite::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ReleverUnite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ArmerPIA                                 */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ArmerPIA::ASN1C_Mission_Pion_ABC_ArmerPIA (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ArmerPIA& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ArmerPIA (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ArmerPIA* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ArmerPIA: start\n");

   /* encode pia */

   PU_PUSHNAME (ctxt_p, "pia");

   stat = asn1PE_Point (ctxt_p, &pvalue->pia);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ArmerPIA: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ArmerPIA::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ArmerPIA (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ArmerPIA (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ArmerPIA* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ArmerPIA: start\n");

   /* decode pia */

   PU_PUSHNAME (ctxt_p, "pia");

   stat = asn1PD_Point (ctxt_p, &pvalue->pia);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ArmerPIA: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ArmerPIA::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ArmerPIA (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_OuvrirItineraire                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_OuvrirItineraire::ASN1C_Mission_Pion_ABC_OuvrirItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_OuvrirItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_OuvrirItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_OuvrirItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_OuvrirItineraire: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_OuvrirItineraire: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_OuvrirItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_OuvrirItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_OuvrirItineraire (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_OuvrirItineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_OuvrirItineraire: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_OuvrirItineraire: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_OuvrirItineraire::Decode ()
{
   return asn1PD_Mission_Pion_ABC_OuvrirItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_Freiner                                  */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_Freiner::ASN1C_Mission_Pion_ABC_Freiner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_Freiner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_Freiner: start\n");

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_Freiner: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_Freiner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_Freiner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_Freiner: start\n");

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_Freiner: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_Freiner::Decode ()
{
   return asn1PD_Mission_Pion_ABC_Freiner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_EscorterUnConvoi                         */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_EscorterUnConvoi::ASN1C_Mission_Pion_ABC_EscorterUnConvoi (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_EscorterUnConvoi& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_EscorterUnConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_EscorterUnConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_EscorterUnConvoi: start\n");

   /* encode convoi_a_escorter */

   PU_PUSHNAME (ctxt_p, "convoi_a_escorter");

   stat = asn1PE_Agent (ctxt_p, pvalue->convoi_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_EscorterUnConvoi: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_EscorterUnConvoi::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_EscorterUnConvoi (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_EscorterUnConvoi (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_EscorterUnConvoi* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_EscorterUnConvoi: start\n");

   /* decode convoi_a_escorter */

   PU_PUSHNAME (ctxt_p, "convoi_a_escorter");

   stat = asn1PD_Agent (ctxt_p, &pvalue->convoi_a_escorter);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_EscorterUnConvoi: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_EscorterUnConvoi::Decode ()
{
   return asn1PD_Mission_Pion_ABC_EscorterUnConvoi (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_ArmerPointDeControle                     */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_ArmerPointDeControle::ASN1C_Mission_Pion_ABC_ArmerPointDeControle (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_ArmerPointDeControle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_ArmerPointDeControle (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ArmerPointDeControle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_ArmerPointDeControle: start\n");

   /* encode point_de_controle */

   PU_PUSHNAME (ctxt_p, "point_de_controle");

   stat = asn1PE_Point (ctxt_p, &pvalue->point_de_controle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_ArmerPointDeControle: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_ArmerPointDeControle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_ArmerPointDeControle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_ArmerPointDeControle (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_ArmerPointDeControle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_ArmerPointDeControle: start\n");

   /* decode point_de_controle */

   PU_PUSHNAME (ctxt_p, "point_de_controle");

   stat = asn1PD_Point (ctxt_p, &pvalue->point_de_controle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_ArmerPointDeControle: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_ArmerPointDeControle::Decode ()
{
   return asn1PD_Mission_Pion_ABC_ArmerPointDeControle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Pion_ABC_OrganiserAccueilColonneRefugies          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Pion_ABC_OrganiserAccueilColonneRefugies::ASN1C_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Pion_ABC_OrganiserAccueilColonneRefugies& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_OrganiserAccueilColonneRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Pion_ABC_OrganiserAccueilColonneRefugies: start\n");

   /* encode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PE_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Pion_ABC_OrganiserAccueilColonneRefugies: end\n");
   return (stat);
}

int ASN1C_Mission_Pion_ABC_OrganiserAccueilColonneRefugies::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (ASN1CTXT* ctxt_p, ASN1T_Mission_Pion_ABC_OrganiserAccueilColonneRefugies* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Pion_ABC_OrganiserAccueilColonneRefugies: start\n");

   /* decode position_installation */

   PU_PUSHNAME (ctxt_p, "position_installation");

   stat = asn1PD_Point (ctxt_p, &pvalue->position_installation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Pion_ABC_OrganiserAccueilColonneRefugies: end\n");

   return (stat);
}

int ASN1C_Mission_Pion_ABC_OrganiserAccueilColonneRefugies::Decode ()
{
   return asn1PD_Mission_Pion_ABC_OrganiserAccueilColonneRefugies (mpContext->GetPtr(), &msgData);
}


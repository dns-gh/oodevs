/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 14-Oct-2005.
 */
#include "ScipioLauncher.h"

/**************************************************************/
/*                                                            */
/*  StringLibelle                                             */
/*                                                            */
/**************************************************************/

ASN1C_StringLibelle::ASN1C_StringLibelle (
   ASN1MessageBuffer& msgBuf, ASN1T_StringLibelle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_StringLibelle (ASN1CTXT* ctxt_p, ASN1T_StringLibelle value)
{
   Asn1SizeCnst lsize1 = { 0, 0, 64, 0 };
   int stat = ASN_OK;

   rtdiag ("asn1PE_StringLibelle: start\n");

   stat = pu_addSizeConstraint (ctxt_p, &lsize1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_StringLibelle: end\n");
   return (stat);
}

int ASN1C_StringLibelle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_StringLibelle (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_StringLibelle (ASN1CTXT* ctxt_p, ASN1T_StringLibelle* pvalue)
{
   Asn1SizeCnst lsize1 = { 0, 0, 64, 0 };
   int stat = ASN_OK;

   rtdiag ("asn1PD_StringLibelle: start\n");

   stat = pu_addSizeConstraint (ctxt_p, &lsize1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_StringLibelle: end\n");

   return (stat);
}

int ASN1C_StringLibelle::Decode ()
{
   return asn1PD_StringLibelle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ID_EX                                                     */
/*                                                            */
/**************************************************************/

ASN1C_ID_EX::ASN1C_ID_EX (
   ASN1MessageBuffer& msgBuf, ASN1T_ID_EX& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ID_EX (ASN1CTXT* ctxt_p, ASN1T_ID_EX value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ID_EX: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_ID_EX: end\n");
   return (stat);
}

int ASN1C_ID_EX::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ID_EX (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_ID_EX (ASN1CTXT* ctxt_p, ASN1T_ID_EX* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ID_EX: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_ID_EX: end\n");

   return (stat);
}

int ASN1C_ID_EX::Decode ()
{
   return asn1PD_ID_EX (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  NumPort                                                   */
/*                                                            */
/**************************************************************/

ASN1C_NumPort::ASN1C_NumPort (
   ASN1MessageBuffer& msgBuf, ASN1T_NumPort& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_NumPort (ASN1CTXT* ctxt_p, ASN1T_NumPort value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_NumPort: start\n");

   if ( (value >= 0 && value <= 65535) ) {
      stat = pe_ConsInteger (ctxt_p, value, 0, 65535);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);


   rtdiag ("asn1PE_NumPort: end\n");
   return (stat);
}

int ASN1C_NumPort::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_NumPort (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_NumPort (ASN1CTXT* ctxt_p, ASN1T_NumPort* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_NumPort: start\n");

   stat = pd_ConsInteger (ctxt_p, pvalue, 0, 65535);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_NumPort: end\n");

   return (stat);
}

int ASN1C_NumPort::Decode ()
{
   return asn1PD_NumPort (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DinMagicNumber                                            */
/*                                                            */
/**************************************************************/

ASN1C_DinMagicNumber::ASN1C_DinMagicNumber (
   ASN1MessageBuffer& msgBuf, ASN1T_DinMagicNumber& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DinMagicNumber (ASN1CTXT* ctxt_p, ASN1T_DinMagicNumber value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DinMagicNumber: start\n");

   stat = pe_ConsUnsigned (ctxt_p, value, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);


   rtdiag ("asn1PE_DinMagicNumber: end\n");
   return (stat);
}

int ASN1C_DinMagicNumber::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DinMagicNumber (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_DinMagicNumber (ASN1CTXT* ctxt_p, ASN1T_DinMagicNumber* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DinMagicNumber: start\n");

   stat = pd_ConsUnsigned (ctxt_p, pvalue, 0U, ASN1UINT_MAX);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_DinMagicNumber: end\n");

   return (stat);
}

int ASN1C_DinMagicNumber::Decode ()
{
   return asn1PD_DinMagicNumber (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  IdAndLibelle                                              */
/*                                                            */
/**************************************************************/

ASN1C_IdAndLibelle::ASN1C_IdAndLibelle (
   ASN1MessageBuffer& msgBuf, ASN1T_IdAndLibelle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_IdAndLibelle (ASN1CTXT* ctxt_p, ASN1T_IdAndLibelle* pvalue)
{
   Asn1SizeCnst uuid_odb_lsize1 = { 0, 36, 36, 0 };
   int stat = ASN_OK;

   rtdiag ("asn1PE_IdAndLibelle: start\n");

   /* encode nID */

   PU_PUSHNAME (ctxt_p, "nID");

   stat = asn1PE_OID (ctxt_p, pvalue->nID);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode libelle */

   PU_PUSHNAME (ctxt_p, "libelle");

   stat = asn1PE_StringLibelle (ctxt_p, pvalue->libelle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode uuid_odb */

   PU_PUSHNAME (ctxt_p, "uuid_odb");

   stat = pu_addSizeConstraint (ctxt_p, &uuid_odb_lsize1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   stat = pe_VisibleString (ctxt_p, pvalue->uuid_odb, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_IdAndLibelle: end\n");
   return (stat);
}

int ASN1C_IdAndLibelle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IdAndLibelle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_IdAndLibelle (ASN1CTXT* ctxt_p, ASN1T_IdAndLibelle* pvalue)
{
   Asn1SizeCnst uuid_odb_lsize1 = { 0, 36, 36, 0 };
   int stat = ASN_OK;

   rtdiag ("asn1PD_IdAndLibelle: start\n");

   /* decode nID */

   PU_PUSHNAME (ctxt_p, "nID");

   stat = asn1PD_OID (ctxt_p, &pvalue->nID);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode libelle */

   PU_PUSHNAME (ctxt_p, "libelle");

   stat = asn1PD_StringLibelle (ctxt_p, &pvalue->libelle);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode uuid_odb */

   PU_PUSHNAME (ctxt_p, "uuid_odb");

   stat = pu_addSizeConstraint (ctxt_p, &uuid_odb_lsize1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   stat = pd_VisibleString (ctxt_p, &pvalue->uuid_odb, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_IdAndLibelle: end\n");

   return (stat);
}

int ASN1C_IdAndLibelle::Decode ()
{
   return asn1PD_IdAndLibelle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListIdAndLibelle                                          */
/*                                                            */
/**************************************************************/

ASN1C_ListIdAndLibelle::ASN1C_ListIdAndLibelle (
   ASN1MessageBuffer& msgBuf, ASN1T_ListIdAndLibelle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListIdAndLibelle (ASN1CTXT* ctxt_p, ASN1T_ListIdAndLibelle* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListIdAndLibelle: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_IdAndLibelle (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListIdAndLibelle: end\n");
   return (stat);
}

int ASN1C_ListIdAndLibelle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListIdAndLibelle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListIdAndLibelle (ASN1CTXT* ctxt_p, ASN1T_ListIdAndLibelle* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListIdAndLibelle: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_IdAndLibelle);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_IdAndLibelle (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListIdAndLibelle: end\n");

   return (stat);
}

int ASN1C_ListIdAndLibelle::Decode ()
{
   return asn1PD_ListIdAndLibelle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CheckPointInfo                                            */
/*                                                            */
/**************************************************************/

ASN1C_CheckPointInfo::ASN1C_CheckPointInfo (
   ASN1MessageBuffer& msgBuf, ASN1T_CheckPointInfo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CheckPointInfo (ASN1CTXT* ctxt_p, ASN1T_CheckPointInfo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_CheckPointInfo: start\n");

   PU_NEWFIELD (ctxt_p, "nom_checkpointPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nom_checkpointPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode nID */

   PU_PUSHNAME (ctxt_p, "nID");

   stat = asn1PE_OID (ctxt_p, pvalue->nID);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode libelle_scenario */

   PU_PUSHNAME (ctxt_p, "libelle_scenario");

   stat = asn1PE_StringLibelle (ctxt_p, pvalue->libelle_scenario);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode libelle_checkpoint */

   PU_PUSHNAME (ctxt_p, "libelle_checkpoint");

   stat = asn1PE_StringLibelle (ctxt_p, pvalue->libelle_checkpoint);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom_checkpoint */

   if (pvalue->m.nom_checkpointPresent) {
      PU_PUSHNAME (ctxt_p, "nom_checkpoint");

      stat = pe_VisibleString (ctxt_p, pvalue->nom_checkpoint, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_CheckPointInfo: end\n");
   return (stat);
}

int ASN1C_CheckPointInfo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CheckPointInfo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CheckPointInfo (ASN1CTXT* ctxt_p, ASN1T_CheckPointInfo* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_CheckPointInfo: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "nom_checkpointPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nom_checkpointPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode nID */

   PU_PUSHNAME (ctxt_p, "nID");

   stat = asn1PD_OID (ctxt_p, &pvalue->nID);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode libelle_scenario */

   PU_PUSHNAME (ctxt_p, "libelle_scenario");

   stat = asn1PD_StringLibelle (ctxt_p, &pvalue->libelle_scenario);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode libelle_checkpoint */

   PU_PUSHNAME (ctxt_p, "libelle_checkpoint");

   stat = asn1PD_StringLibelle (ctxt_p, &pvalue->libelle_checkpoint);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom_checkpoint */

   if (pvalue->m.nom_checkpointPresent) {
      PU_PUSHNAME (ctxt_p, "nom_checkpoint");

      stat = pd_VisibleString (ctxt_p, &pvalue->nom_checkpoint, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_CheckPointInfo: end\n");

   return (stat);
}

int ASN1C_CheckPointInfo::Decode ()
{
   return asn1PD_CheckPointInfo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListCheckPointInfo                                        */
/*                                                            */
/**************************************************************/

ASN1C_ListCheckPointInfo::ASN1C_ListCheckPointInfo (
   ASN1MessageBuffer& msgBuf, ASN1T_ListCheckPointInfo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListCheckPointInfo (ASN1CTXT* ctxt_p, ASN1T_ListCheckPointInfo* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListCheckPointInfo: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_CheckPointInfo (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListCheckPointInfo: end\n");
   return (stat);
}

int ASN1C_ListCheckPointInfo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListCheckPointInfo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListCheckPointInfo (ASN1CTXT* ctxt_p, ASN1T_ListCheckPointInfo* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListCheckPointInfo: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_CheckPointInfo);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_CheckPointInfo (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListCheckPointInfo: end\n");

   return (stat);
}

int ASN1C_ListCheckPointInfo::Decode ()
{
   return asn1PD_ListCheckPointInfo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumCtrlErrorCodeLauncher                                 */
/*                                                            */
/**************************************************************/

ASN1C_EnumCtrlErrorCodeLauncher::ASN1C_EnumCtrlErrorCodeLauncher (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumCtrlErrorCodeLauncher& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumCtrlErrorCodeLauncher (ASN1CTXT* ctxt_p, ASN1T_EnumCtrlErrorCodeLauncher value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumCtrlErrorCodeLauncher: start\n");

   switch (value) {
      case EnumCtrlErrorCodeLauncher::no_error: ui = 0; break;
      case EnumCtrlErrorCodeLauncher::error_already_started: ui = 1; break;
      case EnumCtrlErrorCodeLauncher::error_not_started: ui = 2; break;
      case EnumCtrlErrorCodeLauncher::error_not_paused: ui = 3; break;
      case EnumCtrlErrorCodeLauncher::error_already_paused: ui = 4; break;
      case EnumCtrlErrorCodeLauncher::error_invalid_time_factor: ui = 5; break;
      case EnumCtrlErrorCodeLauncher::error_invalid_scenario_identifier: ui = 6; break;
      case EnumCtrlErrorCodeLauncher::error_error_scenario_init: ui = 7; break;
      case EnumCtrlErrorCodeLauncher::error_invalid_data_path: ui = 8; break;
      case EnumCtrlErrorCodeLauncher::error_invalid_data: ui = 9; break;
      case EnumCtrlErrorCodeLauncher::error_invalid_checkpoint_identifier: ui = 10; break;
      case EnumCtrlErrorCodeLauncher::error_error_checkpoint_init: ui = 11; break;
      case EnumCtrlErrorCodeLauncher::error_sim_killed_by_remote: ui = 12; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 12);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumCtrlErrorCodeLauncher: end\n");
   return (stat);
}

int ASN1C_EnumCtrlErrorCodeLauncher::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumCtrlErrorCodeLauncher (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumCtrlErrorCodeLauncher (ASN1CTXT* ctxt_p, ASN1T_EnumCtrlErrorCodeLauncher* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumCtrlErrorCodeLauncher: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 12);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumCtrlErrorCodeLauncher::no_error; break;
      case 1: *pvalue = EnumCtrlErrorCodeLauncher::error_already_started; break;
      case 2: *pvalue = EnumCtrlErrorCodeLauncher::error_not_started; break;
      case 3: *pvalue = EnumCtrlErrorCodeLauncher::error_not_paused; break;
      case 4: *pvalue = EnumCtrlErrorCodeLauncher::error_already_paused; break;
      case 5: *pvalue = EnumCtrlErrorCodeLauncher::error_invalid_time_factor; break;
      case 6: *pvalue = EnumCtrlErrorCodeLauncher::error_invalid_scenario_identifier; break;
      case 7: *pvalue = EnumCtrlErrorCodeLauncher::error_error_scenario_init; break;
      case 8: *pvalue = EnumCtrlErrorCodeLauncher::error_invalid_data_path; break;
      case 9: *pvalue = EnumCtrlErrorCodeLauncher::error_invalid_data; break;
      case 10: *pvalue = EnumCtrlErrorCodeLauncher::error_invalid_checkpoint_identifier; break;
      case 11: *pvalue = EnumCtrlErrorCodeLauncher::error_error_checkpoint_init; break;
      case 12: *pvalue = EnumCtrlErrorCodeLauncher::error_sim_killed_by_remote; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumCtrlErrorCodeLauncher: end\n");

   return (stat);
}

int ASN1C_EnumCtrlErrorCodeLauncher::Decode ()
{
   return asn1PD_EnumCtrlErrorCodeLauncher (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LaunchInformation                                         */
/*                                                            */
/**************************************************************/

ASN1C_LaunchInformation::ASN1C_LaunchInformation (
   ASN1MessageBuffer& msgBuf, ASN1T_LaunchInformation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LaunchInformation (ASN1CTXT* ctxt_p, ASN1T_LaunchInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LaunchInformation: start\n");

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumCtrlErrorCodeLauncher (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode num_port */

   PU_PUSHNAME (ctxt_p, "num_port");

   stat = asn1PE_NumPort (ctxt_p, pvalue->num_port);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode din_magic_number */

   PU_PUSHNAME (ctxt_p, "din_magic_number");

   stat = asn1PE_DinMagicNumber (ctxt_p, pvalue->din_magic_number);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_LaunchInformation: end\n");
   return (stat);
}

int ASN1C_LaunchInformation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LaunchInformation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LaunchInformation (ASN1CTXT* ctxt_p, ASN1T_LaunchInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_LaunchInformation: start\n");

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumCtrlErrorCodeLauncher (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode num_port */

   PU_PUSHNAME (ctxt_p, "num_port");

   stat = asn1PD_NumPort (ctxt_p, &pvalue->num_port);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode din_magic_number */

   PU_PUSHNAME (ctxt_p, "din_magic_number");

   stat = asn1PD_DinMagicNumber (ctxt_p, &pvalue->din_magic_number);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_LaunchInformation: end\n");

   return (stat);
}

int ASN1C_LaunchInformation::Decode ()
{
   return asn1PD_LaunchInformation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  IdExAndLaunchInformation                                  */
/*                                                            */
/**************************************************************/

ASN1C_IdExAndLaunchInformation::ASN1C_IdExAndLaunchInformation (
   ASN1MessageBuffer& msgBuf, ASN1T_IdExAndLaunchInformation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_IdExAndLaunchInformation (ASN1CTXT* ctxt_p, ASN1T_IdExAndLaunchInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_IdExAndLaunchInformation: start\n");

   PU_NEWFIELD (ctxt_p, "launch_informationPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.launch_informationPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode launch_information */

   if (pvalue->m.launch_informationPresent) {
      PU_PUSHNAME (ctxt_p, "launch_information");

      stat = asn1PE_LaunchInformation (ctxt_p, &pvalue->launch_information);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_IdExAndLaunchInformation: end\n");
   return (stat);
}

int ASN1C_IdExAndLaunchInformation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IdExAndLaunchInformation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_IdExAndLaunchInformation (ASN1CTXT* ctxt_p, ASN1T_IdExAndLaunchInformation* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_IdExAndLaunchInformation: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "launch_informationPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.launch_informationPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode launch_information */

   if (pvalue->m.launch_informationPresent) {
      PU_PUSHNAME (ctxt_p, "launch_information");

      stat = asn1PD_LaunchInformation (ctxt_p, &pvalue->launch_information);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_IdExAndLaunchInformation: end\n");

   return (stat);
}

int ASN1C_IdExAndLaunchInformation::Decode ()
{
   return asn1PD_IdExAndLaunchInformation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListIdExAndLaunchInformation                              */
/*                                                            */
/**************************************************************/

ASN1C_ListIdExAndLaunchInformation::ASN1C_ListIdExAndLaunchInformation (
   ASN1MessageBuffer& msgBuf, ASN1T_ListIdExAndLaunchInformation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListIdExAndLaunchInformation (ASN1CTXT* ctxt_p, ASN1T_ListIdExAndLaunchInformation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListIdExAndLaunchInformation: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_IdExAndLaunchInformation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListIdExAndLaunchInformation: end\n");
   return (stat);
}

int ASN1C_ListIdExAndLaunchInformation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListIdExAndLaunchInformation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListIdExAndLaunchInformation (ASN1CTXT* ctxt_p, ASN1T_ListIdExAndLaunchInformation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListIdExAndLaunchInformation: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_IdExAndLaunchInformation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_IdExAndLaunchInformation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListIdExAndLaunchInformation: end\n");

   return (stat);
}

int ASN1C_ListIdExAndLaunchInformation::Decode ()
{
   return asn1PD_ListIdExAndLaunchInformation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgMosLau_RequestListMission                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgMosLau_RequestListMission::ASN1C_MsgMosLau_RequestListMission (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgMosLau_RequestListMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgMosLau_RequestListMission: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgMosLau_RequestListMission: end\n");
   return (stat);
}

int ASN1C_MsgMosLau_RequestListMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgMosLau_RequestListMission (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgMosLau_RequestListMission (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgMosLau_RequestListMission: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgMosLau_RequestListMission: end\n");

   return (stat);
}

int ASN1C_MsgMosLau_RequestListMission::Decode ()
{
   return asn1PD_MsgMosLau_RequestListMission (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgLauMos_ListMission                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauMos_ListMission::ASN1C_MsgLauMos_ListMission (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauMos_ListMission& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauMos_ListMission (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ListMission* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauMos_ListMission: start\n");

   stat = asn1PE_ListIdAndLibelle (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLauMos_ListMission: end\n");
   return (stat);
}

int ASN1C_MsgLauMos_ListMission::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauMos_ListMission (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauMos_ListMission (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ListMission* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauMos_ListMission: start\n");

   stat = asn1PD_ListIdAndLibelle (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLauMos_ListMission: end\n");

   return (stat);
}

int ASN1C_MsgLauMos_ListMission::Decode ()
{
   return asn1PD_MsgLauMos_ListMission (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgMosLau_LaunchSim                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgMosLau_LaunchSim::ASN1C_MsgMosLau_LaunchSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgMosLau_LaunchSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgMosLau_LaunchSim (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_LaunchSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgMosLau_LaunchSim: start\n");

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode id_scenario */

   PU_PUSHNAME (ctxt_p, "id_scenario");

   stat = asn1PE_OID (ctxt_p, pvalue->id_scenario);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode sim_commandline */

   PU_PUSHNAME (ctxt_p, "sim_commandline");

   stat = pe_VisibleString (ctxt_p, pvalue->sim_commandline, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgMosLau_LaunchSim: end\n");
   return (stat);
}

int ASN1C_MsgMosLau_LaunchSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgMosLau_LaunchSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgMosLau_LaunchSim (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_LaunchSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgMosLau_LaunchSim: start\n");

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode id_scenario */

   PU_PUSHNAME (ctxt_p, "id_scenario");

   stat = asn1PD_OID (ctxt_p, &pvalue->id_scenario);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode sim_commandline */

   PU_PUSHNAME (ctxt_p, "sim_commandline");

   stat = pd_VisibleString (ctxt_p, &pvalue->sim_commandline, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgMosLau_LaunchSim: end\n");

   return (stat);
}

int ASN1C_MsgMosLau_LaunchSim::Decode ()
{
   return asn1PD_MsgMosLau_LaunchSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgSimLau_SimLaunched                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgSimLau_SimLaunched::ASN1C_MsgSimLau_SimLaunched (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgSimLau_SimLaunched& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgSimLau_SimLaunched (ASN1CTXT* ctxt_p, ASN1T_MsgSimLau_SimLaunched* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgSimLau_SimLaunched: start\n");

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode launch_information */

   PU_PUSHNAME (ctxt_p, "launch_information");

   stat = asn1PE_LaunchInformation (ctxt_p, &pvalue->launch_information);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgSimLau_SimLaunched: end\n");
   return (stat);
}

int ASN1C_MsgSimLau_SimLaunched::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgSimLau_SimLaunched (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgSimLau_SimLaunched (ASN1CTXT* ctxt_p, ASN1T_MsgSimLau_SimLaunched* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgSimLau_SimLaunched: start\n");

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode launch_information */

   PU_PUSHNAME (ctxt_p, "launch_information");

   stat = asn1PD_LaunchInformation (ctxt_p, &pvalue->launch_information);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgSimLau_SimLaunched: end\n");

   return (stat);
}

int ASN1C_MsgSimLau_SimLaunched::Decode ()
{
   return asn1PD_MsgSimLau_SimLaunched (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLauMos_SimLaunched                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauMos_SimLaunched::ASN1C_MsgLauMos_SimLaunched (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauMos_SimLaunched& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauMos_SimLaunched (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_SimLaunched* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauMos_SimLaunched: start\n");

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode launch_information */

   PU_PUSHNAME (ctxt_p, "launch_information");

   stat = asn1PE_LaunchInformation (ctxt_p, &pvalue->launch_information);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLauMos_SimLaunched: end\n");
   return (stat);
}

int ASN1C_MsgLauMos_SimLaunched::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauMos_SimLaunched (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauMos_SimLaunched (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_SimLaunched* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauMos_SimLaunched: start\n");

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode launch_information */

   PU_PUSHNAME (ctxt_p, "launch_information");

   stat = asn1PD_LaunchInformation (ctxt_p, &pvalue->launch_information);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLauMos_SimLaunched: end\n");

   return (stat);
}

int ASN1C_MsgLauMos_SimLaunched::Decode ()
{
   return asn1PD_MsgLauMos_SimLaunched (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLauSim_Ping                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauSim_Ping::ASN1C_MsgLauSim_Ping (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgLauSim_Ping (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauSim_Ping: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgLauSim_Ping: end\n");
   return (stat);
}

int ASN1C_MsgLauSim_Ping::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauSim_Ping (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgLauSim_Ping (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauSim_Ping: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgLauSim_Ping: end\n");

   return (stat);
}

int ASN1C_MsgLauSim_Ping::Decode ()
{
   return asn1PD_MsgLauSim_Ping (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgSimLau_Pong                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgSimLau_Pong::ASN1C_MsgSimLau_Pong (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgSimLau_Pong& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgSimLau_Pong (ASN1CTXT* ctxt_p, ASN1T_MsgSimLau_Pong value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgSimLau_Pong: start\n");

   stat = asn1PE_ID_EX (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgSimLau_Pong: end\n");
   return (stat);
}

int ASN1C_MsgSimLau_Pong::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgSimLau_Pong (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgSimLau_Pong (ASN1CTXT* ctxt_p, ASN1T_MsgSimLau_Pong* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgSimLau_Pong: start\n");

   stat = asn1PD_ID_EX (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgSimLau_Pong: end\n");

   return (stat);
}

int ASN1C_MsgSimLau_Pong::Decode ()
{
   return asn1PD_MsgSimLau_Pong (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgMosLau_RequestListSim                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgMosLau_RequestListSim::ASN1C_MsgMosLau_RequestListSim (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgMosLau_RequestListSim (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgMosLau_RequestListSim: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgMosLau_RequestListSim: end\n");
   return (stat);
}

int ASN1C_MsgMosLau_RequestListSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgMosLau_RequestListSim (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgMosLau_RequestListSim (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgMosLau_RequestListSim: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgMosLau_RequestListSim: end\n");

   return (stat);
}

int ASN1C_MsgMosLau_RequestListSim::Decode ()
{
   return asn1PD_MsgMosLau_RequestListSim (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgLauMos_ListSim                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauMos_ListSim::ASN1C_MsgLauMos_ListSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauMos_ListSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauMos_ListSim (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ListSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauMos_ListSim: start\n");

   stat = asn1PE_ListIdExAndLaunchInformation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLauMos_ListSim: end\n");
   return (stat);
}

int ASN1C_MsgLauMos_ListSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauMos_ListSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauMos_ListSim (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ListSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauMos_ListSim: start\n");

   stat = asn1PD_ListIdExAndLaunchInformation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLauMos_ListSim: end\n");

   return (stat);
}

int ASN1C_MsgLauMos_ListSim::Decode ()
{
   return asn1PD_MsgLauMos_ListSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLauMos_SimFailure                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauMos_SimFailure::ASN1C_MsgLauMos_SimFailure (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauMos_SimFailure& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauMos_SimFailure (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_SimFailure value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauMos_SimFailure: start\n");

   stat = asn1PE_ID_EX (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLauMos_SimFailure: end\n");
   return (stat);
}

int ASN1C_MsgLauMos_SimFailure::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauMos_SimFailure (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauMos_SimFailure (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_SimFailure* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauMos_SimFailure: start\n");

   stat = asn1PD_ID_EX (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLauMos_SimFailure: end\n");

   return (stat);
}

int ASN1C_MsgLauMos_SimFailure::Decode ()
{
   return asn1PD_MsgLauMos_SimFailure (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgMosLau_RequestListCheckpoint                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgMosLau_RequestListCheckpoint::ASN1C_MsgMosLau_RequestListCheckpoint (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgMosLau_RequestListCheckpoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgMosLau_RequestListCheckpoint (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_RequestListCheckpoint value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgMosLau_RequestListCheckpoint: start\n");

   stat = asn1PE_ID_EX (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgMosLau_RequestListCheckpoint: end\n");
   return (stat);
}

int ASN1C_MsgMosLau_RequestListCheckpoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgMosLau_RequestListCheckpoint (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgMosLau_RequestListCheckpoint (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_RequestListCheckpoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgMosLau_RequestListCheckpoint: start\n");

   stat = asn1PD_ID_EX (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgMosLau_RequestListCheckpoint: end\n");

   return (stat);
}

int ASN1C_MsgMosLau_RequestListCheckpoint::Decode ()
{
   return asn1PD_MsgMosLau_RequestListCheckpoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLauMos_ListCheckpoint                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauMos_ListCheckpoint::ASN1C_MsgLauMos_ListCheckpoint (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauMos_ListCheckpoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauMos_ListCheckpoint (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ListCheckpoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauMos_ListCheckpoint: start\n");

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode list_checkpoint */

   PU_PUSHNAME (ctxt_p, "list_checkpoint");

   stat = asn1PE_ListCheckPointInfo (ctxt_p, &pvalue->list_checkpoint);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLauMos_ListCheckpoint: end\n");
   return (stat);
}

int ASN1C_MsgLauMos_ListCheckpoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauMos_ListCheckpoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauMos_ListCheckpoint (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ListCheckpoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauMos_ListCheckpoint: start\n");

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode list_checkpoint */

   PU_PUSHNAME (ctxt_p, "list_checkpoint");

   stat = asn1PD_ListCheckPointInfo (ctxt_p, &pvalue->list_checkpoint);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLauMos_ListCheckpoint: end\n");

   return (stat);
}

int ASN1C_MsgLauMos_ListCheckpoint::Decode ()
{
   return asn1PD_MsgLauMos_ListCheckpoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgMosLau_LaunchSimFromCheckpoint                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgMosLau_LaunchSimFromCheckpoint::ASN1C_MsgMosLau_LaunchSimFromCheckpoint (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgMosLau_LaunchSimFromCheckpoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgMosLau_LaunchSimFromCheckpoint (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_LaunchSimFromCheckpoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgMosLau_LaunchSimFromCheckpoint: start\n");

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode id_checkpoint */

   PU_PUSHNAME (ctxt_p, "id_checkpoint");

   stat = asn1PE_OID (ctxt_p, pvalue->id_checkpoint);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode sim_commandline */

   PU_PUSHNAME (ctxt_p, "sim_commandline");

   stat = pe_VisibleString (ctxt_p, pvalue->sim_commandline, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgMosLau_LaunchSimFromCheckpoint: end\n");
   return (stat);
}

int ASN1C_MsgMosLau_LaunchSimFromCheckpoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgMosLau_LaunchSimFromCheckpoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgMosLau_LaunchSimFromCheckpoint (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_LaunchSimFromCheckpoint* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgMosLau_LaunchSimFromCheckpoint: start\n");

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode id_checkpoint */

   PU_PUSHNAME (ctxt_p, "id_checkpoint");

   stat = asn1PD_OID (ctxt_p, &pvalue->id_checkpoint);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode sim_commandline */

   PU_PUSHNAME (ctxt_p, "sim_commandline");

   stat = pd_VisibleString (ctxt_p, &pvalue->sim_commandline, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgMosLau_LaunchSimFromCheckpoint: end\n");

   return (stat);
}

int ASN1C_MsgMosLau_LaunchSimFromCheckpoint::Decode ()
{
   return asn1PD_MsgMosLau_LaunchSimFromCheckpoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgMosLau_StopSim                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgMosLau_StopSim::ASN1C_MsgMosLau_StopSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgMosLau_StopSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgMosLau_StopSim (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_StopSim value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgMosLau_StopSim: start\n");

   stat = asn1PE_ID_EX (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgMosLau_StopSim: end\n");
   return (stat);
}

int ASN1C_MsgMosLau_StopSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgMosLau_StopSim (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgMosLau_StopSim (ASN1CTXT* ctxt_p, ASN1T_MsgMosLau_StopSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgMosLau_StopSim: start\n");

   stat = asn1PD_ID_EX (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgMosLau_StopSim: end\n");

   return (stat);
}

int ASN1C_MsgMosLau_StopSim::Decode ()
{
   return asn1PD_MsgMosLau_StopSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLauSim_StopSim                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauSim_StopSim::ASN1C_MsgLauSim_StopSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauSim_StopSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauSim_StopSim (ASN1CTXT* ctxt_p, ASN1T_MsgLauSim_StopSim value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauSim_StopSim: start\n");

   stat = asn1PE_ID_EX (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLauSim_StopSim: end\n");
   return (stat);
}

int ASN1C_MsgLauSim_StopSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauSim_StopSim (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauSim_StopSim (ASN1CTXT* ctxt_p, ASN1T_MsgLauSim_StopSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLauSim_StopSim: start\n");

   stat = asn1PD_ID_EX (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLauSim_StopSim: end\n");

   return (stat);
}

int ASN1C_MsgLauSim_StopSim::Decode ()
{
   return asn1PD_MsgLauSim_StopSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgSimLau_ExecSuccess                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgSimLau_ExecSuccess::ASN1C_MsgSimLau_ExecSuccess (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgSimLau_ExecSuccess& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgSimLau_ExecSuccess (ASN1CTXT* ctxt_p, ASN1T_MsgSimLau_ExecSuccess* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgSimLau_ExecSuccess: start\n");

   PU_NEWFIELD (ctxt_p, "finished_statePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->finished_state != TRUE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode finished_state */

   if (pvalue->finished_state != TRUE) {
      PU_PUSHNAME (ctxt_p, "finished_state");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->finished_state);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgSimLau_ExecSuccess: end\n");
   return (stat);
}

int ASN1C_MsgSimLau_ExecSuccess::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgSimLau_ExecSuccess (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgSimLau_ExecSuccess (ASN1CTXT* ctxt_p, ASN1T_MsgSimLau_ExecSuccess* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL finished_statePresent;

   rtdiag ("asn1PD_MsgSimLau_ExecSuccess: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "finished_statePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else finished_statePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode finished_state */

   if (finished_statePresent) {
      PU_PUSHNAME (ctxt_p, "finished_state");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->finished_state);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->finished_state = TRUE;
   }


   rtdiag ("asn1PD_MsgSimLau_ExecSuccess: end\n");

   return (stat);
}

int ASN1C_MsgSimLau_ExecSuccess::Decode ()
{
   return asn1PD_MsgSimLau_ExecSuccess (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLauMos_ExecSuccess                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgLauMos_ExecSuccess::ASN1C_MsgLauMos_ExecSuccess (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLauMos_ExecSuccess& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLauMos_ExecSuccess (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ExecSuccess* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLauMos_ExecSuccess: start\n");

   PU_NEWFIELD (ctxt_p, "finished_statePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->finished_state != TRUE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PE_ID_EX (ctxt_p, pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode finished_state */

   if (pvalue->finished_state != TRUE) {
      PU_PUSHNAME (ctxt_p, "finished_state");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->finished_state);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgLauMos_ExecSuccess: end\n");
   return (stat);
}

int ASN1C_MsgLauMos_ExecSuccess::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLauMos_ExecSuccess (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLauMos_ExecSuccess (ASN1CTXT* ctxt_p, ASN1T_MsgLauMos_ExecSuccess* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL finished_statePresent;

   rtdiag ("asn1PD_MsgLauMos_ExecSuccess: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "finished_statePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else finished_statePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode id_exercice */

   PU_PUSHNAME (ctxt_p, "id_exercice");

   stat = asn1PD_ID_EX (ctxt_p, &pvalue->id_exercice);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode finished_state */

   if (finished_statePresent) {
      PU_PUSHNAME (ctxt_p, "finished_state");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->finished_state);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->finished_state = TRUE;
   }


   rtdiag ("asn1PD_MsgLauMos_ExecSuccess: end\n");

   return (stat);
}

int ASN1C_MsgLauMos_ExecSuccess::Decode ()
{
   return asn1PD_MsgLauMos_ExecSuccess (mpContext->GetPtr(), &msgData);
}


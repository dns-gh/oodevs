/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 23-Dec-2005.
 */
#include "ScipioAutomateMission_INF.h"

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_AttaquerSouplesse                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_AttaquerSouplesse::ASN1C_Mission_Automate_INF_AttaquerSouplesse (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_AttaquerSouplesse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_AttaquerSouplesse (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AttaquerSouplesse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_AttaquerSouplesse: start\n");

   /* encode objectifs */

   PU_PUSHNAME (ctxt_p, "objectifs");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->objectifs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_AttaquerSouplesse: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_AttaquerSouplesse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_AttaquerSouplesse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_AttaquerSouplesse (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AttaquerSouplesse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_AttaquerSouplesse: start\n");

   /* decode objectifs */

   PU_PUSHNAME (ctxt_p, "objectifs");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->objectifs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_AttaquerSouplesse: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_AttaquerSouplesse::Decode ()
{
   return asn1PD_Mission_Automate_INF_AttaquerSouplesse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Appuyer                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Appuyer::ASN1C_Mission_Automate_INF_Appuyer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Appuyer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Appuyer: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Appuyer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Appuyer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Appuyer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Appuyer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Appuyer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Appuyer: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Appuyer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Appuyer::Decode ()
{
   return asn1PD_Mission_Automate_INF_Appuyer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Controler                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Controler::ASN1C_Mission_Automate_INF_Controler (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Controler& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Controler (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Controler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Controler: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   PU_PUSHNAME (ctxt_p, "preparer_terrain");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Controler: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Controler::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Controler (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Controler (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Controler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Controler: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   PU_PUSHNAME (ctxt_p, "preparer_terrain");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Controler: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Controler::Decode ()
{
   return asn1PD_Mission_Automate_INF_Controler (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Couvrir                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Couvrir::ASN1C_Mission_Automate_INF_Couvrir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Couvrir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Couvrir: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode objectifs */

   PU_PUSHNAME (ctxt_p, "objectifs");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->objectifs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Couvrir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Couvrir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Couvrir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Couvrir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Couvrir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Couvrir: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode objectifs */

   PU_PUSHNAME (ctxt_p, "objectifs");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->objectifs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Couvrir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Couvrir::Decode ()
{
   return asn1PD_Mission_Automate_INF_Couvrir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_DonnerCoupArret                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_DonnerCoupArret::ASN1C_Mission_Automate_INF_DonnerCoupArret (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_DonnerCoupArret& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_DonnerCoupArret (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_DonnerCoupArret* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_DonnerCoupArret: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_INF_DonnerCoupArret: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_DonnerCoupArret::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_DonnerCoupArret (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_DonnerCoupArret (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_DonnerCoupArret* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Automate_INF_DonnerCoupArret: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_INF_DonnerCoupArret: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_DonnerCoupArret::Decode ()
{
   return asn1PD_Mission_Automate_INF_DonnerCoupArret (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Eclairer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Eclairer::ASN1C_Mission_Automate_INF_Eclairer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Eclairer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Eclairer: start\n");


   rtdiag ("asn1PE_Mission_Automate_INF_Eclairer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Eclairer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Eclairer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Eclairer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Eclairer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Eclairer: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Eclairer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Eclairer::Decode ()
{
   return asn1PD_Mission_Automate_INF_Eclairer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_FlancGarder                          */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_FlancGarder::ASN1C_Mission_Automate_INF_FlancGarder (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_FlancGarder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_FlancGarder: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_FlancGarder: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_FlancGarder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_FlancGarder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_FlancGarder (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_FlancGarder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_FlancGarder: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_FlancGarder: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_FlancGarder::Decode ()
{
   return asn1PD_Mission_Automate_INF_FlancGarder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Freiner                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Freiner::ASN1C_Mission_Automate_INF_Freiner (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Freiner& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Freiner: start\n");


   rtdiag ("asn1PE_Mission_Automate_INF_Freiner: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Freiner::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Freiner (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Freiner (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Freiner* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Freiner: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Freiner: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Freiner::Decode ()
{
   return asn1PD_Mission_Automate_INF_Freiner (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Harceler                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Harceler::ASN1C_Mission_Automate_INF_Harceler (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Harceler& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Harceler (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Harceler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Harceler: start\n");

   /* encode zone_surveillance */

   PU_PUSHNAME (ctxt_p, "zone_surveillance");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_surveillance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Harceler: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Harceler::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Harceler (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Harceler (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Harceler* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Harceler: start\n");

   /* decode zone_surveillance */

   PU_PUSHNAME (ctxt_p, "zone_surveillance");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_surveillance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode point_regroupement */

   PU_PUSHNAME (ctxt_p, "point_regroupement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->point_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Harceler: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Harceler::Decode ()
{
   return asn1PD_Mission_Automate_INF_Harceler (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Interdire                            */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Interdire::ASN1C_Mission_Automate_INF_Interdire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Interdire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Interdire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Interdire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Interdire: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode points_a_interdire */

   PU_PUSHNAME (ctxt_p, "points_a_interdire");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->points_a_interdire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_INF_Interdire: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Interdire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Interdire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Interdire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Interdire* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Automate_INF_Interdire: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode points_a_interdire */

   PU_PUSHNAME (ctxt_p, "points_a_interdire");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->points_a_interdire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_INF_Interdire: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Interdire::Decode ()
{
   return asn1PD_Mission_Automate_INF_Interdire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_MenerDefenseUsure                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_MenerDefenseUsure::ASN1C_Mission_Automate_INF_MenerDefenseUsure (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_MenerDefenseUsure& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_MenerDefenseUsure (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_MenerDefenseUsure* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_MenerDefenseUsure: start\n");


   rtdiag ("asn1PE_Mission_Automate_INF_MenerDefenseUsure: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_MenerDefenseUsure::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_MenerDefenseUsure (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_MenerDefenseUsure (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_MenerDefenseUsure* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_MenerDefenseUsure: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_MenerDefenseUsure: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_MenerDefenseUsure::Decode ()
{
   return asn1PD_Mission_Automate_INF_MenerDefenseUsure (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_PrendrePreciserMaintenirContact      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_PrendrePreciserMaintenirContact::ASN1C_Mission_Automate_INF_PrendrePreciserMaintenirContact (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_PrendrePreciserMaintenirContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_PrendrePreciserMaintenirContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_PrendrePreciserMaintenirContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_PrendrePreciserMaintenirContact: start\n");


   rtdiag ("asn1PE_Mission_Automate_INF_PrendrePreciserMaintenirContact: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_PrendrePreciserMaintenirContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_PrendrePreciserMaintenirContact (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_PrendrePreciserMaintenirContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_PrendrePreciserMaintenirContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_PrendrePreciserMaintenirContact: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_PrendrePreciserMaintenirContact: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_PrendrePreciserMaintenirContact::Decode ()
{
   return asn1PD_Mission_Automate_INF_PrendrePreciserMaintenirContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_ReconnaissanceOffensive              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_ReconnaissanceOffensive::ASN1C_Mission_Automate_INF_ReconnaissanceOffensive (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_ReconnaissanceOffensive& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_ReconnaissanceOffensive (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_ReconnaissanceOffensive* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_ReconnaissanceOffensive: start\n");


   rtdiag ("asn1PE_Mission_Automate_INF_ReconnaissanceOffensive: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_ReconnaissanceOffensive::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_ReconnaissanceOffensive (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_ReconnaissanceOffensive (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_ReconnaissanceOffensive* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_ReconnaissanceOffensive: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_ReconnaissanceOffensive: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_ReconnaissanceOffensive::Decode ()
{
   return asn1PD_Mission_Automate_INF_ReconnaissanceOffensive (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_RecueillirUnite                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_RecueillirUnite::ASN1C_Mission_Automate_INF_RecueillirUnite (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_RecueillirUnite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_RecueillirUnite (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_RecueillirUnite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_RecueillirUnite: start\n");

   /* encode zone_deploiement */

   PU_PUSHNAME (ctxt_p, "zone_deploiement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_deploiement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pias */

   PU_PUSHNAME (ctxt_p, "pias");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->pias);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_RecueillirUnite: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_RecueillirUnite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_RecueillirUnite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_RecueillirUnite (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_RecueillirUnite* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_RecueillirUnite: start\n");

   /* decode zone_deploiement */

   PU_PUSHNAME (ctxt_p, "zone_deploiement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_deploiement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pias */

   PU_PUSHNAME (ctxt_p, "pias");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->pias);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_RecueillirUnite: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_RecueillirUnite::Decode ()
{
   return asn1PD_Mission_Automate_INF_RecueillirUnite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Reduire                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Reduire::ASN1C_Mission_Automate_INF_Reduire (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Reduire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Reduire: start\n");

   /* encode points_resistance */

   PU_PUSHNAME (ctxt_p, "points_resistance");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->points_resistance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Reduire: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Reduire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Reduire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Reduire (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Reduire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Reduire: start\n");

   /* decode points_resistance */

   PU_PUSHNAME (ctxt_p, "points_resistance");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->points_resistance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Reduire: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Reduire::Decode ()
{
   return asn1PD_Mission_Automate_INF_Reduire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Relever                              */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Relever::ASN1C_Mission_Automate_INF_Relever (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Relever& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Relever (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Relever* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Relever: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Relever: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Relever::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Relever (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Relever (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Relever* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Relever: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Relever: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Relever::Decode ()
{
   return asn1PD_Mission_Automate_INF_Relever (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_RompreContact                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_RompreContact::ASN1C_Mission_Automate_INF_RompreContact (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_RompreContact& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_RompreContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_RompreContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_RompreContact: start\n");

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_RompreContact: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_RompreContact::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_RompreContact (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_RompreContact (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_RompreContact* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_RompreContact: start\n");

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_RompreContact: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_RompreContact::Decode ()
{
   return asn1PD_Mission_Automate_INF_RompreContact (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Surveiller                           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Surveiller::ASN1C_Mission_Automate_INF_Surveiller (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Surveiller& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Surveiller: start\n");

   /* encode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Surveiller: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Surveiller::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Surveiller (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Surveiller (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Surveiller* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Surveiller: start\n");

   /* decode zone */

   PU_PUSHNAME (ctxt_p, "zone");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode zone_regroupement */

   PU_PUSHNAME (ctxt_p, "zone_regroupement");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->zone_regroupement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Surveiller: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Surveiller::Decode ()
{
   return asn1PD_Mission_Automate_INF_Surveiller (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Semparer                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Semparer::ASN1C_Mission_Automate_INF_Semparer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Semparer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Semparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Semparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Semparer: start\n");

   /* encode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Semparer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Semparer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Semparer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Semparer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Semparer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Semparer: start\n");

   /* decode objectif */

   PU_PUSHNAME (ctxt_p, "objectif");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->objectif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Semparer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Semparer::Decode ()
{
   return asn1PD_Mission_Automate_INF_Semparer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Fixer                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Fixer::ASN1C_Mission_Automate_INF_Fixer (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Fixer& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Fixer: start\n");

   /* encode ennemis */

   PU_PUSHNAME (ctxt_p, "ennemis");

   stat = asn1PE_ListKnowledgeAgent (ctxt_p, &pvalue->ennemis);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Fixer: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Fixer::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Fixer (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Fixer (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Fixer* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Fixer: start\n");

   /* decode ennemis */

   PU_PUSHNAME (ctxt_p, "ennemis");

   stat = asn1PD_ListKnowledgeAgent (ctxt_p, &pvalue->ennemis);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Fixer: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Fixer::Decode ()
{
   return asn1PD_Mission_Automate_INF_Fixer (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_AttaquerEnTerrainDifficile           */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_AttaquerEnTerrainDifficile::ASN1C_Mission_Automate_INF_AttaquerEnTerrainDifficile (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_AttaquerEnTerrainDifficile& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_AttaquerEnTerrainDifficile (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AttaquerEnTerrainDifficile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_AttaquerEnTerrainDifficile: start\n");

   /* encode objectifs */

   PU_PUSHNAME (ctxt_p, "objectifs");

   stat = asn1PE_ListPoint (ctxt_p, &pvalue->objectifs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_AttaquerEnTerrainDifficile: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_AttaquerEnTerrainDifficile::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_AttaquerEnTerrainDifficile (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_AttaquerEnTerrainDifficile (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AttaquerEnTerrainDifficile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_AttaquerEnTerrainDifficile: start\n");

   /* decode objectifs */

   PU_PUSHNAME (ctxt_p, "objectifs");

   stat = asn1PD_ListPoint (ctxt_p, &pvalue->objectifs);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_AttaquerEnTerrainDifficile: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_AttaquerEnTerrainDifficile::Decode ()
{
   return asn1PD_Mission_Automate_INF_AttaquerEnTerrainDifficile (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_BarrerDirection                      */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_BarrerDirection::ASN1C_Mission_Automate_INF_BarrerDirection (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_BarrerDirection& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_BarrerDirection (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_BarrerDirection* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_BarrerDirection: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_INF_BarrerDirection: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_BarrerDirection::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_BarrerDirection (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_BarrerDirection (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_BarrerDirection* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Automate_INF_BarrerDirection: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_INF_BarrerDirection: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_BarrerDirection::Decode ()
{
   return asn1PD_Mission_Automate_INF_BarrerDirection (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_DefendreFerme                        */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_DefendreFerme::ASN1C_Mission_Automate_INF_DefendreFerme (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_DefendreFerme& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_DefendreFerme (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_DefendreFerme* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_DefendreFerme: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_INF_DefendreFerme: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_DefendreFerme::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_DefendreFerme (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_DefendreFerme (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_DefendreFerme* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Automate_INF_DefendreFerme: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_INF_DefendreFerme: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_DefendreFerme::Decode ()
{
   return asn1PD_Mission_Automate_INF_DefendreFerme (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Tenir                                */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Tenir::ASN1C_Mission_Automate_INF_Tenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Tenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Tenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Tenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Tenir: start\n");

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->preparer_terrain != FALSE));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PE_Polygon (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode preparer_terrain */

   if (pvalue->preparer_terrain != FALSE) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_Mission_Automate_INF_Tenir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Tenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Tenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Tenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Tenir* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL preparer_terrainPresent;

   rtdiag ("asn1PD_Mission_Automate_INF_Tenir: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "preparer_terrainPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else preparer_terrainPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode position */

   PU_PUSHNAME (ctxt_p, "position");

   stat = asn1PD_Polygon (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode preparer_terrain */

   if (preparer_terrainPresent) {
      PU_PUSHNAME (ctxt_p, "preparer_terrain");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->preparer_terrain);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->preparer_terrain = FALSE;
   }


   rtdiag ("asn1PD_Mission_Automate_INF_Tenir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Tenir::Decode ()
{
   return asn1PD_Mission_Automate_INF_Tenir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_AppuyerUnFreinage                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_AppuyerUnFreinage::ASN1C_Mission_Automate_INF_AppuyerUnFreinage (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_AppuyerUnFreinage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_AppuyerUnFreinage (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AppuyerUnFreinage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_AppuyerUnFreinage: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_AppuyerUnFreinage: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_AppuyerUnFreinage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_AppuyerUnFreinage (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_AppuyerUnFreinage (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AppuyerUnFreinage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_AppuyerUnFreinage: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_AppuyerUnFreinage: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_AppuyerUnFreinage::Decode ()
{
   return asn1PD_Mission_Automate_INF_AppuyerUnFreinage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_AppuyerUneAttaque                    */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_AppuyerUneAttaque::ASN1C_Mission_Automate_INF_AppuyerUneAttaque (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_AppuyerUneAttaque& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_AppuyerUneAttaque (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AppuyerUneAttaque* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_AppuyerUneAttaque: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_AppuyerUneAttaque: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_AppuyerUneAttaque::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_AppuyerUneAttaque (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_AppuyerUneAttaque (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_AppuyerUneAttaque* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_AppuyerUneAttaque: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_AppuyerUneAttaque: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_AppuyerUneAttaque::Decode ()
{
   return asn1PD_Mission_Automate_INF_AppuyerUneAttaque (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Mission_Automate_INF_Soutenir                             */
/*                                                            */
/**************************************************************/

ASN1C_Mission_Automate_INF_Soutenir::ASN1C_Mission_Automate_INF_Soutenir (
   ASN1MessageBuffer& msgBuf, ASN1T_Mission_Automate_INF_Soutenir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Mission_Automate_INF_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Mission_Automate_INF_Soutenir: start\n");

   /* encode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PE_Automate (ctxt_p, pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Mission_Automate_INF_Soutenir: end\n");
   return (stat);
}

int ASN1C_Mission_Automate_INF_Soutenir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Mission_Automate_INF_Soutenir (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Mission_Automate_INF_Soutenir (ASN1CTXT* ctxt_p, ASN1T_Mission_Automate_INF_Soutenir* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Mission_Automate_INF_Soutenir: start\n");

   /* decode compagnie */

   PU_PUSHNAME (ctxt_p, "compagnie");

   stat = asn1PD_Automate (ctxt_p, &pvalue->compagnie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Mission_Automate_INF_Soutenir: end\n");

   return (stat);
}

int ASN1C_Mission_Automate_INF_Soutenir::Decode ()
{
   return asn1PD_Mission_Automate_INF_Soutenir (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 29-Jan-2007.
 */
#include "PhysicalModels.h"

/**************************************************************/
/*                                                            */
/*  PhysicalModelsIncludes                                    */
/*                                                            */
/**************************************************************/

ASN1C_PhysicalModelsIncludes::ASN1C_PhysicalModelsIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_PhysicalModelsIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PhysicalModelsIncludes (ASN1CTXT* ctxt_p, ASN1T_PhysicalModelsIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_PhysicalModelsIncludes: start\n");


   rtdiag ("asn1PE_PhysicalModelsIncludes: end\n");
   return (stat);
}

int ASN1C_PhysicalModelsIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PhysicalModelsIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PhysicalModelsIncludes (ASN1CTXT* ctxt_p, ASN1T_PhysicalModelsIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_PhysicalModelsIncludes: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_PhysicalModelsIncludes: end\n");

   return (stat);
}

int ASN1C_PhysicalModelsIncludes::Decode ()
{
   return asn1PD_PhysicalModelsIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PhysicalModelsExports                                     */
/*                                                            */
/**************************************************************/

ASN1C_PhysicalModelsExports::ASN1C_PhysicalModelsExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_PhysicalModelsExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_PhysicalModelsExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_PhysicalModelsExports: end\n");
   return (stat);
}

int ASN1C_PhysicalModelsExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PhysicalModelsExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_PhysicalModelsExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_PhysicalModelsExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_PhysicalModelsExports: end\n");

   return (stat);
}

int ASN1C_PhysicalModelsExports::Decode ()
{
   return asn1PD_PhysicalModelsExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  PhysicalModel                                             */
/*                                                            */
/**************************************************************/

ASN1C_PhysicalModel::ASN1C_PhysicalModel (
   ASN1MessageBuffer& msgBuf, ASN1T_PhysicalModel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PhysicalModel (ASN1CTXT* ctxt_p, ASN1T_PhysicalModel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_PhysicalModel: start\n");

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_PhysicalModel: end\n");
   return (stat);
}

int ASN1C_PhysicalModel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PhysicalModel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PhysicalModel (ASN1CTXT* ctxt_p, ASN1T_PhysicalModel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_PhysicalModel: start\n");

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_PhysicalModel: end\n");

   return (stat);
}

int ASN1C_PhysicalModel::Decode ()
{
   return asn1PD_PhysicalModel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PhysicalModelList                                         */
/*                                                            */
/**************************************************************/

ASN1C_PhysicalModelList::ASN1C_PhysicalModelList (
   ASN1MessageBuffer& msgBuf, ASN1T_PhysicalModelList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PhysicalModelList (ASN1CTXT* ctxt_p, ASN1T_PhysicalModelList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_PhysicalModelList: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_PhysicalModel (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_PhysicalModelList: end\n");
   return (stat);
}

int ASN1C_PhysicalModelList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PhysicalModelList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PhysicalModelList (ASN1CTXT* ctxt_p, ASN1T_PhysicalModelList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_PhysicalModelList: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_PhysicalModel);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_PhysicalModel (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_PhysicalModelList: end\n");

   return (stat);
}

int ASN1C_PhysicalModelList::Decode ()
{
   return asn1PD_PhysicalModelList (mpContext->GetPtr(), &msgData);
}


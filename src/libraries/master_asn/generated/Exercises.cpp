/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 31-Jan-2007.
 */
#include "Exercises.h"

/**************************************************************/
/*                                                            */
/*  ExercisesIncludes                                         */
/*                                                            */
/**************************************************************/

ASN1C_ExercisesIncludes::ASN1C_ExercisesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ExercisesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ExercisesIncludes (ASN1CTXT* ctxt_p, ASN1T_ExercisesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ExercisesIncludes: start\n");


   rtdiag ("asn1PE_ExercisesIncludes: end\n");
   return (stat);
}

int ASN1C_ExercisesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ExercisesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ExercisesIncludes (ASN1CTXT* ctxt_p, ASN1T_ExercisesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ExercisesIncludes: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_ExercisesIncludes: end\n");

   return (stat);
}

int ASN1C_ExercisesIncludes::Decode ()
{
   return asn1PD_ExercisesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ExercisesExports                                          */
/*                                                            */
/**************************************************************/

ASN1C_ExercisesExports::ASN1C_ExercisesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ExercisesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ExercisesExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_ExercisesExports: end\n");
   return (stat);
}

int ASN1C_ExercisesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ExercisesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ExercisesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ExercisesExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_ExercisesExports: end\n");

   return (stat);
}

int ASN1C_ExercisesExports::Decode ()
{
   return asn1PD_ExercisesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  Exercise                                                  */
/*                                                            */
/**************************************************************/

ASN1C_Exercise::ASN1C_Exercise (
   ASN1MessageBuffer& msgBuf, ASN1T_Exercise& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Exercise (ASN1CTXT* ctxt_p, ASN1T_Exercise* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Exercise: start\n");

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode terrain */

   PU_PUSHNAME (ctxt_p, "terrain");

   stat = pe_VisibleString (ctxt_p, pvalue->terrain, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode dataset */

   PU_PUSHNAME (ctxt_p, "dataset");

   stat = pe_VisibleString (ctxt_p, pvalue->dataset, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode physical */

   PU_PUSHNAME (ctxt_p, "physical");

   stat = pe_VisibleString (ctxt_p, pvalue->physical, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Exercise: end\n");
   return (stat);
}

int ASN1C_Exercise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Exercise (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Exercise (ASN1CTXT* ctxt_p, ASN1T_Exercise* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Exercise: start\n");

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode terrain */

   PU_PUSHNAME (ctxt_p, "terrain");

   stat = pd_VisibleString (ctxt_p, &pvalue->terrain, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode dataset */

   PU_PUSHNAME (ctxt_p, "dataset");

   stat = pd_VisibleString (ctxt_p, &pvalue->dataset, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode physical */

   PU_PUSHNAME (ctxt_p, "physical");

   stat = pd_VisibleString (ctxt_p, &pvalue->physical, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Exercise: end\n");

   return (stat);
}

int ASN1C_Exercise::Decode ()
{
   return asn1PD_Exercise (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ExerciseList                                              */
/*                                                            */
/**************************************************************/

ASN1C_ExerciseList::ASN1C_ExerciseList (
   ASN1MessageBuffer& msgBuf, ASN1T_ExerciseList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ExerciseList (ASN1CTXT* ctxt_p, ASN1T_ExerciseList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ExerciseList: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Exercise (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ExerciseList: end\n");
   return (stat);
}

int ASN1C_ExerciseList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ExerciseList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ExerciseList (ASN1CTXT* ctxt_p, ASN1T_ExerciseList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ExerciseList: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Exercise);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Exercise (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ExerciseList: end\n");

   return (stat);
}

int ASN1C_ExerciseList::Decode ()
{
   return asn1PD_ExerciseList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseCreation                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseCreation::ASN1C_MsgExerciseCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseCreation (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseCreation: start\n");

   stat = asn1PE_Exercise (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseCreation: end\n");
   return (stat);
}

int ASN1C_MsgExerciseCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseCreation (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseCreation: start\n");

   stat = asn1PD_Exercise (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgExerciseCreation: end\n");

   return (stat);
}

int ASN1C_MsgExerciseCreation::Decode ()
{
   return asn1PD_MsgExerciseCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseUpdate                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseUpdate::ASN1C_MsgExerciseUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseUpdate: start\n");

   stat = asn1PE_Exercise (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseUpdate: end\n");
   return (stat);
}

int ASN1C_MsgExerciseUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseUpdate: start\n");

   stat = asn1PD_Exercise (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgExerciseUpdate: end\n");

   return (stat);
}

int ASN1C_MsgExerciseUpdate::Decode ()
{
   return asn1PD_MsgExerciseUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseDestruction                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseDestruction::ASN1C_MsgExerciseDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestruction value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseDestruction: start\n");

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseDestruction: end\n");
   return (stat);
}

int ASN1C_MsgExerciseDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseDestruction: start\n");

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgExerciseDestruction: end\n");

   return (stat);
}

int ASN1C_MsgExerciseDestruction::Decode ()
{
   return asn1PD_MsgExerciseDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseCreationRequest                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseCreationRequest::ASN1C_MsgExerciseCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseCreationRequest: start\n");

   stat = asn1PE_Exercise (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseCreationRequest: end\n");
   return (stat);
}

int ASN1C_MsgExerciseCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseCreationRequest: start\n");

   stat = asn1PD_Exercise (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgExerciseCreationRequest: end\n");

   return (stat);
}

int ASN1C_MsgExerciseCreationRequest::Decode ()
{
   return asn1PD_MsgExerciseCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseCreationRequestAck_return_code                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseCreationRequestAck_return_code::ASN1C_MsgExerciseCreationRequestAck_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseCreationRequestAck_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseCreationRequestAck_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreationRequestAck_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgExerciseCreationRequestAck_return_code: start\n");

   switch (value) {
      case MsgExerciseCreationRequestAck_return_code::success: ui = 0; break;
      case MsgExerciseCreationRequestAck_return_code::forbidden: ui = 1; break;
      case MsgExerciseCreationRequestAck_return_code::invalid_name: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseCreationRequestAck_return_code: end\n");
   return (stat);
}

int ASN1C_MsgExerciseCreationRequestAck_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseCreationRequestAck_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseCreationRequestAck_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreationRequestAck_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgExerciseCreationRequestAck_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgExerciseCreationRequestAck_return_code::success; break;
      case 1: *pvalue = MsgExerciseCreationRequestAck_return_code::forbidden; break;
      case 2: *pvalue = MsgExerciseCreationRequestAck_return_code::invalid_name; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgExerciseCreationRequestAck_return_code: end\n");

   return (stat);
}

int ASN1C_MsgExerciseCreationRequestAck_return_code::Decode ()
{
   return asn1PD_MsgExerciseCreationRequestAck_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseCreationRequestAck                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseCreationRequestAck::ASN1C_MsgExerciseCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseCreationRequestAck: start\n");

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgExerciseCreationRequestAck_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExerciseCreationRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgExerciseCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseCreationRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseCreationRequestAck: start\n");

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgExerciseCreationRequestAck_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExerciseCreationRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgExerciseCreationRequestAck::Decode ()
{
   return asn1PD_MsgExerciseCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseUpdateRequest                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseUpdateRequest::ASN1C_MsgExerciseUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseUpdateRequest: start\n");

   /* encode exercise */

   PU_PUSHNAME (ctxt_p, "exercise");

   stat = asn1PE_Exercise (ctxt_p, &pvalue->exercise);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExerciseUpdateRequest: end\n");
   return (stat);
}

int ASN1C_MsgExerciseUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseUpdateRequest: start\n");

   /* decode exercise */

   PU_PUSHNAME (ctxt_p, "exercise");

   stat = asn1PD_Exercise (ctxt_p, &pvalue->exercise);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExerciseUpdateRequest: end\n");

   return (stat);
}

int ASN1C_MsgExerciseUpdateRequest::Decode ()
{
   return asn1PD_MsgExerciseUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseUpdateRequestAck_return_code                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseUpdateRequestAck_return_code::ASN1C_MsgExerciseUpdateRequestAck_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseUpdateRequestAck_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseUpdateRequestAck_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdateRequestAck_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgExerciseUpdateRequestAck_return_code: start\n");

   switch (value) {
      case MsgExerciseUpdateRequestAck_return_code::success: ui = 0; break;
      case MsgExerciseUpdateRequestAck_return_code::forbidden: ui = 1; break;
      case MsgExerciseUpdateRequestAck_return_code::not_found: ui = 2; break;
      case MsgExerciseUpdateRequestAck_return_code::invalid_name: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseUpdateRequestAck_return_code: end\n");
   return (stat);
}

int ASN1C_MsgExerciseUpdateRequestAck_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseUpdateRequestAck_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseUpdateRequestAck_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdateRequestAck_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgExerciseUpdateRequestAck_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgExerciseUpdateRequestAck_return_code::success; break;
      case 1: *pvalue = MsgExerciseUpdateRequestAck_return_code::forbidden; break;
      case 2: *pvalue = MsgExerciseUpdateRequestAck_return_code::not_found; break;
      case 3: *pvalue = MsgExerciseUpdateRequestAck_return_code::invalid_name; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgExerciseUpdateRequestAck_return_code: end\n");

   return (stat);
}

int ASN1C_MsgExerciseUpdateRequestAck_return_code::Decode ()
{
   return asn1PD_MsgExerciseUpdateRequestAck_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseUpdateRequestAck                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseUpdateRequestAck::ASN1C_MsgExerciseUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseUpdateRequestAck: start\n");

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgExerciseUpdateRequestAck_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExerciseUpdateRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgExerciseUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseUpdateRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseUpdateRequestAck: start\n");

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgExerciseUpdateRequestAck_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExerciseUpdateRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgExerciseUpdateRequestAck::Decode ()
{
   return asn1PD_MsgExerciseUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseDestructionRequest                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseDestructionRequest::ASN1C_MsgExerciseDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestructionRequest value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseDestructionRequest: start\n");

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseDestructionRequest: end\n");
   return (stat);
}

int ASN1C_MsgExerciseDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseDestructionRequest (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseDestructionRequest: start\n");

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgExerciseDestructionRequest: end\n");

   return (stat);
}

int ASN1C_MsgExerciseDestructionRequest::Decode ()
{
   return asn1PD_MsgExerciseDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseDestructionRequestAck_return_code              */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseDestructionRequestAck_return_code::ASN1C_MsgExerciseDestructionRequestAck_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseDestructionRequestAck_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseDestructionRequestAck_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestructionRequestAck_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgExerciseDestructionRequestAck_return_code: start\n");

   switch (value) {
      case MsgExerciseDestructionRequestAck_return_code::success: ui = 0; break;
      case MsgExerciseDestructionRequestAck_return_code::forbidden: ui = 1; break;
      case MsgExerciseDestructionRequestAck_return_code::not_found: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseDestructionRequestAck_return_code: end\n");
   return (stat);
}

int ASN1C_MsgExerciseDestructionRequestAck_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseDestructionRequestAck_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseDestructionRequestAck_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestructionRequestAck_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgExerciseDestructionRequestAck_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgExerciseDestructionRequestAck_return_code::success; break;
      case 1: *pvalue = MsgExerciseDestructionRequestAck_return_code::forbidden; break;
      case 2: *pvalue = MsgExerciseDestructionRequestAck_return_code::not_found; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgExerciseDestructionRequestAck_return_code: end\n");

   return (stat);
}

int ASN1C_MsgExerciseDestructionRequestAck_return_code::Decode ()
{
   return asn1PD_MsgExerciseDestructionRequestAck_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseDestructionRequestAck                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseDestructionRequestAck::ASN1C_MsgExerciseDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseDestructionRequestAck: start\n");

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgExerciseDestructionRequestAck_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExerciseDestructionRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgExerciseDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseDestructionRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseDestructionRequestAck: start\n");

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgExerciseDestructionRequestAck_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExerciseDestructionRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgExerciseDestructionRequestAck::Decode ()
{
   return asn1PD_MsgExerciseDestructionRequestAck (mpContext->GetPtr(), &msgData);
}


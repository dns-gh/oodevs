/* soapDCSOperationsSoapBindingProxy.h
   Generated by gSOAP 2.7.10 from DCSOperations.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapDCSOperationsSoapBindingProxy_H
#define soapDCSOperationsSoapBindingProxy_H
#include "soapH.h"

class SOAP_CMAC DCSOperationsSoapBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'DCSOperationsSoapBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	DCSOperationsSoapBindingProxy();
	/// Constructor with copy of another engine state
	DCSOperationsSoapBindingProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	DCSOperationsSoapBindingProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	DCSOperationsSoapBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~DCSOperationsSoapBindingProxy();
	/// Initializer used by constructor
	virtual	void DCSOperationsSoapBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'pushOrder' (returns error code or SOAP_OK)
	virtual	int pushOrder(std::string _orderPush, std::string &_pushOrderReturn);

	/// Web service operation 'pushReport' (returns error code or SOAP_OK)
	virtual	int pushReport(std::string _reportPush, std::string &_pushReportReturn);

	/// Web service operation 'pullOrder' (returns error code or SOAP_OK)
	virtual	int pullOrder(std::string _orderPull, std::string &_pullOrderReturn);

	/// Web service operation 'pullReport' (returns error code or SOAP_OK)
	virtual	int pullReport(std::string _reportPull, std::string &_pullReportReturn);
};
#endif

//*****************************************************************************
//
// $Created: NLD 2002-07-15 $
// $Archive: /MVW_v10/Build/SDK/MOS_Light/src/MOS_RC.cpp $
// $Author: Nld $
// $Modtime: 4/07/05 12:35 $
// $Revision: 59 $
// $Workfile: MOS_RC.cpp $
//
//*****************************************************************************

#ifdef __GNUG__
#    pragma implementation
#endif

#include "MOS_Light_pch.h"

#include "MOS_RC.h"

#ifndef MOS_USE_INLINE
#   include "MOS_RC.inl"
#endif

#include "MOS_App.h"
#include "MOS_MainWindow.h"
#include "MOS_MOSServer.h"
#include "MOS_World.h"
#include "MOS_WorldWidget.h"
#include "MOS_Agent.h"
#include "MOS_AttrEditor.h"
#include "MOS_RCListViewItem.h"
#include "MOS_RCSubItem.h"
#include "MOS_Net_Def.h"
#include "MOS_LimaFuncCheckListItem.h"

#include <QWidgetStack.h>


using namespace DIN;

//-----------------------------------------------------------------------------
// Name: MOS_RC constructor
// Created: NLD 2002-07-16
//-----------------------------------------------------------------------------
MOS_RC::MOS_RC( MOS_Agent& agent )
:   agent_  ( agent )
,   vPos_   ( agent_.GetPos() )
,   nTime_  ( MOS_App::GetApp().GetTime() )
,   pItem_  ( 0 )
{
}
 
//-----------------------------------------------------------------------------
// Name: MOS_RC destructor
// Created: NLD 2002-07-16
//-----------------------------------------------------------------------------
MOS_RC::~MOS_RC()
{
    if( pItem_ != 0 ) // if != 0 then attrEditor != 0
        agent_.GetAttributeEditor()->DeleteRCItem( *pItem_ );
    textVector_.clear();
}

//-----------------------------------------------------------------------------
// Name: MOS_RC::Initialize
// Created: NLD 2002-10-07
//-----------------------------------------------------------------------------
void MOS_RC::Initialize( const ASN1T_MsgCR& asnMsg )
{
    std::stringstream strMsg;
    switch( asnMsg.cr.t )
    {
$AGR_MOS_RC$
        default:
            assert( false );
    }
    
    strTitle_ = strMsg.str();

    if( agent_.GetAttributeEditor() != 0 )
        agent_.GetAttributeEditor()->CreateRCItem( *this );
}


//-----------------------------------------------------------------------------
// Name: MOS_RC::Initialize
// Created: NLD 2003-04-04
//-----------------------------------------------------------------------------
void MOS_RC::Initialize( const ASN1T_MsgAttenteOrdreConduite& asnMsg )
{
    //$$$$ TEMPORAIRE
    strTitle_ = "Attente d'ordre";

    for( uint i = 0; i < asnMsg.ordres_conduite.n; ++i )
    {
        E_FragOrder nOrderConduiteID;
        switch( asnMsg.ordres_conduite.elem[i].t  )
        {
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_attendre_se_poster                              : nOrderConduiteID = eOrdreConduite_AttendreSePoster                            ; break;
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_poursuivre                                      : nOrderConduiteID = eOrdreConduite_Poursuivre                                  ; break;
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_pion_contourner                                 : nOrderConduiteID = eOrdreConduite_Pion_Contourner                             ; break;
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_decrocher                                       : nOrderConduiteID = eOrdreConduite_Decrocher                              ; break;
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_deboucher                                       : nOrderConduiteID = eOrdreConduite_Deboucher                              ; break;
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_pion_activer_obstacle                           : nOrderConduiteID = eOrdreConduite_Pion_ActiverObstacle                        ; break;
            case T_MsgAttenteOrdreConduite_ordres_conduite_element_demande_order_conduite_pion_executer_tir                               : nOrderConduiteID = eOrdreConduite_Pion_ExecuterTir                            ; break;
            default:
                assert( false );
        }
        conduiteOrderVector_.push_back( nOrderConduiteID );
//        if( pAgentAttrEditor )
//            pItem_->AddOrderConduite( nOrderConduiteID );
    }

    
    MOS_AttrEditor* pAgentAttrEditor = agent_.GetAttributeEditor();
    if( pAgentAttrEditor )
        pAgentAttrEditor->CreateRCItem( *this );
}

//$$$ A VIRER
/*typedef enum E_ModeDeDeclenchementTir
{
    eModeDeclenchement_AussitotPret,
    eModeDeclenchement_HSO,
    eModeDeclenchement_AuCommandement,
};

//-----------------------------------------------------------------------------
// Name: MOS_RC::CreateParamsRCDemandeDeTirEO
// Created: NLD 2003-01-29
//-----------------------------------------------------------------------------
void MOS_RC::CreateParamsRCDemandeDeTirEO( DIN_Input& input )
{
    uint8       bEmblee;
    uint8       nFamillePion;
    uint8       bPoster;
    MT_Vector2D vCoordCentreCible;
    uint8       nModeTir;

    input >> bEmblee;
    input >> nFamillePion;
    input >> bPoster;
    input >> vCoordCentreCible;
    input >> nModeTir;

    textVector_.push_back( MT_FormatString( "%s", bEmblee ? "Tir d'emblée" : "Tir de mise en place" ) );
    textVector_.push_back( MT_FormatString( "Famille pion : %d", nFamillePion ) );
    textVector_.push_back( MT_FormatString( "Attitude : %s", bPoster ? "En poste" : "En mouvement" ) );
    textVector_.push_back( MT_FormatString( "Coord cible : %.2f/%.2f", vCoordCentreCible.rX_, vCoordCentreCible.rY_ ) );
    switch( nModeTir) 
    {
        case eModeDeclenchement_AussitotPret:   textVector_.push_back( "Mode : aussitot pret" );
        case eModeDeclenchement_HSO:            textVector_.push_back( "Mode : HSA" ); 
        case eModeDeclenchement_AuCommandement: textVector_.push_back( "Mode : Au commandement" );
    }
}


//-----------------------------------------------------------------------------
// Name: MOS_RC::CreateParamsRCArriveeSurPosition
// Created: NLD 2003-01-29
//-----------------------------------------------------------------------------
void MOS_RC::CreateParamsRCArriveeSurPosition( DIN_Input& input )
{
    std::string strPos;
    MT_Vector2D vPos;
    
    input >> strPos;
    input >> vPos;
    
    textVector_.push_back( MT_FormatString( "%s : %.2f / %.2f", strPos.c_str(), vPos.rX_, vPos.rY_ ) );
}

           */



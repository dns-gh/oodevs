//*****************************************************************************
//
// $Created: NLD 2002-07-15 $
// $Archive: /MVW_v10/Build/SDK/Light2/src/RC.cpp $
// $Author: Nld $
// $Modtime: 4/07/05 12:33 $
// $Revision: 16 $
// $Workfile: RC.cpp $
//
//*****************************************************************************

#include "astec_pch.h"
#include "RC.h"

#include "App.h"
#include "AgentManager.h"
#include "Agent.h"

//-----------------------------------------------------------------------------
// Name: RC constructor
// Created: NLD 2002-07-16
//-----------------------------------------------------------------------------
RC::RC( Agent_ABC& agent )
    : Report_ABC( agent.GetPos() )
    , agent_        ( agent )
{
}


//-----------------------------------------------------------------------------
// Name: RC destructor
// Created: NLD 2002-07-16
//-----------------------------------------------------------------------------
RC::~RC()
{
}

//-----------------------------------------------------------------------------
// Name: RC::Initialize
// Created: NLD 2002-10-07
//-----------------------------------------------------------------------------
void RC::Initialize( const ASN1T_MsgCR& asnMsg )
{
    std::stringstream strMsg;
    switch( asnMsg.cr.t )
    {
    
    $AGR_MOS2_RC$
/*    case T_MsgCR_cr_cr_preparation_mission                           : 
        {
            if( asnMsg.cr.u.cr_preparation_mission->m.delaiPresent )
                strMsg << "Preparation mission - Délai " << asnMsg.cr.u.cr_preparation_mission->delai << " minutes";
            else
                strMsg << "Preparation mission - Pas de délai";
            break;
        }  */
    default:
        assert( false );
    }

    strTitle_ = strMsg.str();
    
    // conversion from ASN 'type_cr' to Report_ABC::E_Type
    switch( asnMsg.type_cr )
    {
    case EnumTypeCR::message:
        eType_ = Report_ABC::eMessage;
        break;
    case EnumTypeCR::operationel:
        eType_ = Report_ABC::eRC;
        break;
    case EnumTypeCR::evenement_exceptionnel:
        eType_ = Report_ABC::eEvent;
        break;
    case EnumTypeCR::warning:
        eType_ = Report_ABC::eWarning;
        break;
    default:
        assert( false );
    }
}


// -----------------------------------------------------------------------------
// Name: RC::ObjectKnowledgeLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::ObjectKnowledgeLink( ASN1T_OID nId )
{
    std::stringstream str;
    str << "<a href=\"ObjectKnowledge:" << nId << "\">" << nId << "</a>";
    return str.str();
}


// -----------------------------------------------------------------------------
// Name: RC::AgentKnowledgeLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::AgentKnowledgeLink( ASN1T_OID nId )
{
    std::stringstream str;
    str << "<a href=\"AgentKnowledge:" << nId << "\">" << nId << "</a>";
    return str.str();
}

// -----------------------------------------------------------------------------
// Name: RC::PopulationKnowledgeLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::PopulationKnowledgeLink( ASN1T_OID nId )
{
    std::stringstream str;
    str << "<a href=\"PopulationKnowledge:" << nId << "\">" << nId << "</a>";
    return str.str();
}

// -----------------------------------------------------------------------------
// Name: RC::AgentLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::AgentLink( ASN1T_OID nId )
{
    Agent_ABC* pAgent = App::GetApp().GetAgentManager().FindAllAgent( nId );
    if( pAgent == 0 )
        return std::string( " !Agent non trouvé! " );

    std::stringstream str;
    str << "<a href=\"Agent:" << nId << "\">" << pAgent->GetName() << "</a>";
    return str.str();

}

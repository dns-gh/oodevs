// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2006 Mathématiques Appliquées SA (MASA)
//
// *****************************************************************************

#include "gaming_pch.h"
#include "RC.h"
#include "clients_kernel/DotationType.h"
#include "clients_kernel/EquipmentType.h"
#include "RcEntityResolver_ABC.h"
#include "Agent.h"
#include "AgentKnowledge_ABC.h"
#include "ObjectKnowledge_ABC.h"
#include "PopulationKnowledge_ABC.h"

using namespace kernel;

$AGR_MOS2_RC_WARNING$

//-----------------------------------------------------------------------------
// Name: RC constructor
// Created: NLD 2002-07-16
//-----------------------------------------------------------------------------
RC::RC( const Entity_ABC& agent, const Simulation& simulation, const ASN1T_MsgCR& asnMsg, 
        const RcEntityResolver_ABC& rcResolver, 
        const Resolver_ABC< DotationType >& dotationResolver,
        const Resolver_ABC< EquipmentType >& equipmentResolver )
    : Report_ABC( agent, simulation )
{
    Initialize( asnMsg, rcResolver, dotationResolver, equipmentResolver );
}

//-----------------------------------------------------------------------------
// Name: RC destructor
// Created: NLD 2002-07-16
//-----------------------------------------------------------------------------
RC::~RC()
{
    // NOTHING
}

//-----------------------------------------------------------------------------
// Name: RC::Initialize
// Created: NLD 2002-10-07
//-----------------------------------------------------------------------------
void RC::Initialize( const ASN1T_MsgCR& asnMsg, const RcEntityResolver_ABC& rcResolver
                   , const Resolver_ABC< DotationType >& dotationResolver
                   , const Resolver_ABC< EquipmentType >& equipmentResolver )
{
    std::stringstream strMsg;
    switch( asnMsg.cr.t )
    {
    
$AGR_MOS2_RC$
/*    case T_MsgCR_cr_cr_preparation_mission                           : 
        {
            if( asnMsg.cr.u.cr_preparation_mission->m.delaiPresent )
                strMsg << "Preparation mission - Délai " << asnMsg.cr.u.cr_preparation_mission->delai << " minutes";
            else
                strMsg << "Preparation mission - Pas de délai";
            break;
        }  */
    default:
        strMsg << "Unknown RC " << asnMsg.cr.t;
    }

    strTitle_ = strMsg.str();
    
    // conversion from ASN 'type_cr' to Report_ABC::E_Type
    switch( asnMsg.type_cr )
    {
    case EnumTypeCR::message:
        eType_ = Report_ABC::eMessage;
        break;
    case EnumTypeCR::operationel:
        eType_ = Report_ABC::eRC;
        break;
    case EnumTypeCR::evenement_exceptionnel:
        eType_ = Report_ABC::eEvent;
        break;
    case EnumTypeCR::warning:
        eType_ = Report_ABC::eWarning;
        break;
    default:
        assert( false );
    }
}

// -----------------------------------------------------------------------------
// Name: RC::ObjectKnowledgeLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::ObjectKnowledgeLink( ASN1T_OID nId, const RcEntityResolver_ABC& rcResolver )
{
    return rcResolver.CreateLink( ObjectKnowledge_ABC::typeName_, nId ).ascii();
}

// -----------------------------------------------------------------------------
// Name: RC::AgentKnowledgeLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::AgentKnowledgeLink( ASN1T_OID nId, const RcEntityResolver_ABC& rcResolver )
{
    return rcResolver.CreateLink( AgentKnowledge_ABC::typeName_, nId ).ascii();
}

// -----------------------------------------------------------------------------
// Name: RC::PopulationKnowledgeLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::PopulationKnowledgeLink( ASN1T_OID nId, const RcEntityResolver_ABC& rcResolver )
{
    return rcResolver.CreateLink( PopulationKnowledge_ABC::typeName_, nId ).ascii();
}

// -----------------------------------------------------------------------------
// Name: RC::AgentLink
// Created: APE 2004-09-09
// -----------------------------------------------------------------------------
std::string RC::AgentLink( ASN1T_OID nId, const RcEntityResolver_ABC& rcResolver )
{
    return rcResolver.CreateLink( Agent::typeName_, nId ).ascii();
}

// -----------------------------------------------------------------------------
// Name: MOS2_RC.cpp::DotationLink
// Created: AGE 2006-10-17
// -----------------------------------------------------------------------------
std::string RC::DotationLink( ASN1T_OID nId, const kernel::Resolver_ABC< DotationType >& dotationResolver )
{
    return dotationResolver.Get( nId ).GetCategory().ascii();
}

// -----------------------------------------------------------------------------
// Name: MOS2_RC.cpp::EquipmentLink
// Created: AGE 2006-10-17
// -----------------------------------------------------------------------------
std::string RC::EquipmentLink( ASN1T_OID nId, const kernel::Resolver_ABC< EquipmentType >& equipmentResolver )
{
    return equipmentResolver.Get( nId ).GetName().ascii();
}


// *****************************************************************************
//
// $Created: JVT 2004-08-03 $
// $Archive: /MVW_v10/Build/SDK/MIL/src/Entities/Rc/MIL_RC.h $
// $Author: Nld $
// $Modtime: 10/05/05 18:16 $
// $Revision: 15 $
// $Workfile: MIL_RC.h $
//
// *****************************************************************************

#ifndef __MIL_RC_h_
#define __MIL_RC_h_

#include "MIL.h"

class MIL_AgentPion;
class MIL_Automate;
class MIL_Population;
class MIL_RC_ObservationTirIndirect;
class MIL_RC_AllocationConsentieBientotEpuisee;
class MIL_RC_TirSurCampAmi;   
class MIL_RC_TireParCampAmi; 
class MIL_RC_TirSurCampNeutre;
class MIL_RC_TireParCampNeutre;
class MIL_RC_TirSurCivil;      
class MIL_RC_TireParCivil;
class MIL_RC_UniteDecontaminee;
class MIL_RC_UniteDetectee;     
class MIL_RC_UniteAmieReconnue;  
class MIL_RC_UniteEnnemieReconnue;
class MIL_RC_UniteNeutreReconnue;
class MIL_RC_UniteAmieIdentifiee;  
class MIL_RC_UniteEnnemieIdentifiee;
class MIL_RC_UniteNeutreIdentifiee;
class MIL_RC_ObjetDetecte;
class MIL_RC_SeuilLogistiqueStockDepasse;
class MIL_RC_SeuilLogistiqueDotationDepasse;
class MIL_RC_MaterielRepareSurPlace;
class MIL_RC_MaterielRetourDeMaintenance;

struct ASN1T_MsgCR;

// =============================================================================
// @class  MIL_RC
// Created: JVT 2004-08-03
// =============================================================================
class MIL_RC
{
    MT_COPYNOTALLOWED( MIL_RC )
    
public:
    //! @name Types
    //@{
    typedef std::map< uint, const MIL_RC*> T_RCMap;
    typedef T_RCMap::const_iterator        CIT_RCMap;

    enum E_RcType
    {
        eRcTypeMessage     = 0,
        eRcTypeOperational = 1,
        eRcTypeEvent       = 2,
        eRcTypeWarning     = 3
    };
    //@}
    
    //! @name Statics
    //@{    
    static const MIL_RC*                                    pRcEnCoursDeFranchissement_;
    static const MIL_RC*                                    pRcANouveauDisponibleApresReparation_;
    static const MIL_RC_MaterielRepareSurPlace*             pRcMaterielRepareSurPlace_;
    static const MIL_RC_MaterielRetourDeMaintenance*        pRcMaterielRetourDeMaintenance_;
    static const MIL_RC_ObservationTirIndirect*             pRcObservationTirIndirect_;
    static const MIL_RC*                                    pRcDemandeRavitaillementStocks_;
    static const MIL_RC*                                    pRcDemandeRavitaillementDotations_;
    static const MIL_RC*                                    pRcDemandeEvacuationSanitaire_;
    static const MIL_RC*                                    pRcDemandeEvacuationMateriel_;
    static const MIL_RC*                                    pRcRavitaillementDotationsEffectue_;
    static const MIL_RC*                                    pRcRavitaillementStockEffectue_;
    static const MIL_RC*                                    pRcRavitaillementDotationsAnnule_;
    static const MIL_RC*                                    pRcRavitaillementStockAnnule_;
    static const MIL_RC_SeuilLogistiqueStockDepasse*        pRcSeuilLogistiqueStockDepasse_;
    static const MIL_RC_SeuilLogistiqueDotationDepasse*     pRcSeuilLogistiqueDotationDepasse_;
    static const MIL_RC*                                    pRcHumainRetourDeSante_;
    static const MIL_RC*                                    pRcDecesBlesse_;
    static const MIL_RC*                                    pRcDecesBlessePendantTransport_;
    static const MIL_RC*                                    pRcDecesBlessePendantHospitalisation_;
    static const MIL_RC*                                    pRcTirDansZoneInterdite_;
    static const MIL_RC_TirSurCampAmi*                      pRcTirSurCampAmi_;
    static const MIL_RC_TireParCampAmi*                     pRcTireParCampAmi_;
    static const MIL_RC_TirSurCampNeutre*                   pRcTirSurCampNeutre_;
    static const MIL_RC_TireParCampNeutre*                  pRcTireParCampNeutre_;
    static const MIL_RC_TirSurCivil*                        pRcTirSurCivil_;
    static const MIL_RC_TireParCivil*                       pRcTireParCivil_;
    static const MIL_RC*                                    pRcDestructionPC_;
    static const MIL_RC_AllocationConsentieBientotEpuisee*  pRcAllocationConsentieBientotEpuisee_;
    static const MIL_RC*                                    pRcDepassementCapaciteStockage_;
    static const MIL_RC*                                    pRcMissionImpossible_;
    static const MIL_RC_UniteDecontaminee*                  pRcUniteDecontaminee_;
    static const MIL_RC*                                    pRcPlusDeCarburant_;
    static const MIL_RC*                                    pRcTerrainDifficile_;
    static const MIL_RC_UniteDetectee*                      pRcUniteDetectee_;
    static const MIL_RC_UniteAmieReconnue*                  pRcUniteAmieReconnue_;
    static const MIL_RC_UniteEnnemieReconnue*               pRcUniteEnnemieReconnue_;
    static const MIL_RC_UniteNeutreReconnue*                pRcUniteNeutreReconnue_;
    static const MIL_RC_UniteAmieIdentifiee*                pRcUniteAmieIdentifiee_;
    static const MIL_RC_UniteEnnemieIdentifiee*             pRcUniteEnnemieIdentifiee_;
    static const MIL_RC_UniteNeutreIdentifiee*              pRcUniteNeutreIdentifiee_;    
    static const MIL_RC_ObjetDetecte*                       pRcObjetDetecte_;   
    static const MIL_RC*                                    pRcRendu_;
    static const MIL_RC*                                    pRcRegimeMaintenanceDelaiDepasse_;
    //@}
   
public:
    //! @name Manager
    //@{
    static void Initialize();
    static void Terminate ();

    static const MIL_RC* Find( uint nID );
    //@}
    
    //! @name Accessors
    //@{
    uint GetID() const;    
    //@}
    
    //! @name Operations
    //@{
    virtual void Send( const MIL_AgentPion&  sender, E_RcType nType, DIA_Parameters& parameters ) const;
    virtual void Send( const MIL_Automate&   sender, E_RcType nType, DIA_Parameters& parameters ) const;
    virtual void Send( const MIL_Population& sender, E_RcType nType, DIA_Parameters& parameters ) const;

    template < typename T > void Send( const T& sender, E_RcType nType ) const;
    //@}

protected:
    //! @name Types
    //@{
    enum E_RC
    {
$AGR_MIL_EnumRcs$
    };
    //@}


       
protected:
    MIL_RC( E_RC nRC, int nAsnID );
    MIL_RC( E_RC nRC );
    virtual ~MIL_RC();
    
    //! @name Tools
    //@{
    template< typename T > void FillRcMessage ( ASN1T_MsgCR& asnMsg, T& sender, E_RcType nType ) const;
    //@}

private:
    const E_RC  nRC_;
    const int   nAsnID_;

private:
    static T_RCMap rcs_;
};

#include "MIL_RC.inl"

#endif // __MIL_RC_h_
